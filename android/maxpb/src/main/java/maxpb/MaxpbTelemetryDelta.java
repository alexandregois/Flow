// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: maxpb_telemetry_delta.proto

package maxpb;

public final class MaxpbTelemetryDelta {
  private MaxpbTelemetryDelta() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  /**
   * Protobuf enum {@code maxpb.DeltaReasonType}
   */
  public enum DeltaReasonType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>DR_IGNITION_ON = 0;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    DR_IGNITION_ON(0, 0),
    /**
     * <code>DR_IGNITION_OFF = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    DR_IGNITION_OFF(1, 1),
    /**
     * <code>DR_DRIVER_ID = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    DR_DRIVER_ID(2, 2),
    /**
     * <code>DR_JOURNEY = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    DR_JOURNEY(3, 3),
    /**
     * <code>DR_STOPPED = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    DR_STOPPED(4, 4),
    /**
     * <code>DR_MOVING = 5;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    DR_MOVING(5, 5),
    /**
     * <code>DR_INTERVAL = 6;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    DR_INTERVAL(6, 6),
    /**
     * <code>DR_EMBEDDED_ACTIONS = 7;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    DR_EMBEDDED_ACTIONS(7, 7),
    /**
     * <code>DR_HOURLY = 8;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    DR_HOURLY(8, 8),
    /**
     * <code>DR_POSITION = 9;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    DR_POSITION(9, 9),
    /**
     * <code>DR_RFU_01 = 10;</code>
     *
     * <pre>
     *&#47;&#64;exclude SupportedBy: 
     * </pre>
     */
    DR_RFU_01(10, 10),
    /**
     * <code>DR_RFU_02 = 11;</code>
     *
     * <pre>
     *&#47;&#64;exclude SupportedBy: 
     * </pre>
     */
    DR_RFU_02(11, 11),
    /**
     * <code>DR_RFU_03 = 12;</code>
     *
     * <pre>
     *&#47;&#64;exclude SupportedBy: 
     * </pre>
     */
    DR_RFU_03(12, 12),
    /**
     * <code>DR_RFU_04 = 13;</code>
     *
     * <pre>
     *&#47;&#64;exclude SupportedBy: 
     * </pre>
     */
    DR_RFU_04(13, 13),
    /**
     * <code>DR_RFU_05 = 14;</code>
     *
     * <pre>
     *&#47;&#64;exclude SupportedBy: 
     * </pre>
     */
    DR_RFU_05(14, 14),
    ;

    /**
     * <code>DR_IGNITION_ON = 0;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    public static final int DR_IGNITION_ON_VALUE = 0;
    /**
     * <code>DR_IGNITION_OFF = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public static final int DR_IGNITION_OFF_VALUE = 1;
    /**
     * <code>DR_DRIVER_ID = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public static final int DR_DRIVER_ID_VALUE = 2;
    /**
     * <code>DR_JOURNEY = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public static final int DR_JOURNEY_VALUE = 3;
    /**
     * <code>DR_STOPPED = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public static final int DR_STOPPED_VALUE = 4;
    /**
     * <code>DR_MOVING = 5;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public static final int DR_MOVING_VALUE = 5;
    /**
     * <code>DR_INTERVAL = 6;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public static final int DR_INTERVAL_VALUE = 6;
    /**
     * <code>DR_EMBEDDED_ACTIONS = 7;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public static final int DR_EMBEDDED_ACTIONS_VALUE = 7;
    /**
     * <code>DR_HOURLY = 8;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public static final int DR_HOURLY_VALUE = 8;
    /**
     * <code>DR_POSITION = 9;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public static final int DR_POSITION_VALUE = 9;
    /**
     * <code>DR_RFU_01 = 10;</code>
     *
     * <pre>
     *&#47;&#64;exclude SupportedBy: 
     * </pre>
     */
    public static final int DR_RFU_01_VALUE = 10;
    /**
     * <code>DR_RFU_02 = 11;</code>
     *
     * <pre>
     *&#47;&#64;exclude SupportedBy: 
     * </pre>
     */
    public static final int DR_RFU_02_VALUE = 11;
    /**
     * <code>DR_RFU_03 = 12;</code>
     *
     * <pre>
     *&#47;&#64;exclude SupportedBy: 
     * </pre>
     */
    public static final int DR_RFU_03_VALUE = 12;
    /**
     * <code>DR_RFU_04 = 13;</code>
     *
     * <pre>
     *&#47;&#64;exclude SupportedBy: 
     * </pre>
     */
    public static final int DR_RFU_04_VALUE = 13;
    /**
     * <code>DR_RFU_05 = 14;</code>
     *
     * <pre>
     *&#47;&#64;exclude SupportedBy: 
     * </pre>
     */
    public static final int DR_RFU_05_VALUE = 14;


    public final int getNumber() { return value; }

    public static DeltaReasonType valueOf(int value) {
      switch (value) {
        case 0: return DR_IGNITION_ON;
        case 1: return DR_IGNITION_OFF;
        case 2: return DR_DRIVER_ID;
        case 3: return DR_JOURNEY;
        case 4: return DR_STOPPED;
        case 5: return DR_MOVING;
        case 6: return DR_INTERVAL;
        case 7: return DR_EMBEDDED_ACTIONS;
        case 8: return DR_HOURLY;
        case 9: return DR_POSITION;
        case 10: return DR_RFU_01;
        case 11: return DR_RFU_02;
        case 12: return DR_RFU_03;
        case 13: return DR_RFU_04;
        case 14: return DR_RFU_05;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<DeltaReasonType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<DeltaReasonType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<DeltaReasonType>() {
            public DeltaReasonType findValueByNumber(int number) {
              return DeltaReasonType.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return maxpb.MaxpbTelemetryDelta.getDescriptor().getEnumTypes().get(0);
    }

    private static final DeltaReasonType[] VALUES = values();

    public static DeltaReasonType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private DeltaReasonType(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:maxpb.DeltaReasonType)
  }

  public interface RPMDeltaOrBuilder extends
      // @@protoc_insertion_point(interface_extends:maxpb.RPMDelta)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional uint32 blueRangeRPMInterval = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142
     * </pre>
     */
    boolean hasBlueRangeRPMInterval();
    /**
     * <code>optional uint32 blueRangeRPMInterval = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142
     * </pre>
     */
    int getBlueRangeRPMInterval();

    /**
     * <code>optional uint32 greenRangeRPMInterval = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142
     * </pre>
     */
    boolean hasGreenRangeRPMInterval();
    /**
     * <code>optional uint32 greenRangeRPMInterval = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142
     * </pre>
     */
    int getGreenRangeRPMInterval();

    /**
     * <code>optional uint32 yellowRangeRPMInterval = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142
     * </pre>
     */
    boolean hasYellowRangeRPMInterval();
    /**
     * <code>optional uint32 yellowRangeRPMInterval = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142
     * </pre>
     */
    int getYellowRangeRPMInterval();

    /**
     * <code>optional uint32 redRangeRPMInterval = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142
     * </pre>
     */
    boolean hasRedRangeRPMInterval();
    /**
     * <code>optional uint32 redRangeRPMInterval = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142
     * </pre>
     */
    int getRedRangeRPMInterval();

    /**
     * <code>optional uint32 maxRPM = 5;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142
     * </pre>
     */
    boolean hasMaxRPM();
    /**
     * <code>optional uint32 maxRPM = 5;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142
     * </pre>
     */
    int getMaxRPM();

    /**
     * <code>optional uint32 meanRPM = 6;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142
     * </pre>
     */
    boolean hasMeanRPM();
    /**
     * <code>optional uint32 meanRPM = 6;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142
     * </pre>
     */
    int getMeanRPM();

    /**
     * <code>optional uint32 redRangeRPMQty = 7;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    boolean hasRedRangeRPMQty();
    /**
     * <code>optional uint32 redRangeRPMQty = 7;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    int getRedRangeRPMQty();
  }
  /**
   * Protobuf type {@code maxpb.RPMDelta}
   */
  public static final class RPMDelta extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:maxpb.RPMDelta)
      RPMDeltaOrBuilder {
    // Use RPMDelta.newBuilder() to construct.
    private RPMDelta(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private RPMDelta(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final RPMDelta defaultInstance;
    public static RPMDelta getDefaultInstance() {
      return defaultInstance;
    }

    public RPMDelta getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private RPMDelta(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              blueRangeRPMInterval_ = input.readUInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              greenRangeRPMInterval_ = input.readUInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              yellowRangeRPMInterval_ = input.readUInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              redRangeRPMInterval_ = input.readUInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              maxRPM_ = input.readUInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              meanRPM_ = input.readUInt32();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              redRangeRPMQty_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return maxpb.MaxpbTelemetryDelta.internal_static_maxpb_RPMDelta_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return maxpb.MaxpbTelemetryDelta.internal_static_maxpb_RPMDelta_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              maxpb.MaxpbTelemetryDelta.RPMDelta.class, maxpb.MaxpbTelemetryDelta.RPMDelta.Builder.class);
    }

    public static com.google.protobuf.Parser<RPMDelta> PARSER =
        new com.google.protobuf.AbstractParser<RPMDelta>() {
      public RPMDelta parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new RPMDelta(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<RPMDelta> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int BLUERANGERPMINTERVAL_FIELD_NUMBER = 1;
    private int blueRangeRPMInterval_;
    /**
     * <code>optional uint32 blueRangeRPMInterval = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142
     * </pre>
     */
    public boolean hasBlueRangeRPMInterval() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional uint32 blueRangeRPMInterval = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142
     * </pre>
     */
    public int getBlueRangeRPMInterval() {
      return blueRangeRPMInterval_;
    }

    public static final int GREENRANGERPMINTERVAL_FIELD_NUMBER = 2;
    private int greenRangeRPMInterval_;
    /**
     * <code>optional uint32 greenRangeRPMInterval = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142
     * </pre>
     */
    public boolean hasGreenRangeRPMInterval() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional uint32 greenRangeRPMInterval = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142
     * </pre>
     */
    public int getGreenRangeRPMInterval() {
      return greenRangeRPMInterval_;
    }

    public static final int YELLOWRANGERPMINTERVAL_FIELD_NUMBER = 3;
    private int yellowRangeRPMInterval_;
    /**
     * <code>optional uint32 yellowRangeRPMInterval = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142
     * </pre>
     */
    public boolean hasYellowRangeRPMInterval() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional uint32 yellowRangeRPMInterval = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142
     * </pre>
     */
    public int getYellowRangeRPMInterval() {
      return yellowRangeRPMInterval_;
    }

    public static final int REDRANGERPMINTERVAL_FIELD_NUMBER = 4;
    private int redRangeRPMInterval_;
    /**
     * <code>optional uint32 redRangeRPMInterval = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142
     * </pre>
     */
    public boolean hasRedRangeRPMInterval() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional uint32 redRangeRPMInterval = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142
     * </pre>
     */
    public int getRedRangeRPMInterval() {
      return redRangeRPMInterval_;
    }

    public static final int MAXRPM_FIELD_NUMBER = 5;
    private int maxRPM_;
    /**
     * <code>optional uint32 maxRPM = 5;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142
     * </pre>
     */
    public boolean hasMaxRPM() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional uint32 maxRPM = 5;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142
     * </pre>
     */
    public int getMaxRPM() {
      return maxRPM_;
    }

    public static final int MEANRPM_FIELD_NUMBER = 6;
    private int meanRPM_;
    /**
     * <code>optional uint32 meanRPM = 6;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142
     * </pre>
     */
    public boolean hasMeanRPM() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional uint32 meanRPM = 6;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142
     * </pre>
     */
    public int getMeanRPM() {
      return meanRPM_;
    }

    public static final int REDRANGERPMQTY_FIELD_NUMBER = 7;
    private int redRangeRPMQty_;
    /**
     * <code>optional uint32 redRangeRPMQty = 7;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public boolean hasRedRangeRPMQty() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional uint32 redRangeRPMQty = 7;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public int getRedRangeRPMQty() {
      return redRangeRPMQty_;
    }

    private void initFields() {
      blueRangeRPMInterval_ = 0;
      greenRangeRPMInterval_ = 0;
      yellowRangeRPMInterval_ = 0;
      redRangeRPMInterval_ = 0;
      maxRPM_ = 0;
      meanRPM_ = 0;
      redRangeRPMQty_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, blueRangeRPMInterval_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, greenRangeRPMInterval_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(3, yellowRangeRPMInterval_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeUInt32(4, redRangeRPMInterval_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeUInt32(5, maxRPM_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeUInt32(6, meanRPM_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeUInt32(7, redRangeRPMQty_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, blueRangeRPMInterval_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, greenRangeRPMInterval_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, yellowRangeRPMInterval_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, redRangeRPMInterval_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(5, maxRPM_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(6, meanRPM_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(7, redRangeRPMQty_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static maxpb.MaxpbTelemetryDelta.RPMDelta parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static maxpb.MaxpbTelemetryDelta.RPMDelta parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetryDelta.RPMDelta parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static maxpb.MaxpbTelemetryDelta.RPMDelta parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetryDelta.RPMDelta parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static maxpb.MaxpbTelemetryDelta.RPMDelta parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetryDelta.RPMDelta parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static maxpb.MaxpbTelemetryDelta.RPMDelta parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetryDelta.RPMDelta parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static maxpb.MaxpbTelemetryDelta.RPMDelta parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(maxpb.MaxpbTelemetryDelta.RPMDelta prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code maxpb.RPMDelta}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:maxpb.RPMDelta)
        maxpb.MaxpbTelemetryDelta.RPMDeltaOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return maxpb.MaxpbTelemetryDelta.internal_static_maxpb_RPMDelta_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return maxpb.MaxpbTelemetryDelta.internal_static_maxpb_RPMDelta_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                maxpb.MaxpbTelemetryDelta.RPMDelta.class, maxpb.MaxpbTelemetryDelta.RPMDelta.Builder.class);
      }

      // Construct using maxpb.MaxpbTelemetryDelta.RPMDelta.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        blueRangeRPMInterval_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        greenRangeRPMInterval_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        yellowRangeRPMInterval_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        redRangeRPMInterval_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        maxRPM_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        meanRPM_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        redRangeRPMQty_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return maxpb.MaxpbTelemetryDelta.internal_static_maxpb_RPMDelta_descriptor;
      }

      public maxpb.MaxpbTelemetryDelta.RPMDelta getDefaultInstanceForType() {
        return maxpb.MaxpbTelemetryDelta.RPMDelta.getDefaultInstance();
      }

      public maxpb.MaxpbTelemetryDelta.RPMDelta build() {
        maxpb.MaxpbTelemetryDelta.RPMDelta result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public maxpb.MaxpbTelemetryDelta.RPMDelta buildPartial() {
        maxpb.MaxpbTelemetryDelta.RPMDelta result = new maxpb.MaxpbTelemetryDelta.RPMDelta(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.blueRangeRPMInterval_ = blueRangeRPMInterval_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.greenRangeRPMInterval_ = greenRangeRPMInterval_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.yellowRangeRPMInterval_ = yellowRangeRPMInterval_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.redRangeRPMInterval_ = redRangeRPMInterval_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.maxRPM_ = maxRPM_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.meanRPM_ = meanRPM_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.redRangeRPMQty_ = redRangeRPMQty_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof maxpb.MaxpbTelemetryDelta.RPMDelta) {
          return mergeFrom((maxpb.MaxpbTelemetryDelta.RPMDelta)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(maxpb.MaxpbTelemetryDelta.RPMDelta other) {
        if (other == maxpb.MaxpbTelemetryDelta.RPMDelta.getDefaultInstance()) return this;
        if (other.hasBlueRangeRPMInterval()) {
          setBlueRangeRPMInterval(other.getBlueRangeRPMInterval());
        }
        if (other.hasGreenRangeRPMInterval()) {
          setGreenRangeRPMInterval(other.getGreenRangeRPMInterval());
        }
        if (other.hasYellowRangeRPMInterval()) {
          setYellowRangeRPMInterval(other.getYellowRangeRPMInterval());
        }
        if (other.hasRedRangeRPMInterval()) {
          setRedRangeRPMInterval(other.getRedRangeRPMInterval());
        }
        if (other.hasMaxRPM()) {
          setMaxRPM(other.getMaxRPM());
        }
        if (other.hasMeanRPM()) {
          setMeanRPM(other.getMeanRPM());
        }
        if (other.hasRedRangeRPMQty()) {
          setRedRangeRPMQty(other.getRedRangeRPMQty());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        maxpb.MaxpbTelemetryDelta.RPMDelta parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (maxpb.MaxpbTelemetryDelta.RPMDelta) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int blueRangeRPMInterval_ ;
      /**
       * <code>optional uint32 blueRangeRPMInterval = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142
       * </pre>
       */
      public boolean hasBlueRangeRPMInterval() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint32 blueRangeRPMInterval = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142
       * </pre>
       */
      public int getBlueRangeRPMInterval() {
        return blueRangeRPMInterval_;
      }
      /**
       * <code>optional uint32 blueRangeRPMInterval = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142
       * </pre>
       */
      public Builder setBlueRangeRPMInterval(int value) {
        bitField0_ |= 0x00000001;
        blueRangeRPMInterval_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 blueRangeRPMInterval = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142
       * </pre>
       */
      public Builder clearBlueRangeRPMInterval() {
        bitField0_ = (bitField0_ & ~0x00000001);
        blueRangeRPMInterval_ = 0;
        onChanged();
        return this;
      }

      private int greenRangeRPMInterval_ ;
      /**
       * <code>optional uint32 greenRangeRPMInterval = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142
       * </pre>
       */
      public boolean hasGreenRangeRPMInterval() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional uint32 greenRangeRPMInterval = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142
       * </pre>
       */
      public int getGreenRangeRPMInterval() {
        return greenRangeRPMInterval_;
      }
      /**
       * <code>optional uint32 greenRangeRPMInterval = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142
       * </pre>
       */
      public Builder setGreenRangeRPMInterval(int value) {
        bitField0_ |= 0x00000002;
        greenRangeRPMInterval_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 greenRangeRPMInterval = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142
       * </pre>
       */
      public Builder clearGreenRangeRPMInterval() {
        bitField0_ = (bitField0_ & ~0x00000002);
        greenRangeRPMInterval_ = 0;
        onChanged();
        return this;
      }

      private int yellowRangeRPMInterval_ ;
      /**
       * <code>optional uint32 yellowRangeRPMInterval = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142
       * </pre>
       */
      public boolean hasYellowRangeRPMInterval() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional uint32 yellowRangeRPMInterval = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142
       * </pre>
       */
      public int getYellowRangeRPMInterval() {
        return yellowRangeRPMInterval_;
      }
      /**
       * <code>optional uint32 yellowRangeRPMInterval = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142
       * </pre>
       */
      public Builder setYellowRangeRPMInterval(int value) {
        bitField0_ |= 0x00000004;
        yellowRangeRPMInterval_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 yellowRangeRPMInterval = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142
       * </pre>
       */
      public Builder clearYellowRangeRPMInterval() {
        bitField0_ = (bitField0_ & ~0x00000004);
        yellowRangeRPMInterval_ = 0;
        onChanged();
        return this;
      }

      private int redRangeRPMInterval_ ;
      /**
       * <code>optional uint32 redRangeRPMInterval = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142
       * </pre>
       */
      public boolean hasRedRangeRPMInterval() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional uint32 redRangeRPMInterval = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142
       * </pre>
       */
      public int getRedRangeRPMInterval() {
        return redRangeRPMInterval_;
      }
      /**
       * <code>optional uint32 redRangeRPMInterval = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142
       * </pre>
       */
      public Builder setRedRangeRPMInterval(int value) {
        bitField0_ |= 0x00000008;
        redRangeRPMInterval_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 redRangeRPMInterval = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142
       * </pre>
       */
      public Builder clearRedRangeRPMInterval() {
        bitField0_ = (bitField0_ & ~0x00000008);
        redRangeRPMInterval_ = 0;
        onChanged();
        return this;
      }

      private int maxRPM_ ;
      /**
       * <code>optional uint32 maxRPM = 5;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142
       * </pre>
       */
      public boolean hasMaxRPM() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional uint32 maxRPM = 5;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142
       * </pre>
       */
      public int getMaxRPM() {
        return maxRPM_;
      }
      /**
       * <code>optional uint32 maxRPM = 5;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142
       * </pre>
       */
      public Builder setMaxRPM(int value) {
        bitField0_ |= 0x00000010;
        maxRPM_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 maxRPM = 5;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142
       * </pre>
       */
      public Builder clearMaxRPM() {
        bitField0_ = (bitField0_ & ~0x00000010);
        maxRPM_ = 0;
        onChanged();
        return this;
      }

      private int meanRPM_ ;
      /**
       * <code>optional uint32 meanRPM = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142
       * </pre>
       */
      public boolean hasMeanRPM() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional uint32 meanRPM = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142
       * </pre>
       */
      public int getMeanRPM() {
        return meanRPM_;
      }
      /**
       * <code>optional uint32 meanRPM = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142
       * </pre>
       */
      public Builder setMeanRPM(int value) {
        bitField0_ |= 0x00000020;
        meanRPM_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 meanRPM = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142
       * </pre>
       */
      public Builder clearMeanRPM() {
        bitField0_ = (bitField0_ & ~0x00000020);
        meanRPM_ = 0;
        onChanged();
        return this;
      }

      private int redRangeRPMQty_ ;
      /**
       * <code>optional uint32 redRangeRPMQty = 7;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public boolean hasRedRangeRPMQty() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional uint32 redRangeRPMQty = 7;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public int getRedRangeRPMQty() {
        return redRangeRPMQty_;
      }
      /**
       * <code>optional uint32 redRangeRPMQty = 7;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder setRedRangeRPMQty(int value) {
        bitField0_ |= 0x00000040;
        redRangeRPMQty_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 redRangeRPMQty = 7;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder clearRedRangeRPMQty() {
        bitField0_ = (bitField0_ & ~0x00000040);
        redRangeRPMQty_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:maxpb.RPMDelta)
    }

    static {
      defaultInstance = new RPMDelta(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:maxpb.RPMDelta)
  }

  public interface SpeedDeltaOrBuilder extends
      // @@protoc_insertion_point(interface_extends:maxpb.SpeedDelta)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional uint32 maxSpeedTime = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    boolean hasMaxSpeedTime();
    /**
     * <code>optional uint32 maxSpeedTime = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    int getMaxSpeedTime();

    /**
     * <code>optional uint32 meanSpeed = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    boolean hasMeanSpeed();
    /**
     * <code>optional uint32 meanSpeed = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    int getMeanSpeed();

    /**
     * <code>optional uint32 maxSpeedQty = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasMaxSpeedQty();
    /**
     * <code>optional uint32 maxSpeedQty = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    int getMaxSpeedQty();

    /**
     * <code>optional uint32 maxRainySpeedTime = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    boolean hasMaxRainySpeedTime();
    /**
     * <code>optional uint32 maxRainySpeedTime = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    int getMaxRainySpeedTime();

    /**
     * <code>optional uint32 meanRainySpeed = 5;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    boolean hasMeanRainySpeed();
    /**
     * <code>optional uint32 meanRainySpeed = 5;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    int getMeanRainySpeed();

    /**
     * <code>optional uint32 maxRainySpeedQty = 6;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasMaxRainySpeedQty();
    /**
     * <code>optional uint32 maxRainySpeedQty = 6;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    int getMaxRainySpeedQty();

    /**
     * <code>optional uint32 speedOnNeutralTime = 7;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142
     * </pre>
     */
    boolean hasSpeedOnNeutralTime();
    /**
     * <code>optional uint32 speedOnNeutralTime = 7;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142
     * </pre>
     */
    int getSpeedOnNeutralTime();

    /**
     * <code>optional uint32 speedOnNeutralQty = 8;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    boolean hasSpeedOnNeutralQty();
    /**
     * <code>optional uint32 speedOnNeutralQty = 8;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    int getSpeedOnNeutralQty();

    /**
     * <code>optional uint32 maxSpeed = 9;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    boolean hasMaxSpeed();
    /**
     * <code>optional uint32 maxSpeed = 9;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    int getMaxSpeed();

    /**
     * <code>optional uint32 maxRainySpeed = 10;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    boolean hasMaxRainySpeed();
    /**
     * <code>optional uint32 maxRainySpeed = 10;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    int getMaxRainySpeed();

    /**
     * <code>optional uint32 maxSpeedLimit = 11;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasMaxSpeedLimit();
    /**
     * <code>optional uint32 maxSpeedLimit = 11;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    int getMaxSpeedLimit();

    /**
     * <code>optional uint32 maxRainySpeedLimit = 12;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasMaxRainySpeedLimit();
    /**
     * <code>optional uint32 maxRainySpeedLimit = 12;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    int getMaxRainySpeedLimit();
  }
  /**
   * Protobuf type {@code maxpb.SpeedDelta}
   */
  public static final class SpeedDelta extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:maxpb.SpeedDelta)
      SpeedDeltaOrBuilder {
    // Use SpeedDelta.newBuilder() to construct.
    private SpeedDelta(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private SpeedDelta(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final SpeedDelta defaultInstance;
    public static SpeedDelta getDefaultInstance() {
      return defaultInstance;
    }

    public SpeedDelta getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private SpeedDelta(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              maxSpeedTime_ = input.readUInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              meanSpeed_ = input.readUInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              maxSpeedQty_ = input.readUInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              maxRainySpeedTime_ = input.readUInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              meanRainySpeed_ = input.readUInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              maxRainySpeedQty_ = input.readUInt32();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              speedOnNeutralTime_ = input.readUInt32();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000080;
              speedOnNeutralQty_ = input.readUInt32();
              break;
            }
            case 72: {
              bitField0_ |= 0x00000100;
              maxSpeed_ = input.readUInt32();
              break;
            }
            case 80: {
              bitField0_ |= 0x00000200;
              maxRainySpeed_ = input.readUInt32();
              break;
            }
            case 88: {
              bitField0_ |= 0x00000400;
              maxSpeedLimit_ = input.readUInt32();
              break;
            }
            case 96: {
              bitField0_ |= 0x00000800;
              maxRainySpeedLimit_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return maxpb.MaxpbTelemetryDelta.internal_static_maxpb_SpeedDelta_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return maxpb.MaxpbTelemetryDelta.internal_static_maxpb_SpeedDelta_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              maxpb.MaxpbTelemetryDelta.SpeedDelta.class, maxpb.MaxpbTelemetryDelta.SpeedDelta.Builder.class);
    }

    public static com.google.protobuf.Parser<SpeedDelta> PARSER =
        new com.google.protobuf.AbstractParser<SpeedDelta>() {
      public SpeedDelta parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new SpeedDelta(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<SpeedDelta> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int MAXSPEEDTIME_FIELD_NUMBER = 1;
    private int maxSpeedTime_;
    /**
     * <code>optional uint32 maxSpeedTime = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    public boolean hasMaxSpeedTime() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional uint32 maxSpeedTime = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    public int getMaxSpeedTime() {
      return maxSpeedTime_;
    }

    public static final int MEANSPEED_FIELD_NUMBER = 2;
    private int meanSpeed_;
    /**
     * <code>optional uint32 meanSpeed = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    public boolean hasMeanSpeed() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional uint32 meanSpeed = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    public int getMeanSpeed() {
      return meanSpeed_;
    }

    public static final int MAXSPEEDQTY_FIELD_NUMBER = 3;
    private int maxSpeedQty_;
    /**
     * <code>optional uint32 maxSpeedQty = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasMaxSpeedQty() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional uint32 maxSpeedQty = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public int getMaxSpeedQty() {
      return maxSpeedQty_;
    }

    public static final int MAXRAINYSPEEDTIME_FIELD_NUMBER = 4;
    private int maxRainySpeedTime_;
    /**
     * <code>optional uint32 maxRainySpeedTime = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    public boolean hasMaxRainySpeedTime() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional uint32 maxRainySpeedTime = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    public int getMaxRainySpeedTime() {
      return maxRainySpeedTime_;
    }

    public static final int MEANRAINYSPEED_FIELD_NUMBER = 5;
    private int meanRainySpeed_;
    /**
     * <code>optional uint32 meanRainySpeed = 5;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    public boolean hasMeanRainySpeed() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional uint32 meanRainySpeed = 5;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    public int getMeanRainySpeed() {
      return meanRainySpeed_;
    }

    public static final int MAXRAINYSPEEDQTY_FIELD_NUMBER = 6;
    private int maxRainySpeedQty_;
    /**
     * <code>optional uint32 maxRainySpeedQty = 6;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasMaxRainySpeedQty() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional uint32 maxRainySpeedQty = 6;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public int getMaxRainySpeedQty() {
      return maxRainySpeedQty_;
    }

    public static final int SPEEDONNEUTRALTIME_FIELD_NUMBER = 7;
    private int speedOnNeutralTime_;
    /**
     * <code>optional uint32 speedOnNeutralTime = 7;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142
     * </pre>
     */
    public boolean hasSpeedOnNeutralTime() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional uint32 speedOnNeutralTime = 7;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142
     * </pre>
     */
    public int getSpeedOnNeutralTime() {
      return speedOnNeutralTime_;
    }

    public static final int SPEEDONNEUTRALQTY_FIELD_NUMBER = 8;
    private int speedOnNeutralQty_;
    /**
     * <code>optional uint32 speedOnNeutralQty = 8;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public boolean hasSpeedOnNeutralQty() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional uint32 speedOnNeutralQty = 8;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public int getSpeedOnNeutralQty() {
      return speedOnNeutralQty_;
    }

    public static final int MAXSPEED_FIELD_NUMBER = 9;
    private int maxSpeed_;
    /**
     * <code>optional uint32 maxSpeed = 9;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    public boolean hasMaxSpeed() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional uint32 maxSpeed = 9;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    public int getMaxSpeed() {
      return maxSpeed_;
    }

    public static final int MAXRAINYSPEED_FIELD_NUMBER = 10;
    private int maxRainySpeed_;
    /**
     * <code>optional uint32 maxRainySpeed = 10;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    public boolean hasMaxRainySpeed() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional uint32 maxRainySpeed = 10;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    public int getMaxRainySpeed() {
      return maxRainySpeed_;
    }

    public static final int MAXSPEEDLIMIT_FIELD_NUMBER = 11;
    private int maxSpeedLimit_;
    /**
     * <code>optional uint32 maxSpeedLimit = 11;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasMaxSpeedLimit() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional uint32 maxSpeedLimit = 11;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public int getMaxSpeedLimit() {
      return maxSpeedLimit_;
    }

    public static final int MAXRAINYSPEEDLIMIT_FIELD_NUMBER = 12;
    private int maxRainySpeedLimit_;
    /**
     * <code>optional uint32 maxRainySpeedLimit = 12;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasMaxRainySpeedLimit() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional uint32 maxRainySpeedLimit = 12;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public int getMaxRainySpeedLimit() {
      return maxRainySpeedLimit_;
    }

    private void initFields() {
      maxSpeedTime_ = 0;
      meanSpeed_ = 0;
      maxSpeedQty_ = 0;
      maxRainySpeedTime_ = 0;
      meanRainySpeed_ = 0;
      maxRainySpeedQty_ = 0;
      speedOnNeutralTime_ = 0;
      speedOnNeutralQty_ = 0;
      maxSpeed_ = 0;
      maxRainySpeed_ = 0;
      maxSpeedLimit_ = 0;
      maxRainySpeedLimit_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, maxSpeedTime_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, meanSpeed_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(3, maxSpeedQty_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeUInt32(4, maxRainySpeedTime_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeUInt32(5, meanRainySpeed_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeUInt32(6, maxRainySpeedQty_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeUInt32(7, speedOnNeutralTime_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeUInt32(8, speedOnNeutralQty_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeUInt32(9, maxSpeed_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeUInt32(10, maxRainySpeed_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeUInt32(11, maxSpeedLimit_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeUInt32(12, maxRainySpeedLimit_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, maxSpeedTime_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, meanSpeed_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, maxSpeedQty_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, maxRainySpeedTime_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(5, meanRainySpeed_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(6, maxRainySpeedQty_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(7, speedOnNeutralTime_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(8, speedOnNeutralQty_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(9, maxSpeed_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(10, maxRainySpeed_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(11, maxSpeedLimit_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(12, maxRainySpeedLimit_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static maxpb.MaxpbTelemetryDelta.SpeedDelta parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static maxpb.MaxpbTelemetryDelta.SpeedDelta parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetryDelta.SpeedDelta parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static maxpb.MaxpbTelemetryDelta.SpeedDelta parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetryDelta.SpeedDelta parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static maxpb.MaxpbTelemetryDelta.SpeedDelta parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetryDelta.SpeedDelta parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static maxpb.MaxpbTelemetryDelta.SpeedDelta parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetryDelta.SpeedDelta parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static maxpb.MaxpbTelemetryDelta.SpeedDelta parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(maxpb.MaxpbTelemetryDelta.SpeedDelta prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code maxpb.SpeedDelta}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:maxpb.SpeedDelta)
        maxpb.MaxpbTelemetryDelta.SpeedDeltaOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return maxpb.MaxpbTelemetryDelta.internal_static_maxpb_SpeedDelta_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return maxpb.MaxpbTelemetryDelta.internal_static_maxpb_SpeedDelta_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                maxpb.MaxpbTelemetryDelta.SpeedDelta.class, maxpb.MaxpbTelemetryDelta.SpeedDelta.Builder.class);
      }

      // Construct using maxpb.MaxpbTelemetryDelta.SpeedDelta.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        maxSpeedTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        meanSpeed_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        maxSpeedQty_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        maxRainySpeedTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        meanRainySpeed_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        maxRainySpeedQty_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        speedOnNeutralTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        speedOnNeutralQty_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        maxSpeed_ = 0;
        bitField0_ = (bitField0_ & ~0x00000100);
        maxRainySpeed_ = 0;
        bitField0_ = (bitField0_ & ~0x00000200);
        maxSpeedLimit_ = 0;
        bitField0_ = (bitField0_ & ~0x00000400);
        maxRainySpeedLimit_ = 0;
        bitField0_ = (bitField0_ & ~0x00000800);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return maxpb.MaxpbTelemetryDelta.internal_static_maxpb_SpeedDelta_descriptor;
      }

      public maxpb.MaxpbTelemetryDelta.SpeedDelta getDefaultInstanceForType() {
        return maxpb.MaxpbTelemetryDelta.SpeedDelta.getDefaultInstance();
      }

      public maxpb.MaxpbTelemetryDelta.SpeedDelta build() {
        maxpb.MaxpbTelemetryDelta.SpeedDelta result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public maxpb.MaxpbTelemetryDelta.SpeedDelta buildPartial() {
        maxpb.MaxpbTelemetryDelta.SpeedDelta result = new maxpb.MaxpbTelemetryDelta.SpeedDelta(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.maxSpeedTime_ = maxSpeedTime_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.meanSpeed_ = meanSpeed_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.maxSpeedQty_ = maxSpeedQty_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.maxRainySpeedTime_ = maxRainySpeedTime_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.meanRainySpeed_ = meanRainySpeed_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.maxRainySpeedQty_ = maxRainySpeedQty_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.speedOnNeutralTime_ = speedOnNeutralTime_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.speedOnNeutralQty_ = speedOnNeutralQty_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.maxSpeed_ = maxSpeed_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.maxRainySpeed_ = maxRainySpeed_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        result.maxSpeedLimit_ = maxSpeedLimit_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000800;
        }
        result.maxRainySpeedLimit_ = maxRainySpeedLimit_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof maxpb.MaxpbTelemetryDelta.SpeedDelta) {
          return mergeFrom((maxpb.MaxpbTelemetryDelta.SpeedDelta)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(maxpb.MaxpbTelemetryDelta.SpeedDelta other) {
        if (other == maxpb.MaxpbTelemetryDelta.SpeedDelta.getDefaultInstance()) return this;
        if (other.hasMaxSpeedTime()) {
          setMaxSpeedTime(other.getMaxSpeedTime());
        }
        if (other.hasMeanSpeed()) {
          setMeanSpeed(other.getMeanSpeed());
        }
        if (other.hasMaxSpeedQty()) {
          setMaxSpeedQty(other.getMaxSpeedQty());
        }
        if (other.hasMaxRainySpeedTime()) {
          setMaxRainySpeedTime(other.getMaxRainySpeedTime());
        }
        if (other.hasMeanRainySpeed()) {
          setMeanRainySpeed(other.getMeanRainySpeed());
        }
        if (other.hasMaxRainySpeedQty()) {
          setMaxRainySpeedQty(other.getMaxRainySpeedQty());
        }
        if (other.hasSpeedOnNeutralTime()) {
          setSpeedOnNeutralTime(other.getSpeedOnNeutralTime());
        }
        if (other.hasSpeedOnNeutralQty()) {
          setSpeedOnNeutralQty(other.getSpeedOnNeutralQty());
        }
        if (other.hasMaxSpeed()) {
          setMaxSpeed(other.getMaxSpeed());
        }
        if (other.hasMaxRainySpeed()) {
          setMaxRainySpeed(other.getMaxRainySpeed());
        }
        if (other.hasMaxSpeedLimit()) {
          setMaxSpeedLimit(other.getMaxSpeedLimit());
        }
        if (other.hasMaxRainySpeedLimit()) {
          setMaxRainySpeedLimit(other.getMaxRainySpeedLimit());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        maxpb.MaxpbTelemetryDelta.SpeedDelta parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (maxpb.MaxpbTelemetryDelta.SpeedDelta) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int maxSpeedTime_ ;
      /**
       * <code>optional uint32 maxSpeedTime = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public boolean hasMaxSpeedTime() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint32 maxSpeedTime = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public int getMaxSpeedTime() {
        return maxSpeedTime_;
      }
      /**
       * <code>optional uint32 maxSpeedTime = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public Builder setMaxSpeedTime(int value) {
        bitField0_ |= 0x00000001;
        maxSpeedTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 maxSpeedTime = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public Builder clearMaxSpeedTime() {
        bitField0_ = (bitField0_ & ~0x00000001);
        maxSpeedTime_ = 0;
        onChanged();
        return this;
      }

      private int meanSpeed_ ;
      /**
       * <code>optional uint32 meanSpeed = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public boolean hasMeanSpeed() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional uint32 meanSpeed = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public int getMeanSpeed() {
        return meanSpeed_;
      }
      /**
       * <code>optional uint32 meanSpeed = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public Builder setMeanSpeed(int value) {
        bitField0_ |= 0x00000002;
        meanSpeed_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 meanSpeed = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public Builder clearMeanSpeed() {
        bitField0_ = (bitField0_ & ~0x00000002);
        meanSpeed_ = 0;
        onChanged();
        return this;
      }

      private int maxSpeedQty_ ;
      /**
       * <code>optional uint32 maxSpeedQty = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasMaxSpeedQty() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional uint32 maxSpeedQty = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public int getMaxSpeedQty() {
        return maxSpeedQty_;
      }
      /**
       * <code>optional uint32 maxSpeedQty = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setMaxSpeedQty(int value) {
        bitField0_ |= 0x00000004;
        maxSpeedQty_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 maxSpeedQty = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearMaxSpeedQty() {
        bitField0_ = (bitField0_ & ~0x00000004);
        maxSpeedQty_ = 0;
        onChanged();
        return this;
      }

      private int maxRainySpeedTime_ ;
      /**
       * <code>optional uint32 maxRainySpeedTime = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public boolean hasMaxRainySpeedTime() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional uint32 maxRainySpeedTime = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public int getMaxRainySpeedTime() {
        return maxRainySpeedTime_;
      }
      /**
       * <code>optional uint32 maxRainySpeedTime = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public Builder setMaxRainySpeedTime(int value) {
        bitField0_ |= 0x00000008;
        maxRainySpeedTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 maxRainySpeedTime = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public Builder clearMaxRainySpeedTime() {
        bitField0_ = (bitField0_ & ~0x00000008);
        maxRainySpeedTime_ = 0;
        onChanged();
        return this;
      }

      private int meanRainySpeed_ ;
      /**
       * <code>optional uint32 meanRainySpeed = 5;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public boolean hasMeanRainySpeed() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional uint32 meanRainySpeed = 5;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public int getMeanRainySpeed() {
        return meanRainySpeed_;
      }
      /**
       * <code>optional uint32 meanRainySpeed = 5;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public Builder setMeanRainySpeed(int value) {
        bitField0_ |= 0x00000010;
        meanRainySpeed_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 meanRainySpeed = 5;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public Builder clearMeanRainySpeed() {
        bitField0_ = (bitField0_ & ~0x00000010);
        meanRainySpeed_ = 0;
        onChanged();
        return this;
      }

      private int maxRainySpeedQty_ ;
      /**
       * <code>optional uint32 maxRainySpeedQty = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasMaxRainySpeedQty() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional uint32 maxRainySpeedQty = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public int getMaxRainySpeedQty() {
        return maxRainySpeedQty_;
      }
      /**
       * <code>optional uint32 maxRainySpeedQty = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setMaxRainySpeedQty(int value) {
        bitField0_ |= 0x00000020;
        maxRainySpeedQty_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 maxRainySpeedQty = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearMaxRainySpeedQty() {
        bitField0_ = (bitField0_ & ~0x00000020);
        maxRainySpeedQty_ = 0;
        onChanged();
        return this;
      }

      private int speedOnNeutralTime_ ;
      /**
       * <code>optional uint32 speedOnNeutralTime = 7;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142
       * </pre>
       */
      public boolean hasSpeedOnNeutralTime() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional uint32 speedOnNeutralTime = 7;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142
       * </pre>
       */
      public int getSpeedOnNeutralTime() {
        return speedOnNeutralTime_;
      }
      /**
       * <code>optional uint32 speedOnNeutralTime = 7;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142
       * </pre>
       */
      public Builder setSpeedOnNeutralTime(int value) {
        bitField0_ |= 0x00000040;
        speedOnNeutralTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 speedOnNeutralTime = 7;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142
       * </pre>
       */
      public Builder clearSpeedOnNeutralTime() {
        bitField0_ = (bitField0_ & ~0x00000040);
        speedOnNeutralTime_ = 0;
        onChanged();
        return this;
      }

      private int speedOnNeutralQty_ ;
      /**
       * <code>optional uint32 speedOnNeutralQty = 8;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public boolean hasSpeedOnNeutralQty() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional uint32 speedOnNeutralQty = 8;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public int getSpeedOnNeutralQty() {
        return speedOnNeutralQty_;
      }
      /**
       * <code>optional uint32 speedOnNeutralQty = 8;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder setSpeedOnNeutralQty(int value) {
        bitField0_ |= 0x00000080;
        speedOnNeutralQty_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 speedOnNeutralQty = 8;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder clearSpeedOnNeutralQty() {
        bitField0_ = (bitField0_ & ~0x00000080);
        speedOnNeutralQty_ = 0;
        onChanged();
        return this;
      }

      private int maxSpeed_ ;
      /**
       * <code>optional uint32 maxSpeed = 9;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public boolean hasMaxSpeed() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional uint32 maxSpeed = 9;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public int getMaxSpeed() {
        return maxSpeed_;
      }
      /**
       * <code>optional uint32 maxSpeed = 9;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public Builder setMaxSpeed(int value) {
        bitField0_ |= 0x00000100;
        maxSpeed_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 maxSpeed = 9;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public Builder clearMaxSpeed() {
        bitField0_ = (bitField0_ & ~0x00000100);
        maxSpeed_ = 0;
        onChanged();
        return this;
      }

      private int maxRainySpeed_ ;
      /**
       * <code>optional uint32 maxRainySpeed = 10;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public boolean hasMaxRainySpeed() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional uint32 maxRainySpeed = 10;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public int getMaxRainySpeed() {
        return maxRainySpeed_;
      }
      /**
       * <code>optional uint32 maxRainySpeed = 10;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public Builder setMaxRainySpeed(int value) {
        bitField0_ |= 0x00000200;
        maxRainySpeed_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 maxRainySpeed = 10;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public Builder clearMaxRainySpeed() {
        bitField0_ = (bitField0_ & ~0x00000200);
        maxRainySpeed_ = 0;
        onChanged();
        return this;
      }

      private int maxSpeedLimit_ ;
      /**
       * <code>optional uint32 maxSpeedLimit = 11;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasMaxSpeedLimit() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional uint32 maxSpeedLimit = 11;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public int getMaxSpeedLimit() {
        return maxSpeedLimit_;
      }
      /**
       * <code>optional uint32 maxSpeedLimit = 11;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setMaxSpeedLimit(int value) {
        bitField0_ |= 0x00000400;
        maxSpeedLimit_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 maxSpeedLimit = 11;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearMaxSpeedLimit() {
        bitField0_ = (bitField0_ & ~0x00000400);
        maxSpeedLimit_ = 0;
        onChanged();
        return this;
      }

      private int maxRainySpeedLimit_ ;
      /**
       * <code>optional uint32 maxRainySpeedLimit = 12;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasMaxRainySpeedLimit() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional uint32 maxRainySpeedLimit = 12;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public int getMaxRainySpeedLimit() {
        return maxRainySpeedLimit_;
      }
      /**
       * <code>optional uint32 maxRainySpeedLimit = 12;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setMaxRainySpeedLimit(int value) {
        bitField0_ |= 0x00000800;
        maxRainySpeedLimit_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 maxRainySpeedLimit = 12;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearMaxRainySpeedLimit() {
        bitField0_ = (bitField0_ & ~0x00000800);
        maxRainySpeedLimit_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:maxpb.SpeedDelta)
    }

    static {
      defaultInstance = new SpeedDelta(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:maxpb.SpeedDelta)
  }

  public interface GearIntervalOrBuilder extends
      // @@protoc_insertion_point(interface_extends:maxpb.GearInterval)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional int32 gearNumber = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    boolean hasGearNumber();
    /**
     * <code>optional int32 gearNumber = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    int getGearNumber();

    /**
     * <code>optional uint32 interval = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    boolean hasInterval();
    /**
     * <code>optional uint32 interval = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    int getInterval();
  }
  /**
   * Protobuf type {@code maxpb.GearInterval}
   */
  public static final class GearInterval extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:maxpb.GearInterval)
      GearIntervalOrBuilder {
    // Use GearInterval.newBuilder() to construct.
    private GearInterval(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private GearInterval(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final GearInterval defaultInstance;
    public static GearInterval getDefaultInstance() {
      return defaultInstance;
    }

    public GearInterval getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private GearInterval(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              gearNumber_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              interval_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return maxpb.MaxpbTelemetryDelta.internal_static_maxpb_GearInterval_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return maxpb.MaxpbTelemetryDelta.internal_static_maxpb_GearInterval_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              maxpb.MaxpbTelemetryDelta.GearInterval.class, maxpb.MaxpbTelemetryDelta.GearInterval.Builder.class);
    }

    public static com.google.protobuf.Parser<GearInterval> PARSER =
        new com.google.protobuf.AbstractParser<GearInterval>() {
      public GearInterval parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new GearInterval(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<GearInterval> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int GEARNUMBER_FIELD_NUMBER = 1;
    private int gearNumber_;
    /**
     * <code>optional int32 gearNumber = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public boolean hasGearNumber() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 gearNumber = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public int getGearNumber() {
      return gearNumber_;
    }

    public static final int INTERVAL_FIELD_NUMBER = 2;
    private int interval_;
    /**
     * <code>optional uint32 interval = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public boolean hasInterval() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional uint32 interval = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public int getInterval() {
      return interval_;
    }

    private void initFields() {
      gearNumber_ = 0;
      interval_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, gearNumber_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, interval_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, gearNumber_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, interval_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static maxpb.MaxpbTelemetryDelta.GearInterval parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static maxpb.MaxpbTelemetryDelta.GearInterval parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetryDelta.GearInterval parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static maxpb.MaxpbTelemetryDelta.GearInterval parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetryDelta.GearInterval parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static maxpb.MaxpbTelemetryDelta.GearInterval parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetryDelta.GearInterval parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static maxpb.MaxpbTelemetryDelta.GearInterval parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetryDelta.GearInterval parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static maxpb.MaxpbTelemetryDelta.GearInterval parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(maxpb.MaxpbTelemetryDelta.GearInterval prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code maxpb.GearInterval}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:maxpb.GearInterval)
        maxpb.MaxpbTelemetryDelta.GearIntervalOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return maxpb.MaxpbTelemetryDelta.internal_static_maxpb_GearInterval_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return maxpb.MaxpbTelemetryDelta.internal_static_maxpb_GearInterval_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                maxpb.MaxpbTelemetryDelta.GearInterval.class, maxpb.MaxpbTelemetryDelta.GearInterval.Builder.class);
      }

      // Construct using maxpb.MaxpbTelemetryDelta.GearInterval.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        gearNumber_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        interval_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return maxpb.MaxpbTelemetryDelta.internal_static_maxpb_GearInterval_descriptor;
      }

      public maxpb.MaxpbTelemetryDelta.GearInterval getDefaultInstanceForType() {
        return maxpb.MaxpbTelemetryDelta.GearInterval.getDefaultInstance();
      }

      public maxpb.MaxpbTelemetryDelta.GearInterval build() {
        maxpb.MaxpbTelemetryDelta.GearInterval result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public maxpb.MaxpbTelemetryDelta.GearInterval buildPartial() {
        maxpb.MaxpbTelemetryDelta.GearInterval result = new maxpb.MaxpbTelemetryDelta.GearInterval(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.gearNumber_ = gearNumber_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.interval_ = interval_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof maxpb.MaxpbTelemetryDelta.GearInterval) {
          return mergeFrom((maxpb.MaxpbTelemetryDelta.GearInterval)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(maxpb.MaxpbTelemetryDelta.GearInterval other) {
        if (other == maxpb.MaxpbTelemetryDelta.GearInterval.getDefaultInstance()) return this;
        if (other.hasGearNumber()) {
          setGearNumber(other.getGearNumber());
        }
        if (other.hasInterval()) {
          setInterval(other.getInterval());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        maxpb.MaxpbTelemetryDelta.GearInterval parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (maxpb.MaxpbTelemetryDelta.GearInterval) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int gearNumber_ ;
      /**
       * <code>optional int32 gearNumber = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public boolean hasGearNumber() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 gearNumber = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public int getGearNumber() {
        return gearNumber_;
      }
      /**
       * <code>optional int32 gearNumber = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder setGearNumber(int value) {
        bitField0_ |= 0x00000001;
        gearNumber_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 gearNumber = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder clearGearNumber() {
        bitField0_ = (bitField0_ & ~0x00000001);
        gearNumber_ = 0;
        onChanged();
        return this;
      }

      private int interval_ ;
      /**
       * <code>optional uint32 interval = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public boolean hasInterval() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional uint32 interval = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public int getInterval() {
        return interval_;
      }
      /**
       * <code>optional uint32 interval = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder setInterval(int value) {
        bitField0_ |= 0x00000002;
        interval_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 interval = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder clearInterval() {
        bitField0_ = (bitField0_ & ~0x00000002);
        interval_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:maxpb.GearInterval)
    }

    static {
      defaultInstance = new GearInterval(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:maxpb.GearInterval)
  }

  public interface DeltaIntervalOrBuilder extends
      // @@protoc_insertion_point(interface_extends:maxpb.DeltaInterval)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional uint32 deltaTime = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    boolean hasDeltaTime();
    /**
     * <code>optional uint32 deltaTime = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    int getDeltaTime();

    /**
     * <code>optional uint32 movingTime = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    boolean hasMovingTime();
    /**
     * <code>optional uint32 movingTime = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    int getMovingTime();

    /**
     * <code>optional uint32 stoppedTime = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    boolean hasStoppedTime();
    /**
     * <code>optional uint32 stoppedTime = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    int getStoppedTime();

    /**
     * <code>optional uint32 engineOnTime = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    boolean hasEngineOnTime();
    /**
     * <code>optional uint32 engineOnTime = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    int getEngineOnTime();

    /**
     * <code>optional uint32 cluchTime = 5;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142
     * </pre>
     */
    boolean hasCluchTime();
    /**
     * <code>optional uint32 cluchTime = 5;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142
     * </pre>
     */
    int getCluchTime();

    /**
     * <code>repeated .maxpb.GearInterval gearTime = 6;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    java.util.List<maxpb.MaxpbTelemetryDelta.GearInterval> 
        getGearTimeList();
    /**
     * <code>repeated .maxpb.GearInterval gearTime = 6;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    maxpb.MaxpbTelemetryDelta.GearInterval getGearTime(int index);
    /**
     * <code>repeated .maxpb.GearInterval gearTime = 6;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    int getGearTimeCount();
    /**
     * <code>repeated .maxpb.GearInterval gearTime = 6;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    java.util.List<? extends maxpb.MaxpbTelemetryDelta.GearIntervalOrBuilder> 
        getGearTimeOrBuilderList();
    /**
     * <code>repeated .maxpb.GearInterval gearTime = 6;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    maxpb.MaxpbTelemetryDelta.GearIntervalOrBuilder getGearTimeOrBuilder(
        int index);

    /**
     * <code>optional uint32 dryWeatherTime = 7;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasDryWeatherTime();
    /**
     * <code>optional uint32 dryWeatherTime = 7;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    int getDryWeatherTime();

    /**
     * <code>optional uint32 rainyWeatherTime = 8;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasRainyWeatherTime();
    /**
     * <code>optional uint32 rainyWeatherTime = 8;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    int getRainyWeatherTime();
  }
  /**
   * Protobuf type {@code maxpb.DeltaInterval}
   */
  public static final class DeltaInterval extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:maxpb.DeltaInterval)
      DeltaIntervalOrBuilder {
    // Use DeltaInterval.newBuilder() to construct.
    private DeltaInterval(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private DeltaInterval(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final DeltaInterval defaultInstance;
    public static DeltaInterval getDefaultInstance() {
      return defaultInstance;
    }

    public DeltaInterval getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private DeltaInterval(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              deltaTime_ = input.readUInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              movingTime_ = input.readUInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              stoppedTime_ = input.readUInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              engineOnTime_ = input.readUInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              cluchTime_ = input.readUInt32();
              break;
            }
            case 50: {
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                gearTime_ = new java.util.ArrayList<maxpb.MaxpbTelemetryDelta.GearInterval>();
                mutable_bitField0_ |= 0x00000020;
              }
              gearTime_.add(input.readMessage(maxpb.MaxpbTelemetryDelta.GearInterval.PARSER, extensionRegistry));
              break;
            }
            case 56: {
              bitField0_ |= 0x00000020;
              dryWeatherTime_ = input.readUInt32();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000040;
              rainyWeatherTime_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
          gearTime_ = java.util.Collections.unmodifiableList(gearTime_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return maxpb.MaxpbTelemetryDelta.internal_static_maxpb_DeltaInterval_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return maxpb.MaxpbTelemetryDelta.internal_static_maxpb_DeltaInterval_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              maxpb.MaxpbTelemetryDelta.DeltaInterval.class, maxpb.MaxpbTelemetryDelta.DeltaInterval.Builder.class);
    }

    public static com.google.protobuf.Parser<DeltaInterval> PARSER =
        new com.google.protobuf.AbstractParser<DeltaInterval>() {
      public DeltaInterval parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new DeltaInterval(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<DeltaInterval> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int DELTATIME_FIELD_NUMBER = 1;
    private int deltaTime_;
    /**
     * <code>optional uint32 deltaTime = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    public boolean hasDeltaTime() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional uint32 deltaTime = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    public int getDeltaTime() {
      return deltaTime_;
    }

    public static final int MOVINGTIME_FIELD_NUMBER = 2;
    private int movingTime_;
    /**
     * <code>optional uint32 movingTime = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    public boolean hasMovingTime() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional uint32 movingTime = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    public int getMovingTime() {
      return movingTime_;
    }

    public static final int STOPPEDTIME_FIELD_NUMBER = 3;
    private int stoppedTime_;
    /**
     * <code>optional uint32 stoppedTime = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    public boolean hasStoppedTime() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional uint32 stoppedTime = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    public int getStoppedTime() {
      return stoppedTime_;
    }

    public static final int ENGINEONTIME_FIELD_NUMBER = 4;
    private int engineOnTime_;
    /**
     * <code>optional uint32 engineOnTime = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    public boolean hasEngineOnTime() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional uint32 engineOnTime = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    public int getEngineOnTime() {
      return engineOnTime_;
    }

    public static final int CLUCHTIME_FIELD_NUMBER = 5;
    private int cluchTime_;
    /**
     * <code>optional uint32 cluchTime = 5;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142
     * </pre>
     */
    public boolean hasCluchTime() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional uint32 cluchTime = 5;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142
     * </pre>
     */
    public int getCluchTime() {
      return cluchTime_;
    }

    public static final int GEARTIME_FIELD_NUMBER = 6;
    private java.util.List<maxpb.MaxpbTelemetryDelta.GearInterval> gearTime_;
    /**
     * <code>repeated .maxpb.GearInterval gearTime = 6;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public java.util.List<maxpb.MaxpbTelemetryDelta.GearInterval> getGearTimeList() {
      return gearTime_;
    }
    /**
     * <code>repeated .maxpb.GearInterval gearTime = 6;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public java.util.List<? extends maxpb.MaxpbTelemetryDelta.GearIntervalOrBuilder> 
        getGearTimeOrBuilderList() {
      return gearTime_;
    }
    /**
     * <code>repeated .maxpb.GearInterval gearTime = 6;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public int getGearTimeCount() {
      return gearTime_.size();
    }
    /**
     * <code>repeated .maxpb.GearInterval gearTime = 6;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public maxpb.MaxpbTelemetryDelta.GearInterval getGearTime(int index) {
      return gearTime_.get(index);
    }
    /**
     * <code>repeated .maxpb.GearInterval gearTime = 6;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public maxpb.MaxpbTelemetryDelta.GearIntervalOrBuilder getGearTimeOrBuilder(
        int index) {
      return gearTime_.get(index);
    }

    public static final int DRYWEATHERTIME_FIELD_NUMBER = 7;
    private int dryWeatherTime_;
    /**
     * <code>optional uint32 dryWeatherTime = 7;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasDryWeatherTime() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional uint32 dryWeatherTime = 7;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public int getDryWeatherTime() {
      return dryWeatherTime_;
    }

    public static final int RAINYWEATHERTIME_FIELD_NUMBER = 8;
    private int rainyWeatherTime_;
    /**
     * <code>optional uint32 rainyWeatherTime = 8;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasRainyWeatherTime() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional uint32 rainyWeatherTime = 8;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public int getRainyWeatherTime() {
      return rainyWeatherTime_;
    }

    private void initFields() {
      deltaTime_ = 0;
      movingTime_ = 0;
      stoppedTime_ = 0;
      engineOnTime_ = 0;
      cluchTime_ = 0;
      gearTime_ = java.util.Collections.emptyList();
      dryWeatherTime_ = 0;
      rainyWeatherTime_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, deltaTime_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, movingTime_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(3, stoppedTime_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeUInt32(4, engineOnTime_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeUInt32(5, cluchTime_);
      }
      for (int i = 0; i < gearTime_.size(); i++) {
        output.writeMessage(6, gearTime_.get(i));
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeUInt32(7, dryWeatherTime_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeUInt32(8, rainyWeatherTime_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, deltaTime_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, movingTime_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, stoppedTime_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, engineOnTime_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(5, cluchTime_);
      }
      for (int i = 0; i < gearTime_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, gearTime_.get(i));
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(7, dryWeatherTime_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(8, rainyWeatherTime_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static maxpb.MaxpbTelemetryDelta.DeltaInterval parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static maxpb.MaxpbTelemetryDelta.DeltaInterval parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetryDelta.DeltaInterval parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static maxpb.MaxpbTelemetryDelta.DeltaInterval parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetryDelta.DeltaInterval parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static maxpb.MaxpbTelemetryDelta.DeltaInterval parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetryDelta.DeltaInterval parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static maxpb.MaxpbTelemetryDelta.DeltaInterval parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetryDelta.DeltaInterval parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static maxpb.MaxpbTelemetryDelta.DeltaInterval parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(maxpb.MaxpbTelemetryDelta.DeltaInterval prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code maxpb.DeltaInterval}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:maxpb.DeltaInterval)
        maxpb.MaxpbTelemetryDelta.DeltaIntervalOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return maxpb.MaxpbTelemetryDelta.internal_static_maxpb_DeltaInterval_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return maxpb.MaxpbTelemetryDelta.internal_static_maxpb_DeltaInterval_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                maxpb.MaxpbTelemetryDelta.DeltaInterval.class, maxpb.MaxpbTelemetryDelta.DeltaInterval.Builder.class);
      }

      // Construct using maxpb.MaxpbTelemetryDelta.DeltaInterval.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getGearTimeFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        deltaTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        movingTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        stoppedTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        engineOnTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        cluchTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        if (gearTimeBuilder_ == null) {
          gearTime_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000020);
        } else {
          gearTimeBuilder_.clear();
        }
        dryWeatherTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        rainyWeatherTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return maxpb.MaxpbTelemetryDelta.internal_static_maxpb_DeltaInterval_descriptor;
      }

      public maxpb.MaxpbTelemetryDelta.DeltaInterval getDefaultInstanceForType() {
        return maxpb.MaxpbTelemetryDelta.DeltaInterval.getDefaultInstance();
      }

      public maxpb.MaxpbTelemetryDelta.DeltaInterval build() {
        maxpb.MaxpbTelemetryDelta.DeltaInterval result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public maxpb.MaxpbTelemetryDelta.DeltaInterval buildPartial() {
        maxpb.MaxpbTelemetryDelta.DeltaInterval result = new maxpb.MaxpbTelemetryDelta.DeltaInterval(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.deltaTime_ = deltaTime_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.movingTime_ = movingTime_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.stoppedTime_ = stoppedTime_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.engineOnTime_ = engineOnTime_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.cluchTime_ = cluchTime_;
        if (gearTimeBuilder_ == null) {
          if (((bitField0_ & 0x00000020) == 0x00000020)) {
            gearTime_ = java.util.Collections.unmodifiableList(gearTime_);
            bitField0_ = (bitField0_ & ~0x00000020);
          }
          result.gearTime_ = gearTime_;
        } else {
          result.gearTime_ = gearTimeBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000020;
        }
        result.dryWeatherTime_ = dryWeatherTime_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000040;
        }
        result.rainyWeatherTime_ = rainyWeatherTime_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof maxpb.MaxpbTelemetryDelta.DeltaInterval) {
          return mergeFrom((maxpb.MaxpbTelemetryDelta.DeltaInterval)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(maxpb.MaxpbTelemetryDelta.DeltaInterval other) {
        if (other == maxpb.MaxpbTelemetryDelta.DeltaInterval.getDefaultInstance()) return this;
        if (other.hasDeltaTime()) {
          setDeltaTime(other.getDeltaTime());
        }
        if (other.hasMovingTime()) {
          setMovingTime(other.getMovingTime());
        }
        if (other.hasStoppedTime()) {
          setStoppedTime(other.getStoppedTime());
        }
        if (other.hasEngineOnTime()) {
          setEngineOnTime(other.getEngineOnTime());
        }
        if (other.hasCluchTime()) {
          setCluchTime(other.getCluchTime());
        }
        if (gearTimeBuilder_ == null) {
          if (!other.gearTime_.isEmpty()) {
            if (gearTime_.isEmpty()) {
              gearTime_ = other.gearTime_;
              bitField0_ = (bitField0_ & ~0x00000020);
            } else {
              ensureGearTimeIsMutable();
              gearTime_.addAll(other.gearTime_);
            }
            onChanged();
          }
        } else {
          if (!other.gearTime_.isEmpty()) {
            if (gearTimeBuilder_.isEmpty()) {
              gearTimeBuilder_.dispose();
              gearTimeBuilder_ = null;
              gearTime_ = other.gearTime_;
              bitField0_ = (bitField0_ & ~0x00000020);
              gearTimeBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getGearTimeFieldBuilder() : null;
            } else {
              gearTimeBuilder_.addAllMessages(other.gearTime_);
            }
          }
        }
        if (other.hasDryWeatherTime()) {
          setDryWeatherTime(other.getDryWeatherTime());
        }
        if (other.hasRainyWeatherTime()) {
          setRainyWeatherTime(other.getRainyWeatherTime());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        maxpb.MaxpbTelemetryDelta.DeltaInterval parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (maxpb.MaxpbTelemetryDelta.DeltaInterval) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int deltaTime_ ;
      /**
       * <code>optional uint32 deltaTime = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public boolean hasDeltaTime() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint32 deltaTime = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public int getDeltaTime() {
        return deltaTime_;
      }
      /**
       * <code>optional uint32 deltaTime = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public Builder setDeltaTime(int value) {
        bitField0_ |= 0x00000001;
        deltaTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 deltaTime = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public Builder clearDeltaTime() {
        bitField0_ = (bitField0_ & ~0x00000001);
        deltaTime_ = 0;
        onChanged();
        return this;
      }

      private int movingTime_ ;
      /**
       * <code>optional uint32 movingTime = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public boolean hasMovingTime() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional uint32 movingTime = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public int getMovingTime() {
        return movingTime_;
      }
      /**
       * <code>optional uint32 movingTime = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public Builder setMovingTime(int value) {
        bitField0_ |= 0x00000002;
        movingTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 movingTime = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public Builder clearMovingTime() {
        bitField0_ = (bitField0_ & ~0x00000002);
        movingTime_ = 0;
        onChanged();
        return this;
      }

      private int stoppedTime_ ;
      /**
       * <code>optional uint32 stoppedTime = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public boolean hasStoppedTime() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional uint32 stoppedTime = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public int getStoppedTime() {
        return stoppedTime_;
      }
      /**
       * <code>optional uint32 stoppedTime = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public Builder setStoppedTime(int value) {
        bitField0_ |= 0x00000004;
        stoppedTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 stoppedTime = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public Builder clearStoppedTime() {
        bitField0_ = (bitField0_ & ~0x00000004);
        stoppedTime_ = 0;
        onChanged();
        return this;
      }

      private int engineOnTime_ ;
      /**
       * <code>optional uint32 engineOnTime = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public boolean hasEngineOnTime() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional uint32 engineOnTime = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public int getEngineOnTime() {
        return engineOnTime_;
      }
      /**
       * <code>optional uint32 engineOnTime = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public Builder setEngineOnTime(int value) {
        bitField0_ |= 0x00000008;
        engineOnTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 engineOnTime = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public Builder clearEngineOnTime() {
        bitField0_ = (bitField0_ & ~0x00000008);
        engineOnTime_ = 0;
        onChanged();
        return this;
      }

      private int cluchTime_ ;
      /**
       * <code>optional uint32 cluchTime = 5;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142
       * </pre>
       */
      public boolean hasCluchTime() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional uint32 cluchTime = 5;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142
       * </pre>
       */
      public int getCluchTime() {
        return cluchTime_;
      }
      /**
       * <code>optional uint32 cluchTime = 5;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142
       * </pre>
       */
      public Builder setCluchTime(int value) {
        bitField0_ |= 0x00000010;
        cluchTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 cluchTime = 5;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142
       * </pre>
       */
      public Builder clearCluchTime() {
        bitField0_ = (bitField0_ & ~0x00000010);
        cluchTime_ = 0;
        onChanged();
        return this;
      }

      private java.util.List<maxpb.MaxpbTelemetryDelta.GearInterval> gearTime_ =
        java.util.Collections.emptyList();
      private void ensureGearTimeIsMutable() {
        if (!((bitField0_ & 0x00000020) == 0x00000020)) {
          gearTime_ = new java.util.ArrayList<maxpb.MaxpbTelemetryDelta.GearInterval>(gearTime_);
          bitField0_ |= 0x00000020;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          maxpb.MaxpbTelemetryDelta.GearInterval, maxpb.MaxpbTelemetryDelta.GearInterval.Builder, maxpb.MaxpbTelemetryDelta.GearIntervalOrBuilder> gearTimeBuilder_;

      /**
       * <code>repeated .maxpb.GearInterval gearTime = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public java.util.List<maxpb.MaxpbTelemetryDelta.GearInterval> getGearTimeList() {
        if (gearTimeBuilder_ == null) {
          return java.util.Collections.unmodifiableList(gearTime_);
        } else {
          return gearTimeBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .maxpb.GearInterval gearTime = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public int getGearTimeCount() {
        if (gearTimeBuilder_ == null) {
          return gearTime_.size();
        } else {
          return gearTimeBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .maxpb.GearInterval gearTime = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public maxpb.MaxpbTelemetryDelta.GearInterval getGearTime(int index) {
        if (gearTimeBuilder_ == null) {
          return gearTime_.get(index);
        } else {
          return gearTimeBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .maxpb.GearInterval gearTime = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder setGearTime(
          int index, maxpb.MaxpbTelemetryDelta.GearInterval value) {
        if (gearTimeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureGearTimeIsMutable();
          gearTime_.set(index, value);
          onChanged();
        } else {
          gearTimeBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .maxpb.GearInterval gearTime = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder setGearTime(
          int index, maxpb.MaxpbTelemetryDelta.GearInterval.Builder builderForValue) {
        if (gearTimeBuilder_ == null) {
          ensureGearTimeIsMutable();
          gearTime_.set(index, builderForValue.build());
          onChanged();
        } else {
          gearTimeBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .maxpb.GearInterval gearTime = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder addGearTime(maxpb.MaxpbTelemetryDelta.GearInterval value) {
        if (gearTimeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureGearTimeIsMutable();
          gearTime_.add(value);
          onChanged();
        } else {
          gearTimeBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .maxpb.GearInterval gearTime = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder addGearTime(
          int index, maxpb.MaxpbTelemetryDelta.GearInterval value) {
        if (gearTimeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureGearTimeIsMutable();
          gearTime_.add(index, value);
          onChanged();
        } else {
          gearTimeBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .maxpb.GearInterval gearTime = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder addGearTime(
          maxpb.MaxpbTelemetryDelta.GearInterval.Builder builderForValue) {
        if (gearTimeBuilder_ == null) {
          ensureGearTimeIsMutable();
          gearTime_.add(builderForValue.build());
          onChanged();
        } else {
          gearTimeBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .maxpb.GearInterval gearTime = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder addGearTime(
          int index, maxpb.MaxpbTelemetryDelta.GearInterval.Builder builderForValue) {
        if (gearTimeBuilder_ == null) {
          ensureGearTimeIsMutable();
          gearTime_.add(index, builderForValue.build());
          onChanged();
        } else {
          gearTimeBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .maxpb.GearInterval gearTime = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder addAllGearTime(
          java.lang.Iterable<? extends maxpb.MaxpbTelemetryDelta.GearInterval> values) {
        if (gearTimeBuilder_ == null) {
          ensureGearTimeIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, gearTime_);
          onChanged();
        } else {
          gearTimeBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .maxpb.GearInterval gearTime = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder clearGearTime() {
        if (gearTimeBuilder_ == null) {
          gearTime_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000020);
          onChanged();
        } else {
          gearTimeBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .maxpb.GearInterval gearTime = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder removeGearTime(int index) {
        if (gearTimeBuilder_ == null) {
          ensureGearTimeIsMutable();
          gearTime_.remove(index);
          onChanged();
        } else {
          gearTimeBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .maxpb.GearInterval gearTime = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public maxpb.MaxpbTelemetryDelta.GearInterval.Builder getGearTimeBuilder(
          int index) {
        return getGearTimeFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .maxpb.GearInterval gearTime = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public maxpb.MaxpbTelemetryDelta.GearIntervalOrBuilder getGearTimeOrBuilder(
          int index) {
        if (gearTimeBuilder_ == null) {
          return gearTime_.get(index);  } else {
          return gearTimeBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .maxpb.GearInterval gearTime = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public java.util.List<? extends maxpb.MaxpbTelemetryDelta.GearIntervalOrBuilder> 
           getGearTimeOrBuilderList() {
        if (gearTimeBuilder_ != null) {
          return gearTimeBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(gearTime_);
        }
      }
      /**
       * <code>repeated .maxpb.GearInterval gearTime = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public maxpb.MaxpbTelemetryDelta.GearInterval.Builder addGearTimeBuilder() {
        return getGearTimeFieldBuilder().addBuilder(
            maxpb.MaxpbTelemetryDelta.GearInterval.getDefaultInstance());
      }
      /**
       * <code>repeated .maxpb.GearInterval gearTime = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public maxpb.MaxpbTelemetryDelta.GearInterval.Builder addGearTimeBuilder(
          int index) {
        return getGearTimeFieldBuilder().addBuilder(
            index, maxpb.MaxpbTelemetryDelta.GearInterval.getDefaultInstance());
      }
      /**
       * <code>repeated .maxpb.GearInterval gearTime = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public java.util.List<maxpb.MaxpbTelemetryDelta.GearInterval.Builder> 
           getGearTimeBuilderList() {
        return getGearTimeFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          maxpb.MaxpbTelemetryDelta.GearInterval, maxpb.MaxpbTelemetryDelta.GearInterval.Builder, maxpb.MaxpbTelemetryDelta.GearIntervalOrBuilder> 
          getGearTimeFieldBuilder() {
        if (gearTimeBuilder_ == null) {
          gearTimeBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              maxpb.MaxpbTelemetryDelta.GearInterval, maxpb.MaxpbTelemetryDelta.GearInterval.Builder, maxpb.MaxpbTelemetryDelta.GearIntervalOrBuilder>(
                  gearTime_,
                  ((bitField0_ & 0x00000020) == 0x00000020),
                  getParentForChildren(),
                  isClean());
          gearTime_ = null;
        }
        return gearTimeBuilder_;
      }

      private int dryWeatherTime_ ;
      /**
       * <code>optional uint32 dryWeatherTime = 7;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasDryWeatherTime() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional uint32 dryWeatherTime = 7;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public int getDryWeatherTime() {
        return dryWeatherTime_;
      }
      /**
       * <code>optional uint32 dryWeatherTime = 7;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setDryWeatherTime(int value) {
        bitField0_ |= 0x00000040;
        dryWeatherTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 dryWeatherTime = 7;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearDryWeatherTime() {
        bitField0_ = (bitField0_ & ~0x00000040);
        dryWeatherTime_ = 0;
        onChanged();
        return this;
      }

      private int rainyWeatherTime_ ;
      /**
       * <code>optional uint32 rainyWeatherTime = 8;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasRainyWeatherTime() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional uint32 rainyWeatherTime = 8;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public int getRainyWeatherTime() {
        return rainyWeatherTime_;
      }
      /**
       * <code>optional uint32 rainyWeatherTime = 8;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setRainyWeatherTime(int value) {
        bitField0_ |= 0x00000080;
        rainyWeatherTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 rainyWeatherTime = 8;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearRainyWeatherTime() {
        bitField0_ = (bitField0_ & ~0x00000080);
        rainyWeatherTime_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:maxpb.DeltaInterval)
    }

    static {
      defaultInstance = new DeltaInterval(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:maxpb.DeltaInterval)
  }

  public interface LocationDeltaOrBuilder extends
      // @@protoc_insertion_point(interface_extends:maxpb.LocationDelta)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional sfixed32 startLatitude = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    boolean hasStartLatitude();
    /**
     * <code>optional sfixed32 startLatitude = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    int getStartLatitude();

    /**
     * <code>optional sfixed32 startLongitude = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    boolean hasStartLongitude();
    /**
     * <code>optional sfixed32 startLongitude = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    int getStartLongitude();

    /**
     * <code>optional sfixed32 endLatitude = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    boolean hasEndLatitude();
    /**
     * <code>optional sfixed32 endLatitude = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    int getEndLatitude();

    /**
     * <code>optional sfixed32 endLongitude = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    boolean hasEndLongitude();
    /**
     * <code>optional sfixed32 endLongitude = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    int getEndLongitude();
  }
  /**
   * Protobuf type {@code maxpb.LocationDelta}
   */
  public static final class LocationDelta extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:maxpb.LocationDelta)
      LocationDeltaOrBuilder {
    // Use LocationDelta.newBuilder() to construct.
    private LocationDelta(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private LocationDelta(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final LocationDelta defaultInstance;
    public static LocationDelta getDefaultInstance() {
      return defaultInstance;
    }

    public LocationDelta getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private LocationDelta(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 13: {
              bitField0_ |= 0x00000001;
              startLatitude_ = input.readSFixed32();
              break;
            }
            case 21: {
              bitField0_ |= 0x00000002;
              startLongitude_ = input.readSFixed32();
              break;
            }
            case 29: {
              bitField0_ |= 0x00000004;
              endLatitude_ = input.readSFixed32();
              break;
            }
            case 37: {
              bitField0_ |= 0x00000008;
              endLongitude_ = input.readSFixed32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return maxpb.MaxpbTelemetryDelta.internal_static_maxpb_LocationDelta_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return maxpb.MaxpbTelemetryDelta.internal_static_maxpb_LocationDelta_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              maxpb.MaxpbTelemetryDelta.LocationDelta.class, maxpb.MaxpbTelemetryDelta.LocationDelta.Builder.class);
    }

    public static com.google.protobuf.Parser<LocationDelta> PARSER =
        new com.google.protobuf.AbstractParser<LocationDelta>() {
      public LocationDelta parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new LocationDelta(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<LocationDelta> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int STARTLATITUDE_FIELD_NUMBER = 1;
    private int startLatitude_;
    /**
     * <code>optional sfixed32 startLatitude = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    public boolean hasStartLatitude() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional sfixed32 startLatitude = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    public int getStartLatitude() {
      return startLatitude_;
    }

    public static final int STARTLONGITUDE_FIELD_NUMBER = 2;
    private int startLongitude_;
    /**
     * <code>optional sfixed32 startLongitude = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    public boolean hasStartLongitude() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional sfixed32 startLongitude = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    public int getStartLongitude() {
      return startLongitude_;
    }

    public static final int ENDLATITUDE_FIELD_NUMBER = 3;
    private int endLatitude_;
    /**
     * <code>optional sfixed32 endLatitude = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    public boolean hasEndLatitude() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional sfixed32 endLatitude = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    public int getEndLatitude() {
      return endLatitude_;
    }

    public static final int ENDLONGITUDE_FIELD_NUMBER = 4;
    private int endLongitude_;
    /**
     * <code>optional sfixed32 endLongitude = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    public boolean hasEndLongitude() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional sfixed32 endLongitude = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    public int getEndLongitude() {
      return endLongitude_;
    }

    private void initFields() {
      startLatitude_ = 0;
      startLongitude_ = 0;
      endLatitude_ = 0;
      endLongitude_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeSFixed32(1, startLatitude_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeSFixed32(2, startLongitude_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeSFixed32(3, endLatitude_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeSFixed32(4, endLongitude_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSFixed32Size(1, startLatitude_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSFixed32Size(2, startLongitude_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSFixed32Size(3, endLatitude_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSFixed32Size(4, endLongitude_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static maxpb.MaxpbTelemetryDelta.LocationDelta parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static maxpb.MaxpbTelemetryDelta.LocationDelta parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetryDelta.LocationDelta parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static maxpb.MaxpbTelemetryDelta.LocationDelta parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetryDelta.LocationDelta parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static maxpb.MaxpbTelemetryDelta.LocationDelta parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetryDelta.LocationDelta parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static maxpb.MaxpbTelemetryDelta.LocationDelta parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetryDelta.LocationDelta parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static maxpb.MaxpbTelemetryDelta.LocationDelta parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(maxpb.MaxpbTelemetryDelta.LocationDelta prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code maxpb.LocationDelta}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:maxpb.LocationDelta)
        maxpb.MaxpbTelemetryDelta.LocationDeltaOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return maxpb.MaxpbTelemetryDelta.internal_static_maxpb_LocationDelta_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return maxpb.MaxpbTelemetryDelta.internal_static_maxpb_LocationDelta_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                maxpb.MaxpbTelemetryDelta.LocationDelta.class, maxpb.MaxpbTelemetryDelta.LocationDelta.Builder.class);
      }

      // Construct using maxpb.MaxpbTelemetryDelta.LocationDelta.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        startLatitude_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        startLongitude_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        endLatitude_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        endLongitude_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return maxpb.MaxpbTelemetryDelta.internal_static_maxpb_LocationDelta_descriptor;
      }

      public maxpb.MaxpbTelemetryDelta.LocationDelta getDefaultInstanceForType() {
        return maxpb.MaxpbTelemetryDelta.LocationDelta.getDefaultInstance();
      }

      public maxpb.MaxpbTelemetryDelta.LocationDelta build() {
        maxpb.MaxpbTelemetryDelta.LocationDelta result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public maxpb.MaxpbTelemetryDelta.LocationDelta buildPartial() {
        maxpb.MaxpbTelemetryDelta.LocationDelta result = new maxpb.MaxpbTelemetryDelta.LocationDelta(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.startLatitude_ = startLatitude_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.startLongitude_ = startLongitude_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.endLatitude_ = endLatitude_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.endLongitude_ = endLongitude_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof maxpb.MaxpbTelemetryDelta.LocationDelta) {
          return mergeFrom((maxpb.MaxpbTelemetryDelta.LocationDelta)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(maxpb.MaxpbTelemetryDelta.LocationDelta other) {
        if (other == maxpb.MaxpbTelemetryDelta.LocationDelta.getDefaultInstance()) return this;
        if (other.hasStartLatitude()) {
          setStartLatitude(other.getStartLatitude());
        }
        if (other.hasStartLongitude()) {
          setStartLongitude(other.getStartLongitude());
        }
        if (other.hasEndLatitude()) {
          setEndLatitude(other.getEndLatitude());
        }
        if (other.hasEndLongitude()) {
          setEndLongitude(other.getEndLongitude());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        maxpb.MaxpbTelemetryDelta.LocationDelta parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (maxpb.MaxpbTelemetryDelta.LocationDelta) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int startLatitude_ ;
      /**
       * <code>optional sfixed32 startLatitude = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public boolean hasStartLatitude() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional sfixed32 startLatitude = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public int getStartLatitude() {
        return startLatitude_;
      }
      /**
       * <code>optional sfixed32 startLatitude = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public Builder setStartLatitude(int value) {
        bitField0_ |= 0x00000001;
        startLatitude_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sfixed32 startLatitude = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public Builder clearStartLatitude() {
        bitField0_ = (bitField0_ & ~0x00000001);
        startLatitude_ = 0;
        onChanged();
        return this;
      }

      private int startLongitude_ ;
      /**
       * <code>optional sfixed32 startLongitude = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public boolean hasStartLongitude() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional sfixed32 startLongitude = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public int getStartLongitude() {
        return startLongitude_;
      }
      /**
       * <code>optional sfixed32 startLongitude = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public Builder setStartLongitude(int value) {
        bitField0_ |= 0x00000002;
        startLongitude_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sfixed32 startLongitude = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public Builder clearStartLongitude() {
        bitField0_ = (bitField0_ & ~0x00000002);
        startLongitude_ = 0;
        onChanged();
        return this;
      }

      private int endLatitude_ ;
      /**
       * <code>optional sfixed32 endLatitude = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public boolean hasEndLatitude() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional sfixed32 endLatitude = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public int getEndLatitude() {
        return endLatitude_;
      }
      /**
       * <code>optional sfixed32 endLatitude = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public Builder setEndLatitude(int value) {
        bitField0_ |= 0x00000004;
        endLatitude_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sfixed32 endLatitude = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public Builder clearEndLatitude() {
        bitField0_ = (bitField0_ & ~0x00000004);
        endLatitude_ = 0;
        onChanged();
        return this;
      }

      private int endLongitude_ ;
      /**
       * <code>optional sfixed32 endLongitude = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public boolean hasEndLongitude() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional sfixed32 endLongitude = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public int getEndLongitude() {
        return endLongitude_;
      }
      /**
       * <code>optional sfixed32 endLongitude = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public Builder setEndLongitude(int value) {
        bitField0_ |= 0x00000008;
        endLongitude_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sfixed32 endLongitude = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public Builder clearEndLongitude() {
        bitField0_ = (bitField0_ & ~0x00000008);
        endLongitude_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:maxpb.LocationDelta)
    }

    static {
      defaultInstance = new LocationDelta(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:maxpb.LocationDelta)
  }

  public interface DistanceDeltaOrBuilder extends
      // @@protoc_insertion_point(interface_extends:maxpb.DistanceDelta)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional uint32 travelDistance = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    boolean hasTravelDistance();
    /**
     * <code>optional uint32 travelDistance = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    int getTravelDistance();
  }
  /**
   * Protobuf type {@code maxpb.DistanceDelta}
   */
  public static final class DistanceDelta extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:maxpb.DistanceDelta)
      DistanceDeltaOrBuilder {
    // Use DistanceDelta.newBuilder() to construct.
    private DistanceDelta(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private DistanceDelta(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final DistanceDelta defaultInstance;
    public static DistanceDelta getDefaultInstance() {
      return defaultInstance;
    }

    public DistanceDelta getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private DistanceDelta(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              travelDistance_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return maxpb.MaxpbTelemetryDelta.internal_static_maxpb_DistanceDelta_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return maxpb.MaxpbTelemetryDelta.internal_static_maxpb_DistanceDelta_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              maxpb.MaxpbTelemetryDelta.DistanceDelta.class, maxpb.MaxpbTelemetryDelta.DistanceDelta.Builder.class);
    }

    public static com.google.protobuf.Parser<DistanceDelta> PARSER =
        new com.google.protobuf.AbstractParser<DistanceDelta>() {
      public DistanceDelta parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new DistanceDelta(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<DistanceDelta> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int TRAVELDISTANCE_FIELD_NUMBER = 1;
    private int travelDistance_;
    /**
     * <code>optional uint32 travelDistance = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    public boolean hasTravelDistance() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional uint32 travelDistance = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    public int getTravelDistance() {
      return travelDistance_;
    }

    private void initFields() {
      travelDistance_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, travelDistance_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, travelDistance_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static maxpb.MaxpbTelemetryDelta.DistanceDelta parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static maxpb.MaxpbTelemetryDelta.DistanceDelta parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetryDelta.DistanceDelta parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static maxpb.MaxpbTelemetryDelta.DistanceDelta parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetryDelta.DistanceDelta parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static maxpb.MaxpbTelemetryDelta.DistanceDelta parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetryDelta.DistanceDelta parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static maxpb.MaxpbTelemetryDelta.DistanceDelta parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetryDelta.DistanceDelta parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static maxpb.MaxpbTelemetryDelta.DistanceDelta parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(maxpb.MaxpbTelemetryDelta.DistanceDelta prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code maxpb.DistanceDelta}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:maxpb.DistanceDelta)
        maxpb.MaxpbTelemetryDelta.DistanceDeltaOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return maxpb.MaxpbTelemetryDelta.internal_static_maxpb_DistanceDelta_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return maxpb.MaxpbTelemetryDelta.internal_static_maxpb_DistanceDelta_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                maxpb.MaxpbTelemetryDelta.DistanceDelta.class, maxpb.MaxpbTelemetryDelta.DistanceDelta.Builder.class);
      }

      // Construct using maxpb.MaxpbTelemetryDelta.DistanceDelta.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        travelDistance_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return maxpb.MaxpbTelemetryDelta.internal_static_maxpb_DistanceDelta_descriptor;
      }

      public maxpb.MaxpbTelemetryDelta.DistanceDelta getDefaultInstanceForType() {
        return maxpb.MaxpbTelemetryDelta.DistanceDelta.getDefaultInstance();
      }

      public maxpb.MaxpbTelemetryDelta.DistanceDelta build() {
        maxpb.MaxpbTelemetryDelta.DistanceDelta result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public maxpb.MaxpbTelemetryDelta.DistanceDelta buildPartial() {
        maxpb.MaxpbTelemetryDelta.DistanceDelta result = new maxpb.MaxpbTelemetryDelta.DistanceDelta(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.travelDistance_ = travelDistance_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof maxpb.MaxpbTelemetryDelta.DistanceDelta) {
          return mergeFrom((maxpb.MaxpbTelemetryDelta.DistanceDelta)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(maxpb.MaxpbTelemetryDelta.DistanceDelta other) {
        if (other == maxpb.MaxpbTelemetryDelta.DistanceDelta.getDefaultInstance()) return this;
        if (other.hasTravelDistance()) {
          setTravelDistance(other.getTravelDistance());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        maxpb.MaxpbTelemetryDelta.DistanceDelta parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (maxpb.MaxpbTelemetryDelta.DistanceDelta) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int travelDistance_ ;
      /**
       * <code>optional uint32 travelDistance = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public boolean hasTravelDistance() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint32 travelDistance = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public int getTravelDistance() {
        return travelDistance_;
      }
      /**
       * <code>optional uint32 travelDistance = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public Builder setTravelDistance(int value) {
        bitField0_ |= 0x00000001;
        travelDistance_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 travelDistance = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public Builder clearTravelDistance() {
        bitField0_ = (bitField0_ & ~0x00000001);
        travelDistance_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:maxpb.DistanceDelta)
    }

    static {
      defaultInstance = new DistanceDelta(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:maxpb.DistanceDelta)
  }

  public interface AccelerometerDeltaOrBuilder extends
      // @@protoc_insertion_point(interface_extends:maxpb.AccelerometerDelta)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional uint32 hardAccelerationQty = 7;</code>
     *
     * <pre>
     *&#47;optional uint32 maxRollingAxisFront    = 1;  ///&#64;exclude Deprecated SupportedBy: MXT142, MXT160, MXT162
     * /optional uint32 maxRollingAxisBack     = 2;  ///&#64;exclude Deprecated SupportedBy: MXT142, MXT160, MXT162
     * /optional uint32 maxPitchingAxis        = 3;  ///&#64;exclude Deprecated SupportedBy: MXT142, MXT160, MXT162
     * /optional uint32 meanRollingAxisFront   = 4;  ///&#64;exclude Deprecated SupportedBy: MXT142, MXT160, MXT162
     * /optional uint32 meanRollingAxisBack    = 5;  ///&#64;exclude Deprecated SupportedBy: MXT142, MXT160, MXT162
     * /optional uint32 meanPitchingAxis       = 6;  ///&#64;exclude Deprecated SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    boolean hasHardAccelerationQty();
    /**
     * <code>optional uint32 hardAccelerationQty = 7;</code>
     *
     * <pre>
     *&#47;optional uint32 maxRollingAxisFront    = 1;  ///&#64;exclude Deprecated SupportedBy: MXT142, MXT160, MXT162
     * /optional uint32 maxRollingAxisBack     = 2;  ///&#64;exclude Deprecated SupportedBy: MXT142, MXT160, MXT162
     * /optional uint32 maxPitchingAxis        = 3;  ///&#64;exclude Deprecated SupportedBy: MXT142, MXT160, MXT162
     * /optional uint32 meanRollingAxisFront   = 4;  ///&#64;exclude Deprecated SupportedBy: MXT142, MXT160, MXT162
     * /optional uint32 meanRollingAxisBack    = 5;  ///&#64;exclude Deprecated SupportedBy: MXT142, MXT160, MXT162
     * /optional uint32 meanPitchingAxis       = 6;  ///&#64;exclude Deprecated SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    int getHardAccelerationQty();

    /**
     * <code>optional uint32 breakAccelerationQty = 8;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    boolean hasBreakAccelerationQty();
    /**
     * <code>optional uint32 breakAccelerationQty = 8;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    int getBreakAccelerationQty();

    /**
     * <code>optional uint32 hardTurnQty = 9;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    boolean hasHardTurnQty();
    /**
     * <code>optional uint32 hardTurnQty = 9;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    int getHardTurnQty();
  }
  /**
   * Protobuf type {@code maxpb.AccelerometerDelta}
   */
  public static final class AccelerometerDelta extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:maxpb.AccelerometerDelta)
      AccelerometerDeltaOrBuilder {
    // Use AccelerometerDelta.newBuilder() to construct.
    private AccelerometerDelta(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private AccelerometerDelta(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final AccelerometerDelta defaultInstance;
    public static AccelerometerDelta getDefaultInstance() {
      return defaultInstance;
    }

    public AccelerometerDelta getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private AccelerometerDelta(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 56: {
              bitField0_ |= 0x00000001;
              hardAccelerationQty_ = input.readUInt32();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000002;
              breakAccelerationQty_ = input.readUInt32();
              break;
            }
            case 72: {
              bitField0_ |= 0x00000004;
              hardTurnQty_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return maxpb.MaxpbTelemetryDelta.internal_static_maxpb_AccelerometerDelta_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return maxpb.MaxpbTelemetryDelta.internal_static_maxpb_AccelerometerDelta_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              maxpb.MaxpbTelemetryDelta.AccelerometerDelta.class, maxpb.MaxpbTelemetryDelta.AccelerometerDelta.Builder.class);
    }

    public static com.google.protobuf.Parser<AccelerometerDelta> PARSER =
        new com.google.protobuf.AbstractParser<AccelerometerDelta>() {
      public AccelerometerDelta parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new AccelerometerDelta(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<AccelerometerDelta> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int HARDACCELERATIONQTY_FIELD_NUMBER = 7;
    private int hardAccelerationQty_;
    /**
     * <code>optional uint32 hardAccelerationQty = 7;</code>
     *
     * <pre>
     *&#47;optional uint32 maxRollingAxisFront    = 1;  ///&#64;exclude Deprecated SupportedBy: MXT142, MXT160, MXT162
     * /optional uint32 maxRollingAxisBack     = 2;  ///&#64;exclude Deprecated SupportedBy: MXT142, MXT160, MXT162
     * /optional uint32 maxPitchingAxis        = 3;  ///&#64;exclude Deprecated SupportedBy: MXT142, MXT160, MXT162
     * /optional uint32 meanRollingAxisFront   = 4;  ///&#64;exclude Deprecated SupportedBy: MXT142, MXT160, MXT162
     * /optional uint32 meanRollingAxisBack    = 5;  ///&#64;exclude Deprecated SupportedBy: MXT142, MXT160, MXT162
     * /optional uint32 meanPitchingAxis       = 6;  ///&#64;exclude Deprecated SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    public boolean hasHardAccelerationQty() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional uint32 hardAccelerationQty = 7;</code>
     *
     * <pre>
     *&#47;optional uint32 maxRollingAxisFront    = 1;  ///&#64;exclude Deprecated SupportedBy: MXT142, MXT160, MXT162
     * /optional uint32 maxRollingAxisBack     = 2;  ///&#64;exclude Deprecated SupportedBy: MXT142, MXT160, MXT162
     * /optional uint32 maxPitchingAxis        = 3;  ///&#64;exclude Deprecated SupportedBy: MXT142, MXT160, MXT162
     * /optional uint32 meanRollingAxisFront   = 4;  ///&#64;exclude Deprecated SupportedBy: MXT142, MXT160, MXT162
     * /optional uint32 meanRollingAxisBack    = 5;  ///&#64;exclude Deprecated SupportedBy: MXT142, MXT160, MXT162
     * /optional uint32 meanPitchingAxis       = 6;  ///&#64;exclude Deprecated SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    public int getHardAccelerationQty() {
      return hardAccelerationQty_;
    }

    public static final int BREAKACCELERATIONQTY_FIELD_NUMBER = 8;
    private int breakAccelerationQty_;
    /**
     * <code>optional uint32 breakAccelerationQty = 8;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    public boolean hasBreakAccelerationQty() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional uint32 breakAccelerationQty = 8;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    public int getBreakAccelerationQty() {
      return breakAccelerationQty_;
    }

    public static final int HARDTURNQTY_FIELD_NUMBER = 9;
    private int hardTurnQty_;
    /**
     * <code>optional uint32 hardTurnQty = 9;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    public boolean hasHardTurnQty() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional uint32 hardTurnQty = 9;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    public int getHardTurnQty() {
      return hardTurnQty_;
    }

    private void initFields() {
      hardAccelerationQty_ = 0;
      breakAccelerationQty_ = 0;
      hardTurnQty_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(7, hardAccelerationQty_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(8, breakAccelerationQty_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(9, hardTurnQty_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(7, hardAccelerationQty_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(8, breakAccelerationQty_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(9, hardTurnQty_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static maxpb.MaxpbTelemetryDelta.AccelerometerDelta parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static maxpb.MaxpbTelemetryDelta.AccelerometerDelta parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetryDelta.AccelerometerDelta parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static maxpb.MaxpbTelemetryDelta.AccelerometerDelta parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetryDelta.AccelerometerDelta parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static maxpb.MaxpbTelemetryDelta.AccelerometerDelta parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetryDelta.AccelerometerDelta parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static maxpb.MaxpbTelemetryDelta.AccelerometerDelta parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetryDelta.AccelerometerDelta parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static maxpb.MaxpbTelemetryDelta.AccelerometerDelta parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(maxpb.MaxpbTelemetryDelta.AccelerometerDelta prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code maxpb.AccelerometerDelta}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:maxpb.AccelerometerDelta)
        maxpb.MaxpbTelemetryDelta.AccelerometerDeltaOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return maxpb.MaxpbTelemetryDelta.internal_static_maxpb_AccelerometerDelta_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return maxpb.MaxpbTelemetryDelta.internal_static_maxpb_AccelerometerDelta_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                maxpb.MaxpbTelemetryDelta.AccelerometerDelta.class, maxpb.MaxpbTelemetryDelta.AccelerometerDelta.Builder.class);
      }

      // Construct using maxpb.MaxpbTelemetryDelta.AccelerometerDelta.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        hardAccelerationQty_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        breakAccelerationQty_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        hardTurnQty_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return maxpb.MaxpbTelemetryDelta.internal_static_maxpb_AccelerometerDelta_descriptor;
      }

      public maxpb.MaxpbTelemetryDelta.AccelerometerDelta getDefaultInstanceForType() {
        return maxpb.MaxpbTelemetryDelta.AccelerometerDelta.getDefaultInstance();
      }

      public maxpb.MaxpbTelemetryDelta.AccelerometerDelta build() {
        maxpb.MaxpbTelemetryDelta.AccelerometerDelta result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public maxpb.MaxpbTelemetryDelta.AccelerometerDelta buildPartial() {
        maxpb.MaxpbTelemetryDelta.AccelerometerDelta result = new maxpb.MaxpbTelemetryDelta.AccelerometerDelta(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.hardAccelerationQty_ = hardAccelerationQty_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.breakAccelerationQty_ = breakAccelerationQty_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.hardTurnQty_ = hardTurnQty_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof maxpb.MaxpbTelemetryDelta.AccelerometerDelta) {
          return mergeFrom((maxpb.MaxpbTelemetryDelta.AccelerometerDelta)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(maxpb.MaxpbTelemetryDelta.AccelerometerDelta other) {
        if (other == maxpb.MaxpbTelemetryDelta.AccelerometerDelta.getDefaultInstance()) return this;
        if (other.hasHardAccelerationQty()) {
          setHardAccelerationQty(other.getHardAccelerationQty());
        }
        if (other.hasBreakAccelerationQty()) {
          setBreakAccelerationQty(other.getBreakAccelerationQty());
        }
        if (other.hasHardTurnQty()) {
          setHardTurnQty(other.getHardTurnQty());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        maxpb.MaxpbTelemetryDelta.AccelerometerDelta parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (maxpb.MaxpbTelemetryDelta.AccelerometerDelta) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int hardAccelerationQty_ ;
      /**
       * <code>optional uint32 hardAccelerationQty = 7;</code>
       *
       * <pre>
       *&#47;optional uint32 maxRollingAxisFront    = 1;  ///&#64;exclude Deprecated SupportedBy: MXT142, MXT160, MXT162
       * /optional uint32 maxRollingAxisBack     = 2;  ///&#64;exclude Deprecated SupportedBy: MXT142, MXT160, MXT162
       * /optional uint32 maxPitchingAxis        = 3;  ///&#64;exclude Deprecated SupportedBy: MXT142, MXT160, MXT162
       * /optional uint32 meanRollingAxisFront   = 4;  ///&#64;exclude Deprecated SupportedBy: MXT142, MXT160, MXT162
       * /optional uint32 meanRollingAxisBack    = 5;  ///&#64;exclude Deprecated SupportedBy: MXT142, MXT160, MXT162
       * /optional uint32 meanPitchingAxis       = 6;  ///&#64;exclude Deprecated SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public boolean hasHardAccelerationQty() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint32 hardAccelerationQty = 7;</code>
       *
       * <pre>
       *&#47;optional uint32 maxRollingAxisFront    = 1;  ///&#64;exclude Deprecated SupportedBy: MXT142, MXT160, MXT162
       * /optional uint32 maxRollingAxisBack     = 2;  ///&#64;exclude Deprecated SupportedBy: MXT142, MXT160, MXT162
       * /optional uint32 maxPitchingAxis        = 3;  ///&#64;exclude Deprecated SupportedBy: MXT142, MXT160, MXT162
       * /optional uint32 meanRollingAxisFront   = 4;  ///&#64;exclude Deprecated SupportedBy: MXT142, MXT160, MXT162
       * /optional uint32 meanRollingAxisBack    = 5;  ///&#64;exclude Deprecated SupportedBy: MXT142, MXT160, MXT162
       * /optional uint32 meanPitchingAxis       = 6;  ///&#64;exclude Deprecated SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public int getHardAccelerationQty() {
        return hardAccelerationQty_;
      }
      /**
       * <code>optional uint32 hardAccelerationQty = 7;</code>
       *
       * <pre>
       *&#47;optional uint32 maxRollingAxisFront    = 1;  ///&#64;exclude Deprecated SupportedBy: MXT142, MXT160, MXT162
       * /optional uint32 maxRollingAxisBack     = 2;  ///&#64;exclude Deprecated SupportedBy: MXT142, MXT160, MXT162
       * /optional uint32 maxPitchingAxis        = 3;  ///&#64;exclude Deprecated SupportedBy: MXT142, MXT160, MXT162
       * /optional uint32 meanRollingAxisFront   = 4;  ///&#64;exclude Deprecated SupportedBy: MXT142, MXT160, MXT162
       * /optional uint32 meanRollingAxisBack    = 5;  ///&#64;exclude Deprecated SupportedBy: MXT142, MXT160, MXT162
       * /optional uint32 meanPitchingAxis       = 6;  ///&#64;exclude Deprecated SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public Builder setHardAccelerationQty(int value) {
        bitField0_ |= 0x00000001;
        hardAccelerationQty_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 hardAccelerationQty = 7;</code>
       *
       * <pre>
       *&#47;optional uint32 maxRollingAxisFront    = 1;  ///&#64;exclude Deprecated SupportedBy: MXT142, MXT160, MXT162
       * /optional uint32 maxRollingAxisBack     = 2;  ///&#64;exclude Deprecated SupportedBy: MXT142, MXT160, MXT162
       * /optional uint32 maxPitchingAxis        = 3;  ///&#64;exclude Deprecated SupportedBy: MXT142, MXT160, MXT162
       * /optional uint32 meanRollingAxisFront   = 4;  ///&#64;exclude Deprecated SupportedBy: MXT142, MXT160, MXT162
       * /optional uint32 meanRollingAxisBack    = 5;  ///&#64;exclude Deprecated SupportedBy: MXT142, MXT160, MXT162
       * /optional uint32 meanPitchingAxis       = 6;  ///&#64;exclude Deprecated SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public Builder clearHardAccelerationQty() {
        bitField0_ = (bitField0_ & ~0x00000001);
        hardAccelerationQty_ = 0;
        onChanged();
        return this;
      }

      private int breakAccelerationQty_ ;
      /**
       * <code>optional uint32 breakAccelerationQty = 8;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public boolean hasBreakAccelerationQty() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional uint32 breakAccelerationQty = 8;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public int getBreakAccelerationQty() {
        return breakAccelerationQty_;
      }
      /**
       * <code>optional uint32 breakAccelerationQty = 8;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public Builder setBreakAccelerationQty(int value) {
        bitField0_ |= 0x00000002;
        breakAccelerationQty_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 breakAccelerationQty = 8;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public Builder clearBreakAccelerationQty() {
        bitField0_ = (bitField0_ & ~0x00000002);
        breakAccelerationQty_ = 0;
        onChanged();
        return this;
      }

      private int hardTurnQty_ ;
      /**
       * <code>optional uint32 hardTurnQty = 9;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public boolean hasHardTurnQty() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional uint32 hardTurnQty = 9;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public int getHardTurnQty() {
        return hardTurnQty_;
      }
      /**
       * <code>optional uint32 hardTurnQty = 9;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public Builder setHardTurnQty(int value) {
        bitField0_ |= 0x00000004;
        hardTurnQty_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 hardTurnQty = 9;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public Builder clearHardTurnQty() {
        bitField0_ = (bitField0_ & ~0x00000004);
        hardTurnQty_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:maxpb.AccelerometerDelta)
    }

    static {
      defaultInstance = new AccelerometerDelta(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:maxpb.AccelerometerDelta)
  }

  public interface HistogramOrBuilder extends
      // @@protoc_insertion_point(interface_extends:maxpb.Histogram)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional uint32 slotSize = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasSlotSize();
    /**
     * <code>optional uint32 slotSize = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    int getSlotSize();

    /**
     * <code>repeated uint32 values = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    java.util.List<java.lang.Integer> getValuesList();
    /**
     * <code>repeated uint32 values = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    int getValuesCount();
    /**
     * <code>repeated uint32 values = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    int getValues(int index);

    /**
     * <code>optional uint32 invalidValues = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasInvalidValues();
    /**
     * <code>optional uint32 invalidValues = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    int getInvalidValues();
  }
  /**
   * Protobuf type {@code maxpb.Histogram}
   */
  public static final class Histogram extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:maxpb.Histogram)
      HistogramOrBuilder {
    // Use Histogram.newBuilder() to construct.
    private Histogram(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Histogram(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Histogram defaultInstance;
    public static Histogram getDefaultInstance() {
      return defaultInstance;
    }

    public Histogram getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Histogram(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              slotSize_ = input.readUInt32();
              break;
            }
            case 16: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                values_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              values_.add(input.readUInt32());
              break;
            }
            case 18: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002) && input.getBytesUntilLimit() > 0) {
                values_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              while (input.getBytesUntilLimit() > 0) {
                values_.add(input.readUInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 24: {
              bitField0_ |= 0x00000002;
              invalidValues_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          values_ = java.util.Collections.unmodifiableList(values_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return maxpb.MaxpbTelemetryDelta.internal_static_maxpb_Histogram_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return maxpb.MaxpbTelemetryDelta.internal_static_maxpb_Histogram_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              maxpb.MaxpbTelemetryDelta.Histogram.class, maxpb.MaxpbTelemetryDelta.Histogram.Builder.class);
    }

    public static com.google.protobuf.Parser<Histogram> PARSER =
        new com.google.protobuf.AbstractParser<Histogram>() {
      public Histogram parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Histogram(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Histogram> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int SLOTSIZE_FIELD_NUMBER = 1;
    private int slotSize_;
    /**
     * <code>optional uint32 slotSize = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasSlotSize() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional uint32 slotSize = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public int getSlotSize() {
      return slotSize_;
    }

    public static final int VALUES_FIELD_NUMBER = 2;
    private java.util.List<java.lang.Integer> values_;
    /**
     * <code>repeated uint32 values = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getValuesList() {
      return values_;
    }
    /**
     * <code>repeated uint32 values = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public int getValuesCount() {
      return values_.size();
    }
    /**
     * <code>repeated uint32 values = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public int getValues(int index) {
      return values_.get(index);
    }

    public static final int INVALIDVALUES_FIELD_NUMBER = 3;
    private int invalidValues_;
    /**
     * <code>optional uint32 invalidValues = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasInvalidValues() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional uint32 invalidValues = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public int getInvalidValues() {
      return invalidValues_;
    }

    private void initFields() {
      slotSize_ = 0;
      values_ = java.util.Collections.emptyList();
      invalidValues_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, slotSize_);
      }
      for (int i = 0; i < values_.size(); i++) {
        output.writeUInt32(2, values_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(3, invalidValues_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, slotSize_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < values_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeUInt32SizeNoTag(values_.get(i));
        }
        size += dataSize;
        size += 1 * getValuesList().size();
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, invalidValues_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static maxpb.MaxpbTelemetryDelta.Histogram parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static maxpb.MaxpbTelemetryDelta.Histogram parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetryDelta.Histogram parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static maxpb.MaxpbTelemetryDelta.Histogram parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetryDelta.Histogram parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static maxpb.MaxpbTelemetryDelta.Histogram parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetryDelta.Histogram parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static maxpb.MaxpbTelemetryDelta.Histogram parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetryDelta.Histogram parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static maxpb.MaxpbTelemetryDelta.Histogram parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(maxpb.MaxpbTelemetryDelta.Histogram prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code maxpb.Histogram}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:maxpb.Histogram)
        maxpb.MaxpbTelemetryDelta.HistogramOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return maxpb.MaxpbTelemetryDelta.internal_static_maxpb_Histogram_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return maxpb.MaxpbTelemetryDelta.internal_static_maxpb_Histogram_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                maxpb.MaxpbTelemetryDelta.Histogram.class, maxpb.MaxpbTelemetryDelta.Histogram.Builder.class);
      }

      // Construct using maxpb.MaxpbTelemetryDelta.Histogram.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        slotSize_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        values_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        invalidValues_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return maxpb.MaxpbTelemetryDelta.internal_static_maxpb_Histogram_descriptor;
      }

      public maxpb.MaxpbTelemetryDelta.Histogram getDefaultInstanceForType() {
        return maxpb.MaxpbTelemetryDelta.Histogram.getDefaultInstance();
      }

      public maxpb.MaxpbTelemetryDelta.Histogram build() {
        maxpb.MaxpbTelemetryDelta.Histogram result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public maxpb.MaxpbTelemetryDelta.Histogram buildPartial() {
        maxpb.MaxpbTelemetryDelta.Histogram result = new maxpb.MaxpbTelemetryDelta.Histogram(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.slotSize_ = slotSize_;
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          values_ = java.util.Collections.unmodifiableList(values_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.values_ = values_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000002;
        }
        result.invalidValues_ = invalidValues_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof maxpb.MaxpbTelemetryDelta.Histogram) {
          return mergeFrom((maxpb.MaxpbTelemetryDelta.Histogram)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(maxpb.MaxpbTelemetryDelta.Histogram other) {
        if (other == maxpb.MaxpbTelemetryDelta.Histogram.getDefaultInstance()) return this;
        if (other.hasSlotSize()) {
          setSlotSize(other.getSlotSize());
        }
        if (!other.values_.isEmpty()) {
          if (values_.isEmpty()) {
            values_ = other.values_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureValuesIsMutable();
            values_.addAll(other.values_);
          }
          onChanged();
        }
        if (other.hasInvalidValues()) {
          setInvalidValues(other.getInvalidValues());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        maxpb.MaxpbTelemetryDelta.Histogram parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (maxpb.MaxpbTelemetryDelta.Histogram) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int slotSize_ ;
      /**
       * <code>optional uint32 slotSize = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasSlotSize() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint32 slotSize = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public int getSlotSize() {
        return slotSize_;
      }
      /**
       * <code>optional uint32 slotSize = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setSlotSize(int value) {
        bitField0_ |= 0x00000001;
        slotSize_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 slotSize = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearSlotSize() {
        bitField0_ = (bitField0_ & ~0x00000001);
        slotSize_ = 0;
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Integer> values_ = java.util.Collections.emptyList();
      private void ensureValuesIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          values_ = new java.util.ArrayList<java.lang.Integer>(values_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <code>repeated uint32 values = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getValuesList() {
        return java.util.Collections.unmodifiableList(values_);
      }
      /**
       * <code>repeated uint32 values = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public int getValuesCount() {
        return values_.size();
      }
      /**
       * <code>repeated uint32 values = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public int getValues(int index) {
        return values_.get(index);
      }
      /**
       * <code>repeated uint32 values = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setValues(
          int index, int value) {
        ensureValuesIsMutable();
        values_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 values = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder addValues(int value) {
        ensureValuesIsMutable();
        values_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 values = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder addAllValues(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureValuesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, values_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 values = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearValues() {
        values_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }

      private int invalidValues_ ;
      /**
       * <code>optional uint32 invalidValues = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasInvalidValues() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional uint32 invalidValues = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public int getInvalidValues() {
        return invalidValues_;
      }
      /**
       * <code>optional uint32 invalidValues = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setInvalidValues(int value) {
        bitField0_ |= 0x00000004;
        invalidValues_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 invalidValues = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearInvalidValues() {
        bitField0_ = (bitField0_ & ~0x00000004);
        invalidValues_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:maxpb.Histogram)
    }

    static {
      defaultInstance = new Histogram(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:maxpb.Histogram)
  }

  public interface TelemetryDeltaOrBuilder extends
      // @@protoc_insertion_point(interface_extends:maxpb.TelemetryDelta)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional .maxpb.DeltaReasonType deltaReason = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    boolean hasDeltaReason();
    /**
     * <code>optional .maxpb.DeltaReasonType deltaReason = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetryDelta.DeltaReasonType getDeltaReason();

    /**
     * <code>optional uint64 driverID = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142
     * </pre>
     */
    boolean hasDriverID();
    /**
     * <code>optional uint64 driverID = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142
     * </pre>
     */
    long getDriverID();

    /**
     * <code>optional uint64 dateTime = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    boolean hasDateTime();
    /**
     * <code>optional uint64 dateTime = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    long getDateTime();

    /**
     * <code>optional .maxpb.RPMDelta rpm = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142
     * </pre>
     */
    boolean hasRpm();
    /**
     * <code>optional .maxpb.RPMDelta rpm = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142
     * </pre>
     */
    maxpb.MaxpbTelemetryDelta.RPMDelta getRpm();
    /**
     * <code>optional .maxpb.RPMDelta rpm = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142
     * </pre>
     */
    maxpb.MaxpbTelemetryDelta.RPMDeltaOrBuilder getRpmOrBuilder();

    /**
     * <code>optional .maxpb.SpeedDelta speed = 5;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    boolean hasSpeed();
    /**
     * <code>optional .maxpb.SpeedDelta speed = 5;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetryDelta.SpeedDelta getSpeed();
    /**
     * <code>optional .maxpb.SpeedDelta speed = 5;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetryDelta.SpeedDeltaOrBuilder getSpeedOrBuilder();

    /**
     * <code>optional .maxpb.DeltaInterval interval = 6;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    boolean hasInterval();
    /**
     * <code>optional .maxpb.DeltaInterval interval = 6;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetryDelta.DeltaInterval getInterval();
    /**
     * <code>optional .maxpb.DeltaInterval interval = 6;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetryDelta.DeltaIntervalOrBuilder getIntervalOrBuilder();

    /**
     * <code>optional .maxpb.LocationDelta location = 7;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    boolean hasLocation();
    /**
     * <code>optional .maxpb.LocationDelta location = 7;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetryDelta.LocationDelta getLocation();
    /**
     * <code>optional .maxpb.LocationDelta location = 7;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetryDelta.LocationDeltaOrBuilder getLocationOrBuilder();

    /**
     * <code>optional .maxpb.AccelerometerDelta accelerometer = 8;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    boolean hasAccelerometer();
    /**
     * <code>optional .maxpb.AccelerometerDelta accelerometer = 8;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetryDelta.AccelerometerDelta getAccelerometer();
    /**
     * <code>optional .maxpb.AccelerometerDelta accelerometer = 8;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetryDelta.AccelerometerDeltaOrBuilder getAccelerometerOrBuilder();

    /**
     * <code>optional .maxpb.Histogram speedHistogram = 9;</code>
     *
     * <pre>
     *&#47; km/h slots + seconds values SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    boolean hasSpeedHistogram();
    /**
     * <code>optional .maxpb.Histogram speedHistogram = 9;</code>
     *
     * <pre>
     *&#47; km/h slots + seconds values SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetryDelta.Histogram getSpeedHistogram();
    /**
     * <code>optional .maxpb.Histogram speedHistogram = 9;</code>
     *
     * <pre>
     *&#47; km/h slots + seconds values SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetryDelta.HistogramOrBuilder getSpeedHistogramOrBuilder();

    /**
     * <code>optional .maxpb.DistanceDelta distance = 10;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    boolean hasDistance();
    /**
     * <code>optional .maxpb.DistanceDelta distance = 10;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetryDelta.DistanceDelta getDistance();
    /**
     * <code>optional .maxpb.DistanceDelta distance = 10;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetryDelta.DistanceDeltaOrBuilder getDistanceOrBuilder();

    /**
     * <code>optional .maxpb.Histogram rpmHistogram = 11;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    boolean hasRpmHistogram();
    /**
     * <code>optional .maxpb.Histogram rpmHistogram = 11;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    maxpb.MaxpbTelemetryDelta.Histogram getRpmHistogram();
    /**
     * <code>optional .maxpb.Histogram rpmHistogram = 11;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    maxpb.MaxpbTelemetryDelta.HistogramOrBuilder getRpmHistogramOrBuilder();
  }
  /**
   * Protobuf type {@code maxpb.TelemetryDelta}
   */
  public static final class TelemetryDelta extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:maxpb.TelemetryDelta)
      TelemetryDeltaOrBuilder {
    // Use TelemetryDelta.newBuilder() to construct.
    private TelemetryDelta(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private TelemetryDelta(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final TelemetryDelta defaultInstance;
    public static TelemetryDelta getDefaultInstance() {
      return defaultInstance;
    }

    public TelemetryDelta getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private TelemetryDelta(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              maxpb.MaxpbTelemetryDelta.DeltaReasonType value = maxpb.MaxpbTelemetryDelta.DeltaReasonType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(1, rawValue);
              } else {
                bitField0_ |= 0x00000001;
                deltaReason_ = value;
              }
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              driverID_ = input.readUInt64();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              dateTime_ = input.readUInt64();
              break;
            }
            case 34: {
              maxpb.MaxpbTelemetryDelta.RPMDelta.Builder subBuilder = null;
              if (((bitField0_ & 0x00000008) == 0x00000008)) {
                subBuilder = rpm_.toBuilder();
              }
              rpm_ = input.readMessage(maxpb.MaxpbTelemetryDelta.RPMDelta.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(rpm_);
                rpm_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000008;
              break;
            }
            case 42: {
              maxpb.MaxpbTelemetryDelta.SpeedDelta.Builder subBuilder = null;
              if (((bitField0_ & 0x00000010) == 0x00000010)) {
                subBuilder = speed_.toBuilder();
              }
              speed_ = input.readMessage(maxpb.MaxpbTelemetryDelta.SpeedDelta.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(speed_);
                speed_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000010;
              break;
            }
            case 50: {
              maxpb.MaxpbTelemetryDelta.DeltaInterval.Builder subBuilder = null;
              if (((bitField0_ & 0x00000020) == 0x00000020)) {
                subBuilder = interval_.toBuilder();
              }
              interval_ = input.readMessage(maxpb.MaxpbTelemetryDelta.DeltaInterval.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(interval_);
                interval_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000020;
              break;
            }
            case 58: {
              maxpb.MaxpbTelemetryDelta.LocationDelta.Builder subBuilder = null;
              if (((bitField0_ & 0x00000040) == 0x00000040)) {
                subBuilder = location_.toBuilder();
              }
              location_ = input.readMessage(maxpb.MaxpbTelemetryDelta.LocationDelta.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(location_);
                location_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000040;
              break;
            }
            case 66: {
              maxpb.MaxpbTelemetryDelta.AccelerometerDelta.Builder subBuilder = null;
              if (((bitField0_ & 0x00000080) == 0x00000080)) {
                subBuilder = accelerometer_.toBuilder();
              }
              accelerometer_ = input.readMessage(maxpb.MaxpbTelemetryDelta.AccelerometerDelta.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(accelerometer_);
                accelerometer_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000080;
              break;
            }
            case 74: {
              maxpb.MaxpbTelemetryDelta.Histogram.Builder subBuilder = null;
              if (((bitField0_ & 0x00000100) == 0x00000100)) {
                subBuilder = speedHistogram_.toBuilder();
              }
              speedHistogram_ = input.readMessage(maxpb.MaxpbTelemetryDelta.Histogram.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(speedHistogram_);
                speedHistogram_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000100;
              break;
            }
            case 82: {
              maxpb.MaxpbTelemetryDelta.DistanceDelta.Builder subBuilder = null;
              if (((bitField0_ & 0x00000200) == 0x00000200)) {
                subBuilder = distance_.toBuilder();
              }
              distance_ = input.readMessage(maxpb.MaxpbTelemetryDelta.DistanceDelta.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(distance_);
                distance_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000200;
              break;
            }
            case 90: {
              maxpb.MaxpbTelemetryDelta.Histogram.Builder subBuilder = null;
              if (((bitField0_ & 0x00000400) == 0x00000400)) {
                subBuilder = rpmHistogram_.toBuilder();
              }
              rpmHistogram_ = input.readMessage(maxpb.MaxpbTelemetryDelta.Histogram.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(rpmHistogram_);
                rpmHistogram_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000400;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return maxpb.MaxpbTelemetryDelta.internal_static_maxpb_TelemetryDelta_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return maxpb.MaxpbTelemetryDelta.internal_static_maxpb_TelemetryDelta_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              maxpb.MaxpbTelemetryDelta.TelemetryDelta.class, maxpb.MaxpbTelemetryDelta.TelemetryDelta.Builder.class);
    }

    public static com.google.protobuf.Parser<TelemetryDelta> PARSER =
        new com.google.protobuf.AbstractParser<TelemetryDelta>() {
      public TelemetryDelta parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new TelemetryDelta(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<TelemetryDelta> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int DELTAREASON_FIELD_NUMBER = 1;
    private maxpb.MaxpbTelemetryDelta.DeltaReasonType deltaReason_;
    /**
     * <code>optional .maxpb.DeltaReasonType deltaReason = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    public boolean hasDeltaReason() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .maxpb.DeltaReasonType deltaReason = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetryDelta.DeltaReasonType getDeltaReason() {
      return deltaReason_;
    }

    public static final int DRIVERID_FIELD_NUMBER = 2;
    private long driverID_;
    /**
     * <code>optional uint64 driverID = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142
     * </pre>
     */
    public boolean hasDriverID() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional uint64 driverID = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142
     * </pre>
     */
    public long getDriverID() {
      return driverID_;
    }

    public static final int DATETIME_FIELD_NUMBER = 3;
    private long dateTime_;
    /**
     * <code>optional uint64 dateTime = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    public boolean hasDateTime() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional uint64 dateTime = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    public long getDateTime() {
      return dateTime_;
    }

    public static final int RPM_FIELD_NUMBER = 4;
    private maxpb.MaxpbTelemetryDelta.RPMDelta rpm_;
    /**
     * <code>optional .maxpb.RPMDelta rpm = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142
     * </pre>
     */
    public boolean hasRpm() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional .maxpb.RPMDelta rpm = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142
     * </pre>
     */
    public maxpb.MaxpbTelemetryDelta.RPMDelta getRpm() {
      return rpm_;
    }
    /**
     * <code>optional .maxpb.RPMDelta rpm = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142
     * </pre>
     */
    public maxpb.MaxpbTelemetryDelta.RPMDeltaOrBuilder getRpmOrBuilder() {
      return rpm_;
    }

    public static final int SPEED_FIELD_NUMBER = 5;
    private maxpb.MaxpbTelemetryDelta.SpeedDelta speed_;
    /**
     * <code>optional .maxpb.SpeedDelta speed = 5;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    public boolean hasSpeed() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional .maxpb.SpeedDelta speed = 5;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetryDelta.SpeedDelta getSpeed() {
      return speed_;
    }
    /**
     * <code>optional .maxpb.SpeedDelta speed = 5;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetryDelta.SpeedDeltaOrBuilder getSpeedOrBuilder() {
      return speed_;
    }

    public static final int INTERVAL_FIELD_NUMBER = 6;
    private maxpb.MaxpbTelemetryDelta.DeltaInterval interval_;
    /**
     * <code>optional .maxpb.DeltaInterval interval = 6;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    public boolean hasInterval() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional .maxpb.DeltaInterval interval = 6;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetryDelta.DeltaInterval getInterval() {
      return interval_;
    }
    /**
     * <code>optional .maxpb.DeltaInterval interval = 6;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetryDelta.DeltaIntervalOrBuilder getIntervalOrBuilder() {
      return interval_;
    }

    public static final int LOCATION_FIELD_NUMBER = 7;
    private maxpb.MaxpbTelemetryDelta.LocationDelta location_;
    /**
     * <code>optional .maxpb.LocationDelta location = 7;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    public boolean hasLocation() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional .maxpb.LocationDelta location = 7;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetryDelta.LocationDelta getLocation() {
      return location_;
    }
    /**
     * <code>optional .maxpb.LocationDelta location = 7;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetryDelta.LocationDeltaOrBuilder getLocationOrBuilder() {
      return location_;
    }

    public static final int ACCELEROMETER_FIELD_NUMBER = 8;
    private maxpb.MaxpbTelemetryDelta.AccelerometerDelta accelerometer_;
    /**
     * <code>optional .maxpb.AccelerometerDelta accelerometer = 8;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    public boolean hasAccelerometer() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional .maxpb.AccelerometerDelta accelerometer = 8;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetryDelta.AccelerometerDelta getAccelerometer() {
      return accelerometer_;
    }
    /**
     * <code>optional .maxpb.AccelerometerDelta accelerometer = 8;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetryDelta.AccelerometerDeltaOrBuilder getAccelerometerOrBuilder() {
      return accelerometer_;
    }

    public static final int SPEEDHISTOGRAM_FIELD_NUMBER = 9;
    private maxpb.MaxpbTelemetryDelta.Histogram speedHistogram_;
    /**
     * <code>optional .maxpb.Histogram speedHistogram = 9;</code>
     *
     * <pre>
     *&#47; km/h slots + seconds values SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    public boolean hasSpeedHistogram() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional .maxpb.Histogram speedHistogram = 9;</code>
     *
     * <pre>
     *&#47; km/h slots + seconds values SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetryDelta.Histogram getSpeedHistogram() {
      return speedHistogram_;
    }
    /**
     * <code>optional .maxpb.Histogram speedHistogram = 9;</code>
     *
     * <pre>
     *&#47; km/h slots + seconds values SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetryDelta.HistogramOrBuilder getSpeedHistogramOrBuilder() {
      return speedHistogram_;
    }

    public static final int DISTANCE_FIELD_NUMBER = 10;
    private maxpb.MaxpbTelemetryDelta.DistanceDelta distance_;
    /**
     * <code>optional .maxpb.DistanceDelta distance = 10;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    public boolean hasDistance() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional .maxpb.DistanceDelta distance = 10;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetryDelta.DistanceDelta getDistance() {
      return distance_;
    }
    /**
     * <code>optional .maxpb.DistanceDelta distance = 10;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetryDelta.DistanceDeltaOrBuilder getDistanceOrBuilder() {
      return distance_;
    }

    public static final int RPMHISTOGRAM_FIELD_NUMBER = 11;
    private maxpb.MaxpbTelemetryDelta.Histogram rpmHistogram_;
    /**
     * <code>optional .maxpb.Histogram rpmHistogram = 11;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public boolean hasRpmHistogram() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional .maxpb.Histogram rpmHistogram = 11;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public maxpb.MaxpbTelemetryDelta.Histogram getRpmHistogram() {
      return rpmHistogram_;
    }
    /**
     * <code>optional .maxpb.Histogram rpmHistogram = 11;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public maxpb.MaxpbTelemetryDelta.HistogramOrBuilder getRpmHistogramOrBuilder() {
      return rpmHistogram_;
    }

    private void initFields() {
      deltaReason_ = maxpb.MaxpbTelemetryDelta.DeltaReasonType.DR_IGNITION_ON;
      driverID_ = 0L;
      dateTime_ = 0L;
      rpm_ = maxpb.MaxpbTelemetryDelta.RPMDelta.getDefaultInstance();
      speed_ = maxpb.MaxpbTelemetryDelta.SpeedDelta.getDefaultInstance();
      interval_ = maxpb.MaxpbTelemetryDelta.DeltaInterval.getDefaultInstance();
      location_ = maxpb.MaxpbTelemetryDelta.LocationDelta.getDefaultInstance();
      accelerometer_ = maxpb.MaxpbTelemetryDelta.AccelerometerDelta.getDefaultInstance();
      speedHistogram_ = maxpb.MaxpbTelemetryDelta.Histogram.getDefaultInstance();
      distance_ = maxpb.MaxpbTelemetryDelta.DistanceDelta.getDefaultInstance();
      rpmHistogram_ = maxpb.MaxpbTelemetryDelta.Histogram.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, deltaReason_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt64(2, driverID_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt64(3, dateTime_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeMessage(4, rpm_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeMessage(5, speed_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeMessage(6, interval_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeMessage(7, location_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeMessage(8, accelerometer_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeMessage(9, speedHistogram_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeMessage(10, distance_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeMessage(11, rpmHistogram_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, deltaReason_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(2, driverID_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(3, dateTime_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, rpm_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, speed_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, interval_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, location_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, accelerometer_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(9, speedHistogram_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(10, distance_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(11, rpmHistogram_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static maxpb.MaxpbTelemetryDelta.TelemetryDelta parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static maxpb.MaxpbTelemetryDelta.TelemetryDelta parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetryDelta.TelemetryDelta parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static maxpb.MaxpbTelemetryDelta.TelemetryDelta parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetryDelta.TelemetryDelta parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static maxpb.MaxpbTelemetryDelta.TelemetryDelta parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetryDelta.TelemetryDelta parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static maxpb.MaxpbTelemetryDelta.TelemetryDelta parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetryDelta.TelemetryDelta parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static maxpb.MaxpbTelemetryDelta.TelemetryDelta parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(maxpb.MaxpbTelemetryDelta.TelemetryDelta prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code maxpb.TelemetryDelta}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:maxpb.TelemetryDelta)
        maxpb.MaxpbTelemetryDelta.TelemetryDeltaOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return maxpb.MaxpbTelemetryDelta.internal_static_maxpb_TelemetryDelta_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return maxpb.MaxpbTelemetryDelta.internal_static_maxpb_TelemetryDelta_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                maxpb.MaxpbTelemetryDelta.TelemetryDelta.class, maxpb.MaxpbTelemetryDelta.TelemetryDelta.Builder.class);
      }

      // Construct using maxpb.MaxpbTelemetryDelta.TelemetryDelta.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getRpmFieldBuilder();
          getSpeedFieldBuilder();
          getIntervalFieldBuilder();
          getLocationFieldBuilder();
          getAccelerometerFieldBuilder();
          getSpeedHistogramFieldBuilder();
          getDistanceFieldBuilder();
          getRpmHistogramFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        deltaReason_ = maxpb.MaxpbTelemetryDelta.DeltaReasonType.DR_IGNITION_ON;
        bitField0_ = (bitField0_ & ~0x00000001);
        driverID_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000002);
        dateTime_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000004);
        if (rpmBuilder_ == null) {
          rpm_ = maxpb.MaxpbTelemetryDelta.RPMDelta.getDefaultInstance();
        } else {
          rpmBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        if (speedBuilder_ == null) {
          speed_ = maxpb.MaxpbTelemetryDelta.SpeedDelta.getDefaultInstance();
        } else {
          speedBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        if (intervalBuilder_ == null) {
          interval_ = maxpb.MaxpbTelemetryDelta.DeltaInterval.getDefaultInstance();
        } else {
          intervalBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000020);
        if (locationBuilder_ == null) {
          location_ = maxpb.MaxpbTelemetryDelta.LocationDelta.getDefaultInstance();
        } else {
          locationBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000040);
        if (accelerometerBuilder_ == null) {
          accelerometer_ = maxpb.MaxpbTelemetryDelta.AccelerometerDelta.getDefaultInstance();
        } else {
          accelerometerBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000080);
        if (speedHistogramBuilder_ == null) {
          speedHistogram_ = maxpb.MaxpbTelemetryDelta.Histogram.getDefaultInstance();
        } else {
          speedHistogramBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000100);
        if (distanceBuilder_ == null) {
          distance_ = maxpb.MaxpbTelemetryDelta.DistanceDelta.getDefaultInstance();
        } else {
          distanceBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000200);
        if (rpmHistogramBuilder_ == null) {
          rpmHistogram_ = maxpb.MaxpbTelemetryDelta.Histogram.getDefaultInstance();
        } else {
          rpmHistogramBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000400);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return maxpb.MaxpbTelemetryDelta.internal_static_maxpb_TelemetryDelta_descriptor;
      }

      public maxpb.MaxpbTelemetryDelta.TelemetryDelta getDefaultInstanceForType() {
        return maxpb.MaxpbTelemetryDelta.TelemetryDelta.getDefaultInstance();
      }

      public maxpb.MaxpbTelemetryDelta.TelemetryDelta build() {
        maxpb.MaxpbTelemetryDelta.TelemetryDelta result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public maxpb.MaxpbTelemetryDelta.TelemetryDelta buildPartial() {
        maxpb.MaxpbTelemetryDelta.TelemetryDelta result = new maxpb.MaxpbTelemetryDelta.TelemetryDelta(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.deltaReason_ = deltaReason_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.driverID_ = driverID_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.dateTime_ = dateTime_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        if (rpmBuilder_ == null) {
          result.rpm_ = rpm_;
        } else {
          result.rpm_ = rpmBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        if (speedBuilder_ == null) {
          result.speed_ = speed_;
        } else {
          result.speed_ = speedBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        if (intervalBuilder_ == null) {
          result.interval_ = interval_;
        } else {
          result.interval_ = intervalBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        if (locationBuilder_ == null) {
          result.location_ = location_;
        } else {
          result.location_ = locationBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        if (accelerometerBuilder_ == null) {
          result.accelerometer_ = accelerometer_;
        } else {
          result.accelerometer_ = accelerometerBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        if (speedHistogramBuilder_ == null) {
          result.speedHistogram_ = speedHistogram_;
        } else {
          result.speedHistogram_ = speedHistogramBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        if (distanceBuilder_ == null) {
          result.distance_ = distance_;
        } else {
          result.distance_ = distanceBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        if (rpmHistogramBuilder_ == null) {
          result.rpmHistogram_ = rpmHistogram_;
        } else {
          result.rpmHistogram_ = rpmHistogramBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof maxpb.MaxpbTelemetryDelta.TelemetryDelta) {
          return mergeFrom((maxpb.MaxpbTelemetryDelta.TelemetryDelta)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(maxpb.MaxpbTelemetryDelta.TelemetryDelta other) {
        if (other == maxpb.MaxpbTelemetryDelta.TelemetryDelta.getDefaultInstance()) return this;
        if (other.hasDeltaReason()) {
          setDeltaReason(other.getDeltaReason());
        }
        if (other.hasDriverID()) {
          setDriverID(other.getDriverID());
        }
        if (other.hasDateTime()) {
          setDateTime(other.getDateTime());
        }
        if (other.hasRpm()) {
          mergeRpm(other.getRpm());
        }
        if (other.hasSpeed()) {
          mergeSpeed(other.getSpeed());
        }
        if (other.hasInterval()) {
          mergeInterval(other.getInterval());
        }
        if (other.hasLocation()) {
          mergeLocation(other.getLocation());
        }
        if (other.hasAccelerometer()) {
          mergeAccelerometer(other.getAccelerometer());
        }
        if (other.hasSpeedHistogram()) {
          mergeSpeedHistogram(other.getSpeedHistogram());
        }
        if (other.hasDistance()) {
          mergeDistance(other.getDistance());
        }
        if (other.hasRpmHistogram()) {
          mergeRpmHistogram(other.getRpmHistogram());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        maxpb.MaxpbTelemetryDelta.TelemetryDelta parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (maxpb.MaxpbTelemetryDelta.TelemetryDelta) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private maxpb.MaxpbTelemetryDelta.DeltaReasonType deltaReason_ = maxpb.MaxpbTelemetryDelta.DeltaReasonType.DR_IGNITION_ON;
      /**
       * <code>optional .maxpb.DeltaReasonType deltaReason = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public boolean hasDeltaReason() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .maxpb.DeltaReasonType deltaReason = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetryDelta.DeltaReasonType getDeltaReason() {
        return deltaReason_;
      }
      /**
       * <code>optional .maxpb.DeltaReasonType deltaReason = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public Builder setDeltaReason(maxpb.MaxpbTelemetryDelta.DeltaReasonType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        deltaReason_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .maxpb.DeltaReasonType deltaReason = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public Builder clearDeltaReason() {
        bitField0_ = (bitField0_ & ~0x00000001);
        deltaReason_ = maxpb.MaxpbTelemetryDelta.DeltaReasonType.DR_IGNITION_ON;
        onChanged();
        return this;
      }

      private long driverID_ ;
      /**
       * <code>optional uint64 driverID = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142
       * </pre>
       */
      public boolean hasDriverID() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional uint64 driverID = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142
       * </pre>
       */
      public long getDriverID() {
        return driverID_;
      }
      /**
       * <code>optional uint64 driverID = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142
       * </pre>
       */
      public Builder setDriverID(long value) {
        bitField0_ |= 0x00000002;
        driverID_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint64 driverID = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142
       * </pre>
       */
      public Builder clearDriverID() {
        bitField0_ = (bitField0_ & ~0x00000002);
        driverID_ = 0L;
        onChanged();
        return this;
      }

      private long dateTime_ ;
      /**
       * <code>optional uint64 dateTime = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public boolean hasDateTime() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional uint64 dateTime = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public long getDateTime() {
        return dateTime_;
      }
      /**
       * <code>optional uint64 dateTime = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public Builder setDateTime(long value) {
        bitField0_ |= 0x00000004;
        dateTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint64 dateTime = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public Builder clearDateTime() {
        bitField0_ = (bitField0_ & ~0x00000004);
        dateTime_ = 0L;
        onChanged();
        return this;
      }

      private maxpb.MaxpbTelemetryDelta.RPMDelta rpm_ = maxpb.MaxpbTelemetryDelta.RPMDelta.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetryDelta.RPMDelta, maxpb.MaxpbTelemetryDelta.RPMDelta.Builder, maxpb.MaxpbTelemetryDelta.RPMDeltaOrBuilder> rpmBuilder_;
      /**
       * <code>optional .maxpb.RPMDelta rpm = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142
       * </pre>
       */
      public boolean hasRpm() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional .maxpb.RPMDelta rpm = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142
       * </pre>
       */
      public maxpb.MaxpbTelemetryDelta.RPMDelta getRpm() {
        if (rpmBuilder_ == null) {
          return rpm_;
        } else {
          return rpmBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .maxpb.RPMDelta rpm = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142
       * </pre>
       */
      public Builder setRpm(maxpb.MaxpbTelemetryDelta.RPMDelta value) {
        if (rpmBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          rpm_ = value;
          onChanged();
        } else {
          rpmBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .maxpb.RPMDelta rpm = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142
       * </pre>
       */
      public Builder setRpm(
          maxpb.MaxpbTelemetryDelta.RPMDelta.Builder builderForValue) {
        if (rpmBuilder_ == null) {
          rpm_ = builderForValue.build();
          onChanged();
        } else {
          rpmBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .maxpb.RPMDelta rpm = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142
       * </pre>
       */
      public Builder mergeRpm(maxpb.MaxpbTelemetryDelta.RPMDelta value) {
        if (rpmBuilder_ == null) {
          if (((bitField0_ & 0x00000008) == 0x00000008) &&
              rpm_ != maxpb.MaxpbTelemetryDelta.RPMDelta.getDefaultInstance()) {
            rpm_ =
              maxpb.MaxpbTelemetryDelta.RPMDelta.newBuilder(rpm_).mergeFrom(value).buildPartial();
          } else {
            rpm_ = value;
          }
          onChanged();
        } else {
          rpmBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .maxpb.RPMDelta rpm = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142
       * </pre>
       */
      public Builder clearRpm() {
        if (rpmBuilder_ == null) {
          rpm_ = maxpb.MaxpbTelemetryDelta.RPMDelta.getDefaultInstance();
          onChanged();
        } else {
          rpmBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }
      /**
       * <code>optional .maxpb.RPMDelta rpm = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142
       * </pre>
       */
      public maxpb.MaxpbTelemetryDelta.RPMDelta.Builder getRpmBuilder() {
        bitField0_ |= 0x00000008;
        onChanged();
        return getRpmFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .maxpb.RPMDelta rpm = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142
       * </pre>
       */
      public maxpb.MaxpbTelemetryDelta.RPMDeltaOrBuilder getRpmOrBuilder() {
        if (rpmBuilder_ != null) {
          return rpmBuilder_.getMessageOrBuilder();
        } else {
          return rpm_;
        }
      }
      /**
       * <code>optional .maxpb.RPMDelta rpm = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetryDelta.RPMDelta, maxpb.MaxpbTelemetryDelta.RPMDelta.Builder, maxpb.MaxpbTelemetryDelta.RPMDeltaOrBuilder> 
          getRpmFieldBuilder() {
        if (rpmBuilder_ == null) {
          rpmBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              maxpb.MaxpbTelemetryDelta.RPMDelta, maxpb.MaxpbTelemetryDelta.RPMDelta.Builder, maxpb.MaxpbTelemetryDelta.RPMDeltaOrBuilder>(
                  getRpm(),
                  getParentForChildren(),
                  isClean());
          rpm_ = null;
        }
        return rpmBuilder_;
      }

      private maxpb.MaxpbTelemetryDelta.SpeedDelta speed_ = maxpb.MaxpbTelemetryDelta.SpeedDelta.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetryDelta.SpeedDelta, maxpb.MaxpbTelemetryDelta.SpeedDelta.Builder, maxpb.MaxpbTelemetryDelta.SpeedDeltaOrBuilder> speedBuilder_;
      /**
       * <code>optional .maxpb.SpeedDelta speed = 5;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public boolean hasSpeed() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional .maxpb.SpeedDelta speed = 5;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetryDelta.SpeedDelta getSpeed() {
        if (speedBuilder_ == null) {
          return speed_;
        } else {
          return speedBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .maxpb.SpeedDelta speed = 5;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public Builder setSpeed(maxpb.MaxpbTelemetryDelta.SpeedDelta value) {
        if (speedBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          speed_ = value;
          onChanged();
        } else {
          speedBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .maxpb.SpeedDelta speed = 5;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public Builder setSpeed(
          maxpb.MaxpbTelemetryDelta.SpeedDelta.Builder builderForValue) {
        if (speedBuilder_ == null) {
          speed_ = builderForValue.build();
          onChanged();
        } else {
          speedBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .maxpb.SpeedDelta speed = 5;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public Builder mergeSpeed(maxpb.MaxpbTelemetryDelta.SpeedDelta value) {
        if (speedBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010) &&
              speed_ != maxpb.MaxpbTelemetryDelta.SpeedDelta.getDefaultInstance()) {
            speed_ =
              maxpb.MaxpbTelemetryDelta.SpeedDelta.newBuilder(speed_).mergeFrom(value).buildPartial();
          } else {
            speed_ = value;
          }
          onChanged();
        } else {
          speedBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .maxpb.SpeedDelta speed = 5;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public Builder clearSpeed() {
        if (speedBuilder_ == null) {
          speed_ = maxpb.MaxpbTelemetryDelta.SpeedDelta.getDefaultInstance();
          onChanged();
        } else {
          speedBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }
      /**
       * <code>optional .maxpb.SpeedDelta speed = 5;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetryDelta.SpeedDelta.Builder getSpeedBuilder() {
        bitField0_ |= 0x00000010;
        onChanged();
        return getSpeedFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .maxpb.SpeedDelta speed = 5;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetryDelta.SpeedDeltaOrBuilder getSpeedOrBuilder() {
        if (speedBuilder_ != null) {
          return speedBuilder_.getMessageOrBuilder();
        } else {
          return speed_;
        }
      }
      /**
       * <code>optional .maxpb.SpeedDelta speed = 5;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetryDelta.SpeedDelta, maxpb.MaxpbTelemetryDelta.SpeedDelta.Builder, maxpb.MaxpbTelemetryDelta.SpeedDeltaOrBuilder> 
          getSpeedFieldBuilder() {
        if (speedBuilder_ == null) {
          speedBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              maxpb.MaxpbTelemetryDelta.SpeedDelta, maxpb.MaxpbTelemetryDelta.SpeedDelta.Builder, maxpb.MaxpbTelemetryDelta.SpeedDeltaOrBuilder>(
                  getSpeed(),
                  getParentForChildren(),
                  isClean());
          speed_ = null;
        }
        return speedBuilder_;
      }

      private maxpb.MaxpbTelemetryDelta.DeltaInterval interval_ = maxpb.MaxpbTelemetryDelta.DeltaInterval.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetryDelta.DeltaInterval, maxpb.MaxpbTelemetryDelta.DeltaInterval.Builder, maxpb.MaxpbTelemetryDelta.DeltaIntervalOrBuilder> intervalBuilder_;
      /**
       * <code>optional .maxpb.DeltaInterval interval = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public boolean hasInterval() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional .maxpb.DeltaInterval interval = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetryDelta.DeltaInterval getInterval() {
        if (intervalBuilder_ == null) {
          return interval_;
        } else {
          return intervalBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .maxpb.DeltaInterval interval = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public Builder setInterval(maxpb.MaxpbTelemetryDelta.DeltaInterval value) {
        if (intervalBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          interval_ = value;
          onChanged();
        } else {
          intervalBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .maxpb.DeltaInterval interval = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public Builder setInterval(
          maxpb.MaxpbTelemetryDelta.DeltaInterval.Builder builderForValue) {
        if (intervalBuilder_ == null) {
          interval_ = builderForValue.build();
          onChanged();
        } else {
          intervalBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .maxpb.DeltaInterval interval = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public Builder mergeInterval(maxpb.MaxpbTelemetryDelta.DeltaInterval value) {
        if (intervalBuilder_ == null) {
          if (((bitField0_ & 0x00000020) == 0x00000020) &&
              interval_ != maxpb.MaxpbTelemetryDelta.DeltaInterval.getDefaultInstance()) {
            interval_ =
              maxpb.MaxpbTelemetryDelta.DeltaInterval.newBuilder(interval_).mergeFrom(value).buildPartial();
          } else {
            interval_ = value;
          }
          onChanged();
        } else {
          intervalBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .maxpb.DeltaInterval interval = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public Builder clearInterval() {
        if (intervalBuilder_ == null) {
          interval_ = maxpb.MaxpbTelemetryDelta.DeltaInterval.getDefaultInstance();
          onChanged();
        } else {
          intervalBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }
      /**
       * <code>optional .maxpb.DeltaInterval interval = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetryDelta.DeltaInterval.Builder getIntervalBuilder() {
        bitField0_ |= 0x00000020;
        onChanged();
        return getIntervalFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .maxpb.DeltaInterval interval = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetryDelta.DeltaIntervalOrBuilder getIntervalOrBuilder() {
        if (intervalBuilder_ != null) {
          return intervalBuilder_.getMessageOrBuilder();
        } else {
          return interval_;
        }
      }
      /**
       * <code>optional .maxpb.DeltaInterval interval = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetryDelta.DeltaInterval, maxpb.MaxpbTelemetryDelta.DeltaInterval.Builder, maxpb.MaxpbTelemetryDelta.DeltaIntervalOrBuilder> 
          getIntervalFieldBuilder() {
        if (intervalBuilder_ == null) {
          intervalBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              maxpb.MaxpbTelemetryDelta.DeltaInterval, maxpb.MaxpbTelemetryDelta.DeltaInterval.Builder, maxpb.MaxpbTelemetryDelta.DeltaIntervalOrBuilder>(
                  getInterval(),
                  getParentForChildren(),
                  isClean());
          interval_ = null;
        }
        return intervalBuilder_;
      }

      private maxpb.MaxpbTelemetryDelta.LocationDelta location_ = maxpb.MaxpbTelemetryDelta.LocationDelta.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetryDelta.LocationDelta, maxpb.MaxpbTelemetryDelta.LocationDelta.Builder, maxpb.MaxpbTelemetryDelta.LocationDeltaOrBuilder> locationBuilder_;
      /**
       * <code>optional .maxpb.LocationDelta location = 7;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public boolean hasLocation() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional .maxpb.LocationDelta location = 7;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetryDelta.LocationDelta getLocation() {
        if (locationBuilder_ == null) {
          return location_;
        } else {
          return locationBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .maxpb.LocationDelta location = 7;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public Builder setLocation(maxpb.MaxpbTelemetryDelta.LocationDelta value) {
        if (locationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          location_ = value;
          onChanged();
        } else {
          locationBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <code>optional .maxpb.LocationDelta location = 7;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public Builder setLocation(
          maxpb.MaxpbTelemetryDelta.LocationDelta.Builder builderForValue) {
        if (locationBuilder_ == null) {
          location_ = builderForValue.build();
          onChanged();
        } else {
          locationBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <code>optional .maxpb.LocationDelta location = 7;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public Builder mergeLocation(maxpb.MaxpbTelemetryDelta.LocationDelta value) {
        if (locationBuilder_ == null) {
          if (((bitField0_ & 0x00000040) == 0x00000040) &&
              location_ != maxpb.MaxpbTelemetryDelta.LocationDelta.getDefaultInstance()) {
            location_ =
              maxpb.MaxpbTelemetryDelta.LocationDelta.newBuilder(location_).mergeFrom(value).buildPartial();
          } else {
            location_ = value;
          }
          onChanged();
        } else {
          locationBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <code>optional .maxpb.LocationDelta location = 7;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public Builder clearLocation() {
        if (locationBuilder_ == null) {
          location_ = maxpb.MaxpbTelemetryDelta.LocationDelta.getDefaultInstance();
          onChanged();
        } else {
          locationBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }
      /**
       * <code>optional .maxpb.LocationDelta location = 7;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetryDelta.LocationDelta.Builder getLocationBuilder() {
        bitField0_ |= 0x00000040;
        onChanged();
        return getLocationFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .maxpb.LocationDelta location = 7;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetryDelta.LocationDeltaOrBuilder getLocationOrBuilder() {
        if (locationBuilder_ != null) {
          return locationBuilder_.getMessageOrBuilder();
        } else {
          return location_;
        }
      }
      /**
       * <code>optional .maxpb.LocationDelta location = 7;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetryDelta.LocationDelta, maxpb.MaxpbTelemetryDelta.LocationDelta.Builder, maxpb.MaxpbTelemetryDelta.LocationDeltaOrBuilder> 
          getLocationFieldBuilder() {
        if (locationBuilder_ == null) {
          locationBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              maxpb.MaxpbTelemetryDelta.LocationDelta, maxpb.MaxpbTelemetryDelta.LocationDelta.Builder, maxpb.MaxpbTelemetryDelta.LocationDeltaOrBuilder>(
                  getLocation(),
                  getParentForChildren(),
                  isClean());
          location_ = null;
        }
        return locationBuilder_;
      }

      private maxpb.MaxpbTelemetryDelta.AccelerometerDelta accelerometer_ = maxpb.MaxpbTelemetryDelta.AccelerometerDelta.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetryDelta.AccelerometerDelta, maxpb.MaxpbTelemetryDelta.AccelerometerDelta.Builder, maxpb.MaxpbTelemetryDelta.AccelerometerDeltaOrBuilder> accelerometerBuilder_;
      /**
       * <code>optional .maxpb.AccelerometerDelta accelerometer = 8;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public boolean hasAccelerometer() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional .maxpb.AccelerometerDelta accelerometer = 8;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetryDelta.AccelerometerDelta getAccelerometer() {
        if (accelerometerBuilder_ == null) {
          return accelerometer_;
        } else {
          return accelerometerBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .maxpb.AccelerometerDelta accelerometer = 8;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public Builder setAccelerometer(maxpb.MaxpbTelemetryDelta.AccelerometerDelta value) {
        if (accelerometerBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          accelerometer_ = value;
          onChanged();
        } else {
          accelerometerBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000080;
        return this;
      }
      /**
       * <code>optional .maxpb.AccelerometerDelta accelerometer = 8;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public Builder setAccelerometer(
          maxpb.MaxpbTelemetryDelta.AccelerometerDelta.Builder builderForValue) {
        if (accelerometerBuilder_ == null) {
          accelerometer_ = builderForValue.build();
          onChanged();
        } else {
          accelerometerBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000080;
        return this;
      }
      /**
       * <code>optional .maxpb.AccelerometerDelta accelerometer = 8;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public Builder mergeAccelerometer(maxpb.MaxpbTelemetryDelta.AccelerometerDelta value) {
        if (accelerometerBuilder_ == null) {
          if (((bitField0_ & 0x00000080) == 0x00000080) &&
              accelerometer_ != maxpb.MaxpbTelemetryDelta.AccelerometerDelta.getDefaultInstance()) {
            accelerometer_ =
              maxpb.MaxpbTelemetryDelta.AccelerometerDelta.newBuilder(accelerometer_).mergeFrom(value).buildPartial();
          } else {
            accelerometer_ = value;
          }
          onChanged();
        } else {
          accelerometerBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000080;
        return this;
      }
      /**
       * <code>optional .maxpb.AccelerometerDelta accelerometer = 8;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public Builder clearAccelerometer() {
        if (accelerometerBuilder_ == null) {
          accelerometer_ = maxpb.MaxpbTelemetryDelta.AccelerometerDelta.getDefaultInstance();
          onChanged();
        } else {
          accelerometerBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000080);
        return this;
      }
      /**
       * <code>optional .maxpb.AccelerometerDelta accelerometer = 8;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetryDelta.AccelerometerDelta.Builder getAccelerometerBuilder() {
        bitField0_ |= 0x00000080;
        onChanged();
        return getAccelerometerFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .maxpb.AccelerometerDelta accelerometer = 8;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetryDelta.AccelerometerDeltaOrBuilder getAccelerometerOrBuilder() {
        if (accelerometerBuilder_ != null) {
          return accelerometerBuilder_.getMessageOrBuilder();
        } else {
          return accelerometer_;
        }
      }
      /**
       * <code>optional .maxpb.AccelerometerDelta accelerometer = 8;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetryDelta.AccelerometerDelta, maxpb.MaxpbTelemetryDelta.AccelerometerDelta.Builder, maxpb.MaxpbTelemetryDelta.AccelerometerDeltaOrBuilder> 
          getAccelerometerFieldBuilder() {
        if (accelerometerBuilder_ == null) {
          accelerometerBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              maxpb.MaxpbTelemetryDelta.AccelerometerDelta, maxpb.MaxpbTelemetryDelta.AccelerometerDelta.Builder, maxpb.MaxpbTelemetryDelta.AccelerometerDeltaOrBuilder>(
                  getAccelerometer(),
                  getParentForChildren(),
                  isClean());
          accelerometer_ = null;
        }
        return accelerometerBuilder_;
      }

      private maxpb.MaxpbTelemetryDelta.Histogram speedHistogram_ = maxpb.MaxpbTelemetryDelta.Histogram.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetryDelta.Histogram, maxpb.MaxpbTelemetryDelta.Histogram.Builder, maxpb.MaxpbTelemetryDelta.HistogramOrBuilder> speedHistogramBuilder_;
      /**
       * <code>optional .maxpb.Histogram speedHistogram = 9;</code>
       *
       * <pre>
       *&#47; km/h slots + seconds values SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public boolean hasSpeedHistogram() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional .maxpb.Histogram speedHistogram = 9;</code>
       *
       * <pre>
       *&#47; km/h slots + seconds values SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetryDelta.Histogram getSpeedHistogram() {
        if (speedHistogramBuilder_ == null) {
          return speedHistogram_;
        } else {
          return speedHistogramBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .maxpb.Histogram speedHistogram = 9;</code>
       *
       * <pre>
       *&#47; km/h slots + seconds values SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public Builder setSpeedHistogram(maxpb.MaxpbTelemetryDelta.Histogram value) {
        if (speedHistogramBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          speedHistogram_ = value;
          onChanged();
        } else {
          speedHistogramBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000100;
        return this;
      }
      /**
       * <code>optional .maxpb.Histogram speedHistogram = 9;</code>
       *
       * <pre>
       *&#47; km/h slots + seconds values SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public Builder setSpeedHistogram(
          maxpb.MaxpbTelemetryDelta.Histogram.Builder builderForValue) {
        if (speedHistogramBuilder_ == null) {
          speedHistogram_ = builderForValue.build();
          onChanged();
        } else {
          speedHistogramBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000100;
        return this;
      }
      /**
       * <code>optional .maxpb.Histogram speedHistogram = 9;</code>
       *
       * <pre>
       *&#47; km/h slots + seconds values SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public Builder mergeSpeedHistogram(maxpb.MaxpbTelemetryDelta.Histogram value) {
        if (speedHistogramBuilder_ == null) {
          if (((bitField0_ & 0x00000100) == 0x00000100) &&
              speedHistogram_ != maxpb.MaxpbTelemetryDelta.Histogram.getDefaultInstance()) {
            speedHistogram_ =
              maxpb.MaxpbTelemetryDelta.Histogram.newBuilder(speedHistogram_).mergeFrom(value).buildPartial();
          } else {
            speedHistogram_ = value;
          }
          onChanged();
        } else {
          speedHistogramBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000100;
        return this;
      }
      /**
       * <code>optional .maxpb.Histogram speedHistogram = 9;</code>
       *
       * <pre>
       *&#47; km/h slots + seconds values SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public Builder clearSpeedHistogram() {
        if (speedHistogramBuilder_ == null) {
          speedHistogram_ = maxpb.MaxpbTelemetryDelta.Histogram.getDefaultInstance();
          onChanged();
        } else {
          speedHistogramBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000100);
        return this;
      }
      /**
       * <code>optional .maxpb.Histogram speedHistogram = 9;</code>
       *
       * <pre>
       *&#47; km/h slots + seconds values SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetryDelta.Histogram.Builder getSpeedHistogramBuilder() {
        bitField0_ |= 0x00000100;
        onChanged();
        return getSpeedHistogramFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .maxpb.Histogram speedHistogram = 9;</code>
       *
       * <pre>
       *&#47; km/h slots + seconds values SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetryDelta.HistogramOrBuilder getSpeedHistogramOrBuilder() {
        if (speedHistogramBuilder_ != null) {
          return speedHistogramBuilder_.getMessageOrBuilder();
        } else {
          return speedHistogram_;
        }
      }
      /**
       * <code>optional .maxpb.Histogram speedHistogram = 9;</code>
       *
       * <pre>
       *&#47; km/h slots + seconds values SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetryDelta.Histogram, maxpb.MaxpbTelemetryDelta.Histogram.Builder, maxpb.MaxpbTelemetryDelta.HistogramOrBuilder> 
          getSpeedHistogramFieldBuilder() {
        if (speedHistogramBuilder_ == null) {
          speedHistogramBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              maxpb.MaxpbTelemetryDelta.Histogram, maxpb.MaxpbTelemetryDelta.Histogram.Builder, maxpb.MaxpbTelemetryDelta.HistogramOrBuilder>(
                  getSpeedHistogram(),
                  getParentForChildren(),
                  isClean());
          speedHistogram_ = null;
        }
        return speedHistogramBuilder_;
      }

      private maxpb.MaxpbTelemetryDelta.DistanceDelta distance_ = maxpb.MaxpbTelemetryDelta.DistanceDelta.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetryDelta.DistanceDelta, maxpb.MaxpbTelemetryDelta.DistanceDelta.Builder, maxpb.MaxpbTelemetryDelta.DistanceDeltaOrBuilder> distanceBuilder_;
      /**
       * <code>optional .maxpb.DistanceDelta distance = 10;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public boolean hasDistance() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional .maxpb.DistanceDelta distance = 10;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetryDelta.DistanceDelta getDistance() {
        if (distanceBuilder_ == null) {
          return distance_;
        } else {
          return distanceBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .maxpb.DistanceDelta distance = 10;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public Builder setDistance(maxpb.MaxpbTelemetryDelta.DistanceDelta value) {
        if (distanceBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          distance_ = value;
          onChanged();
        } else {
          distanceBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000200;
        return this;
      }
      /**
       * <code>optional .maxpb.DistanceDelta distance = 10;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public Builder setDistance(
          maxpb.MaxpbTelemetryDelta.DistanceDelta.Builder builderForValue) {
        if (distanceBuilder_ == null) {
          distance_ = builderForValue.build();
          onChanged();
        } else {
          distanceBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000200;
        return this;
      }
      /**
       * <code>optional .maxpb.DistanceDelta distance = 10;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public Builder mergeDistance(maxpb.MaxpbTelemetryDelta.DistanceDelta value) {
        if (distanceBuilder_ == null) {
          if (((bitField0_ & 0x00000200) == 0x00000200) &&
              distance_ != maxpb.MaxpbTelemetryDelta.DistanceDelta.getDefaultInstance()) {
            distance_ =
              maxpb.MaxpbTelemetryDelta.DistanceDelta.newBuilder(distance_).mergeFrom(value).buildPartial();
          } else {
            distance_ = value;
          }
          onChanged();
        } else {
          distanceBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000200;
        return this;
      }
      /**
       * <code>optional .maxpb.DistanceDelta distance = 10;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public Builder clearDistance() {
        if (distanceBuilder_ == null) {
          distance_ = maxpb.MaxpbTelemetryDelta.DistanceDelta.getDefaultInstance();
          onChanged();
        } else {
          distanceBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000200);
        return this;
      }
      /**
       * <code>optional .maxpb.DistanceDelta distance = 10;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetryDelta.DistanceDelta.Builder getDistanceBuilder() {
        bitField0_ |= 0x00000200;
        onChanged();
        return getDistanceFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .maxpb.DistanceDelta distance = 10;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetryDelta.DistanceDeltaOrBuilder getDistanceOrBuilder() {
        if (distanceBuilder_ != null) {
          return distanceBuilder_.getMessageOrBuilder();
        } else {
          return distance_;
        }
      }
      /**
       * <code>optional .maxpb.DistanceDelta distance = 10;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetryDelta.DistanceDelta, maxpb.MaxpbTelemetryDelta.DistanceDelta.Builder, maxpb.MaxpbTelemetryDelta.DistanceDeltaOrBuilder> 
          getDistanceFieldBuilder() {
        if (distanceBuilder_ == null) {
          distanceBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              maxpb.MaxpbTelemetryDelta.DistanceDelta, maxpb.MaxpbTelemetryDelta.DistanceDelta.Builder, maxpb.MaxpbTelemetryDelta.DistanceDeltaOrBuilder>(
                  getDistance(),
                  getParentForChildren(),
                  isClean());
          distance_ = null;
        }
        return distanceBuilder_;
      }

      private maxpb.MaxpbTelemetryDelta.Histogram rpmHistogram_ = maxpb.MaxpbTelemetryDelta.Histogram.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetryDelta.Histogram, maxpb.MaxpbTelemetryDelta.Histogram.Builder, maxpb.MaxpbTelemetryDelta.HistogramOrBuilder> rpmHistogramBuilder_;
      /**
       * <code>optional .maxpb.Histogram rpmHistogram = 11;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public boolean hasRpmHistogram() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional .maxpb.Histogram rpmHistogram = 11;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public maxpb.MaxpbTelemetryDelta.Histogram getRpmHistogram() {
        if (rpmHistogramBuilder_ == null) {
          return rpmHistogram_;
        } else {
          return rpmHistogramBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .maxpb.Histogram rpmHistogram = 11;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder setRpmHistogram(maxpb.MaxpbTelemetryDelta.Histogram value) {
        if (rpmHistogramBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          rpmHistogram_ = value;
          onChanged();
        } else {
          rpmHistogramBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000400;
        return this;
      }
      /**
       * <code>optional .maxpb.Histogram rpmHistogram = 11;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder setRpmHistogram(
          maxpb.MaxpbTelemetryDelta.Histogram.Builder builderForValue) {
        if (rpmHistogramBuilder_ == null) {
          rpmHistogram_ = builderForValue.build();
          onChanged();
        } else {
          rpmHistogramBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000400;
        return this;
      }
      /**
       * <code>optional .maxpb.Histogram rpmHistogram = 11;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder mergeRpmHistogram(maxpb.MaxpbTelemetryDelta.Histogram value) {
        if (rpmHistogramBuilder_ == null) {
          if (((bitField0_ & 0x00000400) == 0x00000400) &&
              rpmHistogram_ != maxpb.MaxpbTelemetryDelta.Histogram.getDefaultInstance()) {
            rpmHistogram_ =
              maxpb.MaxpbTelemetryDelta.Histogram.newBuilder(rpmHistogram_).mergeFrom(value).buildPartial();
          } else {
            rpmHistogram_ = value;
          }
          onChanged();
        } else {
          rpmHistogramBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000400;
        return this;
      }
      /**
       * <code>optional .maxpb.Histogram rpmHistogram = 11;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder clearRpmHistogram() {
        if (rpmHistogramBuilder_ == null) {
          rpmHistogram_ = maxpb.MaxpbTelemetryDelta.Histogram.getDefaultInstance();
          onChanged();
        } else {
          rpmHistogramBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000400);
        return this;
      }
      /**
       * <code>optional .maxpb.Histogram rpmHistogram = 11;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public maxpb.MaxpbTelemetryDelta.Histogram.Builder getRpmHistogramBuilder() {
        bitField0_ |= 0x00000400;
        onChanged();
        return getRpmHistogramFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .maxpb.Histogram rpmHistogram = 11;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public maxpb.MaxpbTelemetryDelta.HistogramOrBuilder getRpmHistogramOrBuilder() {
        if (rpmHistogramBuilder_ != null) {
          return rpmHistogramBuilder_.getMessageOrBuilder();
        } else {
          return rpmHistogram_;
        }
      }
      /**
       * <code>optional .maxpb.Histogram rpmHistogram = 11;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetryDelta.Histogram, maxpb.MaxpbTelemetryDelta.Histogram.Builder, maxpb.MaxpbTelemetryDelta.HistogramOrBuilder> 
          getRpmHistogramFieldBuilder() {
        if (rpmHistogramBuilder_ == null) {
          rpmHistogramBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              maxpb.MaxpbTelemetryDelta.Histogram, maxpb.MaxpbTelemetryDelta.Histogram.Builder, maxpb.MaxpbTelemetryDelta.HistogramOrBuilder>(
                  getRpmHistogram(),
                  getParentForChildren(),
                  isClean());
          rpmHistogram_ = null;
        }
        return rpmHistogramBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:maxpb.TelemetryDelta)
    }

    static {
      defaultInstance = new TelemetryDelta(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:maxpb.TelemetryDelta)
  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_maxpb_RPMDelta_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_maxpb_RPMDelta_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_maxpb_SpeedDelta_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_maxpb_SpeedDelta_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_maxpb_GearInterval_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_maxpb_GearInterval_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_maxpb_DeltaInterval_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_maxpb_DeltaInterval_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_maxpb_LocationDelta_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_maxpb_LocationDelta_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_maxpb_DistanceDelta_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_maxpb_DistanceDelta_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_maxpb_AccelerometerDelta_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_maxpb_AccelerometerDelta_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_maxpb_Histogram_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_maxpb_Histogram_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_maxpb_TelemetryDelta_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_maxpb_TelemetryDelta_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\033maxpb_telemetry_delta.proto\022\005maxpb\"\275\001\n" +
      "\010RPMDelta\022\034\n\024blueRangeRPMInterval\030\001 \001(\r\022" +
      "\035\n\025greenRangeRPMInterval\030\002 \001(\r\022\036\n\026yellow" +
      "RangeRPMInterval\030\003 \001(\r\022\033\n\023redRangeRPMInt" +
      "erval\030\004 \001(\r\022\016\n\006maxRPM\030\005 \001(\r\022\017\n\007meanRPM\030\006" +
      " \001(\r\022\026\n\016redRangeRPMQty\030\007 \001(\r\"\252\002\n\nSpeedDe" +
      "lta\022\024\n\014maxSpeedTime\030\001 \001(\r\022\021\n\tmeanSpeed\030\002" +
      " \001(\r\022\023\n\013maxSpeedQty\030\003 \001(\r\022\031\n\021maxRainySpe" +
      "edTime\030\004 \001(\r\022\026\n\016meanRainySpeed\030\005 \001(\r\022\030\n\020" +
      "maxRainySpeedQty\030\006 \001(\r\022\032\n\022speedOnNeutral",
      "Time\030\007 \001(\r\022\031\n\021speedOnNeutralQty\030\010 \001(\r\022\020\n" +
      "\010maxSpeed\030\t \001(\r\022\025\n\rmaxRainySpeed\030\n \001(\r\022\025" +
      "\n\rmaxSpeedLimit\030\013 \001(\r\022\032\n\022maxRainySpeedLi" +
      "mit\030\014 \001(\r\"4\n\014GearInterval\022\022\n\ngearNumber\030" +
      "\001 \001(\005\022\020\n\010interval\030\002 \001(\r\"\315\001\n\rDeltaInterva" +
      "l\022\021\n\tdeltaTime\030\001 \001(\r\022\022\n\nmovingTime\030\002 \001(\r" +
      "\022\023\n\013stoppedTime\030\003 \001(\r\022\024\n\014engineOnTime\030\004 " +
      "\001(\r\022\021\n\tcluchTime\030\005 \001(\r\022%\n\010gearTime\030\006 \003(\013" +
      "2\023.maxpb.GearInterval\022\026\n\016dryWeatherTime\030" +
      "\007 \001(\r\022\030\n\020rainyWeatherTime\030\010 \001(\r\"i\n\rLocat",
      "ionDelta\022\025\n\rstartLatitude\030\001 \001(\017\022\026\n\016start" +
      "Longitude\030\002 \001(\017\022\023\n\013endLatitude\030\003 \001(\017\022\024\n\014" +
      "endLongitude\030\004 \001(\017\"\'\n\rDistanceDelta\022\026\n\016t" +
      "ravelDistance\030\001 \001(\r\"d\n\022AccelerometerDelt" +
      "a\022\033\n\023hardAccelerationQty\030\007 \001(\r\022\034\n\024breakA" +
      "ccelerationQty\030\010 \001(\r\022\023\n\013hardTurnQty\030\t \001(" +
      "\r\"D\n\tHistogram\022\020\n\010slotSize\030\001 \001(\r\022\016\n\006valu" +
      "es\030\002 \003(\r\022\025\n\rinvalidValues\030\003 \001(\r\"\235\003\n\016Tele" +
      "metryDelta\022+\n\013deltaReason\030\001 \001(\0162\026.maxpb." +
      "DeltaReasonType\022\020\n\010driverID\030\002 \001(\004\022\020\n\010dat",
      "eTime\030\003 \001(\004\022\034\n\003rpm\030\004 \001(\0132\017.maxpb.RPMDelt" +
      "a\022 \n\005speed\030\005 \001(\0132\021.maxpb.SpeedDelta\022&\n\010i" +
      "nterval\030\006 \001(\0132\024.maxpb.DeltaInterval\022&\n\010l" +
      "ocation\030\007 \001(\0132\024.maxpb.LocationDelta\0220\n\ra" +
      "ccelerometer\030\010 \001(\0132\031.maxpb.Accelerometer" +
      "Delta\022(\n\016speedHistogram\030\t \001(\0132\020.maxpb.Hi" +
      "stogram\022&\n\010distance\030\n \001(\0132\024.maxpb.Distan" +
      "ceDelta\022&\n\014rpmHistogram\030\013 \001(\0132\020.maxpb.Hi" +
      "stogram*\220\002\n\017DeltaReasonType\022\022\n\016DR_IGNITI" +
      "ON_ON\020\000\022\023\n\017DR_IGNITION_OFF\020\001\022\020\n\014DR_DRIVE",
      "R_ID\020\002\022\016\n\nDR_JOURNEY\020\003\022\016\n\nDR_STOPPED\020\004\022\r" +
      "\n\tDR_MOVING\020\005\022\017\n\013DR_INTERVAL\020\006\022\027\n\023DR_EMB" +
      "EDDED_ACTIONS\020\007\022\r\n\tDR_HOURLY\020\010\022\017\n\013DR_POS" +
      "ITION\020\t\022\r\n\tDR_RFU_01\020\n\022\r\n\tDR_RFU_02\020\013\022\r\n" +
      "\tDR_RFU_03\020\014\022\r\n\tDR_RFU_04\020\r\022\r\n\tDR_RFU_05" +
      "\020\016"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
    internal_static_maxpb_RPMDelta_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_maxpb_RPMDelta_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_maxpb_RPMDelta_descriptor,
        new java.lang.String[] { "BlueRangeRPMInterval", "GreenRangeRPMInterval", "YellowRangeRPMInterval", "RedRangeRPMInterval", "MaxRPM", "MeanRPM", "RedRangeRPMQty", });
    internal_static_maxpb_SpeedDelta_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_maxpb_SpeedDelta_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_maxpb_SpeedDelta_descriptor,
        new java.lang.String[] { "MaxSpeedTime", "MeanSpeed", "MaxSpeedQty", "MaxRainySpeedTime", "MeanRainySpeed", "MaxRainySpeedQty", "SpeedOnNeutralTime", "SpeedOnNeutralQty", "MaxSpeed", "MaxRainySpeed", "MaxSpeedLimit", "MaxRainySpeedLimit", });
    internal_static_maxpb_GearInterval_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_maxpb_GearInterval_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_maxpb_GearInterval_descriptor,
        new java.lang.String[] { "GearNumber", "Interval", });
    internal_static_maxpb_DeltaInterval_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_maxpb_DeltaInterval_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_maxpb_DeltaInterval_descriptor,
        new java.lang.String[] { "DeltaTime", "MovingTime", "StoppedTime", "EngineOnTime", "CluchTime", "GearTime", "DryWeatherTime", "RainyWeatherTime", });
    internal_static_maxpb_LocationDelta_descriptor =
      getDescriptor().getMessageTypes().get(4);
    internal_static_maxpb_LocationDelta_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_maxpb_LocationDelta_descriptor,
        new java.lang.String[] { "StartLatitude", "StartLongitude", "EndLatitude", "EndLongitude", });
    internal_static_maxpb_DistanceDelta_descriptor =
      getDescriptor().getMessageTypes().get(5);
    internal_static_maxpb_DistanceDelta_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_maxpb_DistanceDelta_descriptor,
        new java.lang.String[] { "TravelDistance", });
    internal_static_maxpb_AccelerometerDelta_descriptor =
      getDescriptor().getMessageTypes().get(6);
    internal_static_maxpb_AccelerometerDelta_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_maxpb_AccelerometerDelta_descriptor,
        new java.lang.String[] { "HardAccelerationQty", "BreakAccelerationQty", "HardTurnQty", });
    internal_static_maxpb_Histogram_descriptor =
      getDescriptor().getMessageTypes().get(7);
    internal_static_maxpb_Histogram_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_maxpb_Histogram_descriptor,
        new java.lang.String[] { "SlotSize", "Values", "InvalidValues", });
    internal_static_maxpb_TelemetryDelta_descriptor =
      getDescriptor().getMessageTypes().get(8);
    internal_static_maxpb_TelemetryDelta_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_maxpb_TelemetryDelta_descriptor,
        new java.lang.String[] { "DeltaReason", "DriverID", "DateTime", "Rpm", "Speed", "Interval", "Location", "Accelerometer", "SpeedHistogram", "Distance", "RpmHistogram", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
