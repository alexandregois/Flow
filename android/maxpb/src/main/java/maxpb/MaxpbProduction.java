// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: maxpb_production.proto

package maxpb;

public final class MaxpbProduction {
  private MaxpbProduction() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  /**
   * Protobuf enum {@code maxpb.Color}
   */
  public enum Color
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>COL_NONE = 0;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    COL_NONE(0, 0),
    /**
     * <code>COL_RED = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    COL_RED(1, 1),
    /**
     * <code>COL_GREEN = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    COL_GREEN(2, 2),
    /**
     * <code>COL_ORANGE = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    COL_ORANGE(3, 3),
    /**
     * <code>COL_RFU_01 = 4;</code>
     *
     * <pre>
     *&#47;&#64;excluded SupportedBy:
     * </pre>
     */
    COL_RFU_01(4, 4),
    /**
     * <code>COL_RFU_02 = 5;</code>
     *
     * <pre>
     *&#47;&#64;excluded SupportedBy:
     * </pre>
     */
    COL_RFU_02(5, 5),
    /**
     * <code>COL_RFU_03 = 6;</code>
     *
     * <pre>
     *&#47;&#64;excluded SupportedBy:
     * </pre>
     */
    COL_RFU_03(6, 6),
    /**
     * <code>COL_RFU_04 = 7;</code>
     *
     * <pre>
     *&#47;&#64;excluded SupportedBy:
     * </pre>
     */
    COL_RFU_04(7, 7),
    /**
     * <code>COL_RFU_05 = 8;</code>
     *
     * <pre>
     *&#47;&#64;excluded SupportedBy:
     * </pre>
     */
    COL_RFU_05(8, 8),
    ;

    /**
     * <code>COL_NONE = 0;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public static final int COL_NONE_VALUE = 0;
    /**
     * <code>COL_RED = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public static final int COL_RED_VALUE = 1;
    /**
     * <code>COL_GREEN = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public static final int COL_GREEN_VALUE = 2;
    /**
     * <code>COL_ORANGE = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public static final int COL_ORANGE_VALUE = 3;
    /**
     * <code>COL_RFU_01 = 4;</code>
     *
     * <pre>
     *&#47;&#64;excluded SupportedBy:
     * </pre>
     */
    public static final int COL_RFU_01_VALUE = 4;
    /**
     * <code>COL_RFU_02 = 5;</code>
     *
     * <pre>
     *&#47;&#64;excluded SupportedBy:
     * </pre>
     */
    public static final int COL_RFU_02_VALUE = 5;
    /**
     * <code>COL_RFU_03 = 6;</code>
     *
     * <pre>
     *&#47;&#64;excluded SupportedBy:
     * </pre>
     */
    public static final int COL_RFU_03_VALUE = 6;
    /**
     * <code>COL_RFU_04 = 7;</code>
     *
     * <pre>
     *&#47;&#64;excluded SupportedBy:
     * </pre>
     */
    public static final int COL_RFU_04_VALUE = 7;
    /**
     * <code>COL_RFU_05 = 8;</code>
     *
     * <pre>
     *&#47;&#64;excluded SupportedBy:
     * </pre>
     */
    public static final int COL_RFU_05_VALUE = 8;


    public final int getNumber() { return value; }

    public static Color valueOf(int value) {
      switch (value) {
        case 0: return COL_NONE;
        case 1: return COL_RED;
        case 2: return COL_GREEN;
        case 3: return COL_ORANGE;
        case 4: return COL_RFU_01;
        case 5: return COL_RFU_02;
        case 6: return COL_RFU_03;
        case 7: return COL_RFU_04;
        case 8: return COL_RFU_05;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<Color>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<Color>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<Color>() {
            public Color findValueByNumber(int number) {
              return Color.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return maxpb.MaxpbProduction.getDescriptor().getEnumTypes().get(0);
    }

    private static final Color[] VALUES = values();

    public static Color valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private Color(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:maxpb.Color)
  }

  /**
   * Protobuf enum {@code maxpb.Creg}
   */
  public enum Creg
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>CREG_NOT_REGISTERED = 0;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    CREG_NOT_REGISTERED(0, 0),
    /**
     * <code>CREG_REGISTERED = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    CREG_REGISTERED(1, 1),
    /**
     * <code>CREG_SEARCHING = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    CREG_SEARCHING(2, 2),
    /**
     * <code>CREG_DENIED = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    CREG_DENIED(3, 3),
    /**
     * <code>CREG_UNKNOWN = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    CREG_UNKNOWN(4, 4),
    /**
     * <code>CREG_ROAMING = 5;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    CREG_ROAMING(5, 5),
    /**
     * <code>CREG_RFU_01 = 6;</code>
     *
     * <pre>
     *&#47;&#64;excluded SupportedBy:
     * </pre>
     */
    CREG_RFU_01(6, 6),
    /**
     * <code>CREG_RFU_02 = 7;</code>
     *
     * <pre>
     *&#47;&#64;excluded SupportedBy:
     * </pre>
     */
    CREG_RFU_02(7, 7),
    /**
     * <code>CREG_RFU_03 = 8;</code>
     *
     * <pre>
     *&#47;&#64;excluded SupportedBy:
     * </pre>
     */
    CREG_RFU_03(8, 8),
    /**
     * <code>CREG_RFU_04 = 9;</code>
     *
     * <pre>
     *&#47;&#64;excluded SupportedBy:
     * </pre>
     */
    CREG_RFU_04(9, 9),
    /**
     * <code>CREG_RFU_05 = 10;</code>
     *
     * <pre>
     *&#47;&#64;excluded SupportedBy:
     * </pre>
     */
    CREG_RFU_05(10, 10),
    ;

    /**
     * <code>CREG_NOT_REGISTERED = 0;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public static final int CREG_NOT_REGISTERED_VALUE = 0;
    /**
     * <code>CREG_REGISTERED = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public static final int CREG_REGISTERED_VALUE = 1;
    /**
     * <code>CREG_SEARCHING = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public static final int CREG_SEARCHING_VALUE = 2;
    /**
     * <code>CREG_DENIED = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public static final int CREG_DENIED_VALUE = 3;
    /**
     * <code>CREG_UNKNOWN = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public static final int CREG_UNKNOWN_VALUE = 4;
    /**
     * <code>CREG_ROAMING = 5;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public static final int CREG_ROAMING_VALUE = 5;
    /**
     * <code>CREG_RFU_01 = 6;</code>
     *
     * <pre>
     *&#47;&#64;excluded SupportedBy:
     * </pre>
     */
    public static final int CREG_RFU_01_VALUE = 6;
    /**
     * <code>CREG_RFU_02 = 7;</code>
     *
     * <pre>
     *&#47;&#64;excluded SupportedBy:
     * </pre>
     */
    public static final int CREG_RFU_02_VALUE = 7;
    /**
     * <code>CREG_RFU_03 = 8;</code>
     *
     * <pre>
     *&#47;&#64;excluded SupportedBy:
     * </pre>
     */
    public static final int CREG_RFU_03_VALUE = 8;
    /**
     * <code>CREG_RFU_04 = 9;</code>
     *
     * <pre>
     *&#47;&#64;excluded SupportedBy:
     * </pre>
     */
    public static final int CREG_RFU_04_VALUE = 9;
    /**
     * <code>CREG_RFU_05 = 10;</code>
     *
     * <pre>
     *&#47;&#64;excluded SupportedBy:
     * </pre>
     */
    public static final int CREG_RFU_05_VALUE = 10;


    public final int getNumber() { return value; }

    public static Creg valueOf(int value) {
      switch (value) {
        case 0: return CREG_NOT_REGISTERED;
        case 1: return CREG_REGISTERED;
        case 2: return CREG_SEARCHING;
        case 3: return CREG_DENIED;
        case 4: return CREG_UNKNOWN;
        case 5: return CREG_ROAMING;
        case 6: return CREG_RFU_01;
        case 7: return CREG_RFU_02;
        case 8: return CREG_RFU_03;
        case 9: return CREG_RFU_04;
        case 10: return CREG_RFU_05;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<Creg>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<Creg>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<Creg>() {
            public Creg findValueByNumber(int number) {
              return Creg.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return maxpb.MaxpbProduction.getDescriptor().getEnumTypes().get(1);
    }

    private static final Creg[] VALUES = values();

    public static Creg valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private Creg(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:maxpb.Creg)
  }

  public interface TestBeginOrBuilder extends
      // @@protoc_insertion_point(interface_extends:maxpb.TestBegin)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional bool accelerometer = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasAccelerometer();
    /**
     * <code>optional bool accelerometer = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean getAccelerometer();

    /**
     * <code>optional bool accelerometerCalibrate = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    boolean hasAccelerometerCalibrate();
    /**
     * <code>optional bool accelerometerCalibrate = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    boolean getAccelerometerCalibrate();

    /**
     * <code>optional bool can = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    boolean hasCan();
    /**
     * <code>optional bool can = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    boolean getCan();

    /**
     * <code>optional bool audio = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    boolean hasAudio();
    /**
     * <code>optional bool audio = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    boolean getAudio();

    /**
     * <code>optional bool formatMemory = 5;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    boolean hasFormatMemory();
    /**
     * <code>optional bool formatMemory = 5;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    boolean getFormatMemory();

    /**
     * <code>optional bool gpsNmea = 6;</code>
     *
     * <pre>
     *&#47; Communication with GPS IC, Fix, or raw data - SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasGpsNmea();
    /**
     * <code>optional bool gpsNmea = 6;</code>
     *
     * <pre>
     *&#47; Communication with GPS IC, Fix, or raw data - SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean getGpsNmea();

    /**
     * <code>optional .maxpb.Color ledA = 7;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasLedA();
    /**
     * <code>optional .maxpb.Color ledA = 7;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbProduction.Color getLedA();

    /**
     * <code>optional .maxpb.Color ledB = 8;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    boolean hasLedB();
    /**
     * <code>optional .maxpb.Color ledB = 8;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    maxpb.MaxpbProduction.Color getLedB();

    /**
     * <code>optional bool temperature = 9;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasTemperature();
    /**
     * <code>optional bool temperature = 9;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean getTemperature();

    /**
     * <code>optional bool sdCard = 10;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    boolean hasSdCard();
    /**
     * <code>optional bool sdCard = 10;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    boolean getSdCard();

    /**
     * <code>optional bool tamper = 11;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    boolean hasTamper();
    /**
     * <code>optional bool tamper = 11;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    boolean getTamper();

    /**
     * <code>optional bool rs485 = 12;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    boolean hasRs485();
    /**
     * <code>optional bool rs485 = 12;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    boolean getRs485();

    /**
     * <code>optional bool extVoltage = 13;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasExtVoltage();
    /**
     * <code>optional bool extVoltage = 13;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean getExtVoltage();

    /**
     * <code>optional bool io = 14;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasIo();
    /**
     * <code>optional bool io = 14;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean getIo();

    /**
     * <code>optional bool simCard1 = 15;</code>
     *
     * <pre>
     *&#47; Iccid - SupportedBy: 
     * </pre>
     */
    boolean hasSimCard1();
    /**
     * <code>optional bool simCard1 = 15;</code>
     *
     * <pre>
     *&#47; Iccid - SupportedBy: 
     * </pre>
     */
    boolean getSimCard1();

    /**
     * <code>optional bool simCard2 = 16;</code>
     *
     * <pre>
     *&#47; Iccid - SupportedBy: 
     * </pre>
     */
    boolean hasSimCard2();
    /**
     * <code>optional bool simCard2 = 16;</code>
     *
     * <pre>
     *&#47; Iccid - SupportedBy: 
     * </pre>
     */
    boolean getSimCard2();

    /**
     * <code>optional uint32 sleepMode = 17;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasSleepMode();
    /**
     * <code>optional uint32 sleepMode = 17;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    int getSleepMode();

    /**
     * <code>optional uint32 stockMode = 18;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    boolean hasStockMode();
    /**
     * <code>optional uint32 stockMode = 18;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    int getStockMode();

    /**
     * <code>optional bool rtc = 19;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    boolean hasRtc();
    /**
     * <code>optional bool rtc = 19;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    boolean getRtc();

    /**
     * <code>optional bool ramMemory = 21;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    boolean hasRamMemory();
    /**
     * <code>optional bool ramMemory = 21;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    boolean getRamMemory();

    /**
     * <code>optional bool norMemory = 22;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    boolean hasNorMemory();
    /**
     * <code>optional bool norMemory = 22;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    boolean getNorMemory();

    /**
     * <code>optional bool batteryUnpluged = 23;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasBatteryUnpluged();
    /**
     * <code>optional bool batteryUnpluged = 23;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean getBatteryUnpluged();

    /**
     * <code>optional bool batteryCharging = 24;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasBatteryCharging();
    /**
     * <code>optional bool batteryCharging = 24;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean getBatteryCharging();

    /**
     * <code>optional bool rs232 = 25;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasRs232();
    /**
     * <code>optional bool rs232 = 25;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean getRs232();

    /**
     * <code>optional bool satellite = 26;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    boolean hasSatellite();
    /**
     * <code>optional bool satellite = 26;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    boolean getSatellite();

    /**
     * <code>optional bool onewire = 27;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    boolean hasOnewire();
    /**
     * <code>optional bool onewire = 27;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    boolean getOnewire();

    /**
     * <code>optional bool currentMinimal = 28;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    boolean hasCurrentMinimal();
    /**
     * <code>optional bool currentMinimal = 28;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    boolean getCurrentMinimal();

    /**
     * <code>optional bool currentTypical = 29;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    boolean hasCurrentTypical();
    /**
     * <code>optional bool currentTypical = 29;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    boolean getCurrentTypical();

    /**
     * <code>optional bool currentMaximum = 30;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    boolean hasCurrentMaximum();
    /**
     * <code>optional bool currentMaximum = 30;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    boolean getCurrentMaximum();

    /**
     * <code>optional bool loadDump = 31;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    boolean hasLoadDump();
    /**
     * <code>optional bool loadDump = 31;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    boolean getLoadDump();

    /**
     * <code>optional bool fwClient = 33;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    boolean hasFwClient();
    /**
     * <code>optional bool fwClient = 33;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    boolean getFwClient();

    /**
     * <code>optional bool usb = 37;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    boolean hasUsb();
    /**
     * <code>optional bool usb = 37;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    boolean getUsb();

    /**
     * <code>optional bool batteryVoltage = 39;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasBatteryVoltage();
    /**
     * <code>optional bool batteryVoltage = 39;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean getBatteryVoltage();

    /**
     * <code>optional bool mic = 40;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    boolean hasMic();
    /**
     * <code>optional bool mic = 40;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    boolean getMic();

    /**
     * <code>optional bool gpsAntennaInt = 41;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    boolean hasGpsAntennaInt();
    /**
     * <code>optional bool gpsAntennaInt = 41;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    boolean getGpsAntennaInt();

    /**
     * <code>optional bool gpsAntennaExt = 42;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    boolean hasGpsAntennaExt();
    /**
     * <code>optional bool gpsAntennaExt = 42;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    boolean getGpsAntennaExt();

    /**
     * <code>optional bool resetButton = 50;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    boolean hasResetButton();
    /**
     * <code>optional bool resetButton = 50;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    boolean getResetButton();

    /**
     * <code>optional bool outputHSShort = 62;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    boolean hasOutputHSShort();
    /**
     * <code>optional bool outputHSShort = 62;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    boolean getOutputHSShort();

    /**
     * <code>optional bool gprs = 63;</code>
     *
     * <pre>
     *&#47; CREG valid - SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasGprs();
    /**
     * <code>optional bool gprs = 63;</code>
     *
     * <pre>
     *&#47; CREG valid - SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean getGprs();

    /**
     * <code>optional bool pep = 64;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    boolean hasPep();
    /**
     * <code>optional bool pep = 64;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    boolean getPep();

    /**
     * <code>optional bool closedHousing = 65;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    boolean hasClosedHousing();
    /**
     * <code>optional bool closedHousing = 65;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    boolean getClosedHousing();

    /**
     * <code>optional bool cftFlag = 66;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasCftFlag();
    /**
     * <code>optional bool cftFlag = 66;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean getCftFlag();

    /**
     * <code>optional bool lora = 67;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasLora();
    /**
     * <code>optional bool lora = 67;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean getLora();

    /**
     * <code>optional bool bluetooth = 68;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasBluetooth();
    /**
     * <code>optional bool bluetooth = 68;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean getBluetooth();

    /**
     * <code>optional bool gsensor = 69;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    boolean hasGsensor();
    /**
     * <code>optional bool gsensor = 69;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    boolean getGsensor();

    /**
     * <code>optional bool externalMemory = 70;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    boolean hasExternalMemory();
    /**
     * <code>optional bool externalMemory = 70;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    boolean getExternalMemory();

    /**
     * <code>optional bool consumption = 71;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    boolean hasConsumption();
    /**
     * <code>optional bool consumption = 71;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    boolean getConsumption();

    /**
     * <code>optional bool zigbee = 72;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    boolean hasZigbee();
    /**
     * <code>optional bool zigbee = 72;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    boolean getZigbee();

    /**
     * <code>optional bool retestIO = 73;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    boolean hasRetestIO();
    /**
     * <code>optional bool retestIO = 73;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    boolean getRetestIO();

    /**
     * <code>optional bool retestBattery = 74;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    boolean hasRetestBattery();
    /**
     * <code>optional bool retestBattery = 74;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    boolean getRetestBattery();

    /**
     * <code>optional bool retestGPS = 75;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    boolean hasRetestGPS();
    /**
     * <code>optional bool retestGPS = 75;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    boolean getRetestGPS();

    /**
     * <code>optional bool enterTestMode = 126;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasEnterTestMode();
    /**
     * <code>optional bool enterTestMode = 126;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean getEnterTestMode();

    /**
     * <code>optional bool exitTestMode = 127;</code>
     *
     * <pre>
     *&#47; Save result on flash - SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasExitTestMode();
    /**
     * <code>optional bool exitTestMode = 127;</code>
     *
     * <pre>
     *&#47; Save result on flash - SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean getExitTestMode();
  }
  /**
   * Protobuf type {@code maxpb.TestBegin}
   *
   * <pre>
   *&#47;Executes production tests
   * </pre>
   */
  public static final class TestBegin extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:maxpb.TestBegin)
      TestBeginOrBuilder {
    // Use TestBegin.newBuilder() to construct.
    private TestBegin(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private TestBegin(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final TestBegin defaultInstance;
    public static TestBegin getDefaultInstance() {
      return defaultInstance;
    }

    public TestBegin getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private TestBegin(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      int mutable_bitField1_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              accelerometer_ = input.readBool();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              accelerometerCalibrate_ = input.readBool();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              can_ = input.readBool();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              audio_ = input.readBool();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              formatMemory_ = input.readBool();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              gpsNmea_ = input.readBool();
              break;
            }
            case 56: {
              int rawValue = input.readEnum();
              maxpb.MaxpbProduction.Color value = maxpb.MaxpbProduction.Color.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(7, rawValue);
              } else {
                bitField0_ |= 0x00000040;
                ledA_ = value;
              }
              break;
            }
            case 64: {
              int rawValue = input.readEnum();
              maxpb.MaxpbProduction.Color value = maxpb.MaxpbProduction.Color.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(8, rawValue);
              } else {
                bitField0_ |= 0x00000080;
                ledB_ = value;
              }
              break;
            }
            case 72: {
              bitField0_ |= 0x00000100;
              temperature_ = input.readBool();
              break;
            }
            case 80: {
              bitField0_ |= 0x00000200;
              sdCard_ = input.readBool();
              break;
            }
            case 88: {
              bitField0_ |= 0x00000400;
              tamper_ = input.readBool();
              break;
            }
            case 96: {
              bitField0_ |= 0x00000800;
              rs485_ = input.readBool();
              break;
            }
            case 104: {
              bitField0_ |= 0x00001000;
              extVoltage_ = input.readBool();
              break;
            }
            case 112: {
              bitField0_ |= 0x00002000;
              io_ = input.readBool();
              break;
            }
            case 120: {
              bitField0_ |= 0x00004000;
              simCard1_ = input.readBool();
              break;
            }
            case 128: {
              bitField0_ |= 0x00008000;
              simCard2_ = input.readBool();
              break;
            }
            case 136: {
              bitField0_ |= 0x00010000;
              sleepMode_ = input.readUInt32();
              break;
            }
            case 144: {
              bitField0_ |= 0x00020000;
              stockMode_ = input.readUInt32();
              break;
            }
            case 152: {
              bitField0_ |= 0x00040000;
              rtc_ = input.readBool();
              break;
            }
            case 168: {
              bitField0_ |= 0x00080000;
              ramMemory_ = input.readBool();
              break;
            }
            case 176: {
              bitField0_ |= 0x00100000;
              norMemory_ = input.readBool();
              break;
            }
            case 184: {
              bitField0_ |= 0x00200000;
              batteryUnpluged_ = input.readBool();
              break;
            }
            case 192: {
              bitField0_ |= 0x00400000;
              batteryCharging_ = input.readBool();
              break;
            }
            case 200: {
              bitField0_ |= 0x00800000;
              rs232_ = input.readBool();
              break;
            }
            case 208: {
              bitField0_ |= 0x01000000;
              satellite_ = input.readBool();
              break;
            }
            case 216: {
              bitField0_ |= 0x02000000;
              onewire_ = input.readBool();
              break;
            }
            case 224: {
              bitField0_ |= 0x04000000;
              currentMinimal_ = input.readBool();
              break;
            }
            case 232: {
              bitField0_ |= 0x08000000;
              currentTypical_ = input.readBool();
              break;
            }
            case 240: {
              bitField0_ |= 0x10000000;
              currentMaximum_ = input.readBool();
              break;
            }
            case 248: {
              bitField0_ |= 0x20000000;
              loadDump_ = input.readBool();
              break;
            }
            case 264: {
              bitField0_ |= 0x40000000;
              fwClient_ = input.readBool();
              break;
            }
            case 296: {
              bitField0_ |= 0x80000000;
              usb_ = input.readBool();
              break;
            }
            case 312: {
              bitField1_ |= 0x00000001;
              batteryVoltage_ = input.readBool();
              break;
            }
            case 320: {
              bitField1_ |= 0x00000002;
              mic_ = input.readBool();
              break;
            }
            case 328: {
              bitField1_ |= 0x00000004;
              gpsAntennaInt_ = input.readBool();
              break;
            }
            case 336: {
              bitField1_ |= 0x00000008;
              gpsAntennaExt_ = input.readBool();
              break;
            }
            case 400: {
              bitField1_ |= 0x00000010;
              resetButton_ = input.readBool();
              break;
            }
            case 496: {
              bitField1_ |= 0x00000020;
              outputHSShort_ = input.readBool();
              break;
            }
            case 504: {
              bitField1_ |= 0x00000040;
              gprs_ = input.readBool();
              break;
            }
            case 512: {
              bitField1_ |= 0x00000080;
              pep_ = input.readBool();
              break;
            }
            case 520: {
              bitField1_ |= 0x00000100;
              closedHousing_ = input.readBool();
              break;
            }
            case 528: {
              bitField1_ |= 0x00000200;
              cftFlag_ = input.readBool();
              break;
            }
            case 536: {
              bitField1_ |= 0x00000400;
              lora_ = input.readBool();
              break;
            }
            case 544: {
              bitField1_ |= 0x00000800;
              bluetooth_ = input.readBool();
              break;
            }
            case 552: {
              bitField1_ |= 0x00001000;
              gsensor_ = input.readBool();
              break;
            }
            case 560: {
              bitField1_ |= 0x00002000;
              externalMemory_ = input.readBool();
              break;
            }
            case 568: {
              bitField1_ |= 0x00004000;
              consumption_ = input.readBool();
              break;
            }
            case 576: {
              bitField1_ |= 0x00008000;
              zigbee_ = input.readBool();
              break;
            }
            case 584: {
              bitField1_ |= 0x00010000;
              retestIO_ = input.readBool();
              break;
            }
            case 592: {
              bitField1_ |= 0x00020000;
              retestBattery_ = input.readBool();
              break;
            }
            case 600: {
              bitField1_ |= 0x00040000;
              retestGPS_ = input.readBool();
              break;
            }
            case 1008: {
              bitField1_ |= 0x00080000;
              enterTestMode_ = input.readBool();
              break;
            }
            case 1016: {
              bitField1_ |= 0x00100000;
              exitTestMode_ = input.readBool();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return maxpb.MaxpbProduction.internal_static_maxpb_TestBegin_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return maxpb.MaxpbProduction.internal_static_maxpb_TestBegin_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              maxpb.MaxpbProduction.TestBegin.class, maxpb.MaxpbProduction.TestBegin.Builder.class);
    }

    public static com.google.protobuf.Parser<TestBegin> PARSER =
        new com.google.protobuf.AbstractParser<TestBegin>() {
      public TestBegin parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new TestBegin(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<TestBegin> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    private int bitField1_;
    public static final int ACCELEROMETER_FIELD_NUMBER = 1;
    private boolean accelerometer_;
    /**
     * <code>optional bool accelerometer = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasAccelerometer() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional bool accelerometer = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean getAccelerometer() {
      return accelerometer_;
    }

    public static final int ACCELEROMETERCALIBRATE_FIELD_NUMBER = 2;
    private boolean accelerometerCalibrate_;
    /**
     * <code>optional bool accelerometerCalibrate = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public boolean hasAccelerometerCalibrate() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional bool accelerometerCalibrate = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public boolean getAccelerometerCalibrate() {
      return accelerometerCalibrate_;
    }

    public static final int CAN_FIELD_NUMBER = 3;
    private boolean can_;
    /**
     * <code>optional bool can = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public boolean hasCan() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional bool can = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public boolean getCan() {
      return can_;
    }

    public static final int AUDIO_FIELD_NUMBER = 4;
    private boolean audio_;
    /**
     * <code>optional bool audio = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public boolean hasAudio() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional bool audio = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public boolean getAudio() {
      return audio_;
    }

    public static final int FORMATMEMORY_FIELD_NUMBER = 5;
    private boolean formatMemory_;
    /**
     * <code>optional bool formatMemory = 5;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public boolean hasFormatMemory() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional bool formatMemory = 5;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public boolean getFormatMemory() {
      return formatMemory_;
    }

    public static final int GPSNMEA_FIELD_NUMBER = 6;
    private boolean gpsNmea_;
    /**
     * <code>optional bool gpsNmea = 6;</code>
     *
     * <pre>
     *&#47; Communication with GPS IC, Fix, or raw data - SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasGpsNmea() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional bool gpsNmea = 6;</code>
     *
     * <pre>
     *&#47; Communication with GPS IC, Fix, or raw data - SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean getGpsNmea() {
      return gpsNmea_;
    }

    public static final int LEDA_FIELD_NUMBER = 7;
    private maxpb.MaxpbProduction.Color ledA_;
    /**
     * <code>optional .maxpb.Color ledA = 7;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasLedA() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional .maxpb.Color ledA = 7;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbProduction.Color getLedA() {
      return ledA_;
    }

    public static final int LEDB_FIELD_NUMBER = 8;
    private maxpb.MaxpbProduction.Color ledB_;
    /**
     * <code>optional .maxpb.Color ledB = 8;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public boolean hasLedB() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional .maxpb.Color ledB = 8;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public maxpb.MaxpbProduction.Color getLedB() {
      return ledB_;
    }

    public static final int TEMPERATURE_FIELD_NUMBER = 9;
    private boolean temperature_;
    /**
     * <code>optional bool temperature = 9;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasTemperature() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional bool temperature = 9;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean getTemperature() {
      return temperature_;
    }

    public static final int SDCARD_FIELD_NUMBER = 10;
    private boolean sdCard_;
    /**
     * <code>optional bool sdCard = 10;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public boolean hasSdCard() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional bool sdCard = 10;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public boolean getSdCard() {
      return sdCard_;
    }

    public static final int TAMPER_FIELD_NUMBER = 11;
    private boolean tamper_;
    /**
     * <code>optional bool tamper = 11;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public boolean hasTamper() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional bool tamper = 11;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public boolean getTamper() {
      return tamper_;
    }

    public static final int RS485_FIELD_NUMBER = 12;
    private boolean rs485_;
    /**
     * <code>optional bool rs485 = 12;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public boolean hasRs485() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional bool rs485 = 12;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public boolean getRs485() {
      return rs485_;
    }

    public static final int EXTVOLTAGE_FIELD_NUMBER = 13;
    private boolean extVoltage_;
    /**
     * <code>optional bool extVoltage = 13;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasExtVoltage() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>optional bool extVoltage = 13;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean getExtVoltage() {
      return extVoltage_;
    }

    public static final int IO_FIELD_NUMBER = 14;
    private boolean io_;
    /**
     * <code>optional bool io = 14;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasIo() {
      return ((bitField0_ & 0x00002000) == 0x00002000);
    }
    /**
     * <code>optional bool io = 14;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean getIo() {
      return io_;
    }

    public static final int SIMCARD1_FIELD_NUMBER = 15;
    private boolean simCard1_;
    /**
     * <code>optional bool simCard1 = 15;</code>
     *
     * <pre>
     *&#47; Iccid - SupportedBy: 
     * </pre>
     */
    public boolean hasSimCard1() {
      return ((bitField0_ & 0x00004000) == 0x00004000);
    }
    /**
     * <code>optional bool simCard1 = 15;</code>
     *
     * <pre>
     *&#47; Iccid - SupportedBy: 
     * </pre>
     */
    public boolean getSimCard1() {
      return simCard1_;
    }

    public static final int SIMCARD2_FIELD_NUMBER = 16;
    private boolean simCard2_;
    /**
     * <code>optional bool simCard2 = 16;</code>
     *
     * <pre>
     *&#47; Iccid - SupportedBy: 
     * </pre>
     */
    public boolean hasSimCard2() {
      return ((bitField0_ & 0x00008000) == 0x00008000);
    }
    /**
     * <code>optional bool simCard2 = 16;</code>
     *
     * <pre>
     *&#47; Iccid - SupportedBy: 
     * </pre>
     */
    public boolean getSimCard2() {
      return simCard2_;
    }

    public static final int SLEEPMODE_FIELD_NUMBER = 17;
    private int sleepMode_;
    /**
     * <code>optional uint32 sleepMode = 17;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasSleepMode() {
      return ((bitField0_ & 0x00010000) == 0x00010000);
    }
    /**
     * <code>optional uint32 sleepMode = 17;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public int getSleepMode() {
      return sleepMode_;
    }

    public static final int STOCKMODE_FIELD_NUMBER = 18;
    private int stockMode_;
    /**
     * <code>optional uint32 stockMode = 18;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public boolean hasStockMode() {
      return ((bitField0_ & 0x00020000) == 0x00020000);
    }
    /**
     * <code>optional uint32 stockMode = 18;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public int getStockMode() {
      return stockMode_;
    }

    public static final int RTC_FIELD_NUMBER = 19;
    private boolean rtc_;
    /**
     * <code>optional bool rtc = 19;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public boolean hasRtc() {
      return ((bitField0_ & 0x00040000) == 0x00040000);
    }
    /**
     * <code>optional bool rtc = 19;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public boolean getRtc() {
      return rtc_;
    }

    public static final int RAMMEMORY_FIELD_NUMBER = 21;
    private boolean ramMemory_;
    /**
     * <code>optional bool ramMemory = 21;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public boolean hasRamMemory() {
      return ((bitField0_ & 0x00080000) == 0x00080000);
    }
    /**
     * <code>optional bool ramMemory = 21;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public boolean getRamMemory() {
      return ramMemory_;
    }

    public static final int NORMEMORY_FIELD_NUMBER = 22;
    private boolean norMemory_;
    /**
     * <code>optional bool norMemory = 22;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public boolean hasNorMemory() {
      return ((bitField0_ & 0x00100000) == 0x00100000);
    }
    /**
     * <code>optional bool norMemory = 22;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public boolean getNorMemory() {
      return norMemory_;
    }

    public static final int BATTERYUNPLUGED_FIELD_NUMBER = 23;
    private boolean batteryUnpluged_;
    /**
     * <code>optional bool batteryUnpluged = 23;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasBatteryUnpluged() {
      return ((bitField0_ & 0x00200000) == 0x00200000);
    }
    /**
     * <code>optional bool batteryUnpluged = 23;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean getBatteryUnpluged() {
      return batteryUnpluged_;
    }

    public static final int BATTERYCHARGING_FIELD_NUMBER = 24;
    private boolean batteryCharging_;
    /**
     * <code>optional bool batteryCharging = 24;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasBatteryCharging() {
      return ((bitField0_ & 0x00400000) == 0x00400000);
    }
    /**
     * <code>optional bool batteryCharging = 24;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean getBatteryCharging() {
      return batteryCharging_;
    }

    public static final int RS232_FIELD_NUMBER = 25;
    private boolean rs232_;
    /**
     * <code>optional bool rs232 = 25;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasRs232() {
      return ((bitField0_ & 0x00800000) == 0x00800000);
    }
    /**
     * <code>optional bool rs232 = 25;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean getRs232() {
      return rs232_;
    }

    public static final int SATELLITE_FIELD_NUMBER = 26;
    private boolean satellite_;
    /**
     * <code>optional bool satellite = 26;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public boolean hasSatellite() {
      return ((bitField0_ & 0x01000000) == 0x01000000);
    }
    /**
     * <code>optional bool satellite = 26;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public boolean getSatellite() {
      return satellite_;
    }

    public static final int ONEWIRE_FIELD_NUMBER = 27;
    private boolean onewire_;
    /**
     * <code>optional bool onewire = 27;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public boolean hasOnewire() {
      return ((bitField0_ & 0x02000000) == 0x02000000);
    }
    /**
     * <code>optional bool onewire = 27;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public boolean getOnewire() {
      return onewire_;
    }

    public static final int CURRENTMINIMAL_FIELD_NUMBER = 28;
    private boolean currentMinimal_;
    /**
     * <code>optional bool currentMinimal = 28;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public boolean hasCurrentMinimal() {
      return ((bitField0_ & 0x04000000) == 0x04000000);
    }
    /**
     * <code>optional bool currentMinimal = 28;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public boolean getCurrentMinimal() {
      return currentMinimal_;
    }

    public static final int CURRENTTYPICAL_FIELD_NUMBER = 29;
    private boolean currentTypical_;
    /**
     * <code>optional bool currentTypical = 29;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public boolean hasCurrentTypical() {
      return ((bitField0_ & 0x08000000) == 0x08000000);
    }
    /**
     * <code>optional bool currentTypical = 29;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public boolean getCurrentTypical() {
      return currentTypical_;
    }

    public static final int CURRENTMAXIMUM_FIELD_NUMBER = 30;
    private boolean currentMaximum_;
    /**
     * <code>optional bool currentMaximum = 30;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public boolean hasCurrentMaximum() {
      return ((bitField0_ & 0x10000000) == 0x10000000);
    }
    /**
     * <code>optional bool currentMaximum = 30;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public boolean getCurrentMaximum() {
      return currentMaximum_;
    }

    public static final int LOADDUMP_FIELD_NUMBER = 31;
    private boolean loadDump_;
    /**
     * <code>optional bool loadDump = 31;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public boolean hasLoadDump() {
      return ((bitField0_ & 0x20000000) == 0x20000000);
    }
    /**
     * <code>optional bool loadDump = 31;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public boolean getLoadDump() {
      return loadDump_;
    }

    public static final int FWCLIENT_FIELD_NUMBER = 33;
    private boolean fwClient_;
    /**
     * <code>optional bool fwClient = 33;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public boolean hasFwClient() {
      return ((bitField0_ & 0x40000000) == 0x40000000);
    }
    /**
     * <code>optional bool fwClient = 33;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public boolean getFwClient() {
      return fwClient_;
    }

    public static final int USB_FIELD_NUMBER = 37;
    private boolean usb_;
    /**
     * <code>optional bool usb = 37;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public boolean hasUsb() {
      return ((bitField0_ & 0x80000000) == 0x80000000);
    }
    /**
     * <code>optional bool usb = 37;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public boolean getUsb() {
      return usb_;
    }

    public static final int BATTERYVOLTAGE_FIELD_NUMBER = 39;
    private boolean batteryVoltage_;
    /**
     * <code>optional bool batteryVoltage = 39;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasBatteryVoltage() {
      return ((bitField1_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional bool batteryVoltage = 39;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean getBatteryVoltage() {
      return batteryVoltage_;
    }

    public static final int MIC_FIELD_NUMBER = 40;
    private boolean mic_;
    /**
     * <code>optional bool mic = 40;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public boolean hasMic() {
      return ((bitField1_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional bool mic = 40;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public boolean getMic() {
      return mic_;
    }

    public static final int GPSANTENNAINT_FIELD_NUMBER = 41;
    private boolean gpsAntennaInt_;
    /**
     * <code>optional bool gpsAntennaInt = 41;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public boolean hasGpsAntennaInt() {
      return ((bitField1_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional bool gpsAntennaInt = 41;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public boolean getGpsAntennaInt() {
      return gpsAntennaInt_;
    }

    public static final int GPSANTENNAEXT_FIELD_NUMBER = 42;
    private boolean gpsAntennaExt_;
    /**
     * <code>optional bool gpsAntennaExt = 42;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public boolean hasGpsAntennaExt() {
      return ((bitField1_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional bool gpsAntennaExt = 42;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public boolean getGpsAntennaExt() {
      return gpsAntennaExt_;
    }

    public static final int RESETBUTTON_FIELD_NUMBER = 50;
    private boolean resetButton_;
    /**
     * <code>optional bool resetButton = 50;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public boolean hasResetButton() {
      return ((bitField1_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional bool resetButton = 50;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public boolean getResetButton() {
      return resetButton_;
    }

    public static final int OUTPUTHSSHORT_FIELD_NUMBER = 62;
    private boolean outputHSShort_;
    /**
     * <code>optional bool outputHSShort = 62;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public boolean hasOutputHSShort() {
      return ((bitField1_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional bool outputHSShort = 62;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public boolean getOutputHSShort() {
      return outputHSShort_;
    }

    public static final int GPRS_FIELD_NUMBER = 63;
    private boolean gprs_;
    /**
     * <code>optional bool gprs = 63;</code>
     *
     * <pre>
     *&#47; CREG valid - SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasGprs() {
      return ((bitField1_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional bool gprs = 63;</code>
     *
     * <pre>
     *&#47; CREG valid - SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean getGprs() {
      return gprs_;
    }

    public static final int PEP_FIELD_NUMBER = 64;
    private boolean pep_;
    /**
     * <code>optional bool pep = 64;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public boolean hasPep() {
      return ((bitField1_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional bool pep = 64;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public boolean getPep() {
      return pep_;
    }

    public static final int CLOSEDHOUSING_FIELD_NUMBER = 65;
    private boolean closedHousing_;
    /**
     * <code>optional bool closedHousing = 65;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public boolean hasClosedHousing() {
      return ((bitField1_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional bool closedHousing = 65;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public boolean getClosedHousing() {
      return closedHousing_;
    }

    public static final int CFTFLAG_FIELD_NUMBER = 66;
    private boolean cftFlag_;
    /**
     * <code>optional bool cftFlag = 66;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasCftFlag() {
      return ((bitField1_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional bool cftFlag = 66;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean getCftFlag() {
      return cftFlag_;
    }

    public static final int LORA_FIELD_NUMBER = 67;
    private boolean lora_;
    /**
     * <code>optional bool lora = 67;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasLora() {
      return ((bitField1_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional bool lora = 67;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean getLora() {
      return lora_;
    }

    public static final int BLUETOOTH_FIELD_NUMBER = 68;
    private boolean bluetooth_;
    /**
     * <code>optional bool bluetooth = 68;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasBluetooth() {
      return ((bitField1_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional bool bluetooth = 68;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean getBluetooth() {
      return bluetooth_;
    }

    public static final int GSENSOR_FIELD_NUMBER = 69;
    private boolean gsensor_;
    /**
     * <code>optional bool gsensor = 69;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    public boolean hasGsensor() {
      return ((bitField1_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>optional bool gsensor = 69;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    public boolean getGsensor() {
      return gsensor_;
    }

    public static final int EXTERNALMEMORY_FIELD_NUMBER = 70;
    private boolean externalMemory_;
    /**
     * <code>optional bool externalMemory = 70;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    public boolean hasExternalMemory() {
      return ((bitField1_ & 0x00002000) == 0x00002000);
    }
    /**
     * <code>optional bool externalMemory = 70;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    public boolean getExternalMemory() {
      return externalMemory_;
    }

    public static final int CONSUMPTION_FIELD_NUMBER = 71;
    private boolean consumption_;
    /**
     * <code>optional bool consumption = 71;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    public boolean hasConsumption() {
      return ((bitField1_ & 0x00004000) == 0x00004000);
    }
    /**
     * <code>optional bool consumption = 71;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    public boolean getConsumption() {
      return consumption_;
    }

    public static final int ZIGBEE_FIELD_NUMBER = 72;
    private boolean zigbee_;
    /**
     * <code>optional bool zigbee = 72;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    public boolean hasZigbee() {
      return ((bitField1_ & 0x00008000) == 0x00008000);
    }
    /**
     * <code>optional bool zigbee = 72;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    public boolean getZigbee() {
      return zigbee_;
    }

    public static final int RETESTIO_FIELD_NUMBER = 73;
    private boolean retestIO_;
    /**
     * <code>optional bool retestIO = 73;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    public boolean hasRetestIO() {
      return ((bitField1_ & 0x00010000) == 0x00010000);
    }
    /**
     * <code>optional bool retestIO = 73;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    public boolean getRetestIO() {
      return retestIO_;
    }

    public static final int RETESTBATTERY_FIELD_NUMBER = 74;
    private boolean retestBattery_;
    /**
     * <code>optional bool retestBattery = 74;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    public boolean hasRetestBattery() {
      return ((bitField1_ & 0x00020000) == 0x00020000);
    }
    /**
     * <code>optional bool retestBattery = 74;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    public boolean getRetestBattery() {
      return retestBattery_;
    }

    public static final int RETESTGPS_FIELD_NUMBER = 75;
    private boolean retestGPS_;
    /**
     * <code>optional bool retestGPS = 75;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    public boolean hasRetestGPS() {
      return ((bitField1_ & 0x00040000) == 0x00040000);
    }
    /**
     * <code>optional bool retestGPS = 75;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    public boolean getRetestGPS() {
      return retestGPS_;
    }

    public static final int ENTERTESTMODE_FIELD_NUMBER = 126;
    private boolean enterTestMode_;
    /**
     * <code>optional bool enterTestMode = 126;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasEnterTestMode() {
      return ((bitField1_ & 0x00080000) == 0x00080000);
    }
    /**
     * <code>optional bool enterTestMode = 126;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean getEnterTestMode() {
      return enterTestMode_;
    }

    public static final int EXITTESTMODE_FIELD_NUMBER = 127;
    private boolean exitTestMode_;
    /**
     * <code>optional bool exitTestMode = 127;</code>
     *
     * <pre>
     *&#47; Save result on flash - SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasExitTestMode() {
      return ((bitField1_ & 0x00100000) == 0x00100000);
    }
    /**
     * <code>optional bool exitTestMode = 127;</code>
     *
     * <pre>
     *&#47; Save result on flash - SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean getExitTestMode() {
      return exitTestMode_;
    }

    private void initFields() {
      accelerometer_ = false;
      accelerometerCalibrate_ = false;
      can_ = false;
      audio_ = false;
      formatMemory_ = false;
      gpsNmea_ = false;
      ledA_ = maxpb.MaxpbProduction.Color.COL_NONE;
      ledB_ = maxpb.MaxpbProduction.Color.COL_NONE;
      temperature_ = false;
      sdCard_ = false;
      tamper_ = false;
      rs485_ = false;
      extVoltage_ = false;
      io_ = false;
      simCard1_ = false;
      simCard2_ = false;
      sleepMode_ = 0;
      stockMode_ = 0;
      rtc_ = false;
      ramMemory_ = false;
      norMemory_ = false;
      batteryUnpluged_ = false;
      batteryCharging_ = false;
      rs232_ = false;
      satellite_ = false;
      onewire_ = false;
      currentMinimal_ = false;
      currentTypical_ = false;
      currentMaximum_ = false;
      loadDump_ = false;
      fwClient_ = false;
      usb_ = false;
      batteryVoltage_ = false;
      mic_ = false;
      gpsAntennaInt_ = false;
      gpsAntennaExt_ = false;
      resetButton_ = false;
      outputHSShort_ = false;
      gprs_ = false;
      pep_ = false;
      closedHousing_ = false;
      cftFlag_ = false;
      lora_ = false;
      bluetooth_ = false;
      gsensor_ = false;
      externalMemory_ = false;
      consumption_ = false;
      zigbee_ = false;
      retestIO_ = false;
      retestBattery_ = false;
      retestGPS_ = false;
      enterTestMode_ = false;
      exitTestMode_ = false;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBool(1, accelerometer_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBool(2, accelerometerCalibrate_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBool(3, can_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeBool(4, audio_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeBool(5, formatMemory_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeBool(6, gpsNmea_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeEnum(7, ledA_.getNumber());
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeEnum(8, ledB_.getNumber());
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeBool(9, temperature_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeBool(10, sdCard_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeBool(11, tamper_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeBool(12, rs485_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeBool(13, extVoltage_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        output.writeBool(14, io_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        output.writeBool(15, simCard1_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        output.writeBool(16, simCard2_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        output.writeUInt32(17, sleepMode_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        output.writeUInt32(18, stockMode_);
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        output.writeBool(19, rtc_);
      }
      if (((bitField0_ & 0x00080000) == 0x00080000)) {
        output.writeBool(21, ramMemory_);
      }
      if (((bitField0_ & 0x00100000) == 0x00100000)) {
        output.writeBool(22, norMemory_);
      }
      if (((bitField0_ & 0x00200000) == 0x00200000)) {
        output.writeBool(23, batteryUnpluged_);
      }
      if (((bitField0_ & 0x00400000) == 0x00400000)) {
        output.writeBool(24, batteryCharging_);
      }
      if (((bitField0_ & 0x00800000) == 0x00800000)) {
        output.writeBool(25, rs232_);
      }
      if (((bitField0_ & 0x01000000) == 0x01000000)) {
        output.writeBool(26, satellite_);
      }
      if (((bitField0_ & 0x02000000) == 0x02000000)) {
        output.writeBool(27, onewire_);
      }
      if (((bitField0_ & 0x04000000) == 0x04000000)) {
        output.writeBool(28, currentMinimal_);
      }
      if (((bitField0_ & 0x08000000) == 0x08000000)) {
        output.writeBool(29, currentTypical_);
      }
      if (((bitField0_ & 0x10000000) == 0x10000000)) {
        output.writeBool(30, currentMaximum_);
      }
      if (((bitField0_ & 0x20000000) == 0x20000000)) {
        output.writeBool(31, loadDump_);
      }
      if (((bitField0_ & 0x40000000) == 0x40000000)) {
        output.writeBool(33, fwClient_);
      }
      if (((bitField0_ & 0x80000000) == 0x80000000)) {
        output.writeBool(37, usb_);
      }
      if (((bitField1_ & 0x00000001) == 0x00000001)) {
        output.writeBool(39, batteryVoltage_);
      }
      if (((bitField1_ & 0x00000002) == 0x00000002)) {
        output.writeBool(40, mic_);
      }
      if (((bitField1_ & 0x00000004) == 0x00000004)) {
        output.writeBool(41, gpsAntennaInt_);
      }
      if (((bitField1_ & 0x00000008) == 0x00000008)) {
        output.writeBool(42, gpsAntennaExt_);
      }
      if (((bitField1_ & 0x00000010) == 0x00000010)) {
        output.writeBool(50, resetButton_);
      }
      if (((bitField1_ & 0x00000020) == 0x00000020)) {
        output.writeBool(62, outputHSShort_);
      }
      if (((bitField1_ & 0x00000040) == 0x00000040)) {
        output.writeBool(63, gprs_);
      }
      if (((bitField1_ & 0x00000080) == 0x00000080)) {
        output.writeBool(64, pep_);
      }
      if (((bitField1_ & 0x00000100) == 0x00000100)) {
        output.writeBool(65, closedHousing_);
      }
      if (((bitField1_ & 0x00000200) == 0x00000200)) {
        output.writeBool(66, cftFlag_);
      }
      if (((bitField1_ & 0x00000400) == 0x00000400)) {
        output.writeBool(67, lora_);
      }
      if (((bitField1_ & 0x00000800) == 0x00000800)) {
        output.writeBool(68, bluetooth_);
      }
      if (((bitField1_ & 0x00001000) == 0x00001000)) {
        output.writeBool(69, gsensor_);
      }
      if (((bitField1_ & 0x00002000) == 0x00002000)) {
        output.writeBool(70, externalMemory_);
      }
      if (((bitField1_ & 0x00004000) == 0x00004000)) {
        output.writeBool(71, consumption_);
      }
      if (((bitField1_ & 0x00008000) == 0x00008000)) {
        output.writeBool(72, zigbee_);
      }
      if (((bitField1_ & 0x00010000) == 0x00010000)) {
        output.writeBool(73, retestIO_);
      }
      if (((bitField1_ & 0x00020000) == 0x00020000)) {
        output.writeBool(74, retestBattery_);
      }
      if (((bitField1_ & 0x00040000) == 0x00040000)) {
        output.writeBool(75, retestGPS_);
      }
      if (((bitField1_ & 0x00080000) == 0x00080000)) {
        output.writeBool(126, enterTestMode_);
      }
      if (((bitField1_ & 0x00100000) == 0x00100000)) {
        output.writeBool(127, exitTestMode_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(1, accelerometer_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(2, accelerometerCalibrate_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(3, can_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(4, audio_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(5, formatMemory_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(6, gpsNmea_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(7, ledA_.getNumber());
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(8, ledB_.getNumber());
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(9, temperature_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(10, sdCard_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(11, tamper_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(12, rs485_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(13, extVoltage_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(14, io_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(15, simCard1_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(16, simCard2_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(17, sleepMode_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(18, stockMode_);
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(19, rtc_);
      }
      if (((bitField0_ & 0x00080000) == 0x00080000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(21, ramMemory_);
      }
      if (((bitField0_ & 0x00100000) == 0x00100000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(22, norMemory_);
      }
      if (((bitField0_ & 0x00200000) == 0x00200000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(23, batteryUnpluged_);
      }
      if (((bitField0_ & 0x00400000) == 0x00400000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(24, batteryCharging_);
      }
      if (((bitField0_ & 0x00800000) == 0x00800000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(25, rs232_);
      }
      if (((bitField0_ & 0x01000000) == 0x01000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(26, satellite_);
      }
      if (((bitField0_ & 0x02000000) == 0x02000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(27, onewire_);
      }
      if (((bitField0_ & 0x04000000) == 0x04000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(28, currentMinimal_);
      }
      if (((bitField0_ & 0x08000000) == 0x08000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(29, currentTypical_);
      }
      if (((bitField0_ & 0x10000000) == 0x10000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(30, currentMaximum_);
      }
      if (((bitField0_ & 0x20000000) == 0x20000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(31, loadDump_);
      }
      if (((bitField0_ & 0x40000000) == 0x40000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(33, fwClient_);
      }
      if (((bitField0_ & 0x80000000) == 0x80000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(37, usb_);
      }
      if (((bitField1_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(39, batteryVoltage_);
      }
      if (((bitField1_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(40, mic_);
      }
      if (((bitField1_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(41, gpsAntennaInt_);
      }
      if (((bitField1_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(42, gpsAntennaExt_);
      }
      if (((bitField1_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(50, resetButton_);
      }
      if (((bitField1_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(62, outputHSShort_);
      }
      if (((bitField1_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(63, gprs_);
      }
      if (((bitField1_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(64, pep_);
      }
      if (((bitField1_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(65, closedHousing_);
      }
      if (((bitField1_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(66, cftFlag_);
      }
      if (((bitField1_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(67, lora_);
      }
      if (((bitField1_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(68, bluetooth_);
      }
      if (((bitField1_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(69, gsensor_);
      }
      if (((bitField1_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(70, externalMemory_);
      }
      if (((bitField1_ & 0x00004000) == 0x00004000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(71, consumption_);
      }
      if (((bitField1_ & 0x00008000) == 0x00008000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(72, zigbee_);
      }
      if (((bitField1_ & 0x00010000) == 0x00010000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(73, retestIO_);
      }
      if (((bitField1_ & 0x00020000) == 0x00020000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(74, retestBattery_);
      }
      if (((bitField1_ & 0x00040000) == 0x00040000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(75, retestGPS_);
      }
      if (((bitField1_ & 0x00080000) == 0x00080000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(126, enterTestMode_);
      }
      if (((bitField1_ & 0x00100000) == 0x00100000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(127, exitTestMode_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static maxpb.MaxpbProduction.TestBegin parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static maxpb.MaxpbProduction.TestBegin parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static maxpb.MaxpbProduction.TestBegin parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static maxpb.MaxpbProduction.TestBegin parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static maxpb.MaxpbProduction.TestBegin parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static maxpb.MaxpbProduction.TestBegin parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static maxpb.MaxpbProduction.TestBegin parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static maxpb.MaxpbProduction.TestBegin parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static maxpb.MaxpbProduction.TestBegin parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static maxpb.MaxpbProduction.TestBegin parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(maxpb.MaxpbProduction.TestBegin prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code maxpb.TestBegin}
     *
     * <pre>
     *&#47;Executes production tests
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:maxpb.TestBegin)
        maxpb.MaxpbProduction.TestBeginOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return maxpb.MaxpbProduction.internal_static_maxpb_TestBegin_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return maxpb.MaxpbProduction.internal_static_maxpb_TestBegin_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                maxpb.MaxpbProduction.TestBegin.class, maxpb.MaxpbProduction.TestBegin.Builder.class);
      }

      // Construct using maxpb.MaxpbProduction.TestBegin.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        accelerometer_ = false;
        bitField0_ = (bitField0_ & ~0x00000001);
        accelerometerCalibrate_ = false;
        bitField0_ = (bitField0_ & ~0x00000002);
        can_ = false;
        bitField0_ = (bitField0_ & ~0x00000004);
        audio_ = false;
        bitField0_ = (bitField0_ & ~0x00000008);
        formatMemory_ = false;
        bitField0_ = (bitField0_ & ~0x00000010);
        gpsNmea_ = false;
        bitField0_ = (bitField0_ & ~0x00000020);
        ledA_ = maxpb.MaxpbProduction.Color.COL_NONE;
        bitField0_ = (bitField0_ & ~0x00000040);
        ledB_ = maxpb.MaxpbProduction.Color.COL_NONE;
        bitField0_ = (bitField0_ & ~0x00000080);
        temperature_ = false;
        bitField0_ = (bitField0_ & ~0x00000100);
        sdCard_ = false;
        bitField0_ = (bitField0_ & ~0x00000200);
        tamper_ = false;
        bitField0_ = (bitField0_ & ~0x00000400);
        rs485_ = false;
        bitField0_ = (bitField0_ & ~0x00000800);
        extVoltage_ = false;
        bitField0_ = (bitField0_ & ~0x00001000);
        io_ = false;
        bitField0_ = (bitField0_ & ~0x00002000);
        simCard1_ = false;
        bitField0_ = (bitField0_ & ~0x00004000);
        simCard2_ = false;
        bitField0_ = (bitField0_ & ~0x00008000);
        sleepMode_ = 0;
        bitField0_ = (bitField0_ & ~0x00010000);
        stockMode_ = 0;
        bitField0_ = (bitField0_ & ~0x00020000);
        rtc_ = false;
        bitField0_ = (bitField0_ & ~0x00040000);
        ramMemory_ = false;
        bitField0_ = (bitField0_ & ~0x00080000);
        norMemory_ = false;
        bitField0_ = (bitField0_ & ~0x00100000);
        batteryUnpluged_ = false;
        bitField0_ = (bitField0_ & ~0x00200000);
        batteryCharging_ = false;
        bitField0_ = (bitField0_ & ~0x00400000);
        rs232_ = false;
        bitField0_ = (bitField0_ & ~0x00800000);
        satellite_ = false;
        bitField0_ = (bitField0_ & ~0x01000000);
        onewire_ = false;
        bitField0_ = (bitField0_ & ~0x02000000);
        currentMinimal_ = false;
        bitField0_ = (bitField0_ & ~0x04000000);
        currentTypical_ = false;
        bitField0_ = (bitField0_ & ~0x08000000);
        currentMaximum_ = false;
        bitField0_ = (bitField0_ & ~0x10000000);
        loadDump_ = false;
        bitField0_ = (bitField0_ & ~0x20000000);
        fwClient_ = false;
        bitField0_ = (bitField0_ & ~0x40000000);
        usb_ = false;
        bitField0_ = (bitField0_ & ~0x80000000);
        batteryVoltage_ = false;
        bitField1_ = (bitField1_ & ~0x00000001);
        mic_ = false;
        bitField1_ = (bitField1_ & ~0x00000002);
        gpsAntennaInt_ = false;
        bitField1_ = (bitField1_ & ~0x00000004);
        gpsAntennaExt_ = false;
        bitField1_ = (bitField1_ & ~0x00000008);
        resetButton_ = false;
        bitField1_ = (bitField1_ & ~0x00000010);
        outputHSShort_ = false;
        bitField1_ = (bitField1_ & ~0x00000020);
        gprs_ = false;
        bitField1_ = (bitField1_ & ~0x00000040);
        pep_ = false;
        bitField1_ = (bitField1_ & ~0x00000080);
        closedHousing_ = false;
        bitField1_ = (bitField1_ & ~0x00000100);
        cftFlag_ = false;
        bitField1_ = (bitField1_ & ~0x00000200);
        lora_ = false;
        bitField1_ = (bitField1_ & ~0x00000400);
        bluetooth_ = false;
        bitField1_ = (bitField1_ & ~0x00000800);
        gsensor_ = false;
        bitField1_ = (bitField1_ & ~0x00001000);
        externalMemory_ = false;
        bitField1_ = (bitField1_ & ~0x00002000);
        consumption_ = false;
        bitField1_ = (bitField1_ & ~0x00004000);
        zigbee_ = false;
        bitField1_ = (bitField1_ & ~0x00008000);
        retestIO_ = false;
        bitField1_ = (bitField1_ & ~0x00010000);
        retestBattery_ = false;
        bitField1_ = (bitField1_ & ~0x00020000);
        retestGPS_ = false;
        bitField1_ = (bitField1_ & ~0x00040000);
        enterTestMode_ = false;
        bitField1_ = (bitField1_ & ~0x00080000);
        exitTestMode_ = false;
        bitField1_ = (bitField1_ & ~0x00100000);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return maxpb.MaxpbProduction.internal_static_maxpb_TestBegin_descriptor;
      }

      public maxpb.MaxpbProduction.TestBegin getDefaultInstanceForType() {
        return maxpb.MaxpbProduction.TestBegin.getDefaultInstance();
      }

      public maxpb.MaxpbProduction.TestBegin build() {
        maxpb.MaxpbProduction.TestBegin result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public maxpb.MaxpbProduction.TestBegin buildPartial() {
        maxpb.MaxpbProduction.TestBegin result = new maxpb.MaxpbProduction.TestBegin(this);
        int from_bitField0_ = bitField0_;
        int from_bitField1_ = bitField1_;
        int to_bitField0_ = 0;
        int to_bitField1_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.accelerometer_ = accelerometer_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.accelerometerCalibrate_ = accelerometerCalibrate_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.can_ = can_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.audio_ = audio_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.formatMemory_ = formatMemory_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.gpsNmea_ = gpsNmea_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.ledA_ = ledA_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.ledB_ = ledB_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.temperature_ = temperature_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.sdCard_ = sdCard_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        result.tamper_ = tamper_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000800;
        }
        result.rs485_ = rs485_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00001000;
        }
        result.extVoltage_ = extVoltage_;
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00002000;
        }
        result.io_ = io_;
        if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
          to_bitField0_ |= 0x00004000;
        }
        result.simCard1_ = simCard1_;
        if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
          to_bitField0_ |= 0x00008000;
        }
        result.simCard2_ = simCard2_;
        if (((from_bitField0_ & 0x00010000) == 0x00010000)) {
          to_bitField0_ |= 0x00010000;
        }
        result.sleepMode_ = sleepMode_;
        if (((from_bitField0_ & 0x00020000) == 0x00020000)) {
          to_bitField0_ |= 0x00020000;
        }
        result.stockMode_ = stockMode_;
        if (((from_bitField0_ & 0x00040000) == 0x00040000)) {
          to_bitField0_ |= 0x00040000;
        }
        result.rtc_ = rtc_;
        if (((from_bitField0_ & 0x00080000) == 0x00080000)) {
          to_bitField0_ |= 0x00080000;
        }
        result.ramMemory_ = ramMemory_;
        if (((from_bitField0_ & 0x00100000) == 0x00100000)) {
          to_bitField0_ |= 0x00100000;
        }
        result.norMemory_ = norMemory_;
        if (((from_bitField0_ & 0x00200000) == 0x00200000)) {
          to_bitField0_ |= 0x00200000;
        }
        result.batteryUnpluged_ = batteryUnpluged_;
        if (((from_bitField0_ & 0x00400000) == 0x00400000)) {
          to_bitField0_ |= 0x00400000;
        }
        result.batteryCharging_ = batteryCharging_;
        if (((from_bitField0_ & 0x00800000) == 0x00800000)) {
          to_bitField0_ |= 0x00800000;
        }
        result.rs232_ = rs232_;
        if (((from_bitField0_ & 0x01000000) == 0x01000000)) {
          to_bitField0_ |= 0x01000000;
        }
        result.satellite_ = satellite_;
        if (((from_bitField0_ & 0x02000000) == 0x02000000)) {
          to_bitField0_ |= 0x02000000;
        }
        result.onewire_ = onewire_;
        if (((from_bitField0_ & 0x04000000) == 0x04000000)) {
          to_bitField0_ |= 0x04000000;
        }
        result.currentMinimal_ = currentMinimal_;
        if (((from_bitField0_ & 0x08000000) == 0x08000000)) {
          to_bitField0_ |= 0x08000000;
        }
        result.currentTypical_ = currentTypical_;
        if (((from_bitField0_ & 0x10000000) == 0x10000000)) {
          to_bitField0_ |= 0x10000000;
        }
        result.currentMaximum_ = currentMaximum_;
        if (((from_bitField0_ & 0x20000000) == 0x20000000)) {
          to_bitField0_ |= 0x20000000;
        }
        result.loadDump_ = loadDump_;
        if (((from_bitField0_ & 0x40000000) == 0x40000000)) {
          to_bitField0_ |= 0x40000000;
        }
        result.fwClient_ = fwClient_;
        if (((from_bitField0_ & 0x80000000) == 0x80000000)) {
          to_bitField0_ |= 0x80000000;
        }
        result.usb_ = usb_;
        if (((from_bitField1_ & 0x00000001) == 0x00000001)) {
          to_bitField1_ |= 0x00000001;
        }
        result.batteryVoltage_ = batteryVoltage_;
        if (((from_bitField1_ & 0x00000002) == 0x00000002)) {
          to_bitField1_ |= 0x00000002;
        }
        result.mic_ = mic_;
        if (((from_bitField1_ & 0x00000004) == 0x00000004)) {
          to_bitField1_ |= 0x00000004;
        }
        result.gpsAntennaInt_ = gpsAntennaInt_;
        if (((from_bitField1_ & 0x00000008) == 0x00000008)) {
          to_bitField1_ |= 0x00000008;
        }
        result.gpsAntennaExt_ = gpsAntennaExt_;
        if (((from_bitField1_ & 0x00000010) == 0x00000010)) {
          to_bitField1_ |= 0x00000010;
        }
        result.resetButton_ = resetButton_;
        if (((from_bitField1_ & 0x00000020) == 0x00000020)) {
          to_bitField1_ |= 0x00000020;
        }
        result.outputHSShort_ = outputHSShort_;
        if (((from_bitField1_ & 0x00000040) == 0x00000040)) {
          to_bitField1_ |= 0x00000040;
        }
        result.gprs_ = gprs_;
        if (((from_bitField1_ & 0x00000080) == 0x00000080)) {
          to_bitField1_ |= 0x00000080;
        }
        result.pep_ = pep_;
        if (((from_bitField1_ & 0x00000100) == 0x00000100)) {
          to_bitField1_ |= 0x00000100;
        }
        result.closedHousing_ = closedHousing_;
        if (((from_bitField1_ & 0x00000200) == 0x00000200)) {
          to_bitField1_ |= 0x00000200;
        }
        result.cftFlag_ = cftFlag_;
        if (((from_bitField1_ & 0x00000400) == 0x00000400)) {
          to_bitField1_ |= 0x00000400;
        }
        result.lora_ = lora_;
        if (((from_bitField1_ & 0x00000800) == 0x00000800)) {
          to_bitField1_ |= 0x00000800;
        }
        result.bluetooth_ = bluetooth_;
        if (((from_bitField1_ & 0x00001000) == 0x00001000)) {
          to_bitField1_ |= 0x00001000;
        }
        result.gsensor_ = gsensor_;
        if (((from_bitField1_ & 0x00002000) == 0x00002000)) {
          to_bitField1_ |= 0x00002000;
        }
        result.externalMemory_ = externalMemory_;
        if (((from_bitField1_ & 0x00004000) == 0x00004000)) {
          to_bitField1_ |= 0x00004000;
        }
        result.consumption_ = consumption_;
        if (((from_bitField1_ & 0x00008000) == 0x00008000)) {
          to_bitField1_ |= 0x00008000;
        }
        result.zigbee_ = zigbee_;
        if (((from_bitField1_ & 0x00010000) == 0x00010000)) {
          to_bitField1_ |= 0x00010000;
        }
        result.retestIO_ = retestIO_;
        if (((from_bitField1_ & 0x00020000) == 0x00020000)) {
          to_bitField1_ |= 0x00020000;
        }
        result.retestBattery_ = retestBattery_;
        if (((from_bitField1_ & 0x00040000) == 0x00040000)) {
          to_bitField1_ |= 0x00040000;
        }
        result.retestGPS_ = retestGPS_;
        if (((from_bitField1_ & 0x00080000) == 0x00080000)) {
          to_bitField1_ |= 0x00080000;
        }
        result.enterTestMode_ = enterTestMode_;
        if (((from_bitField1_ & 0x00100000) == 0x00100000)) {
          to_bitField1_ |= 0x00100000;
        }
        result.exitTestMode_ = exitTestMode_;
        result.bitField0_ = to_bitField0_;
        result.bitField1_ = to_bitField1_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof maxpb.MaxpbProduction.TestBegin) {
          return mergeFrom((maxpb.MaxpbProduction.TestBegin)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(maxpb.MaxpbProduction.TestBegin other) {
        if (other == maxpb.MaxpbProduction.TestBegin.getDefaultInstance()) return this;
        if (other.hasAccelerometer()) {
          setAccelerometer(other.getAccelerometer());
        }
        if (other.hasAccelerometerCalibrate()) {
          setAccelerometerCalibrate(other.getAccelerometerCalibrate());
        }
        if (other.hasCan()) {
          setCan(other.getCan());
        }
        if (other.hasAudio()) {
          setAudio(other.getAudio());
        }
        if (other.hasFormatMemory()) {
          setFormatMemory(other.getFormatMemory());
        }
        if (other.hasGpsNmea()) {
          setGpsNmea(other.getGpsNmea());
        }
        if (other.hasLedA()) {
          setLedA(other.getLedA());
        }
        if (other.hasLedB()) {
          setLedB(other.getLedB());
        }
        if (other.hasTemperature()) {
          setTemperature(other.getTemperature());
        }
        if (other.hasSdCard()) {
          setSdCard(other.getSdCard());
        }
        if (other.hasTamper()) {
          setTamper(other.getTamper());
        }
        if (other.hasRs485()) {
          setRs485(other.getRs485());
        }
        if (other.hasExtVoltage()) {
          setExtVoltage(other.getExtVoltage());
        }
        if (other.hasIo()) {
          setIo(other.getIo());
        }
        if (other.hasSimCard1()) {
          setSimCard1(other.getSimCard1());
        }
        if (other.hasSimCard2()) {
          setSimCard2(other.getSimCard2());
        }
        if (other.hasSleepMode()) {
          setSleepMode(other.getSleepMode());
        }
        if (other.hasStockMode()) {
          setStockMode(other.getStockMode());
        }
        if (other.hasRtc()) {
          setRtc(other.getRtc());
        }
        if (other.hasRamMemory()) {
          setRamMemory(other.getRamMemory());
        }
        if (other.hasNorMemory()) {
          setNorMemory(other.getNorMemory());
        }
        if (other.hasBatteryUnpluged()) {
          setBatteryUnpluged(other.getBatteryUnpluged());
        }
        if (other.hasBatteryCharging()) {
          setBatteryCharging(other.getBatteryCharging());
        }
        if (other.hasRs232()) {
          setRs232(other.getRs232());
        }
        if (other.hasSatellite()) {
          setSatellite(other.getSatellite());
        }
        if (other.hasOnewire()) {
          setOnewire(other.getOnewire());
        }
        if (other.hasCurrentMinimal()) {
          setCurrentMinimal(other.getCurrentMinimal());
        }
        if (other.hasCurrentTypical()) {
          setCurrentTypical(other.getCurrentTypical());
        }
        if (other.hasCurrentMaximum()) {
          setCurrentMaximum(other.getCurrentMaximum());
        }
        if (other.hasLoadDump()) {
          setLoadDump(other.getLoadDump());
        }
        if (other.hasFwClient()) {
          setFwClient(other.getFwClient());
        }
        if (other.hasUsb()) {
          setUsb(other.getUsb());
        }
        if (other.hasBatteryVoltage()) {
          setBatteryVoltage(other.getBatteryVoltage());
        }
        if (other.hasMic()) {
          setMic(other.getMic());
        }
        if (other.hasGpsAntennaInt()) {
          setGpsAntennaInt(other.getGpsAntennaInt());
        }
        if (other.hasGpsAntennaExt()) {
          setGpsAntennaExt(other.getGpsAntennaExt());
        }
        if (other.hasResetButton()) {
          setResetButton(other.getResetButton());
        }
        if (other.hasOutputHSShort()) {
          setOutputHSShort(other.getOutputHSShort());
        }
        if (other.hasGprs()) {
          setGprs(other.getGprs());
        }
        if (other.hasPep()) {
          setPep(other.getPep());
        }
        if (other.hasClosedHousing()) {
          setClosedHousing(other.getClosedHousing());
        }
        if (other.hasCftFlag()) {
          setCftFlag(other.getCftFlag());
        }
        if (other.hasLora()) {
          setLora(other.getLora());
        }
        if (other.hasBluetooth()) {
          setBluetooth(other.getBluetooth());
        }
        if (other.hasGsensor()) {
          setGsensor(other.getGsensor());
        }
        if (other.hasExternalMemory()) {
          setExternalMemory(other.getExternalMemory());
        }
        if (other.hasConsumption()) {
          setConsumption(other.getConsumption());
        }
        if (other.hasZigbee()) {
          setZigbee(other.getZigbee());
        }
        if (other.hasRetestIO()) {
          setRetestIO(other.getRetestIO());
        }
        if (other.hasRetestBattery()) {
          setRetestBattery(other.getRetestBattery());
        }
        if (other.hasRetestGPS()) {
          setRetestGPS(other.getRetestGPS());
        }
        if (other.hasEnterTestMode()) {
          setEnterTestMode(other.getEnterTestMode());
        }
        if (other.hasExitTestMode()) {
          setExitTestMode(other.getExitTestMode());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        maxpb.MaxpbProduction.TestBegin parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (maxpb.MaxpbProduction.TestBegin) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;
      private int bitField1_;

      private boolean accelerometer_ ;
      /**
       * <code>optional bool accelerometer = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasAccelerometer() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional bool accelerometer = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean getAccelerometer() {
        return accelerometer_;
      }
      /**
       * <code>optional bool accelerometer = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setAccelerometer(boolean value) {
        bitField0_ |= 0x00000001;
        accelerometer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool accelerometer = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearAccelerometer() {
        bitField0_ = (bitField0_ & ~0x00000001);
        accelerometer_ = false;
        onChanged();
        return this;
      }

      private boolean accelerometerCalibrate_ ;
      /**
       * <code>optional bool accelerometerCalibrate = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public boolean hasAccelerometerCalibrate() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional bool accelerometerCalibrate = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public boolean getAccelerometerCalibrate() {
        return accelerometerCalibrate_;
      }
      /**
       * <code>optional bool accelerometerCalibrate = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder setAccelerometerCalibrate(boolean value) {
        bitField0_ |= 0x00000002;
        accelerometerCalibrate_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool accelerometerCalibrate = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder clearAccelerometerCalibrate() {
        bitField0_ = (bitField0_ & ~0x00000002);
        accelerometerCalibrate_ = false;
        onChanged();
        return this;
      }

      private boolean can_ ;
      /**
       * <code>optional bool can = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public boolean hasCan() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional bool can = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public boolean getCan() {
        return can_;
      }
      /**
       * <code>optional bool can = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder setCan(boolean value) {
        bitField0_ |= 0x00000004;
        can_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool can = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder clearCan() {
        bitField0_ = (bitField0_ & ~0x00000004);
        can_ = false;
        onChanged();
        return this;
      }

      private boolean audio_ ;
      /**
       * <code>optional bool audio = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public boolean hasAudio() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional bool audio = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public boolean getAudio() {
        return audio_;
      }
      /**
       * <code>optional bool audio = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder setAudio(boolean value) {
        bitField0_ |= 0x00000008;
        audio_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool audio = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder clearAudio() {
        bitField0_ = (bitField0_ & ~0x00000008);
        audio_ = false;
        onChanged();
        return this;
      }

      private boolean formatMemory_ ;
      /**
       * <code>optional bool formatMemory = 5;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public boolean hasFormatMemory() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional bool formatMemory = 5;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public boolean getFormatMemory() {
        return formatMemory_;
      }
      /**
       * <code>optional bool formatMemory = 5;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder setFormatMemory(boolean value) {
        bitField0_ |= 0x00000010;
        formatMemory_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool formatMemory = 5;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder clearFormatMemory() {
        bitField0_ = (bitField0_ & ~0x00000010);
        formatMemory_ = false;
        onChanged();
        return this;
      }

      private boolean gpsNmea_ ;
      /**
       * <code>optional bool gpsNmea = 6;</code>
       *
       * <pre>
       *&#47; Communication with GPS IC, Fix, or raw data - SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasGpsNmea() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional bool gpsNmea = 6;</code>
       *
       * <pre>
       *&#47; Communication with GPS IC, Fix, or raw data - SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean getGpsNmea() {
        return gpsNmea_;
      }
      /**
       * <code>optional bool gpsNmea = 6;</code>
       *
       * <pre>
       *&#47; Communication with GPS IC, Fix, or raw data - SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setGpsNmea(boolean value) {
        bitField0_ |= 0x00000020;
        gpsNmea_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool gpsNmea = 6;</code>
       *
       * <pre>
       *&#47; Communication with GPS IC, Fix, or raw data - SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearGpsNmea() {
        bitField0_ = (bitField0_ & ~0x00000020);
        gpsNmea_ = false;
        onChanged();
        return this;
      }

      private maxpb.MaxpbProduction.Color ledA_ = maxpb.MaxpbProduction.Color.COL_NONE;
      /**
       * <code>optional .maxpb.Color ledA = 7;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasLedA() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional .maxpb.Color ledA = 7;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbProduction.Color getLedA() {
        return ledA_;
      }
      /**
       * <code>optional .maxpb.Color ledA = 7;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setLedA(maxpb.MaxpbProduction.Color value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000040;
        ledA_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .maxpb.Color ledA = 7;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearLedA() {
        bitField0_ = (bitField0_ & ~0x00000040);
        ledA_ = maxpb.MaxpbProduction.Color.COL_NONE;
        onChanged();
        return this;
      }

      private maxpb.MaxpbProduction.Color ledB_ = maxpb.MaxpbProduction.Color.COL_NONE;
      /**
       * <code>optional .maxpb.Color ledB = 8;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public boolean hasLedB() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional .maxpb.Color ledB = 8;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public maxpb.MaxpbProduction.Color getLedB() {
        return ledB_;
      }
      /**
       * <code>optional .maxpb.Color ledB = 8;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder setLedB(maxpb.MaxpbProduction.Color value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000080;
        ledB_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .maxpb.Color ledB = 8;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder clearLedB() {
        bitField0_ = (bitField0_ & ~0x00000080);
        ledB_ = maxpb.MaxpbProduction.Color.COL_NONE;
        onChanged();
        return this;
      }

      private boolean temperature_ ;
      /**
       * <code>optional bool temperature = 9;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasTemperature() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional bool temperature = 9;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean getTemperature() {
        return temperature_;
      }
      /**
       * <code>optional bool temperature = 9;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setTemperature(boolean value) {
        bitField0_ |= 0x00000100;
        temperature_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool temperature = 9;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearTemperature() {
        bitField0_ = (bitField0_ & ~0x00000100);
        temperature_ = false;
        onChanged();
        return this;
      }

      private boolean sdCard_ ;
      /**
       * <code>optional bool sdCard = 10;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public boolean hasSdCard() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional bool sdCard = 10;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public boolean getSdCard() {
        return sdCard_;
      }
      /**
       * <code>optional bool sdCard = 10;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder setSdCard(boolean value) {
        bitField0_ |= 0x00000200;
        sdCard_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool sdCard = 10;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder clearSdCard() {
        bitField0_ = (bitField0_ & ~0x00000200);
        sdCard_ = false;
        onChanged();
        return this;
      }

      private boolean tamper_ ;
      /**
       * <code>optional bool tamper = 11;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public boolean hasTamper() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional bool tamper = 11;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public boolean getTamper() {
        return tamper_;
      }
      /**
       * <code>optional bool tamper = 11;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder setTamper(boolean value) {
        bitField0_ |= 0x00000400;
        tamper_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool tamper = 11;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder clearTamper() {
        bitField0_ = (bitField0_ & ~0x00000400);
        tamper_ = false;
        onChanged();
        return this;
      }

      private boolean rs485_ ;
      /**
       * <code>optional bool rs485 = 12;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public boolean hasRs485() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional bool rs485 = 12;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public boolean getRs485() {
        return rs485_;
      }
      /**
       * <code>optional bool rs485 = 12;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder setRs485(boolean value) {
        bitField0_ |= 0x00000800;
        rs485_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool rs485 = 12;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder clearRs485() {
        bitField0_ = (bitField0_ & ~0x00000800);
        rs485_ = false;
        onChanged();
        return this;
      }

      private boolean extVoltage_ ;
      /**
       * <code>optional bool extVoltage = 13;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasExtVoltage() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional bool extVoltage = 13;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean getExtVoltage() {
        return extVoltage_;
      }
      /**
       * <code>optional bool extVoltage = 13;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setExtVoltage(boolean value) {
        bitField0_ |= 0x00001000;
        extVoltage_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool extVoltage = 13;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearExtVoltage() {
        bitField0_ = (bitField0_ & ~0x00001000);
        extVoltage_ = false;
        onChanged();
        return this;
      }

      private boolean io_ ;
      /**
       * <code>optional bool io = 14;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasIo() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>optional bool io = 14;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean getIo() {
        return io_;
      }
      /**
       * <code>optional bool io = 14;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setIo(boolean value) {
        bitField0_ |= 0x00002000;
        io_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool io = 14;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearIo() {
        bitField0_ = (bitField0_ & ~0x00002000);
        io_ = false;
        onChanged();
        return this;
      }

      private boolean simCard1_ ;
      /**
       * <code>optional bool simCard1 = 15;</code>
       *
       * <pre>
       *&#47; Iccid - SupportedBy: 
       * </pre>
       */
      public boolean hasSimCard1() {
        return ((bitField0_ & 0x00004000) == 0x00004000);
      }
      /**
       * <code>optional bool simCard1 = 15;</code>
       *
       * <pre>
       *&#47; Iccid - SupportedBy: 
       * </pre>
       */
      public boolean getSimCard1() {
        return simCard1_;
      }
      /**
       * <code>optional bool simCard1 = 15;</code>
       *
       * <pre>
       *&#47; Iccid - SupportedBy: 
       * </pre>
       */
      public Builder setSimCard1(boolean value) {
        bitField0_ |= 0x00004000;
        simCard1_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool simCard1 = 15;</code>
       *
       * <pre>
       *&#47; Iccid - SupportedBy: 
       * </pre>
       */
      public Builder clearSimCard1() {
        bitField0_ = (bitField0_ & ~0x00004000);
        simCard1_ = false;
        onChanged();
        return this;
      }

      private boolean simCard2_ ;
      /**
       * <code>optional bool simCard2 = 16;</code>
       *
       * <pre>
       *&#47; Iccid - SupportedBy: 
       * </pre>
       */
      public boolean hasSimCard2() {
        return ((bitField0_ & 0x00008000) == 0x00008000);
      }
      /**
       * <code>optional bool simCard2 = 16;</code>
       *
       * <pre>
       *&#47; Iccid - SupportedBy: 
       * </pre>
       */
      public boolean getSimCard2() {
        return simCard2_;
      }
      /**
       * <code>optional bool simCard2 = 16;</code>
       *
       * <pre>
       *&#47; Iccid - SupportedBy: 
       * </pre>
       */
      public Builder setSimCard2(boolean value) {
        bitField0_ |= 0x00008000;
        simCard2_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool simCard2 = 16;</code>
       *
       * <pre>
       *&#47; Iccid - SupportedBy: 
       * </pre>
       */
      public Builder clearSimCard2() {
        bitField0_ = (bitField0_ & ~0x00008000);
        simCard2_ = false;
        onChanged();
        return this;
      }

      private int sleepMode_ ;
      /**
       * <code>optional uint32 sleepMode = 17;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasSleepMode() {
        return ((bitField0_ & 0x00010000) == 0x00010000);
      }
      /**
       * <code>optional uint32 sleepMode = 17;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public int getSleepMode() {
        return sleepMode_;
      }
      /**
       * <code>optional uint32 sleepMode = 17;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setSleepMode(int value) {
        bitField0_ |= 0x00010000;
        sleepMode_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 sleepMode = 17;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearSleepMode() {
        bitField0_ = (bitField0_ & ~0x00010000);
        sleepMode_ = 0;
        onChanged();
        return this;
      }

      private int stockMode_ ;
      /**
       * <code>optional uint32 stockMode = 18;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public boolean hasStockMode() {
        return ((bitField0_ & 0x00020000) == 0x00020000);
      }
      /**
       * <code>optional uint32 stockMode = 18;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public int getStockMode() {
        return stockMode_;
      }
      /**
       * <code>optional uint32 stockMode = 18;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder setStockMode(int value) {
        bitField0_ |= 0x00020000;
        stockMode_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 stockMode = 18;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder clearStockMode() {
        bitField0_ = (bitField0_ & ~0x00020000);
        stockMode_ = 0;
        onChanged();
        return this;
      }

      private boolean rtc_ ;
      /**
       * <code>optional bool rtc = 19;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public boolean hasRtc() {
        return ((bitField0_ & 0x00040000) == 0x00040000);
      }
      /**
       * <code>optional bool rtc = 19;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public boolean getRtc() {
        return rtc_;
      }
      /**
       * <code>optional bool rtc = 19;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder setRtc(boolean value) {
        bitField0_ |= 0x00040000;
        rtc_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool rtc = 19;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder clearRtc() {
        bitField0_ = (bitField0_ & ~0x00040000);
        rtc_ = false;
        onChanged();
        return this;
      }

      private boolean ramMemory_ ;
      /**
       * <code>optional bool ramMemory = 21;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public boolean hasRamMemory() {
        return ((bitField0_ & 0x00080000) == 0x00080000);
      }
      /**
       * <code>optional bool ramMemory = 21;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public boolean getRamMemory() {
        return ramMemory_;
      }
      /**
       * <code>optional bool ramMemory = 21;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder setRamMemory(boolean value) {
        bitField0_ |= 0x00080000;
        ramMemory_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool ramMemory = 21;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder clearRamMemory() {
        bitField0_ = (bitField0_ & ~0x00080000);
        ramMemory_ = false;
        onChanged();
        return this;
      }

      private boolean norMemory_ ;
      /**
       * <code>optional bool norMemory = 22;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public boolean hasNorMemory() {
        return ((bitField0_ & 0x00100000) == 0x00100000);
      }
      /**
       * <code>optional bool norMemory = 22;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public boolean getNorMemory() {
        return norMemory_;
      }
      /**
       * <code>optional bool norMemory = 22;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder setNorMemory(boolean value) {
        bitField0_ |= 0x00100000;
        norMemory_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool norMemory = 22;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder clearNorMemory() {
        bitField0_ = (bitField0_ & ~0x00100000);
        norMemory_ = false;
        onChanged();
        return this;
      }

      private boolean batteryUnpluged_ ;
      /**
       * <code>optional bool batteryUnpluged = 23;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasBatteryUnpluged() {
        return ((bitField0_ & 0x00200000) == 0x00200000);
      }
      /**
       * <code>optional bool batteryUnpluged = 23;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean getBatteryUnpluged() {
        return batteryUnpluged_;
      }
      /**
       * <code>optional bool batteryUnpluged = 23;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setBatteryUnpluged(boolean value) {
        bitField0_ |= 0x00200000;
        batteryUnpluged_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool batteryUnpluged = 23;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearBatteryUnpluged() {
        bitField0_ = (bitField0_ & ~0x00200000);
        batteryUnpluged_ = false;
        onChanged();
        return this;
      }

      private boolean batteryCharging_ ;
      /**
       * <code>optional bool batteryCharging = 24;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasBatteryCharging() {
        return ((bitField0_ & 0x00400000) == 0x00400000);
      }
      /**
       * <code>optional bool batteryCharging = 24;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean getBatteryCharging() {
        return batteryCharging_;
      }
      /**
       * <code>optional bool batteryCharging = 24;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setBatteryCharging(boolean value) {
        bitField0_ |= 0x00400000;
        batteryCharging_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool batteryCharging = 24;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearBatteryCharging() {
        bitField0_ = (bitField0_ & ~0x00400000);
        batteryCharging_ = false;
        onChanged();
        return this;
      }

      private boolean rs232_ ;
      /**
       * <code>optional bool rs232 = 25;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasRs232() {
        return ((bitField0_ & 0x00800000) == 0x00800000);
      }
      /**
       * <code>optional bool rs232 = 25;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean getRs232() {
        return rs232_;
      }
      /**
       * <code>optional bool rs232 = 25;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setRs232(boolean value) {
        bitField0_ |= 0x00800000;
        rs232_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool rs232 = 25;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearRs232() {
        bitField0_ = (bitField0_ & ~0x00800000);
        rs232_ = false;
        onChanged();
        return this;
      }

      private boolean satellite_ ;
      /**
       * <code>optional bool satellite = 26;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public boolean hasSatellite() {
        return ((bitField0_ & 0x01000000) == 0x01000000);
      }
      /**
       * <code>optional bool satellite = 26;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public boolean getSatellite() {
        return satellite_;
      }
      /**
       * <code>optional bool satellite = 26;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder setSatellite(boolean value) {
        bitField0_ |= 0x01000000;
        satellite_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool satellite = 26;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder clearSatellite() {
        bitField0_ = (bitField0_ & ~0x01000000);
        satellite_ = false;
        onChanged();
        return this;
      }

      private boolean onewire_ ;
      /**
       * <code>optional bool onewire = 27;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public boolean hasOnewire() {
        return ((bitField0_ & 0x02000000) == 0x02000000);
      }
      /**
       * <code>optional bool onewire = 27;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public boolean getOnewire() {
        return onewire_;
      }
      /**
       * <code>optional bool onewire = 27;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder setOnewire(boolean value) {
        bitField0_ |= 0x02000000;
        onewire_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool onewire = 27;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder clearOnewire() {
        bitField0_ = (bitField0_ & ~0x02000000);
        onewire_ = false;
        onChanged();
        return this;
      }

      private boolean currentMinimal_ ;
      /**
       * <code>optional bool currentMinimal = 28;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public boolean hasCurrentMinimal() {
        return ((bitField0_ & 0x04000000) == 0x04000000);
      }
      /**
       * <code>optional bool currentMinimal = 28;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public boolean getCurrentMinimal() {
        return currentMinimal_;
      }
      /**
       * <code>optional bool currentMinimal = 28;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder setCurrentMinimal(boolean value) {
        bitField0_ |= 0x04000000;
        currentMinimal_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool currentMinimal = 28;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder clearCurrentMinimal() {
        bitField0_ = (bitField0_ & ~0x04000000);
        currentMinimal_ = false;
        onChanged();
        return this;
      }

      private boolean currentTypical_ ;
      /**
       * <code>optional bool currentTypical = 29;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public boolean hasCurrentTypical() {
        return ((bitField0_ & 0x08000000) == 0x08000000);
      }
      /**
       * <code>optional bool currentTypical = 29;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public boolean getCurrentTypical() {
        return currentTypical_;
      }
      /**
       * <code>optional bool currentTypical = 29;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder setCurrentTypical(boolean value) {
        bitField0_ |= 0x08000000;
        currentTypical_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool currentTypical = 29;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder clearCurrentTypical() {
        bitField0_ = (bitField0_ & ~0x08000000);
        currentTypical_ = false;
        onChanged();
        return this;
      }

      private boolean currentMaximum_ ;
      /**
       * <code>optional bool currentMaximum = 30;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public boolean hasCurrentMaximum() {
        return ((bitField0_ & 0x10000000) == 0x10000000);
      }
      /**
       * <code>optional bool currentMaximum = 30;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public boolean getCurrentMaximum() {
        return currentMaximum_;
      }
      /**
       * <code>optional bool currentMaximum = 30;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder setCurrentMaximum(boolean value) {
        bitField0_ |= 0x10000000;
        currentMaximum_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool currentMaximum = 30;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder clearCurrentMaximum() {
        bitField0_ = (bitField0_ & ~0x10000000);
        currentMaximum_ = false;
        onChanged();
        return this;
      }

      private boolean loadDump_ ;
      /**
       * <code>optional bool loadDump = 31;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public boolean hasLoadDump() {
        return ((bitField0_ & 0x20000000) == 0x20000000);
      }
      /**
       * <code>optional bool loadDump = 31;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public boolean getLoadDump() {
        return loadDump_;
      }
      /**
       * <code>optional bool loadDump = 31;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder setLoadDump(boolean value) {
        bitField0_ |= 0x20000000;
        loadDump_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool loadDump = 31;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder clearLoadDump() {
        bitField0_ = (bitField0_ & ~0x20000000);
        loadDump_ = false;
        onChanged();
        return this;
      }

      private boolean fwClient_ ;
      /**
       * <code>optional bool fwClient = 33;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public boolean hasFwClient() {
        return ((bitField0_ & 0x40000000) == 0x40000000);
      }
      /**
       * <code>optional bool fwClient = 33;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public boolean getFwClient() {
        return fwClient_;
      }
      /**
       * <code>optional bool fwClient = 33;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder setFwClient(boolean value) {
        bitField0_ |= 0x40000000;
        fwClient_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool fwClient = 33;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder clearFwClient() {
        bitField0_ = (bitField0_ & ~0x40000000);
        fwClient_ = false;
        onChanged();
        return this;
      }

      private boolean usb_ ;
      /**
       * <code>optional bool usb = 37;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public boolean hasUsb() {
        return ((bitField0_ & 0x80000000) == 0x80000000);
      }
      /**
       * <code>optional bool usb = 37;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public boolean getUsb() {
        return usb_;
      }
      /**
       * <code>optional bool usb = 37;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder setUsb(boolean value) {
        bitField0_ |= 0x80000000;
        usb_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool usb = 37;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder clearUsb() {
        bitField0_ = (bitField0_ & ~0x80000000);
        usb_ = false;
        onChanged();
        return this;
      }

      private boolean batteryVoltage_ ;
      /**
       * <code>optional bool batteryVoltage = 39;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasBatteryVoltage() {
        return ((bitField1_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional bool batteryVoltage = 39;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean getBatteryVoltage() {
        return batteryVoltage_;
      }
      /**
       * <code>optional bool batteryVoltage = 39;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setBatteryVoltage(boolean value) {
        bitField1_ |= 0x00000001;
        batteryVoltage_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool batteryVoltage = 39;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearBatteryVoltage() {
        bitField1_ = (bitField1_ & ~0x00000001);
        batteryVoltage_ = false;
        onChanged();
        return this;
      }

      private boolean mic_ ;
      /**
       * <code>optional bool mic = 40;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public boolean hasMic() {
        return ((bitField1_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional bool mic = 40;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public boolean getMic() {
        return mic_;
      }
      /**
       * <code>optional bool mic = 40;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder setMic(boolean value) {
        bitField1_ |= 0x00000002;
        mic_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool mic = 40;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder clearMic() {
        bitField1_ = (bitField1_ & ~0x00000002);
        mic_ = false;
        onChanged();
        return this;
      }

      private boolean gpsAntennaInt_ ;
      /**
       * <code>optional bool gpsAntennaInt = 41;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public boolean hasGpsAntennaInt() {
        return ((bitField1_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional bool gpsAntennaInt = 41;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public boolean getGpsAntennaInt() {
        return gpsAntennaInt_;
      }
      /**
       * <code>optional bool gpsAntennaInt = 41;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder setGpsAntennaInt(boolean value) {
        bitField1_ |= 0x00000004;
        gpsAntennaInt_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool gpsAntennaInt = 41;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder clearGpsAntennaInt() {
        bitField1_ = (bitField1_ & ~0x00000004);
        gpsAntennaInt_ = false;
        onChanged();
        return this;
      }

      private boolean gpsAntennaExt_ ;
      /**
       * <code>optional bool gpsAntennaExt = 42;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public boolean hasGpsAntennaExt() {
        return ((bitField1_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional bool gpsAntennaExt = 42;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public boolean getGpsAntennaExt() {
        return gpsAntennaExt_;
      }
      /**
       * <code>optional bool gpsAntennaExt = 42;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder setGpsAntennaExt(boolean value) {
        bitField1_ |= 0x00000008;
        gpsAntennaExt_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool gpsAntennaExt = 42;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder clearGpsAntennaExt() {
        bitField1_ = (bitField1_ & ~0x00000008);
        gpsAntennaExt_ = false;
        onChanged();
        return this;
      }

      private boolean resetButton_ ;
      /**
       * <code>optional bool resetButton = 50;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public boolean hasResetButton() {
        return ((bitField1_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional bool resetButton = 50;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public boolean getResetButton() {
        return resetButton_;
      }
      /**
       * <code>optional bool resetButton = 50;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder setResetButton(boolean value) {
        bitField1_ |= 0x00000010;
        resetButton_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool resetButton = 50;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder clearResetButton() {
        bitField1_ = (bitField1_ & ~0x00000010);
        resetButton_ = false;
        onChanged();
        return this;
      }

      private boolean outputHSShort_ ;
      /**
       * <code>optional bool outputHSShort = 62;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public boolean hasOutputHSShort() {
        return ((bitField1_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional bool outputHSShort = 62;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public boolean getOutputHSShort() {
        return outputHSShort_;
      }
      /**
       * <code>optional bool outputHSShort = 62;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder setOutputHSShort(boolean value) {
        bitField1_ |= 0x00000020;
        outputHSShort_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool outputHSShort = 62;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder clearOutputHSShort() {
        bitField1_ = (bitField1_ & ~0x00000020);
        outputHSShort_ = false;
        onChanged();
        return this;
      }

      private boolean gprs_ ;
      /**
       * <code>optional bool gprs = 63;</code>
       *
       * <pre>
       *&#47; CREG valid - SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasGprs() {
        return ((bitField1_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional bool gprs = 63;</code>
       *
       * <pre>
       *&#47; CREG valid - SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean getGprs() {
        return gprs_;
      }
      /**
       * <code>optional bool gprs = 63;</code>
       *
       * <pre>
       *&#47; CREG valid - SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setGprs(boolean value) {
        bitField1_ |= 0x00000040;
        gprs_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool gprs = 63;</code>
       *
       * <pre>
       *&#47; CREG valid - SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearGprs() {
        bitField1_ = (bitField1_ & ~0x00000040);
        gprs_ = false;
        onChanged();
        return this;
      }

      private boolean pep_ ;
      /**
       * <code>optional bool pep = 64;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public boolean hasPep() {
        return ((bitField1_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional bool pep = 64;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public boolean getPep() {
        return pep_;
      }
      /**
       * <code>optional bool pep = 64;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder setPep(boolean value) {
        bitField1_ |= 0x00000080;
        pep_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool pep = 64;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder clearPep() {
        bitField1_ = (bitField1_ & ~0x00000080);
        pep_ = false;
        onChanged();
        return this;
      }

      private boolean closedHousing_ ;
      /**
       * <code>optional bool closedHousing = 65;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public boolean hasClosedHousing() {
        return ((bitField1_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional bool closedHousing = 65;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public boolean getClosedHousing() {
        return closedHousing_;
      }
      /**
       * <code>optional bool closedHousing = 65;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder setClosedHousing(boolean value) {
        bitField1_ |= 0x00000100;
        closedHousing_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool closedHousing = 65;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder clearClosedHousing() {
        bitField1_ = (bitField1_ & ~0x00000100);
        closedHousing_ = false;
        onChanged();
        return this;
      }

      private boolean cftFlag_ ;
      /**
       * <code>optional bool cftFlag = 66;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasCftFlag() {
        return ((bitField1_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional bool cftFlag = 66;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean getCftFlag() {
        return cftFlag_;
      }
      /**
       * <code>optional bool cftFlag = 66;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setCftFlag(boolean value) {
        bitField1_ |= 0x00000200;
        cftFlag_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool cftFlag = 66;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearCftFlag() {
        bitField1_ = (bitField1_ & ~0x00000200);
        cftFlag_ = false;
        onChanged();
        return this;
      }

      private boolean lora_ ;
      /**
       * <code>optional bool lora = 67;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasLora() {
        return ((bitField1_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional bool lora = 67;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean getLora() {
        return lora_;
      }
      /**
       * <code>optional bool lora = 67;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setLora(boolean value) {
        bitField1_ |= 0x00000400;
        lora_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool lora = 67;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearLora() {
        bitField1_ = (bitField1_ & ~0x00000400);
        lora_ = false;
        onChanged();
        return this;
      }

      private boolean bluetooth_ ;
      /**
       * <code>optional bool bluetooth = 68;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasBluetooth() {
        return ((bitField1_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional bool bluetooth = 68;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean getBluetooth() {
        return bluetooth_;
      }
      /**
       * <code>optional bool bluetooth = 68;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setBluetooth(boolean value) {
        bitField1_ |= 0x00000800;
        bluetooth_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool bluetooth = 68;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearBluetooth() {
        bitField1_ = (bitField1_ & ~0x00000800);
        bluetooth_ = false;
        onChanged();
        return this;
      }

      private boolean gsensor_ ;
      /**
       * <code>optional bool gsensor = 69;</code>
       *
       * <pre>
       *&#47; SupportedBy:
       * </pre>
       */
      public boolean hasGsensor() {
        return ((bitField1_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional bool gsensor = 69;</code>
       *
       * <pre>
       *&#47; SupportedBy:
       * </pre>
       */
      public boolean getGsensor() {
        return gsensor_;
      }
      /**
       * <code>optional bool gsensor = 69;</code>
       *
       * <pre>
       *&#47; SupportedBy:
       * </pre>
       */
      public Builder setGsensor(boolean value) {
        bitField1_ |= 0x00001000;
        gsensor_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool gsensor = 69;</code>
       *
       * <pre>
       *&#47; SupportedBy:
       * </pre>
       */
      public Builder clearGsensor() {
        bitField1_ = (bitField1_ & ~0x00001000);
        gsensor_ = false;
        onChanged();
        return this;
      }

      private boolean externalMemory_ ;
      /**
       * <code>optional bool externalMemory = 70;</code>
       *
       * <pre>
       *&#47; SupportedBy:
       * </pre>
       */
      public boolean hasExternalMemory() {
        return ((bitField1_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>optional bool externalMemory = 70;</code>
       *
       * <pre>
       *&#47; SupportedBy:
       * </pre>
       */
      public boolean getExternalMemory() {
        return externalMemory_;
      }
      /**
       * <code>optional bool externalMemory = 70;</code>
       *
       * <pre>
       *&#47; SupportedBy:
       * </pre>
       */
      public Builder setExternalMemory(boolean value) {
        bitField1_ |= 0x00002000;
        externalMemory_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool externalMemory = 70;</code>
       *
       * <pre>
       *&#47; SupportedBy:
       * </pre>
       */
      public Builder clearExternalMemory() {
        bitField1_ = (bitField1_ & ~0x00002000);
        externalMemory_ = false;
        onChanged();
        return this;
      }

      private boolean consumption_ ;
      /**
       * <code>optional bool consumption = 71;</code>
       *
       * <pre>
       *&#47; SupportedBy:
       * </pre>
       */
      public boolean hasConsumption() {
        return ((bitField1_ & 0x00004000) == 0x00004000);
      }
      /**
       * <code>optional bool consumption = 71;</code>
       *
       * <pre>
       *&#47; SupportedBy:
       * </pre>
       */
      public boolean getConsumption() {
        return consumption_;
      }
      /**
       * <code>optional bool consumption = 71;</code>
       *
       * <pre>
       *&#47; SupportedBy:
       * </pre>
       */
      public Builder setConsumption(boolean value) {
        bitField1_ |= 0x00004000;
        consumption_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool consumption = 71;</code>
       *
       * <pre>
       *&#47; SupportedBy:
       * </pre>
       */
      public Builder clearConsumption() {
        bitField1_ = (bitField1_ & ~0x00004000);
        consumption_ = false;
        onChanged();
        return this;
      }

      private boolean zigbee_ ;
      /**
       * <code>optional bool zigbee = 72;</code>
       *
       * <pre>
       *&#47; SupportedBy:
       * </pre>
       */
      public boolean hasZigbee() {
        return ((bitField1_ & 0x00008000) == 0x00008000);
      }
      /**
       * <code>optional bool zigbee = 72;</code>
       *
       * <pre>
       *&#47; SupportedBy:
       * </pre>
       */
      public boolean getZigbee() {
        return zigbee_;
      }
      /**
       * <code>optional bool zigbee = 72;</code>
       *
       * <pre>
       *&#47; SupportedBy:
       * </pre>
       */
      public Builder setZigbee(boolean value) {
        bitField1_ |= 0x00008000;
        zigbee_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool zigbee = 72;</code>
       *
       * <pre>
       *&#47; SupportedBy:
       * </pre>
       */
      public Builder clearZigbee() {
        bitField1_ = (bitField1_ & ~0x00008000);
        zigbee_ = false;
        onChanged();
        return this;
      }

      private boolean retestIO_ ;
      /**
       * <code>optional bool retestIO = 73;</code>
       *
       * <pre>
       *&#47; SupportedBy:
       * </pre>
       */
      public boolean hasRetestIO() {
        return ((bitField1_ & 0x00010000) == 0x00010000);
      }
      /**
       * <code>optional bool retestIO = 73;</code>
       *
       * <pre>
       *&#47; SupportedBy:
       * </pre>
       */
      public boolean getRetestIO() {
        return retestIO_;
      }
      /**
       * <code>optional bool retestIO = 73;</code>
       *
       * <pre>
       *&#47; SupportedBy:
       * </pre>
       */
      public Builder setRetestIO(boolean value) {
        bitField1_ |= 0x00010000;
        retestIO_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool retestIO = 73;</code>
       *
       * <pre>
       *&#47; SupportedBy:
       * </pre>
       */
      public Builder clearRetestIO() {
        bitField1_ = (bitField1_ & ~0x00010000);
        retestIO_ = false;
        onChanged();
        return this;
      }

      private boolean retestBattery_ ;
      /**
       * <code>optional bool retestBattery = 74;</code>
       *
       * <pre>
       *&#47; SupportedBy:
       * </pre>
       */
      public boolean hasRetestBattery() {
        return ((bitField1_ & 0x00020000) == 0x00020000);
      }
      /**
       * <code>optional bool retestBattery = 74;</code>
       *
       * <pre>
       *&#47; SupportedBy:
       * </pre>
       */
      public boolean getRetestBattery() {
        return retestBattery_;
      }
      /**
       * <code>optional bool retestBattery = 74;</code>
       *
       * <pre>
       *&#47; SupportedBy:
       * </pre>
       */
      public Builder setRetestBattery(boolean value) {
        bitField1_ |= 0x00020000;
        retestBattery_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool retestBattery = 74;</code>
       *
       * <pre>
       *&#47; SupportedBy:
       * </pre>
       */
      public Builder clearRetestBattery() {
        bitField1_ = (bitField1_ & ~0x00020000);
        retestBattery_ = false;
        onChanged();
        return this;
      }

      private boolean retestGPS_ ;
      /**
       * <code>optional bool retestGPS = 75;</code>
       *
       * <pre>
       *&#47; SupportedBy:
       * </pre>
       */
      public boolean hasRetestGPS() {
        return ((bitField1_ & 0x00040000) == 0x00040000);
      }
      /**
       * <code>optional bool retestGPS = 75;</code>
       *
       * <pre>
       *&#47; SupportedBy:
       * </pre>
       */
      public boolean getRetestGPS() {
        return retestGPS_;
      }
      /**
       * <code>optional bool retestGPS = 75;</code>
       *
       * <pre>
       *&#47; SupportedBy:
       * </pre>
       */
      public Builder setRetestGPS(boolean value) {
        bitField1_ |= 0x00040000;
        retestGPS_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool retestGPS = 75;</code>
       *
       * <pre>
       *&#47; SupportedBy:
       * </pre>
       */
      public Builder clearRetestGPS() {
        bitField1_ = (bitField1_ & ~0x00040000);
        retestGPS_ = false;
        onChanged();
        return this;
      }

      private boolean enterTestMode_ ;
      /**
       * <code>optional bool enterTestMode = 126;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasEnterTestMode() {
        return ((bitField1_ & 0x00080000) == 0x00080000);
      }
      /**
       * <code>optional bool enterTestMode = 126;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean getEnterTestMode() {
        return enterTestMode_;
      }
      /**
       * <code>optional bool enterTestMode = 126;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setEnterTestMode(boolean value) {
        bitField1_ |= 0x00080000;
        enterTestMode_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool enterTestMode = 126;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearEnterTestMode() {
        bitField1_ = (bitField1_ & ~0x00080000);
        enterTestMode_ = false;
        onChanged();
        return this;
      }

      private boolean exitTestMode_ ;
      /**
       * <code>optional bool exitTestMode = 127;</code>
       *
       * <pre>
       *&#47; Save result on flash - SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasExitTestMode() {
        return ((bitField1_ & 0x00100000) == 0x00100000);
      }
      /**
       * <code>optional bool exitTestMode = 127;</code>
       *
       * <pre>
       *&#47; Save result on flash - SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean getExitTestMode() {
        return exitTestMode_;
      }
      /**
       * <code>optional bool exitTestMode = 127;</code>
       *
       * <pre>
       *&#47; Save result on flash - SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setExitTestMode(boolean value) {
        bitField1_ |= 0x00100000;
        exitTestMode_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool exitTestMode = 127;</code>
       *
       * <pre>
       *&#47; Save result on flash - SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearExitTestMode() {
        bitField1_ = (bitField1_ & ~0x00100000);
        exitTestMode_ = false;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:maxpb.TestBegin)
    }

    static {
      defaultInstance = new TestBegin(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:maxpb.TestBegin)
  }

  public interface TestResponseOrBuilder extends
      // @@protoc_insertion_point(interface_extends:maxpb.TestResponse)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required uint32 testId = 1;</code>
     *
     * <pre>
     *&#47; use appId from message TestBegin - SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasTestId();
    /**
     * <code>required uint32 testId = 1;</code>
     *
     * <pre>
     *&#47; use appId from message TestBegin - SupportedBy: MXT160, MXT162
     * </pre>
     */
    int getTestId();

    /**
     * <code>optional bool result = 2;</code>
     *
     * <pre>
     *&#47; 0 - fail, 1 - ok - SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasResult();
    /**
     * <code>optional bool result = 2;</code>
     *
     * <pre>
     *&#47; 0 - fail, 1 - ok - SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean getResult();

    /**
     * <code>optional int32 value = 3;</code>
     *
     * <pre>
     *&#47; voltage, temperature, etc - SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasValue();
    /**
     * <code>optional int32 value = 3;</code>
     *
     * <pre>
     *&#47; voltage, temperature, etc - SupportedBy: MXT160, MXT162
     * </pre>
     */
    int getValue();

    /**
     * <code>optional .maxpb.GpsInfo gpsInfo = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasGpsInfo();
    /**
     * <code>optional .maxpb.GpsInfo gpsInfo = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbGps.GpsInfo getGpsInfo();
    /**
     * <code>optional .maxpb.GpsInfo gpsInfo = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbGps.GpsInfoOrBuilder getGpsInfoOrBuilder();

    /**
     * <code>optional .maxpb.Creg gprs = 5;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasGprs();
    /**
     * <code>optional .maxpb.Creg gprs = 5;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbProduction.Creg getGprs();

    /**
     * <code>optional string answerData = 6;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasAnswerData();
    /**
     * <code>optional string answerData = 6;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    java.lang.String getAnswerData();
    /**
     * <code>optional string answerData = 6;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    com.google.protobuf.ByteString
        getAnswerDataBytes();
  }
  /**
   * Protobuf type {@code maxpb.TestResponse}
   */
  public static final class TestResponse extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:maxpb.TestResponse)
      TestResponseOrBuilder {
    // Use TestResponse.newBuilder() to construct.
    private TestResponse(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private TestResponse(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final TestResponse defaultInstance;
    public static TestResponse getDefaultInstance() {
      return defaultInstance;
    }

    public TestResponse getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private TestResponse(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              testId_ = input.readUInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              result_ = input.readBool();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              value_ = input.readInt32();
              break;
            }
            case 34: {
              maxpb.MaxpbGps.GpsInfo.Builder subBuilder = null;
              if (((bitField0_ & 0x00000008) == 0x00000008)) {
                subBuilder = gpsInfo_.toBuilder();
              }
              gpsInfo_ = input.readMessage(maxpb.MaxpbGps.GpsInfo.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(gpsInfo_);
                gpsInfo_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000008;
              break;
            }
            case 40: {
              int rawValue = input.readEnum();
              maxpb.MaxpbProduction.Creg value = maxpb.MaxpbProduction.Creg.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(5, rawValue);
              } else {
                bitField0_ |= 0x00000010;
                gprs_ = value;
              }
              break;
            }
            case 50: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000020;
              answerData_ = bs;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return maxpb.MaxpbProduction.internal_static_maxpb_TestResponse_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return maxpb.MaxpbProduction.internal_static_maxpb_TestResponse_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              maxpb.MaxpbProduction.TestResponse.class, maxpb.MaxpbProduction.TestResponse.Builder.class);
    }

    public static com.google.protobuf.Parser<TestResponse> PARSER =
        new com.google.protobuf.AbstractParser<TestResponse>() {
      public TestResponse parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new TestResponse(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<TestResponse> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int TESTID_FIELD_NUMBER = 1;
    private int testId_;
    /**
     * <code>required uint32 testId = 1;</code>
     *
     * <pre>
     *&#47; use appId from message TestBegin - SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasTestId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required uint32 testId = 1;</code>
     *
     * <pre>
     *&#47; use appId from message TestBegin - SupportedBy: MXT160, MXT162
     * </pre>
     */
    public int getTestId() {
      return testId_;
    }

    public static final int RESULT_FIELD_NUMBER = 2;
    private boolean result_;
    /**
     * <code>optional bool result = 2;</code>
     *
     * <pre>
     *&#47; 0 - fail, 1 - ok - SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasResult() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional bool result = 2;</code>
     *
     * <pre>
     *&#47; 0 - fail, 1 - ok - SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean getResult() {
      return result_;
    }

    public static final int VALUE_FIELD_NUMBER = 3;
    private int value_;
    /**
     * <code>optional int32 value = 3;</code>
     *
     * <pre>
     *&#47; voltage, temperature, etc - SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasValue() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 value = 3;</code>
     *
     * <pre>
     *&#47; voltage, temperature, etc - SupportedBy: MXT160, MXT162
     * </pre>
     */
    public int getValue() {
      return value_;
    }

    public static final int GPSINFO_FIELD_NUMBER = 4;
    private maxpb.MaxpbGps.GpsInfo gpsInfo_;
    /**
     * <code>optional .maxpb.GpsInfo gpsInfo = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasGpsInfo() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional .maxpb.GpsInfo gpsInfo = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbGps.GpsInfo getGpsInfo() {
      return gpsInfo_;
    }
    /**
     * <code>optional .maxpb.GpsInfo gpsInfo = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbGps.GpsInfoOrBuilder getGpsInfoOrBuilder() {
      return gpsInfo_;
    }

    public static final int GPRS_FIELD_NUMBER = 5;
    private maxpb.MaxpbProduction.Creg gprs_;
    /**
     * <code>optional .maxpb.Creg gprs = 5;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasGprs() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional .maxpb.Creg gprs = 5;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbProduction.Creg getGprs() {
      return gprs_;
    }

    public static final int ANSWERDATA_FIELD_NUMBER = 6;
    private java.lang.Object answerData_;
    /**
     * <code>optional string answerData = 6;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasAnswerData() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional string answerData = 6;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public java.lang.String getAnswerData() {
      java.lang.Object ref = answerData_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          answerData_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string answerData = 6;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public com.google.protobuf.ByteString
        getAnswerDataBytes() {
      java.lang.Object ref = answerData_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        answerData_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private void initFields() {
      testId_ = 0;
      result_ = false;
      value_ = 0;
      gpsInfo_ = maxpb.MaxpbGps.GpsInfo.getDefaultInstance();
      gprs_ = maxpb.MaxpbProduction.Creg.CREG_NOT_REGISTERED;
      answerData_ = "";
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasTestId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (hasGpsInfo()) {
        if (!getGpsInfo().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, testId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBool(2, result_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, value_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeMessage(4, gpsInfo_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeEnum(5, gprs_.getNumber());
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeBytes(6, getAnswerDataBytes());
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, testId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(2, result_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, value_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, gpsInfo_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(5, gprs_.getNumber());
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(6, getAnswerDataBytes());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static maxpb.MaxpbProduction.TestResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static maxpb.MaxpbProduction.TestResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static maxpb.MaxpbProduction.TestResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static maxpb.MaxpbProduction.TestResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static maxpb.MaxpbProduction.TestResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static maxpb.MaxpbProduction.TestResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static maxpb.MaxpbProduction.TestResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static maxpb.MaxpbProduction.TestResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static maxpb.MaxpbProduction.TestResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static maxpb.MaxpbProduction.TestResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(maxpb.MaxpbProduction.TestResponse prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code maxpb.TestResponse}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:maxpb.TestResponse)
        maxpb.MaxpbProduction.TestResponseOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return maxpb.MaxpbProduction.internal_static_maxpb_TestResponse_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return maxpb.MaxpbProduction.internal_static_maxpb_TestResponse_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                maxpb.MaxpbProduction.TestResponse.class, maxpb.MaxpbProduction.TestResponse.Builder.class);
      }

      // Construct using maxpb.MaxpbProduction.TestResponse.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getGpsInfoFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        testId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        result_ = false;
        bitField0_ = (bitField0_ & ~0x00000002);
        value_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        if (gpsInfoBuilder_ == null) {
          gpsInfo_ = maxpb.MaxpbGps.GpsInfo.getDefaultInstance();
        } else {
          gpsInfoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        gprs_ = maxpb.MaxpbProduction.Creg.CREG_NOT_REGISTERED;
        bitField0_ = (bitField0_ & ~0x00000010);
        answerData_ = "";
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return maxpb.MaxpbProduction.internal_static_maxpb_TestResponse_descriptor;
      }

      public maxpb.MaxpbProduction.TestResponse getDefaultInstanceForType() {
        return maxpb.MaxpbProduction.TestResponse.getDefaultInstance();
      }

      public maxpb.MaxpbProduction.TestResponse build() {
        maxpb.MaxpbProduction.TestResponse result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public maxpb.MaxpbProduction.TestResponse buildPartial() {
        maxpb.MaxpbProduction.TestResponse result = new maxpb.MaxpbProduction.TestResponse(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.testId_ = testId_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.result_ = result_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.value_ = value_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        if (gpsInfoBuilder_ == null) {
          result.gpsInfo_ = gpsInfo_;
        } else {
          result.gpsInfo_ = gpsInfoBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.gprs_ = gprs_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.answerData_ = answerData_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof maxpb.MaxpbProduction.TestResponse) {
          return mergeFrom((maxpb.MaxpbProduction.TestResponse)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(maxpb.MaxpbProduction.TestResponse other) {
        if (other == maxpb.MaxpbProduction.TestResponse.getDefaultInstance()) return this;
        if (other.hasTestId()) {
          setTestId(other.getTestId());
        }
        if (other.hasResult()) {
          setResult(other.getResult());
        }
        if (other.hasValue()) {
          setValue(other.getValue());
        }
        if (other.hasGpsInfo()) {
          mergeGpsInfo(other.getGpsInfo());
        }
        if (other.hasGprs()) {
          setGprs(other.getGprs());
        }
        if (other.hasAnswerData()) {
          bitField0_ |= 0x00000020;
          answerData_ = other.answerData_;
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasTestId()) {
          
          return false;
        }
        if (hasGpsInfo()) {
          if (!getGpsInfo().isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        maxpb.MaxpbProduction.TestResponse parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (maxpb.MaxpbProduction.TestResponse) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int testId_ ;
      /**
       * <code>required uint32 testId = 1;</code>
       *
       * <pre>
       *&#47; use appId from message TestBegin - SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasTestId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint32 testId = 1;</code>
       *
       * <pre>
       *&#47; use appId from message TestBegin - SupportedBy: MXT160, MXT162
       * </pre>
       */
      public int getTestId() {
        return testId_;
      }
      /**
       * <code>required uint32 testId = 1;</code>
       *
       * <pre>
       *&#47; use appId from message TestBegin - SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setTestId(int value) {
        bitField0_ |= 0x00000001;
        testId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint32 testId = 1;</code>
       *
       * <pre>
       *&#47; use appId from message TestBegin - SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearTestId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        testId_ = 0;
        onChanged();
        return this;
      }

      private boolean result_ ;
      /**
       * <code>optional bool result = 2;</code>
       *
       * <pre>
       *&#47; 0 - fail, 1 - ok - SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasResult() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional bool result = 2;</code>
       *
       * <pre>
       *&#47; 0 - fail, 1 - ok - SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean getResult() {
        return result_;
      }
      /**
       * <code>optional bool result = 2;</code>
       *
       * <pre>
       *&#47; 0 - fail, 1 - ok - SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setResult(boolean value) {
        bitField0_ |= 0x00000002;
        result_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool result = 2;</code>
       *
       * <pre>
       *&#47; 0 - fail, 1 - ok - SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearResult() {
        bitField0_ = (bitField0_ & ~0x00000002);
        result_ = false;
        onChanged();
        return this;
      }

      private int value_ ;
      /**
       * <code>optional int32 value = 3;</code>
       *
       * <pre>
       *&#47; voltage, temperature, etc - SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasValue() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 value = 3;</code>
       *
       * <pre>
       *&#47; voltage, temperature, etc - SupportedBy: MXT160, MXT162
       * </pre>
       */
      public int getValue() {
        return value_;
      }
      /**
       * <code>optional int32 value = 3;</code>
       *
       * <pre>
       *&#47; voltage, temperature, etc - SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setValue(int value) {
        bitField0_ |= 0x00000004;
        value_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 value = 3;</code>
       *
       * <pre>
       *&#47; voltage, temperature, etc - SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearValue() {
        bitField0_ = (bitField0_ & ~0x00000004);
        value_ = 0;
        onChanged();
        return this;
      }

      private maxpb.MaxpbGps.GpsInfo gpsInfo_ = maxpb.MaxpbGps.GpsInfo.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbGps.GpsInfo, maxpb.MaxpbGps.GpsInfo.Builder, maxpb.MaxpbGps.GpsInfoOrBuilder> gpsInfoBuilder_;
      /**
       * <code>optional .maxpb.GpsInfo gpsInfo = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasGpsInfo() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional .maxpb.GpsInfo gpsInfo = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbGps.GpsInfo getGpsInfo() {
        if (gpsInfoBuilder_ == null) {
          return gpsInfo_;
        } else {
          return gpsInfoBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .maxpb.GpsInfo gpsInfo = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setGpsInfo(maxpb.MaxpbGps.GpsInfo value) {
        if (gpsInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          gpsInfo_ = value;
          onChanged();
        } else {
          gpsInfoBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .maxpb.GpsInfo gpsInfo = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setGpsInfo(
          maxpb.MaxpbGps.GpsInfo.Builder builderForValue) {
        if (gpsInfoBuilder_ == null) {
          gpsInfo_ = builderForValue.build();
          onChanged();
        } else {
          gpsInfoBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .maxpb.GpsInfo gpsInfo = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder mergeGpsInfo(maxpb.MaxpbGps.GpsInfo value) {
        if (gpsInfoBuilder_ == null) {
          if (((bitField0_ & 0x00000008) == 0x00000008) &&
              gpsInfo_ != maxpb.MaxpbGps.GpsInfo.getDefaultInstance()) {
            gpsInfo_ =
              maxpb.MaxpbGps.GpsInfo.newBuilder(gpsInfo_).mergeFrom(value).buildPartial();
          } else {
            gpsInfo_ = value;
          }
          onChanged();
        } else {
          gpsInfoBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .maxpb.GpsInfo gpsInfo = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearGpsInfo() {
        if (gpsInfoBuilder_ == null) {
          gpsInfo_ = maxpb.MaxpbGps.GpsInfo.getDefaultInstance();
          onChanged();
        } else {
          gpsInfoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }
      /**
       * <code>optional .maxpb.GpsInfo gpsInfo = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbGps.GpsInfo.Builder getGpsInfoBuilder() {
        bitField0_ |= 0x00000008;
        onChanged();
        return getGpsInfoFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .maxpb.GpsInfo gpsInfo = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbGps.GpsInfoOrBuilder getGpsInfoOrBuilder() {
        if (gpsInfoBuilder_ != null) {
          return gpsInfoBuilder_.getMessageOrBuilder();
        } else {
          return gpsInfo_;
        }
      }
      /**
       * <code>optional .maxpb.GpsInfo gpsInfo = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbGps.GpsInfo, maxpb.MaxpbGps.GpsInfo.Builder, maxpb.MaxpbGps.GpsInfoOrBuilder> 
          getGpsInfoFieldBuilder() {
        if (gpsInfoBuilder_ == null) {
          gpsInfoBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              maxpb.MaxpbGps.GpsInfo, maxpb.MaxpbGps.GpsInfo.Builder, maxpb.MaxpbGps.GpsInfoOrBuilder>(
                  getGpsInfo(),
                  getParentForChildren(),
                  isClean());
          gpsInfo_ = null;
        }
        return gpsInfoBuilder_;
      }

      private maxpb.MaxpbProduction.Creg gprs_ = maxpb.MaxpbProduction.Creg.CREG_NOT_REGISTERED;
      /**
       * <code>optional .maxpb.Creg gprs = 5;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasGprs() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional .maxpb.Creg gprs = 5;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbProduction.Creg getGprs() {
        return gprs_;
      }
      /**
       * <code>optional .maxpb.Creg gprs = 5;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setGprs(maxpb.MaxpbProduction.Creg value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000010;
        gprs_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .maxpb.Creg gprs = 5;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearGprs() {
        bitField0_ = (bitField0_ & ~0x00000010);
        gprs_ = maxpb.MaxpbProduction.Creg.CREG_NOT_REGISTERED;
        onChanged();
        return this;
      }

      private java.lang.Object answerData_ = "";
      /**
       * <code>optional string answerData = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasAnswerData() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional string answerData = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public java.lang.String getAnswerData() {
        java.lang.Object ref = answerData_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            answerData_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string answerData = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public com.google.protobuf.ByteString
          getAnswerDataBytes() {
        java.lang.Object ref = answerData_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          answerData_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string answerData = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setAnswerData(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000020;
        answerData_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string answerData = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearAnswerData() {
        bitField0_ = (bitField0_ & ~0x00000020);
        answerData_ = getDefaultInstance().getAnswerData();
        onChanged();
        return this;
      }
      /**
       * <code>optional string answerData = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setAnswerDataBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000020;
        answerData_ = value;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:maxpb.TestResponse)
    }

    static {
      defaultInstance = new TestResponse(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:maxpb.TestResponse)
  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_maxpb_TestBegin_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_maxpb_TestBegin_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_maxpb_TestResponse_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_maxpb_TestResponse_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\026maxpb_production.proto\022\005maxpb\032\017maxpb_g" +
      "ps.proto\"\226\010\n\tTestBegin\022\025\n\raccelerometer\030" +
      "\001 \001(\010\022\036\n\026accelerometerCalibrate\030\002 \001(\010\022\013\n" +
      "\003can\030\003 \001(\010\022\r\n\005audio\030\004 \001(\010\022\024\n\014formatMemor" +
      "y\030\005 \001(\010\022\017\n\007gpsNmea\030\006 \001(\010\022\032\n\004ledA\030\007 \001(\0162\014" +
      ".maxpb.Color\022\032\n\004ledB\030\010 \001(\0162\014.maxpb.Color" +
      "\022\023\n\013temperature\030\t \001(\010\022\016\n\006sdCard\030\n \001(\010\022\016\n" +
      "\006tamper\030\013 \001(\010\022\r\n\005rs485\030\014 \001(\010\022\022\n\nextVolta" +
      "ge\030\r \001(\010\022\n\n\002io\030\016 \001(\010\022\020\n\010simCard1\030\017 \001(\010\022\020" +
      "\n\010simCard2\030\020 \001(\010\022\021\n\tsleepMode\030\021 \001(\r\022\021\n\ts",
      "tockMode\030\022 \001(\r\022\013\n\003rtc\030\023 \001(\010\022\021\n\tramMemory" +
      "\030\025 \001(\010\022\021\n\tnorMemory\030\026 \001(\010\022\027\n\017batteryUnpl" +
      "uged\030\027 \001(\010\022\027\n\017batteryCharging\030\030 \001(\010\022\r\n\005r" +
      "s232\030\031 \001(\010\022\021\n\tsatellite\030\032 \001(\010\022\017\n\007onewire" +
      "\030\033 \001(\010\022\026\n\016currentMinimal\030\034 \001(\010\022\026\n\016curren" +
      "tTypical\030\035 \001(\010\022\026\n\016currentMaximum\030\036 \001(\010\022\020" +
      "\n\010loadDump\030\037 \001(\010\022\020\n\010fwClient\030! \001(\010\022\013\n\003us" +
      "b\030% \001(\010\022\026\n\016batteryVoltage\030\' \001(\010\022\013\n\003mic\030(" +
      " \001(\010\022\025\n\rgpsAntennaInt\030) \001(\010\022\025\n\rgpsAntenn" +
      "aExt\030* \001(\010\022\023\n\013resetButton\0302 \001(\010\022\025\n\routpu",
      "tHSShort\030> \001(\010\022\014\n\004gprs\030? \001(\010\022\013\n\003pep\030@ \001(" +
      "\010\022\025\n\rclosedHousing\030A \001(\010\022\017\n\007cftFlag\030B \001(" +
      "\010\022\014\n\004lora\030C \001(\010\022\021\n\tbluetooth\030D \001(\010\022\017\n\007gs" +
      "ensor\030E \001(\010\022\026\n\016externalMemory\030F \001(\010\022\023\n\013c" +
      "onsumption\030G \001(\010\022\016\n\006zigbee\030H \001(\010\022\020\n\010rete" +
      "stIO\030I \001(\010\022\025\n\rretestBattery\030J \001(\010\022\021\n\tret" +
      "estGPS\030K \001(\010\022\025\n\renterTestMode\030~ \001(\010\022\024\n\014e" +
      "xitTestMode\030\177 \001(\010\"\215\001\n\014TestResponse\022\016\n\006te" +
      "stId\030\001 \002(\r\022\016\n\006result\030\002 \001(\010\022\r\n\005value\030\003 \001(" +
      "\005\022\037\n\007gpsInfo\030\004 \001(\0132\016.maxpb.GpsInfo\022\031\n\004gp",
      "rs\030\005 \001(\0162\013.maxpb.Creg\022\022\n\nanswerData\030\006 \001(" +
      "\t*\221\001\n\005Color\022\014\n\010COL_NONE\020\000\022\013\n\007COL_RED\020\001\022\r" +
      "\n\tCOL_GREEN\020\002\022\016\n\nCOL_ORANGE\020\003\022\016\n\nCOL_RFU" +
      "_01\020\004\022\016\n\nCOL_RFU_02\020\005\022\016\n\nCOL_RFU_03\020\006\022\016\n" +
      "\nCOL_RFU_04\020\007\022\016\n\nCOL_RFU_05\020\010*\322\001\n\004Creg\022\027" +
      "\n\023CREG_NOT_REGISTERED\020\000\022\023\n\017CREG_REGISTER" +
      "ED\020\001\022\022\n\016CREG_SEARCHING\020\002\022\017\n\013CREG_DENIED\020" +
      "\003\022\020\n\014CREG_UNKNOWN\020\004\022\020\n\014CREG_ROAMING\020\005\022\017\n" +
      "\013CREG_RFU_01\020\006\022\017\n\013CREG_RFU_02\020\007\022\017\n\013CREG_" +
      "RFU_03\020\010\022\017\n\013CREG_RFU_04\020\t\022\017\n\013CREG_RFU_05",
      "\020\n"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          maxpb.MaxpbGps.getDescriptor(),
        }, assigner);
    internal_static_maxpb_TestBegin_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_maxpb_TestBegin_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_maxpb_TestBegin_descriptor,
        new java.lang.String[] { "Accelerometer", "AccelerometerCalibrate", "Can", "Audio", "FormatMemory", "GpsNmea", "LedA", "LedB", "Temperature", "SdCard", "Tamper", "Rs485", "ExtVoltage", "Io", "SimCard1", "SimCard2", "SleepMode", "StockMode", "Rtc", "RamMemory", "NorMemory", "BatteryUnpluged", "BatteryCharging", "Rs232", "Satellite", "Onewire", "CurrentMinimal", "CurrentTypical", "CurrentMaximum", "LoadDump", "FwClient", "Usb", "BatteryVoltage", "Mic", "GpsAntennaInt", "GpsAntennaExt", "ResetButton", "OutputHSShort", "Gprs", "Pep", "ClosedHousing", "CftFlag", "Lora", "Bluetooth", "Gsensor", "ExternalMemory", "Consumption", "Zigbee", "RetestIO", "RetestBattery", "RetestGPS", "EnterTestMode", "ExitTestMode", });
    internal_static_maxpb_TestResponse_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_maxpb_TestResponse_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_maxpb_TestResponse_descriptor,
        new java.lang.String[] { "TestId", "Result", "Value", "GpsInfo", "Gprs", "AnswerData", });
    maxpb.MaxpbGps.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
