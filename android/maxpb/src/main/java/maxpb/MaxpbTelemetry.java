// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: maxpb_telemetry.proto

package maxpb;

public final class MaxpbTelemetry {
  private MaxpbTelemetry() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  /**
   * Protobuf enum {@code maxpb.TelemetryEvent}
   */
  public enum TelemetryEvent
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>TE_NONE = 0;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    TE_NONE(0, 0),
    /**
     * <code>TE_ACCELERATION = 1;</code>
     *
     * <pre>
     *&#47; Data from this ID are mG (Note: 1 mG = 0,0098 m/s2) SupportedBy: MXT142, MXT162
     * </pre>
     */
    TE_ACCELERATION(1, 1),
    /**
     * <code>TE_BRAKE = 2;</code>
     *
     * <pre>
     *&#47; Data from this ID are mG (Note: 1 mG = 0,0098 m/s2) SupportedBy: MXT142, MXT162
     * </pre>
     */
    TE_BRAKE(2, 2),
    /**
     * <code>TE_BUMP = 3;</code>
     *
     * <pre>
     *&#47; Data from this ID are mG (Note: 1 mG = 0,0098 m/s2) SupportedBy: MXT162
     * </pre>
     */
    TE_BUMP(3, 3),
    /**
     * <code>TE_CURVE = 4;</code>
     *
     * <pre>
     *&#47; Data from this ID are mG (Note: 1 mG = 0,0098 m/s2) SupportedBy: MXT142, MXT162
     * </pre>
     */
    TE_CURVE(4, 4),
    /**
     * <code>TE_CRASH = 5;</code>
     *
     * <pre>
     *&#47; Data from this ID are mG (Note: 1 mG = 0,0098 m/s2) SupportedBy: MXT142, MXT162
     * </pre>
     */
    TE_CRASH(5, 5),
    /**
     * <code>TE_CALIBRATION_DONE = 6;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180
     * </pre>
     */
    TE_CALIBRATION_DONE(6, 6),
    /**
     * <code>TE_CALIBRATION_RESETED = 7;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180
     * </pre>
     */
    TE_CALIBRATION_RESETED(7, 7),
    /**
     * <code>TE_STOPPED_EXCESS = 8;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180
     * </pre>
     */
    TE_STOPPED_EXCESS(8, 8),
    /**
     * <code>TE_STOP_TO_MOVING = 9;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180
     * </pre>
     */
    TE_STOP_TO_MOVING(9, 9),
    /**
     * <code>TE_MOVING_TO_STOP = 10;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180
     * </pre>
     */
    TE_MOVING_TO_STOP(10, 10),
    /**
     * <code>TE_MAX_SPEED_START = 11;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180
     * </pre>
     */
    TE_MAX_SPEED_START(11, 11),
    /**
     * <code>TE_MAX_SPEED_END = 12;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180
     * </pre>
     */
    TE_MAX_SPEED_END(12, 12),
    /**
     * <code>TE_MAX_SPEED_CANCELED = 13;</code>
     *
     * <pre>
     *&#47; Speed source lost SupportedBy: MXT162
     * </pre>
     */
    TE_MAX_SPEED_CANCELED(13, 13),
    /**
     * <code>TE_MAX_RAINY_SPEED_START = 14;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180
     * </pre>
     */
    TE_MAX_RAINY_SPEED_START(14, 14),
    /**
     * <code>TE_MAX_RAINY_SPEED_END = 15;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180
     * </pre>
     */
    TE_MAX_RAINY_SPEED_END(15, 15),
    /**
     * <code>TE_MAX_RAINY_SPEED_CANCELED = 16;</code>
     *
     * <pre>
     *&#47; Speed source lost SupportedBy: MXT162
     * </pre>
     */
    TE_MAX_RAINY_SPEED_CANCELED(16, 16),
    /**
     * <code>TE_PITCHING = 17;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT162
     * </pre>
     */
    TE_PITCHING(17, 17),
    /**
     * <code>TE_ROLLING = 18;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT162
     * </pre>
     */
    TE_ROLLING(18, 18),
    /**
     * <code>TE_DELTAS = 19;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    TE_DELTAS(19, 19),
    /**
     * <code>TE_HISTORY = 20;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    TE_HISTORY(20, 20),
    /**
     * <code>TE_MODULE_REMOVED = 21;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    TE_MODULE_REMOVED(21, 21),
    /**
     * <code>TE_RFU_01 = 22;</code>
     *
     * <pre>
     *&#47;&#64;excluded SupportedBy:
     * </pre>
     */
    TE_RFU_01(22, 22),
    /**
     * <code>TE_RFU_02 = 23;</code>
     *
     * <pre>
     *&#47;&#64;excluded SupportedBy:
     * </pre>
     */
    TE_RFU_02(23, 23),
    /**
     * <code>TE_RFU_03 = 24;</code>
     *
     * <pre>
     *&#47;&#64;excluded SupportedBy:
     * </pre>
     */
    TE_RFU_03(24, 24),
    /**
     * <code>TE_RFU_04 = 25;</code>
     *
     * <pre>
     *&#47;&#64;excluded SupportedBy:
     * </pre>
     */
    TE_RFU_04(25, 25),
    /**
     * <code>TE_RFU_05 = 26;</code>
     *
     * <pre>
     *&#47;&#64;excluded SupportedBy:
     * </pre>
     */
    TE_RFU_05(26, 26),
    ;

    /**
     * <code>TE_NONE = 0;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    public static final int TE_NONE_VALUE = 0;
    /**
     * <code>TE_ACCELERATION = 1;</code>
     *
     * <pre>
     *&#47; Data from this ID are mG (Note: 1 mG = 0,0098 m/s2) SupportedBy: MXT142, MXT162
     * </pre>
     */
    public static final int TE_ACCELERATION_VALUE = 1;
    /**
     * <code>TE_BRAKE = 2;</code>
     *
     * <pre>
     *&#47; Data from this ID are mG (Note: 1 mG = 0,0098 m/s2) SupportedBy: MXT142, MXT162
     * </pre>
     */
    public static final int TE_BRAKE_VALUE = 2;
    /**
     * <code>TE_BUMP = 3;</code>
     *
     * <pre>
     *&#47; Data from this ID are mG (Note: 1 mG = 0,0098 m/s2) SupportedBy: MXT162
     * </pre>
     */
    public static final int TE_BUMP_VALUE = 3;
    /**
     * <code>TE_CURVE = 4;</code>
     *
     * <pre>
     *&#47; Data from this ID are mG (Note: 1 mG = 0,0098 m/s2) SupportedBy: MXT142, MXT162
     * </pre>
     */
    public static final int TE_CURVE_VALUE = 4;
    /**
     * <code>TE_CRASH = 5;</code>
     *
     * <pre>
     *&#47; Data from this ID are mG (Note: 1 mG = 0,0098 m/s2) SupportedBy: MXT142, MXT162
     * </pre>
     */
    public static final int TE_CRASH_VALUE = 5;
    /**
     * <code>TE_CALIBRATION_DONE = 6;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180
     * </pre>
     */
    public static final int TE_CALIBRATION_DONE_VALUE = 6;
    /**
     * <code>TE_CALIBRATION_RESETED = 7;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180
     * </pre>
     */
    public static final int TE_CALIBRATION_RESETED_VALUE = 7;
    /**
     * <code>TE_STOPPED_EXCESS = 8;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180
     * </pre>
     */
    public static final int TE_STOPPED_EXCESS_VALUE = 8;
    /**
     * <code>TE_STOP_TO_MOVING = 9;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180
     * </pre>
     */
    public static final int TE_STOP_TO_MOVING_VALUE = 9;
    /**
     * <code>TE_MOVING_TO_STOP = 10;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180
     * </pre>
     */
    public static final int TE_MOVING_TO_STOP_VALUE = 10;
    /**
     * <code>TE_MAX_SPEED_START = 11;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180
     * </pre>
     */
    public static final int TE_MAX_SPEED_START_VALUE = 11;
    /**
     * <code>TE_MAX_SPEED_END = 12;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180
     * </pre>
     */
    public static final int TE_MAX_SPEED_END_VALUE = 12;
    /**
     * <code>TE_MAX_SPEED_CANCELED = 13;</code>
     *
     * <pre>
     *&#47; Speed source lost SupportedBy: MXT162
     * </pre>
     */
    public static final int TE_MAX_SPEED_CANCELED_VALUE = 13;
    /**
     * <code>TE_MAX_RAINY_SPEED_START = 14;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180
     * </pre>
     */
    public static final int TE_MAX_RAINY_SPEED_START_VALUE = 14;
    /**
     * <code>TE_MAX_RAINY_SPEED_END = 15;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180
     * </pre>
     */
    public static final int TE_MAX_RAINY_SPEED_END_VALUE = 15;
    /**
     * <code>TE_MAX_RAINY_SPEED_CANCELED = 16;</code>
     *
     * <pre>
     *&#47; Speed source lost SupportedBy: MXT162
     * </pre>
     */
    public static final int TE_MAX_RAINY_SPEED_CANCELED_VALUE = 16;
    /**
     * <code>TE_PITCHING = 17;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT162
     * </pre>
     */
    public static final int TE_PITCHING_VALUE = 17;
    /**
     * <code>TE_ROLLING = 18;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT162
     * </pre>
     */
    public static final int TE_ROLLING_VALUE = 18;
    /**
     * <code>TE_DELTAS = 19;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    public static final int TE_DELTAS_VALUE = 19;
    /**
     * <code>TE_HISTORY = 20;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    public static final int TE_HISTORY_VALUE = 20;
    /**
     * <code>TE_MODULE_REMOVED = 21;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    public static final int TE_MODULE_REMOVED_VALUE = 21;
    /**
     * <code>TE_RFU_01 = 22;</code>
     *
     * <pre>
     *&#47;&#64;excluded SupportedBy:
     * </pre>
     */
    public static final int TE_RFU_01_VALUE = 22;
    /**
     * <code>TE_RFU_02 = 23;</code>
     *
     * <pre>
     *&#47;&#64;excluded SupportedBy:
     * </pre>
     */
    public static final int TE_RFU_02_VALUE = 23;
    /**
     * <code>TE_RFU_03 = 24;</code>
     *
     * <pre>
     *&#47;&#64;excluded SupportedBy:
     * </pre>
     */
    public static final int TE_RFU_03_VALUE = 24;
    /**
     * <code>TE_RFU_04 = 25;</code>
     *
     * <pre>
     *&#47;&#64;excluded SupportedBy:
     * </pre>
     */
    public static final int TE_RFU_04_VALUE = 25;
    /**
     * <code>TE_RFU_05 = 26;</code>
     *
     * <pre>
     *&#47;&#64;excluded SupportedBy:
     * </pre>
     */
    public static final int TE_RFU_05_VALUE = 26;


    public final int getNumber() { return value; }

    public static TelemetryEvent valueOf(int value) {
      switch (value) {
        case 0: return TE_NONE;
        case 1: return TE_ACCELERATION;
        case 2: return TE_BRAKE;
        case 3: return TE_BUMP;
        case 4: return TE_CURVE;
        case 5: return TE_CRASH;
        case 6: return TE_CALIBRATION_DONE;
        case 7: return TE_CALIBRATION_RESETED;
        case 8: return TE_STOPPED_EXCESS;
        case 9: return TE_STOP_TO_MOVING;
        case 10: return TE_MOVING_TO_STOP;
        case 11: return TE_MAX_SPEED_START;
        case 12: return TE_MAX_SPEED_END;
        case 13: return TE_MAX_SPEED_CANCELED;
        case 14: return TE_MAX_RAINY_SPEED_START;
        case 15: return TE_MAX_RAINY_SPEED_END;
        case 16: return TE_MAX_RAINY_SPEED_CANCELED;
        case 17: return TE_PITCHING;
        case 18: return TE_ROLLING;
        case 19: return TE_DELTAS;
        case 20: return TE_HISTORY;
        case 21: return TE_MODULE_REMOVED;
        case 22: return TE_RFU_01;
        case 23: return TE_RFU_02;
        case 24: return TE_RFU_03;
        case 25: return TE_RFU_04;
        case 26: return TE_RFU_05;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<TelemetryEvent>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<TelemetryEvent>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<TelemetryEvent>() {
            public TelemetryEvent findValueByNumber(int number) {
              return TelemetryEvent.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return maxpb.MaxpbTelemetry.getDescriptor().getEnumTypes().get(0);
    }

    private static final TelemetryEvent[] VALUES = values();

    public static TelemetryEvent valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private TelemetryEvent(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:maxpb.TelemetryEvent)
  }

  /**
   * Protobuf enum {@code maxpb.AccelerometerState}
   */
  public enum AccelerometerState
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>AST_NONE = 0;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180
     * </pre>
     */
    AST_NONE(0, 0),
    /**
     * <code>AST_IN_CALIBRATION = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180
     * </pre>
     */
    AST_IN_CALIBRATION(1, 1),
    /**
     * <code>AST_READY = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180
     * </pre>
     */
    AST_READY(2, 2),
    /**
     * <code>AST_RFU_01 = 3;</code>
     *
     * <pre>
     *&#47;&#64;excluded SupportedBy:
     * </pre>
     */
    AST_RFU_01(3, 3),
    /**
     * <code>AST_RFU_02 = 4;</code>
     *
     * <pre>
     *&#47;&#64;excluded SupportedBy:
     * </pre>
     */
    AST_RFU_02(4, 4),
    /**
     * <code>AST_RFU_03 = 5;</code>
     *
     * <pre>
     *&#47;&#64;excluded SupportedBy:
     * </pre>
     */
    AST_RFU_03(5, 5),
    /**
     * <code>AST_RFU_04 = 6;</code>
     *
     * <pre>
     *&#47;&#64;excluded SupportedBy:
     * </pre>
     */
    AST_RFU_04(6, 6),
    /**
     * <code>AST_RFU_05 = 7;</code>
     *
     * <pre>
     *&#47;&#64;excluded SupportedBy:
     * </pre>
     */
    AST_RFU_05(7, 7),
    ;

    /**
     * <code>AST_NONE = 0;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180
     * </pre>
     */
    public static final int AST_NONE_VALUE = 0;
    /**
     * <code>AST_IN_CALIBRATION = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180
     * </pre>
     */
    public static final int AST_IN_CALIBRATION_VALUE = 1;
    /**
     * <code>AST_READY = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180
     * </pre>
     */
    public static final int AST_READY_VALUE = 2;
    /**
     * <code>AST_RFU_01 = 3;</code>
     *
     * <pre>
     *&#47;&#64;excluded SupportedBy:
     * </pre>
     */
    public static final int AST_RFU_01_VALUE = 3;
    /**
     * <code>AST_RFU_02 = 4;</code>
     *
     * <pre>
     *&#47;&#64;excluded SupportedBy:
     * </pre>
     */
    public static final int AST_RFU_02_VALUE = 4;
    /**
     * <code>AST_RFU_03 = 5;</code>
     *
     * <pre>
     *&#47;&#64;excluded SupportedBy:
     * </pre>
     */
    public static final int AST_RFU_03_VALUE = 5;
    /**
     * <code>AST_RFU_04 = 6;</code>
     *
     * <pre>
     *&#47;&#64;excluded SupportedBy:
     * </pre>
     */
    public static final int AST_RFU_04_VALUE = 6;
    /**
     * <code>AST_RFU_05 = 7;</code>
     *
     * <pre>
     *&#47;&#64;excluded SupportedBy:
     * </pre>
     */
    public static final int AST_RFU_05_VALUE = 7;


    public final int getNumber() { return value; }

    public static AccelerometerState valueOf(int value) {
      switch (value) {
        case 0: return AST_NONE;
        case 1: return AST_IN_CALIBRATION;
        case 2: return AST_READY;
        case 3: return AST_RFU_01;
        case 4: return AST_RFU_02;
        case 5: return AST_RFU_03;
        case 6: return AST_RFU_04;
        case 7: return AST_RFU_05;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<AccelerometerState>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<AccelerometerState>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<AccelerometerState>() {
            public AccelerometerState findValueByNumber(int number) {
              return AccelerometerState.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return maxpb.MaxpbTelemetry.getDescriptor().getEnumTypes().get(1);
    }

    private static final AccelerometerState[] VALUES = values();

    public static AccelerometerState valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private AccelerometerState(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:maxpb.AccelerometerState)
  }

  /**
   * Protobuf enum {@code maxpb.AccelerometerHistorySamples}
   */
  public enum AccelerometerHistorySamples
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>AH_4HZ = 0;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    AH_4HZ(0, 0),
    /**
     * <code>AH_2HZ = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    AH_2HZ(1, 1),
    /**
     * <code>AH_1_33HZ = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    AH_1_33HZ(2, 2),
    /**
     * <code>AH_1HZ = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    AH_1HZ(3, 3),
    /**
     * <code>AH_RFU_01 = 4;</code>
     *
     * <pre>
     *&#47;&#64;excluded SupportedBy:
     * </pre>
     */
    AH_RFU_01(4, 4),
    /**
     * <code>AH_RFU_02 = 5;</code>
     *
     * <pre>
     *&#47;&#64;excluded SupportedBy:
     * </pre>
     */
    AH_RFU_02(5, 5),
    /**
     * <code>AH_RFU_03 = 6;</code>
     *
     * <pre>
     *&#47;&#64;excluded SupportedBy:
     * </pre>
     */
    AH_RFU_03(6, 6),
    /**
     * <code>AH_RFU_04 = 7;</code>
     *
     * <pre>
     *&#47;&#64;excluded SupportedBy:
     * </pre>
     */
    AH_RFU_04(7, 7),
    /**
     * <code>AH_RFU_05 = 8;</code>
     *
     * <pre>
     *&#47;&#64;excluded SupportedBy:
     * </pre>
     */
    AH_RFU_05(8, 8),
    ;

    /**
     * <code>AH_4HZ = 0;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    public static final int AH_4HZ_VALUE = 0;
    /**
     * <code>AH_2HZ = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    public static final int AH_2HZ_VALUE = 1;
    /**
     * <code>AH_1_33HZ = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    public static final int AH_1_33HZ_VALUE = 2;
    /**
     * <code>AH_1HZ = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    public static final int AH_1HZ_VALUE = 3;
    /**
     * <code>AH_RFU_01 = 4;</code>
     *
     * <pre>
     *&#47;&#64;excluded SupportedBy:
     * </pre>
     */
    public static final int AH_RFU_01_VALUE = 4;
    /**
     * <code>AH_RFU_02 = 5;</code>
     *
     * <pre>
     *&#47;&#64;excluded SupportedBy:
     * </pre>
     */
    public static final int AH_RFU_02_VALUE = 5;
    /**
     * <code>AH_RFU_03 = 6;</code>
     *
     * <pre>
     *&#47;&#64;excluded SupportedBy:
     * </pre>
     */
    public static final int AH_RFU_03_VALUE = 6;
    /**
     * <code>AH_RFU_04 = 7;</code>
     *
     * <pre>
     *&#47;&#64;excluded SupportedBy:
     * </pre>
     */
    public static final int AH_RFU_04_VALUE = 7;
    /**
     * <code>AH_RFU_05 = 8;</code>
     *
     * <pre>
     *&#47;&#64;excluded SupportedBy:
     * </pre>
     */
    public static final int AH_RFU_05_VALUE = 8;


    public final int getNumber() { return value; }

    public static AccelerometerHistorySamples valueOf(int value) {
      switch (value) {
        case 0: return AH_4HZ;
        case 1: return AH_2HZ;
        case 2: return AH_1_33HZ;
        case 3: return AH_1HZ;
        case 4: return AH_RFU_01;
        case 5: return AH_RFU_02;
        case 6: return AH_RFU_03;
        case 7: return AH_RFU_04;
        case 8: return AH_RFU_05;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<AccelerometerHistorySamples>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<AccelerometerHistorySamples>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<AccelerometerHistorySamples>() {
            public AccelerometerHistorySamples findValueByNumber(int number) {
              return AccelerometerHistorySamples.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return maxpb.MaxpbTelemetry.getDescriptor().getEnumTypes().get(2);
    }

    private static final AccelerometerHistorySamples[] VALUES = values();

    public static AccelerometerHistorySamples valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private AccelerometerHistorySamples(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:maxpb.AccelerometerHistorySamples)
  }

  /**
   * Protobuf enum {@code maxpb.TelemetryDataSource}
   */
  public enum TelemetryDataSource
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>TDS_GPS = 0;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180, MAXIO
     * </pre>
     */
    TDS_GPS(0, 0),
    /**
     * <code>TDS_CAN = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180, MAXIO
     * </pre>
     */
    TDS_CAN(1, 1),
    /**
     * <code>TDS_PULSE = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180, MAXIO
     * </pre>
     */
    TDS_PULSE(2, 2),
    /**
     * <code>TDS_GSENSOR = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180, MAXIO
     * </pre>
     */
    TDS_GSENSOR(3, 3),
    /**
     * <code>TDS_RFU_01 = 4;</code>
     *
     * <pre>
     *&#47;&#64;excluded SupportedBy:
     * </pre>
     */
    TDS_RFU_01(4, 4),
    /**
     * <code>TDS_RFU_02 = 5;</code>
     *
     * <pre>
     *&#47;&#64;excluded SupportedBy:
     * </pre>
     */
    TDS_RFU_02(5, 5),
    /**
     * <code>TDS_RFU_03 = 6;</code>
     *
     * <pre>
     *&#47;&#64;excluded SupportedBy:
     * </pre>
     */
    TDS_RFU_03(6, 6),
    /**
     * <code>TDS_RFU_04 = 7;</code>
     *
     * <pre>
     *&#47;&#64;excluded SupportedBy:
     * </pre>
     */
    TDS_RFU_04(7, 7),
    /**
     * <code>TDS_RFU_05 = 8;</code>
     *
     * <pre>
     *&#47;&#64;excluded SupportedBy:
     * </pre>
     */
    TDS_RFU_05(8, 8),
    ;

    /**
     * <code>TDS_GPS = 0;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180, MAXIO
     * </pre>
     */
    public static final int TDS_GPS_VALUE = 0;
    /**
     * <code>TDS_CAN = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180, MAXIO
     * </pre>
     */
    public static final int TDS_CAN_VALUE = 1;
    /**
     * <code>TDS_PULSE = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180, MAXIO
     * </pre>
     */
    public static final int TDS_PULSE_VALUE = 2;
    /**
     * <code>TDS_GSENSOR = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180, MAXIO
     * </pre>
     */
    public static final int TDS_GSENSOR_VALUE = 3;
    /**
     * <code>TDS_RFU_01 = 4;</code>
     *
     * <pre>
     *&#47;&#64;excluded SupportedBy:
     * </pre>
     */
    public static final int TDS_RFU_01_VALUE = 4;
    /**
     * <code>TDS_RFU_02 = 5;</code>
     *
     * <pre>
     *&#47;&#64;excluded SupportedBy:
     * </pre>
     */
    public static final int TDS_RFU_02_VALUE = 5;
    /**
     * <code>TDS_RFU_03 = 6;</code>
     *
     * <pre>
     *&#47;&#64;excluded SupportedBy:
     * </pre>
     */
    public static final int TDS_RFU_03_VALUE = 6;
    /**
     * <code>TDS_RFU_04 = 7;</code>
     *
     * <pre>
     *&#47;&#64;excluded SupportedBy:
     * </pre>
     */
    public static final int TDS_RFU_04_VALUE = 7;
    /**
     * <code>TDS_RFU_05 = 8;</code>
     *
     * <pre>
     *&#47;&#64;excluded SupportedBy:
     * </pre>
     */
    public static final int TDS_RFU_05_VALUE = 8;


    public final int getNumber() { return value; }

    public static TelemetryDataSource valueOf(int value) {
      switch (value) {
        case 0: return TDS_GPS;
        case 1: return TDS_CAN;
        case 2: return TDS_PULSE;
        case 3: return TDS_GSENSOR;
        case 4: return TDS_RFU_01;
        case 5: return TDS_RFU_02;
        case 6: return TDS_RFU_03;
        case 7: return TDS_RFU_04;
        case 8: return TDS_RFU_05;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<TelemetryDataSource>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<TelemetryDataSource>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<TelemetryDataSource>() {
            public TelemetryDataSource findValueByNumber(int number) {
              return TelemetryDataSource.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return maxpb.MaxpbTelemetry.getDescriptor().getEnumTypes().get(3);
    }

    private static final TelemetryDataSource[] VALUES = values();

    public static TelemetryDataSource valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private TelemetryDataSource(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:maxpb.TelemetryDataSource)
  }

  /**
   * Protobuf enum {@code maxpb.TelemetryParameterSource}
   */
  public enum TelemetryParameterSource
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>TPS_CONFIG = 0;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    TPS_CONFIG(0, 0),
    /**
     * <code>TPS_GEOREFERENCE = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    TPS_GEOREFERENCE(1, 1),
    /**
     * <code>TPS_EMBEDDED_ACTIONS = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    TPS_EMBEDDED_ACTIONS(2, 2),
    /**
     * <code>TPS_DYNAMIC_GEOREFERENCE = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    TPS_DYNAMIC_GEOREFERENCE(3, 3),
    /**
     * <code>TPS_DYNAMIC_CONFIG = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    TPS_DYNAMIC_CONFIG(4, 4),
    /**
     * <code>TPS_RFU_01 = 5;</code>
     *
     * <pre>
     *&#47;&#64;excluded SupportedBy:
     * </pre>
     */
    TPS_RFU_01(5, 5),
    /**
     * <code>TPS_RFU_02 = 6;</code>
     *
     * <pre>
     *&#47;&#64;excluded SupportedBy:
     * </pre>
     */
    TPS_RFU_02(6, 6),
    /**
     * <code>TPS_RFU_03 = 7;</code>
     *
     * <pre>
     *&#47;&#64;excluded SupportedBy:
     * </pre>
     */
    TPS_RFU_03(7, 7),
    /**
     * <code>TPS_RFU_04 = 8;</code>
     *
     * <pre>
     *&#47;&#64;excluded SupportedBy:
     * </pre>
     */
    TPS_RFU_04(8, 8),
    /**
     * <code>TPS_RFU_05 = 9;</code>
     *
     * <pre>
     *&#47;&#64;excluded SupportedBy:
     * </pre>
     */
    TPS_RFU_05(9, 9),
    ;

    /**
     * <code>TPS_CONFIG = 0;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public static final int TPS_CONFIG_VALUE = 0;
    /**
     * <code>TPS_GEOREFERENCE = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public static final int TPS_GEOREFERENCE_VALUE = 1;
    /**
     * <code>TPS_EMBEDDED_ACTIONS = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public static final int TPS_EMBEDDED_ACTIONS_VALUE = 2;
    /**
     * <code>TPS_DYNAMIC_GEOREFERENCE = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public static final int TPS_DYNAMIC_GEOREFERENCE_VALUE = 3;
    /**
     * <code>TPS_DYNAMIC_CONFIG = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public static final int TPS_DYNAMIC_CONFIG_VALUE = 4;
    /**
     * <code>TPS_RFU_01 = 5;</code>
     *
     * <pre>
     *&#47;&#64;excluded SupportedBy:
     * </pre>
     */
    public static final int TPS_RFU_01_VALUE = 5;
    /**
     * <code>TPS_RFU_02 = 6;</code>
     *
     * <pre>
     *&#47;&#64;excluded SupportedBy:
     * </pre>
     */
    public static final int TPS_RFU_02_VALUE = 6;
    /**
     * <code>TPS_RFU_03 = 7;</code>
     *
     * <pre>
     *&#47;&#64;excluded SupportedBy:
     * </pre>
     */
    public static final int TPS_RFU_03_VALUE = 7;
    /**
     * <code>TPS_RFU_04 = 8;</code>
     *
     * <pre>
     *&#47;&#64;excluded SupportedBy:
     * </pre>
     */
    public static final int TPS_RFU_04_VALUE = 8;
    /**
     * <code>TPS_RFU_05 = 9;</code>
     *
     * <pre>
     *&#47;&#64;excluded SupportedBy:
     * </pre>
     */
    public static final int TPS_RFU_05_VALUE = 9;


    public final int getNumber() { return value; }

    public static TelemetryParameterSource valueOf(int value) {
      switch (value) {
        case 0: return TPS_CONFIG;
        case 1: return TPS_GEOREFERENCE;
        case 2: return TPS_EMBEDDED_ACTIONS;
        case 3: return TPS_DYNAMIC_GEOREFERENCE;
        case 4: return TPS_DYNAMIC_CONFIG;
        case 5: return TPS_RFU_01;
        case 6: return TPS_RFU_02;
        case 7: return TPS_RFU_03;
        case 8: return TPS_RFU_04;
        case 9: return TPS_RFU_05;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<TelemetryParameterSource>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<TelemetryParameterSource>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<TelemetryParameterSource>() {
            public TelemetryParameterSource findValueByNumber(int number) {
              return TelemetryParameterSource.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return maxpb.MaxpbTelemetry.getDescriptor().getEnumTypes().get(4);
    }

    private static final TelemetryParameterSource[] VALUES = values();

    public static TelemetryParameterSource valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private TelemetryParameterSource(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:maxpb.TelemetryParameterSource)
  }

  /**
   * Protobuf enum {@code maxpb.FuelType}
   *
   * <pre>
   *&#47;&#64;excluded
   * </pre>
   */
  public enum FuelType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>FUT_NOT_AVAILABLE = 0;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    FUT_NOT_AVAILABLE(0, 0),
    /**
     * <code>FUT_GASOLINE = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    FUT_GASOLINE(1, 1),
    /**
     * <code>FUT_METHANOL = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    FUT_METHANOL(2, 2),
    /**
     * <code>FUT_ETHANOL = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    FUT_ETHANOL(3, 3),
    /**
     * <code>FUT_DIESEL = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    FUT_DIESEL(4, 4),
    /**
     * <code>FUT_LPG = 5;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    FUT_LPG(5, 5),
    /**
     * <code>FUT_CNG = 6;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    FUT_CNG(6, 6),
    /**
     * <code>FUT_PROPANE = 7;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    FUT_PROPANE(7, 7),
    /**
     * <code>FUT_ELETRIC = 8;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    FUT_ELETRIC(8, 8),
    /**
     * <code>FUT_BIFUEL_RUNNING_GASOLINE = 9;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    FUT_BIFUEL_RUNNING_GASOLINE(9, 9),
    /**
     * <code>FUT_BIFUEL_RUNNING_METHANOL = 10;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    FUT_BIFUEL_RUNNING_METHANOL(10, 10),
    /**
     * <code>FUT_BIFUEL_RUNNING_ETHANOL = 11;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    FUT_BIFUEL_RUNNING_ETHANOL(11, 11),
    /**
     * <code>FUT_BIFUEL_RUNNING_LPG = 12;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    FUT_BIFUEL_RUNNING_LPG(12, 12),
    /**
     * <code>FUT_BIFUEL_RUNNING_CNG = 13;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    FUT_BIFUEL_RUNNING_CNG(13, 13),
    /**
     * <code>FUT_BIFUEL_RUNNING_PROPANE = 14;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    FUT_BIFUEL_RUNNING_PROPANE(14, 14),
    /**
     * <code>FUT_BIFUEL_RUNNING_ELECTRICITY = 15;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    FUT_BIFUEL_RUNNING_ELECTRICITY(15, 15),
    /**
     * <code>FUT_BIFUEL_RUNNING_ELETRIC_AND_CE = 16;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    FUT_BIFUEL_RUNNING_ELETRIC_AND_CE(16, 16),
    /**
     * <code>FUT_HYBRID_GASOLINE = 17;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    FUT_HYBRID_GASOLINE(17, 17),
    /**
     * <code>FUT_HYBRID_ETHANOL = 18;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    FUT_HYBRID_ETHANOL(18, 18),
    /**
     * <code>FUT_HYBRID_DIESEL = 19;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    FUT_HYBRID_DIESEL(19, 19),
    /**
     * <code>FUT_HYBRID_ELETRIC = 20;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    FUT_HYBRID_ELETRIC(20, 20),
    /**
     * <code>FUT_HYBRID_RUNNING_ELETRIC_AND_CE = 21;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    FUT_HYBRID_RUNNING_ELETRIC_AND_CE(21, 21),
    /**
     * <code>FUT_HYBRID_REGENERATIVE = 22;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    FUT_HYBRID_REGENERATIVE(22, 22),
    /**
     * <code>FUT_BIFUEL_RUNNING_DIESEL = 23;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    FUT_BIFUEL_RUNNING_DIESEL(23, 23),
    /**
     * <code>FUT_RFU_01 = 24;</code>
     *
     * <pre>
     *&#47;&#64;excluded SupportedBy:
     * </pre>
     */
    FUT_RFU_01(24, 24),
    /**
     * <code>FUT_RFU_02 = 25;</code>
     *
     * <pre>
     *&#47;&#64;excluded SupportedBy:
     * </pre>
     */
    FUT_RFU_02(25, 25),
    /**
     * <code>FUT_RFU_03 = 26;</code>
     *
     * <pre>
     *&#47;&#64;excluded SupportedBy:
     * </pre>
     */
    FUT_RFU_03(26, 26),
    /**
     * <code>FUT_RFU_04 = 27;</code>
     *
     * <pre>
     *&#47;&#64;excluded SupportedBy:
     * </pre>
     */
    FUT_RFU_04(27, 27),
    /**
     * <code>FUT_RFU_05 = 28;</code>
     *
     * <pre>
     *&#47;&#64;excluded SupportedBy:
     * </pre>
     */
    FUT_RFU_05(28, 28),
    ;

    /**
     * <code>FUT_NOT_AVAILABLE = 0;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    public static final int FUT_NOT_AVAILABLE_VALUE = 0;
    /**
     * <code>FUT_GASOLINE = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    public static final int FUT_GASOLINE_VALUE = 1;
    /**
     * <code>FUT_METHANOL = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    public static final int FUT_METHANOL_VALUE = 2;
    /**
     * <code>FUT_ETHANOL = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    public static final int FUT_ETHANOL_VALUE = 3;
    /**
     * <code>FUT_DIESEL = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    public static final int FUT_DIESEL_VALUE = 4;
    /**
     * <code>FUT_LPG = 5;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    public static final int FUT_LPG_VALUE = 5;
    /**
     * <code>FUT_CNG = 6;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    public static final int FUT_CNG_VALUE = 6;
    /**
     * <code>FUT_PROPANE = 7;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    public static final int FUT_PROPANE_VALUE = 7;
    /**
     * <code>FUT_ELETRIC = 8;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    public static final int FUT_ELETRIC_VALUE = 8;
    /**
     * <code>FUT_BIFUEL_RUNNING_GASOLINE = 9;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    public static final int FUT_BIFUEL_RUNNING_GASOLINE_VALUE = 9;
    /**
     * <code>FUT_BIFUEL_RUNNING_METHANOL = 10;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    public static final int FUT_BIFUEL_RUNNING_METHANOL_VALUE = 10;
    /**
     * <code>FUT_BIFUEL_RUNNING_ETHANOL = 11;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    public static final int FUT_BIFUEL_RUNNING_ETHANOL_VALUE = 11;
    /**
     * <code>FUT_BIFUEL_RUNNING_LPG = 12;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    public static final int FUT_BIFUEL_RUNNING_LPG_VALUE = 12;
    /**
     * <code>FUT_BIFUEL_RUNNING_CNG = 13;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    public static final int FUT_BIFUEL_RUNNING_CNG_VALUE = 13;
    /**
     * <code>FUT_BIFUEL_RUNNING_PROPANE = 14;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    public static final int FUT_BIFUEL_RUNNING_PROPANE_VALUE = 14;
    /**
     * <code>FUT_BIFUEL_RUNNING_ELECTRICITY = 15;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    public static final int FUT_BIFUEL_RUNNING_ELECTRICITY_VALUE = 15;
    /**
     * <code>FUT_BIFUEL_RUNNING_ELETRIC_AND_CE = 16;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    public static final int FUT_BIFUEL_RUNNING_ELETRIC_AND_CE_VALUE = 16;
    /**
     * <code>FUT_HYBRID_GASOLINE = 17;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    public static final int FUT_HYBRID_GASOLINE_VALUE = 17;
    /**
     * <code>FUT_HYBRID_ETHANOL = 18;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    public static final int FUT_HYBRID_ETHANOL_VALUE = 18;
    /**
     * <code>FUT_HYBRID_DIESEL = 19;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    public static final int FUT_HYBRID_DIESEL_VALUE = 19;
    /**
     * <code>FUT_HYBRID_ELETRIC = 20;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    public static final int FUT_HYBRID_ELETRIC_VALUE = 20;
    /**
     * <code>FUT_HYBRID_RUNNING_ELETRIC_AND_CE = 21;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    public static final int FUT_HYBRID_RUNNING_ELETRIC_AND_CE_VALUE = 21;
    /**
     * <code>FUT_HYBRID_REGENERATIVE = 22;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    public static final int FUT_HYBRID_REGENERATIVE_VALUE = 22;
    /**
     * <code>FUT_BIFUEL_RUNNING_DIESEL = 23;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    public static final int FUT_BIFUEL_RUNNING_DIESEL_VALUE = 23;
    /**
     * <code>FUT_RFU_01 = 24;</code>
     *
     * <pre>
     *&#47;&#64;excluded SupportedBy:
     * </pre>
     */
    public static final int FUT_RFU_01_VALUE = 24;
    /**
     * <code>FUT_RFU_02 = 25;</code>
     *
     * <pre>
     *&#47;&#64;excluded SupportedBy:
     * </pre>
     */
    public static final int FUT_RFU_02_VALUE = 25;
    /**
     * <code>FUT_RFU_03 = 26;</code>
     *
     * <pre>
     *&#47;&#64;excluded SupportedBy:
     * </pre>
     */
    public static final int FUT_RFU_03_VALUE = 26;
    /**
     * <code>FUT_RFU_04 = 27;</code>
     *
     * <pre>
     *&#47;&#64;excluded SupportedBy:
     * </pre>
     */
    public static final int FUT_RFU_04_VALUE = 27;
    /**
     * <code>FUT_RFU_05 = 28;</code>
     *
     * <pre>
     *&#47;&#64;excluded SupportedBy:
     * </pre>
     */
    public static final int FUT_RFU_05_VALUE = 28;


    public final int getNumber() { return value; }

    public static FuelType valueOf(int value) {
      switch (value) {
        case 0: return FUT_NOT_AVAILABLE;
        case 1: return FUT_GASOLINE;
        case 2: return FUT_METHANOL;
        case 3: return FUT_ETHANOL;
        case 4: return FUT_DIESEL;
        case 5: return FUT_LPG;
        case 6: return FUT_CNG;
        case 7: return FUT_PROPANE;
        case 8: return FUT_ELETRIC;
        case 9: return FUT_BIFUEL_RUNNING_GASOLINE;
        case 10: return FUT_BIFUEL_RUNNING_METHANOL;
        case 11: return FUT_BIFUEL_RUNNING_ETHANOL;
        case 12: return FUT_BIFUEL_RUNNING_LPG;
        case 13: return FUT_BIFUEL_RUNNING_CNG;
        case 14: return FUT_BIFUEL_RUNNING_PROPANE;
        case 15: return FUT_BIFUEL_RUNNING_ELECTRICITY;
        case 16: return FUT_BIFUEL_RUNNING_ELETRIC_AND_CE;
        case 17: return FUT_HYBRID_GASOLINE;
        case 18: return FUT_HYBRID_ETHANOL;
        case 19: return FUT_HYBRID_DIESEL;
        case 20: return FUT_HYBRID_ELETRIC;
        case 21: return FUT_HYBRID_RUNNING_ELETRIC_AND_CE;
        case 22: return FUT_HYBRID_REGENERATIVE;
        case 23: return FUT_BIFUEL_RUNNING_DIESEL;
        case 24: return FUT_RFU_01;
        case 25: return FUT_RFU_02;
        case 26: return FUT_RFU_03;
        case 27: return FUT_RFU_04;
        case 28: return FUT_RFU_05;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<FuelType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<FuelType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<FuelType>() {
            public FuelType findValueByNumber(int number) {
              return FuelType.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return maxpb.MaxpbTelemetry.getDescriptor().getEnumTypes().get(5);
    }

    private static final FuelType[] VALUES = values();

    public static FuelType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private FuelType(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:maxpb.FuelType)
  }

  /**
   * Protobuf enum {@code maxpb.HistoryEvents}
   *
   * <pre>
   *&#47; This enum will be used as bitmask
   * </pre>
   */
  public enum HistoryEvents
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>HE_NONE = 0;</code>
     *
     * <pre>
     *&#47; Proto3 compatibility SupportedBy: 
     * </pre>
     */
    HE_NONE(0, 0),
    /**
     * <code>HE_CRASH = 1;</code>
     *
     * <pre>
     *&#47; Bit 0 SupportedBy: MXT160, MXT162
     * </pre>
     */
    HE_CRASH(1, 1),
    /**
     * <code>HE_HARD_ACCELERATION = 2;</code>
     *
     * <pre>
     *&#47; Bit 1 SupportedBy: MXT160, MXT162
     * </pre>
     */
    HE_HARD_ACCELERATION(2, 2),
    /**
     * <code>HE_HARD_DEACCELERATION = 4;</code>
     *
     * <pre>
     *&#47; Bit 2 SupportedBy: MXT160, MXT162
     * </pre>
     */
    HE_HARD_DEACCELERATION(3, 4),
    /**
     * <code>HE_CURVE = 8;</code>
     *
     * <pre>
     *&#47; Bit 3 SupportedBy: MXT160, MXT162
     * </pre>
     */
    HE_CURVE(4, 8),
    ;

    /**
     * <code>HE_NONE = 0;</code>
     *
     * <pre>
     *&#47; Proto3 compatibility SupportedBy: 
     * </pre>
     */
    public static final int HE_NONE_VALUE = 0;
    /**
     * <code>HE_CRASH = 1;</code>
     *
     * <pre>
     *&#47; Bit 0 SupportedBy: MXT160, MXT162
     * </pre>
     */
    public static final int HE_CRASH_VALUE = 1;
    /**
     * <code>HE_HARD_ACCELERATION = 2;</code>
     *
     * <pre>
     *&#47; Bit 1 SupportedBy: MXT160, MXT162
     * </pre>
     */
    public static final int HE_HARD_ACCELERATION_VALUE = 2;
    /**
     * <code>HE_HARD_DEACCELERATION = 4;</code>
     *
     * <pre>
     *&#47; Bit 2 SupportedBy: MXT160, MXT162
     * </pre>
     */
    public static final int HE_HARD_DEACCELERATION_VALUE = 4;
    /**
     * <code>HE_CURVE = 8;</code>
     *
     * <pre>
     *&#47; Bit 3 SupportedBy: MXT160, MXT162
     * </pre>
     */
    public static final int HE_CURVE_VALUE = 8;


    public final int getNumber() { return value; }

    public static HistoryEvents valueOf(int value) {
      switch (value) {
        case 0: return HE_NONE;
        case 1: return HE_CRASH;
        case 2: return HE_HARD_ACCELERATION;
        case 4: return HE_HARD_DEACCELERATION;
        case 8: return HE_CURVE;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<HistoryEvents>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<HistoryEvents>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<HistoryEvents>() {
            public HistoryEvents findValueByNumber(int number) {
              return HistoryEvents.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return maxpb.MaxpbTelemetry.getDescriptor().getEnumTypes().get(6);
    }

    private static final HistoryEvents[] VALUES = values();

    public static HistoryEvents valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private HistoryEvents(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:maxpb.HistoryEvents)
  }

  /**
   * Protobuf enum {@code maxpb.TractionState}
   */
  public enum TractionState
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>TS_4X2 = 0;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162, MAXIO
     * </pre>
     */
    TS_4X2(0, 0),
    /**
     * <code>TS_4X4_MANUAL = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162, MAXIO
     * </pre>
     */
    TS_4X4_MANUAL(1, 1),
    /**
     * <code>TS_4X4_AUTO = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162, MAXIO
     * </pre>
     */
    TS_4X4_AUTO(2, 2),
    /**
     * <code>TS_RFU_01 = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162, MAXIO
     * </pre>
     */
    TS_RFU_01(3, 3),
    /**
     * <code>TS_RFU_02 = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162, MAXIO
     * </pre>
     */
    TS_RFU_02(4, 4),
    /**
     * <code>TS_RFU_03 = 5;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162, MAXIO
     * </pre>
     */
    TS_RFU_03(5, 5),
    /**
     * <code>TS_RFU_04 = 6;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162, MAXIO
     * </pre>
     */
    TS_RFU_04(6, 6),
    /**
     * <code>TS_RFU_05 = 7;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162, MAXIO
     * </pre>
     */
    TS_RFU_05(7, 7),
    ;

    /**
     * <code>TS_4X2 = 0;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162, MAXIO
     * </pre>
     */
    public static final int TS_4X2_VALUE = 0;
    /**
     * <code>TS_4X4_MANUAL = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162, MAXIO
     * </pre>
     */
    public static final int TS_4X4_MANUAL_VALUE = 1;
    /**
     * <code>TS_4X4_AUTO = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162, MAXIO
     * </pre>
     */
    public static final int TS_4X4_AUTO_VALUE = 2;
    /**
     * <code>TS_RFU_01 = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162, MAXIO
     * </pre>
     */
    public static final int TS_RFU_01_VALUE = 3;
    /**
     * <code>TS_RFU_02 = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162, MAXIO
     * </pre>
     */
    public static final int TS_RFU_02_VALUE = 4;
    /**
     * <code>TS_RFU_03 = 5;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162, MAXIO
     * </pre>
     */
    public static final int TS_RFU_03_VALUE = 5;
    /**
     * <code>TS_RFU_04 = 6;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162, MAXIO
     * </pre>
     */
    public static final int TS_RFU_04_VALUE = 6;
    /**
     * <code>TS_RFU_05 = 7;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162, MAXIO
     * </pre>
     */
    public static final int TS_RFU_05_VALUE = 7;


    public final int getNumber() { return value; }

    public static TractionState valueOf(int value) {
      switch (value) {
        case 0: return TS_4X2;
        case 1: return TS_4X4_MANUAL;
        case 2: return TS_4X4_AUTO;
        case 3: return TS_RFU_01;
        case 4: return TS_RFU_02;
        case 5: return TS_RFU_03;
        case 6: return TS_RFU_04;
        case 7: return TS_RFU_05;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<TractionState>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<TractionState>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<TractionState>() {
            public TractionState findValueByNumber(int number) {
              return TractionState.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return maxpb.MaxpbTelemetry.getDescriptor().getEnumTypes().get(7);
    }

    private static final TractionState[] VALUES = values();

    public static TractionState valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private TractionState(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:maxpb.TractionState)
  }

  public interface AccelerometerDataOrBuilder extends
      // @@protoc_insertion_point(interface_extends:maxpb.AccelerometerData)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional uint32 maxRollingAxisFront = 1;</code>
     *
     * <pre>
     *&#47; mG (Note: 1 mG = 0,0098 m/s2) SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    boolean hasMaxRollingAxisFront();
    /**
     * <code>optional uint32 maxRollingAxisFront = 1;</code>
     *
     * <pre>
     *&#47; mG (Note: 1 mG = 0,0098 m/s2) SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    int getMaxRollingAxisFront();

    /**
     * <code>optional uint32 maxRollingAxisBack = 2;</code>
     *
     * <pre>
     *&#47; mG (Note: 1 mG = 0,0098 m/s2) SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    boolean hasMaxRollingAxisBack();
    /**
     * <code>optional uint32 maxRollingAxisBack = 2;</code>
     *
     * <pre>
     *&#47; mG (Note: 1 mG = 0,0098 m/s2) SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    int getMaxRollingAxisBack();

    /**
     * <code>optional uint32 maxPitchingAxis = 3;</code>
     *
     * <pre>
     *&#47; mG (Note: 1 mG = 0,0098 m/s2) SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    boolean hasMaxPitchingAxis();
    /**
     * <code>optional uint32 maxPitchingAxis = 3;</code>
     *
     * <pre>
     *&#47; mG (Note: 1 mG = 0,0098 m/s2) SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    int getMaxPitchingAxis();

    /**
     * <code>optional uint32 meanRollingAxisFront = 4;</code>
     *
     * <pre>
     *&#47; mG (Note: 1 mG = 0,0098 m/s2) SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    boolean hasMeanRollingAxisFront();
    /**
     * <code>optional uint32 meanRollingAxisFront = 4;</code>
     *
     * <pre>
     *&#47; mG (Note: 1 mG = 0,0098 m/s2) SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    int getMeanRollingAxisFront();

    /**
     * <code>optional uint32 meanRollingAxisBack = 5;</code>
     *
     * <pre>
     *&#47; mG (Note: 1 mG = 0,0098 m/s2) SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    boolean hasMeanRollingAxisBack();
    /**
     * <code>optional uint32 meanRollingAxisBack = 5;</code>
     *
     * <pre>
     *&#47; mG (Note: 1 mG = 0,0098 m/s2) SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    int getMeanRollingAxisBack();

    /**
     * <code>optional uint32 meanPitchingAxis = 6;</code>
     *
     * <pre>
     *&#47; mG (Note: 1 mG = 0,0098 m/s2) SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    boolean hasMeanPitchingAxis();
    /**
     * <code>optional uint32 meanPitchingAxis = 6;</code>
     *
     * <pre>
     *&#47; mG (Note: 1 mG = 0,0098 m/s2) SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    int getMeanPitchingAxis();
  }
  /**
   * Protobuf type {@code maxpb.AccelerometerData}
   */
  public static final class AccelerometerData extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:maxpb.AccelerometerData)
      AccelerometerDataOrBuilder {
    // Use AccelerometerData.newBuilder() to construct.
    private AccelerometerData(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private AccelerometerData(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final AccelerometerData defaultInstance;
    public static AccelerometerData getDefaultInstance() {
      return defaultInstance;
    }

    public AccelerometerData getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private AccelerometerData(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              maxRollingAxisFront_ = input.readUInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              maxRollingAxisBack_ = input.readUInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              maxPitchingAxis_ = input.readUInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              meanRollingAxisFront_ = input.readUInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              meanRollingAxisBack_ = input.readUInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              meanPitchingAxis_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return maxpb.MaxpbTelemetry.internal_static_maxpb_AccelerometerData_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return maxpb.MaxpbTelemetry.internal_static_maxpb_AccelerometerData_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              maxpb.MaxpbTelemetry.AccelerometerData.class, maxpb.MaxpbTelemetry.AccelerometerData.Builder.class);
    }

    public static com.google.protobuf.Parser<AccelerometerData> PARSER =
        new com.google.protobuf.AbstractParser<AccelerometerData>() {
      public AccelerometerData parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new AccelerometerData(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<AccelerometerData> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int MAXROLLINGAXISFRONT_FIELD_NUMBER = 1;
    private int maxRollingAxisFront_;
    /**
     * <code>optional uint32 maxRollingAxisFront = 1;</code>
     *
     * <pre>
     *&#47; mG (Note: 1 mG = 0,0098 m/s2) SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    public boolean hasMaxRollingAxisFront() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional uint32 maxRollingAxisFront = 1;</code>
     *
     * <pre>
     *&#47; mG (Note: 1 mG = 0,0098 m/s2) SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    public int getMaxRollingAxisFront() {
      return maxRollingAxisFront_;
    }

    public static final int MAXROLLINGAXISBACK_FIELD_NUMBER = 2;
    private int maxRollingAxisBack_;
    /**
     * <code>optional uint32 maxRollingAxisBack = 2;</code>
     *
     * <pre>
     *&#47; mG (Note: 1 mG = 0,0098 m/s2) SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    public boolean hasMaxRollingAxisBack() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional uint32 maxRollingAxisBack = 2;</code>
     *
     * <pre>
     *&#47; mG (Note: 1 mG = 0,0098 m/s2) SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    public int getMaxRollingAxisBack() {
      return maxRollingAxisBack_;
    }

    public static final int MAXPITCHINGAXIS_FIELD_NUMBER = 3;
    private int maxPitchingAxis_;
    /**
     * <code>optional uint32 maxPitchingAxis = 3;</code>
     *
     * <pre>
     *&#47; mG (Note: 1 mG = 0,0098 m/s2) SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    public boolean hasMaxPitchingAxis() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional uint32 maxPitchingAxis = 3;</code>
     *
     * <pre>
     *&#47; mG (Note: 1 mG = 0,0098 m/s2) SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    public int getMaxPitchingAxis() {
      return maxPitchingAxis_;
    }

    public static final int MEANROLLINGAXISFRONT_FIELD_NUMBER = 4;
    private int meanRollingAxisFront_;
    /**
     * <code>optional uint32 meanRollingAxisFront = 4;</code>
     *
     * <pre>
     *&#47; mG (Note: 1 mG = 0,0098 m/s2) SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    public boolean hasMeanRollingAxisFront() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional uint32 meanRollingAxisFront = 4;</code>
     *
     * <pre>
     *&#47; mG (Note: 1 mG = 0,0098 m/s2) SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    public int getMeanRollingAxisFront() {
      return meanRollingAxisFront_;
    }

    public static final int MEANROLLINGAXISBACK_FIELD_NUMBER = 5;
    private int meanRollingAxisBack_;
    /**
     * <code>optional uint32 meanRollingAxisBack = 5;</code>
     *
     * <pre>
     *&#47; mG (Note: 1 mG = 0,0098 m/s2) SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    public boolean hasMeanRollingAxisBack() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional uint32 meanRollingAxisBack = 5;</code>
     *
     * <pre>
     *&#47; mG (Note: 1 mG = 0,0098 m/s2) SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    public int getMeanRollingAxisBack() {
      return meanRollingAxisBack_;
    }

    public static final int MEANPITCHINGAXIS_FIELD_NUMBER = 6;
    private int meanPitchingAxis_;
    /**
     * <code>optional uint32 meanPitchingAxis = 6;</code>
     *
     * <pre>
     *&#47; mG (Note: 1 mG = 0,0098 m/s2) SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    public boolean hasMeanPitchingAxis() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional uint32 meanPitchingAxis = 6;</code>
     *
     * <pre>
     *&#47; mG (Note: 1 mG = 0,0098 m/s2) SupportedBy: MXT142, MXT160, MXT162
     * </pre>
     */
    public int getMeanPitchingAxis() {
      return meanPitchingAxis_;
    }

    private void initFields() {
      maxRollingAxisFront_ = 0;
      maxRollingAxisBack_ = 0;
      maxPitchingAxis_ = 0;
      meanRollingAxisFront_ = 0;
      meanRollingAxisBack_ = 0;
      meanPitchingAxis_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, maxRollingAxisFront_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, maxRollingAxisBack_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(3, maxPitchingAxis_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeUInt32(4, meanRollingAxisFront_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeUInt32(5, meanRollingAxisBack_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeUInt32(6, meanPitchingAxis_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, maxRollingAxisFront_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, maxRollingAxisBack_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, maxPitchingAxis_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, meanRollingAxisFront_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(5, meanRollingAxisBack_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(6, meanPitchingAxis_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static maxpb.MaxpbTelemetry.AccelerometerData parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static maxpb.MaxpbTelemetry.AccelerometerData parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetry.AccelerometerData parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static maxpb.MaxpbTelemetry.AccelerometerData parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetry.AccelerometerData parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static maxpb.MaxpbTelemetry.AccelerometerData parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetry.AccelerometerData parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static maxpb.MaxpbTelemetry.AccelerometerData parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetry.AccelerometerData parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static maxpb.MaxpbTelemetry.AccelerometerData parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(maxpb.MaxpbTelemetry.AccelerometerData prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code maxpb.AccelerometerData}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:maxpb.AccelerometerData)
        maxpb.MaxpbTelemetry.AccelerometerDataOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return maxpb.MaxpbTelemetry.internal_static_maxpb_AccelerometerData_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return maxpb.MaxpbTelemetry.internal_static_maxpb_AccelerometerData_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                maxpb.MaxpbTelemetry.AccelerometerData.class, maxpb.MaxpbTelemetry.AccelerometerData.Builder.class);
      }

      // Construct using maxpb.MaxpbTelemetry.AccelerometerData.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        maxRollingAxisFront_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        maxRollingAxisBack_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        maxPitchingAxis_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        meanRollingAxisFront_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        meanRollingAxisBack_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        meanPitchingAxis_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return maxpb.MaxpbTelemetry.internal_static_maxpb_AccelerometerData_descriptor;
      }

      public maxpb.MaxpbTelemetry.AccelerometerData getDefaultInstanceForType() {
        return maxpb.MaxpbTelemetry.AccelerometerData.getDefaultInstance();
      }

      public maxpb.MaxpbTelemetry.AccelerometerData build() {
        maxpb.MaxpbTelemetry.AccelerometerData result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public maxpb.MaxpbTelemetry.AccelerometerData buildPartial() {
        maxpb.MaxpbTelemetry.AccelerometerData result = new maxpb.MaxpbTelemetry.AccelerometerData(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.maxRollingAxisFront_ = maxRollingAxisFront_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.maxRollingAxisBack_ = maxRollingAxisBack_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.maxPitchingAxis_ = maxPitchingAxis_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.meanRollingAxisFront_ = meanRollingAxisFront_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.meanRollingAxisBack_ = meanRollingAxisBack_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.meanPitchingAxis_ = meanPitchingAxis_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof maxpb.MaxpbTelemetry.AccelerometerData) {
          return mergeFrom((maxpb.MaxpbTelemetry.AccelerometerData)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(maxpb.MaxpbTelemetry.AccelerometerData other) {
        if (other == maxpb.MaxpbTelemetry.AccelerometerData.getDefaultInstance()) return this;
        if (other.hasMaxRollingAxisFront()) {
          setMaxRollingAxisFront(other.getMaxRollingAxisFront());
        }
        if (other.hasMaxRollingAxisBack()) {
          setMaxRollingAxisBack(other.getMaxRollingAxisBack());
        }
        if (other.hasMaxPitchingAxis()) {
          setMaxPitchingAxis(other.getMaxPitchingAxis());
        }
        if (other.hasMeanRollingAxisFront()) {
          setMeanRollingAxisFront(other.getMeanRollingAxisFront());
        }
        if (other.hasMeanRollingAxisBack()) {
          setMeanRollingAxisBack(other.getMeanRollingAxisBack());
        }
        if (other.hasMeanPitchingAxis()) {
          setMeanPitchingAxis(other.getMeanPitchingAxis());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        maxpb.MaxpbTelemetry.AccelerometerData parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (maxpb.MaxpbTelemetry.AccelerometerData) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int maxRollingAxisFront_ ;
      /**
       * <code>optional uint32 maxRollingAxisFront = 1;</code>
       *
       * <pre>
       *&#47; mG (Note: 1 mG = 0,0098 m/s2) SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public boolean hasMaxRollingAxisFront() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint32 maxRollingAxisFront = 1;</code>
       *
       * <pre>
       *&#47; mG (Note: 1 mG = 0,0098 m/s2) SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public int getMaxRollingAxisFront() {
        return maxRollingAxisFront_;
      }
      /**
       * <code>optional uint32 maxRollingAxisFront = 1;</code>
       *
       * <pre>
       *&#47; mG (Note: 1 mG = 0,0098 m/s2) SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public Builder setMaxRollingAxisFront(int value) {
        bitField0_ |= 0x00000001;
        maxRollingAxisFront_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 maxRollingAxisFront = 1;</code>
       *
       * <pre>
       *&#47; mG (Note: 1 mG = 0,0098 m/s2) SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public Builder clearMaxRollingAxisFront() {
        bitField0_ = (bitField0_ & ~0x00000001);
        maxRollingAxisFront_ = 0;
        onChanged();
        return this;
      }

      private int maxRollingAxisBack_ ;
      /**
       * <code>optional uint32 maxRollingAxisBack = 2;</code>
       *
       * <pre>
       *&#47; mG (Note: 1 mG = 0,0098 m/s2) SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public boolean hasMaxRollingAxisBack() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional uint32 maxRollingAxisBack = 2;</code>
       *
       * <pre>
       *&#47; mG (Note: 1 mG = 0,0098 m/s2) SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public int getMaxRollingAxisBack() {
        return maxRollingAxisBack_;
      }
      /**
       * <code>optional uint32 maxRollingAxisBack = 2;</code>
       *
       * <pre>
       *&#47; mG (Note: 1 mG = 0,0098 m/s2) SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public Builder setMaxRollingAxisBack(int value) {
        bitField0_ |= 0x00000002;
        maxRollingAxisBack_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 maxRollingAxisBack = 2;</code>
       *
       * <pre>
       *&#47; mG (Note: 1 mG = 0,0098 m/s2) SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public Builder clearMaxRollingAxisBack() {
        bitField0_ = (bitField0_ & ~0x00000002);
        maxRollingAxisBack_ = 0;
        onChanged();
        return this;
      }

      private int maxPitchingAxis_ ;
      /**
       * <code>optional uint32 maxPitchingAxis = 3;</code>
       *
       * <pre>
       *&#47; mG (Note: 1 mG = 0,0098 m/s2) SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public boolean hasMaxPitchingAxis() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional uint32 maxPitchingAxis = 3;</code>
       *
       * <pre>
       *&#47; mG (Note: 1 mG = 0,0098 m/s2) SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public int getMaxPitchingAxis() {
        return maxPitchingAxis_;
      }
      /**
       * <code>optional uint32 maxPitchingAxis = 3;</code>
       *
       * <pre>
       *&#47; mG (Note: 1 mG = 0,0098 m/s2) SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public Builder setMaxPitchingAxis(int value) {
        bitField0_ |= 0x00000004;
        maxPitchingAxis_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 maxPitchingAxis = 3;</code>
       *
       * <pre>
       *&#47; mG (Note: 1 mG = 0,0098 m/s2) SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public Builder clearMaxPitchingAxis() {
        bitField0_ = (bitField0_ & ~0x00000004);
        maxPitchingAxis_ = 0;
        onChanged();
        return this;
      }

      private int meanRollingAxisFront_ ;
      /**
       * <code>optional uint32 meanRollingAxisFront = 4;</code>
       *
       * <pre>
       *&#47; mG (Note: 1 mG = 0,0098 m/s2) SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public boolean hasMeanRollingAxisFront() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional uint32 meanRollingAxisFront = 4;</code>
       *
       * <pre>
       *&#47; mG (Note: 1 mG = 0,0098 m/s2) SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public int getMeanRollingAxisFront() {
        return meanRollingAxisFront_;
      }
      /**
       * <code>optional uint32 meanRollingAxisFront = 4;</code>
       *
       * <pre>
       *&#47; mG (Note: 1 mG = 0,0098 m/s2) SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public Builder setMeanRollingAxisFront(int value) {
        bitField0_ |= 0x00000008;
        meanRollingAxisFront_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 meanRollingAxisFront = 4;</code>
       *
       * <pre>
       *&#47; mG (Note: 1 mG = 0,0098 m/s2) SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public Builder clearMeanRollingAxisFront() {
        bitField0_ = (bitField0_ & ~0x00000008);
        meanRollingAxisFront_ = 0;
        onChanged();
        return this;
      }

      private int meanRollingAxisBack_ ;
      /**
       * <code>optional uint32 meanRollingAxisBack = 5;</code>
       *
       * <pre>
       *&#47; mG (Note: 1 mG = 0,0098 m/s2) SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public boolean hasMeanRollingAxisBack() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional uint32 meanRollingAxisBack = 5;</code>
       *
       * <pre>
       *&#47; mG (Note: 1 mG = 0,0098 m/s2) SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public int getMeanRollingAxisBack() {
        return meanRollingAxisBack_;
      }
      /**
       * <code>optional uint32 meanRollingAxisBack = 5;</code>
       *
       * <pre>
       *&#47; mG (Note: 1 mG = 0,0098 m/s2) SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public Builder setMeanRollingAxisBack(int value) {
        bitField0_ |= 0x00000010;
        meanRollingAxisBack_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 meanRollingAxisBack = 5;</code>
       *
       * <pre>
       *&#47; mG (Note: 1 mG = 0,0098 m/s2) SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public Builder clearMeanRollingAxisBack() {
        bitField0_ = (bitField0_ & ~0x00000010);
        meanRollingAxisBack_ = 0;
        onChanged();
        return this;
      }

      private int meanPitchingAxis_ ;
      /**
       * <code>optional uint32 meanPitchingAxis = 6;</code>
       *
       * <pre>
       *&#47; mG (Note: 1 mG = 0,0098 m/s2) SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public boolean hasMeanPitchingAxis() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional uint32 meanPitchingAxis = 6;</code>
       *
       * <pre>
       *&#47; mG (Note: 1 mG = 0,0098 m/s2) SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public int getMeanPitchingAxis() {
        return meanPitchingAxis_;
      }
      /**
       * <code>optional uint32 meanPitchingAxis = 6;</code>
       *
       * <pre>
       *&#47; mG (Note: 1 mG = 0,0098 m/s2) SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public Builder setMeanPitchingAxis(int value) {
        bitField0_ |= 0x00000020;
        meanPitchingAxis_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 meanPitchingAxis = 6;</code>
       *
       * <pre>
       *&#47; mG (Note: 1 mG = 0,0098 m/s2) SupportedBy: MXT142, MXT160, MXT162
       * </pre>
       */
      public Builder clearMeanPitchingAxis() {
        bitField0_ = (bitField0_ & ~0x00000020);
        meanPitchingAxis_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:maxpb.AccelerometerData)
    }

    static {
      defaultInstance = new AccelerometerData(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:maxpb.AccelerometerData)
  }

  public interface TelemetryEventsTransmissionMaskOrBuilder extends
      // @@protoc_insertion_point(interface_extends:maxpb.TelemetryEventsTransmissionMask)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional uint32 acceleration = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162
     * </pre>
     */
    boolean hasAcceleration();
    /**
     * <code>optional uint32 acceleration = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162
     * </pre>
     */
    int getAcceleration();

    /**
     * <code>optional uint32 brake = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162
     * </pre>
     */
    boolean hasBrake();
    /**
     * <code>optional uint32 brake = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162
     * </pre>
     */
    int getBrake();

    /**
     * <code>optional uint32 bump = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162
     * </pre>
     */
    boolean hasBump();
    /**
     * <code>optional uint32 bump = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162
     * </pre>
     */
    int getBump();

    /**
     * <code>optional uint32 curve = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162
     * </pre>
     */
    boolean hasCurve();
    /**
     * <code>optional uint32 curve = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162
     * </pre>
     */
    int getCurve();

    /**
     * <code>optional uint32 crash = 5;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162
     * </pre>
     */
    boolean hasCrash();
    /**
     * <code>optional uint32 crash = 5;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162
     * </pre>
     */
    int getCrash();

    /**
     * <code>optional uint32 calibration = 6;</code>
     *
     * <pre>
     *&#47; Done and Reseted SupportedBy: MXT162
     * </pre>
     */
    boolean hasCalibration();
    /**
     * <code>optional uint32 calibration = 6;</code>
     *
     * <pre>
     *&#47; Done and Reseted SupportedBy: MXT162
     * </pre>
     */
    int getCalibration();

    /**
     * <code>optional uint32 stoppedExcess = 7;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    boolean hasStoppedExcess();
    /**
     * <code>optional uint32 stoppedExcess = 7;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    int getStoppedExcess();

    /**
     * <code>optional uint32 movingAndStopped = 8;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    boolean hasMovingAndStopped();
    /**
     * <code>optional uint32 movingAndStopped = 8;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    int getMovingAndStopped();

    /**
     * <code>optional uint32 maxSpeed = 9;</code>
     *
     * <pre>
     *&#47; Exceed and Recover SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    boolean hasMaxSpeed();
    /**
     * <code>optional uint32 maxSpeed = 9;</code>
     *
     * <pre>
     *&#47; Exceed and Recover SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    int getMaxSpeed();

    /**
     * <code>optional uint32 maxRainySpeed = 10;</code>
     *
     * <pre>
     *&#47; Exceed and Recover SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    boolean hasMaxRainySpeed();
    /**
     * <code>optional uint32 maxRainySpeed = 10;</code>
     *
     * <pre>
     *&#47; Exceed and Recover SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    int getMaxRainySpeed();

    /**
     * <code>optional uint32 angles = 11;</code>
     *
     * <pre>
     *&#47; Pitching and Rolling SupportedBy: MXT162
     * </pre>
     */
    boolean hasAngles();
    /**
     * <code>optional uint32 angles = 11;</code>
     *
     * <pre>
     *&#47; Pitching and Rolling SupportedBy: MXT162
     * </pre>
     */
    int getAngles();

    /**
     * <code>optional uint32 history = 12;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162
     * </pre>
     */
    boolean hasHistory();
    /**
     * <code>optional uint32 history = 12;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162
     * </pre>
     */
    int getHistory();
  }
  /**
   * Protobuf type {@code maxpb.TelemetryEventsTransmissionMask}
   *
   * <pre>
   *&#47;The field value uses the ReportEvents enum as bitmask
   * </pre>
   */
  public static final class TelemetryEventsTransmissionMask extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:maxpb.TelemetryEventsTransmissionMask)
      TelemetryEventsTransmissionMaskOrBuilder {
    // Use TelemetryEventsTransmissionMask.newBuilder() to construct.
    private TelemetryEventsTransmissionMask(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private TelemetryEventsTransmissionMask(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final TelemetryEventsTransmissionMask defaultInstance;
    public static TelemetryEventsTransmissionMask getDefaultInstance() {
      return defaultInstance;
    }

    public TelemetryEventsTransmissionMask getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private TelemetryEventsTransmissionMask(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              acceleration_ = input.readUInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              brake_ = input.readUInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              bump_ = input.readUInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              curve_ = input.readUInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              crash_ = input.readUInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              calibration_ = input.readUInt32();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              stoppedExcess_ = input.readUInt32();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000080;
              movingAndStopped_ = input.readUInt32();
              break;
            }
            case 72: {
              bitField0_ |= 0x00000100;
              maxSpeed_ = input.readUInt32();
              break;
            }
            case 80: {
              bitField0_ |= 0x00000200;
              maxRainySpeed_ = input.readUInt32();
              break;
            }
            case 88: {
              bitField0_ |= 0x00000400;
              angles_ = input.readUInt32();
              break;
            }
            case 96: {
              bitField0_ |= 0x00000800;
              history_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return maxpb.MaxpbTelemetry.internal_static_maxpb_TelemetryEventsTransmissionMask_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return maxpb.MaxpbTelemetry.internal_static_maxpb_TelemetryEventsTransmissionMask_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              maxpb.MaxpbTelemetry.TelemetryEventsTransmissionMask.class, maxpb.MaxpbTelemetry.TelemetryEventsTransmissionMask.Builder.class);
    }

    public static com.google.protobuf.Parser<TelemetryEventsTransmissionMask> PARSER =
        new com.google.protobuf.AbstractParser<TelemetryEventsTransmissionMask>() {
      public TelemetryEventsTransmissionMask parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new TelemetryEventsTransmissionMask(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<TelemetryEventsTransmissionMask> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int ACCELERATION_FIELD_NUMBER = 1;
    private int acceleration_;
    /**
     * <code>optional uint32 acceleration = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162
     * </pre>
     */
    public boolean hasAcceleration() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional uint32 acceleration = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162
     * </pre>
     */
    public int getAcceleration() {
      return acceleration_;
    }

    public static final int BRAKE_FIELD_NUMBER = 2;
    private int brake_;
    /**
     * <code>optional uint32 brake = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162
     * </pre>
     */
    public boolean hasBrake() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional uint32 brake = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162
     * </pre>
     */
    public int getBrake() {
      return brake_;
    }

    public static final int BUMP_FIELD_NUMBER = 3;
    private int bump_;
    /**
     * <code>optional uint32 bump = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162
     * </pre>
     */
    public boolean hasBump() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional uint32 bump = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162
     * </pre>
     */
    public int getBump() {
      return bump_;
    }

    public static final int CURVE_FIELD_NUMBER = 4;
    private int curve_;
    /**
     * <code>optional uint32 curve = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162
     * </pre>
     */
    public boolean hasCurve() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional uint32 curve = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162
     * </pre>
     */
    public int getCurve() {
      return curve_;
    }

    public static final int CRASH_FIELD_NUMBER = 5;
    private int crash_;
    /**
     * <code>optional uint32 crash = 5;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162
     * </pre>
     */
    public boolean hasCrash() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional uint32 crash = 5;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162
     * </pre>
     */
    public int getCrash() {
      return crash_;
    }

    public static final int CALIBRATION_FIELD_NUMBER = 6;
    private int calibration_;
    /**
     * <code>optional uint32 calibration = 6;</code>
     *
     * <pre>
     *&#47; Done and Reseted SupportedBy: MXT162
     * </pre>
     */
    public boolean hasCalibration() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional uint32 calibration = 6;</code>
     *
     * <pre>
     *&#47; Done and Reseted SupportedBy: MXT162
     * </pre>
     */
    public int getCalibration() {
      return calibration_;
    }

    public static final int STOPPEDEXCESS_FIELD_NUMBER = 7;
    private int stoppedExcess_;
    /**
     * <code>optional uint32 stoppedExcess = 7;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    public boolean hasStoppedExcess() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional uint32 stoppedExcess = 7;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    public int getStoppedExcess() {
      return stoppedExcess_;
    }

    public static final int MOVINGANDSTOPPED_FIELD_NUMBER = 8;
    private int movingAndStopped_;
    /**
     * <code>optional uint32 movingAndStopped = 8;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    public boolean hasMovingAndStopped() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional uint32 movingAndStopped = 8;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    public int getMovingAndStopped() {
      return movingAndStopped_;
    }

    public static final int MAXSPEED_FIELD_NUMBER = 9;
    private int maxSpeed_;
    /**
     * <code>optional uint32 maxSpeed = 9;</code>
     *
     * <pre>
     *&#47; Exceed and Recover SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    public boolean hasMaxSpeed() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional uint32 maxSpeed = 9;</code>
     *
     * <pre>
     *&#47; Exceed and Recover SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    public int getMaxSpeed() {
      return maxSpeed_;
    }

    public static final int MAXRAINYSPEED_FIELD_NUMBER = 10;
    private int maxRainySpeed_;
    /**
     * <code>optional uint32 maxRainySpeed = 10;</code>
     *
     * <pre>
     *&#47; Exceed and Recover SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    public boolean hasMaxRainySpeed() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional uint32 maxRainySpeed = 10;</code>
     *
     * <pre>
     *&#47; Exceed and Recover SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    public int getMaxRainySpeed() {
      return maxRainySpeed_;
    }

    public static final int ANGLES_FIELD_NUMBER = 11;
    private int angles_;
    /**
     * <code>optional uint32 angles = 11;</code>
     *
     * <pre>
     *&#47; Pitching and Rolling SupportedBy: MXT162
     * </pre>
     */
    public boolean hasAngles() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional uint32 angles = 11;</code>
     *
     * <pre>
     *&#47; Pitching and Rolling SupportedBy: MXT162
     * </pre>
     */
    public int getAngles() {
      return angles_;
    }

    public static final int HISTORY_FIELD_NUMBER = 12;
    private int history_;
    /**
     * <code>optional uint32 history = 12;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162
     * </pre>
     */
    public boolean hasHistory() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional uint32 history = 12;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162
     * </pre>
     */
    public int getHistory() {
      return history_;
    }

    private void initFields() {
      acceleration_ = 0;
      brake_ = 0;
      bump_ = 0;
      curve_ = 0;
      crash_ = 0;
      calibration_ = 0;
      stoppedExcess_ = 0;
      movingAndStopped_ = 0;
      maxSpeed_ = 0;
      maxRainySpeed_ = 0;
      angles_ = 0;
      history_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, acceleration_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, brake_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(3, bump_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeUInt32(4, curve_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeUInt32(5, crash_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeUInt32(6, calibration_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeUInt32(7, stoppedExcess_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeUInt32(8, movingAndStopped_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeUInt32(9, maxSpeed_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeUInt32(10, maxRainySpeed_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeUInt32(11, angles_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeUInt32(12, history_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, acceleration_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, brake_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, bump_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, curve_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(5, crash_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(6, calibration_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(7, stoppedExcess_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(8, movingAndStopped_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(9, maxSpeed_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(10, maxRainySpeed_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(11, angles_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(12, history_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static maxpb.MaxpbTelemetry.TelemetryEventsTransmissionMask parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static maxpb.MaxpbTelemetry.TelemetryEventsTransmissionMask parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetry.TelemetryEventsTransmissionMask parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static maxpb.MaxpbTelemetry.TelemetryEventsTransmissionMask parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetry.TelemetryEventsTransmissionMask parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static maxpb.MaxpbTelemetry.TelemetryEventsTransmissionMask parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetry.TelemetryEventsTransmissionMask parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static maxpb.MaxpbTelemetry.TelemetryEventsTransmissionMask parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetry.TelemetryEventsTransmissionMask parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static maxpb.MaxpbTelemetry.TelemetryEventsTransmissionMask parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(maxpb.MaxpbTelemetry.TelemetryEventsTransmissionMask prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code maxpb.TelemetryEventsTransmissionMask}
     *
     * <pre>
     *&#47;The field value uses the ReportEvents enum as bitmask
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:maxpb.TelemetryEventsTransmissionMask)
        maxpb.MaxpbTelemetry.TelemetryEventsTransmissionMaskOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return maxpb.MaxpbTelemetry.internal_static_maxpb_TelemetryEventsTransmissionMask_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return maxpb.MaxpbTelemetry.internal_static_maxpb_TelemetryEventsTransmissionMask_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                maxpb.MaxpbTelemetry.TelemetryEventsTransmissionMask.class, maxpb.MaxpbTelemetry.TelemetryEventsTransmissionMask.Builder.class);
      }

      // Construct using maxpb.MaxpbTelemetry.TelemetryEventsTransmissionMask.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        acceleration_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        brake_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        bump_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        curve_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        crash_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        calibration_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        stoppedExcess_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        movingAndStopped_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        maxSpeed_ = 0;
        bitField0_ = (bitField0_ & ~0x00000100);
        maxRainySpeed_ = 0;
        bitField0_ = (bitField0_ & ~0x00000200);
        angles_ = 0;
        bitField0_ = (bitField0_ & ~0x00000400);
        history_ = 0;
        bitField0_ = (bitField0_ & ~0x00000800);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return maxpb.MaxpbTelemetry.internal_static_maxpb_TelemetryEventsTransmissionMask_descriptor;
      }

      public maxpb.MaxpbTelemetry.TelemetryEventsTransmissionMask getDefaultInstanceForType() {
        return maxpb.MaxpbTelemetry.TelemetryEventsTransmissionMask.getDefaultInstance();
      }

      public maxpb.MaxpbTelemetry.TelemetryEventsTransmissionMask build() {
        maxpb.MaxpbTelemetry.TelemetryEventsTransmissionMask result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public maxpb.MaxpbTelemetry.TelemetryEventsTransmissionMask buildPartial() {
        maxpb.MaxpbTelemetry.TelemetryEventsTransmissionMask result = new maxpb.MaxpbTelemetry.TelemetryEventsTransmissionMask(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.acceleration_ = acceleration_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.brake_ = brake_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.bump_ = bump_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.curve_ = curve_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.crash_ = crash_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.calibration_ = calibration_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.stoppedExcess_ = stoppedExcess_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.movingAndStopped_ = movingAndStopped_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.maxSpeed_ = maxSpeed_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.maxRainySpeed_ = maxRainySpeed_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        result.angles_ = angles_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000800;
        }
        result.history_ = history_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof maxpb.MaxpbTelemetry.TelemetryEventsTransmissionMask) {
          return mergeFrom((maxpb.MaxpbTelemetry.TelemetryEventsTransmissionMask)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(maxpb.MaxpbTelemetry.TelemetryEventsTransmissionMask other) {
        if (other == maxpb.MaxpbTelemetry.TelemetryEventsTransmissionMask.getDefaultInstance()) return this;
        if (other.hasAcceleration()) {
          setAcceleration(other.getAcceleration());
        }
        if (other.hasBrake()) {
          setBrake(other.getBrake());
        }
        if (other.hasBump()) {
          setBump(other.getBump());
        }
        if (other.hasCurve()) {
          setCurve(other.getCurve());
        }
        if (other.hasCrash()) {
          setCrash(other.getCrash());
        }
        if (other.hasCalibration()) {
          setCalibration(other.getCalibration());
        }
        if (other.hasStoppedExcess()) {
          setStoppedExcess(other.getStoppedExcess());
        }
        if (other.hasMovingAndStopped()) {
          setMovingAndStopped(other.getMovingAndStopped());
        }
        if (other.hasMaxSpeed()) {
          setMaxSpeed(other.getMaxSpeed());
        }
        if (other.hasMaxRainySpeed()) {
          setMaxRainySpeed(other.getMaxRainySpeed());
        }
        if (other.hasAngles()) {
          setAngles(other.getAngles());
        }
        if (other.hasHistory()) {
          setHistory(other.getHistory());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        maxpb.MaxpbTelemetry.TelemetryEventsTransmissionMask parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (maxpb.MaxpbTelemetry.TelemetryEventsTransmissionMask) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int acceleration_ ;
      /**
       * <code>optional uint32 acceleration = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162
       * </pre>
       */
      public boolean hasAcceleration() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint32 acceleration = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162
       * </pre>
       */
      public int getAcceleration() {
        return acceleration_;
      }
      /**
       * <code>optional uint32 acceleration = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162
       * </pre>
       */
      public Builder setAcceleration(int value) {
        bitField0_ |= 0x00000001;
        acceleration_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 acceleration = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162
       * </pre>
       */
      public Builder clearAcceleration() {
        bitField0_ = (bitField0_ & ~0x00000001);
        acceleration_ = 0;
        onChanged();
        return this;
      }

      private int brake_ ;
      /**
       * <code>optional uint32 brake = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162
       * </pre>
       */
      public boolean hasBrake() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional uint32 brake = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162
       * </pre>
       */
      public int getBrake() {
        return brake_;
      }
      /**
       * <code>optional uint32 brake = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162
       * </pre>
       */
      public Builder setBrake(int value) {
        bitField0_ |= 0x00000002;
        brake_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 brake = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162
       * </pre>
       */
      public Builder clearBrake() {
        bitField0_ = (bitField0_ & ~0x00000002);
        brake_ = 0;
        onChanged();
        return this;
      }

      private int bump_ ;
      /**
       * <code>optional uint32 bump = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162
       * </pre>
       */
      public boolean hasBump() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional uint32 bump = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162
       * </pre>
       */
      public int getBump() {
        return bump_;
      }
      /**
       * <code>optional uint32 bump = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162
       * </pre>
       */
      public Builder setBump(int value) {
        bitField0_ |= 0x00000004;
        bump_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 bump = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162
       * </pre>
       */
      public Builder clearBump() {
        bitField0_ = (bitField0_ & ~0x00000004);
        bump_ = 0;
        onChanged();
        return this;
      }

      private int curve_ ;
      /**
       * <code>optional uint32 curve = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162
       * </pre>
       */
      public boolean hasCurve() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional uint32 curve = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162
       * </pre>
       */
      public int getCurve() {
        return curve_;
      }
      /**
       * <code>optional uint32 curve = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162
       * </pre>
       */
      public Builder setCurve(int value) {
        bitField0_ |= 0x00000008;
        curve_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 curve = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162
       * </pre>
       */
      public Builder clearCurve() {
        bitField0_ = (bitField0_ & ~0x00000008);
        curve_ = 0;
        onChanged();
        return this;
      }

      private int crash_ ;
      /**
       * <code>optional uint32 crash = 5;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162
       * </pre>
       */
      public boolean hasCrash() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional uint32 crash = 5;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162
       * </pre>
       */
      public int getCrash() {
        return crash_;
      }
      /**
       * <code>optional uint32 crash = 5;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162
       * </pre>
       */
      public Builder setCrash(int value) {
        bitField0_ |= 0x00000010;
        crash_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 crash = 5;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162
       * </pre>
       */
      public Builder clearCrash() {
        bitField0_ = (bitField0_ & ~0x00000010);
        crash_ = 0;
        onChanged();
        return this;
      }

      private int calibration_ ;
      /**
       * <code>optional uint32 calibration = 6;</code>
       *
       * <pre>
       *&#47; Done and Reseted SupportedBy: MXT162
       * </pre>
       */
      public boolean hasCalibration() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional uint32 calibration = 6;</code>
       *
       * <pre>
       *&#47; Done and Reseted SupportedBy: MXT162
       * </pre>
       */
      public int getCalibration() {
        return calibration_;
      }
      /**
       * <code>optional uint32 calibration = 6;</code>
       *
       * <pre>
       *&#47; Done and Reseted SupportedBy: MXT162
       * </pre>
       */
      public Builder setCalibration(int value) {
        bitField0_ |= 0x00000020;
        calibration_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 calibration = 6;</code>
       *
       * <pre>
       *&#47; Done and Reseted SupportedBy: MXT162
       * </pre>
       */
      public Builder clearCalibration() {
        bitField0_ = (bitField0_ & ~0x00000020);
        calibration_ = 0;
        onChanged();
        return this;
      }

      private int stoppedExcess_ ;
      /**
       * <code>optional uint32 stoppedExcess = 7;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public boolean hasStoppedExcess() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional uint32 stoppedExcess = 7;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public int getStoppedExcess() {
        return stoppedExcess_;
      }
      /**
       * <code>optional uint32 stoppedExcess = 7;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public Builder setStoppedExcess(int value) {
        bitField0_ |= 0x00000040;
        stoppedExcess_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 stoppedExcess = 7;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public Builder clearStoppedExcess() {
        bitField0_ = (bitField0_ & ~0x00000040);
        stoppedExcess_ = 0;
        onChanged();
        return this;
      }

      private int movingAndStopped_ ;
      /**
       * <code>optional uint32 movingAndStopped = 8;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public boolean hasMovingAndStopped() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional uint32 movingAndStopped = 8;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public int getMovingAndStopped() {
        return movingAndStopped_;
      }
      /**
       * <code>optional uint32 movingAndStopped = 8;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public Builder setMovingAndStopped(int value) {
        bitField0_ |= 0x00000080;
        movingAndStopped_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 movingAndStopped = 8;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public Builder clearMovingAndStopped() {
        bitField0_ = (bitField0_ & ~0x00000080);
        movingAndStopped_ = 0;
        onChanged();
        return this;
      }

      private int maxSpeed_ ;
      /**
       * <code>optional uint32 maxSpeed = 9;</code>
       *
       * <pre>
       *&#47; Exceed and Recover SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public boolean hasMaxSpeed() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional uint32 maxSpeed = 9;</code>
       *
       * <pre>
       *&#47; Exceed and Recover SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public int getMaxSpeed() {
        return maxSpeed_;
      }
      /**
       * <code>optional uint32 maxSpeed = 9;</code>
       *
       * <pre>
       *&#47; Exceed and Recover SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public Builder setMaxSpeed(int value) {
        bitField0_ |= 0x00000100;
        maxSpeed_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 maxSpeed = 9;</code>
       *
       * <pre>
       *&#47; Exceed and Recover SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public Builder clearMaxSpeed() {
        bitField0_ = (bitField0_ & ~0x00000100);
        maxSpeed_ = 0;
        onChanged();
        return this;
      }

      private int maxRainySpeed_ ;
      /**
       * <code>optional uint32 maxRainySpeed = 10;</code>
       *
       * <pre>
       *&#47; Exceed and Recover SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public boolean hasMaxRainySpeed() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional uint32 maxRainySpeed = 10;</code>
       *
       * <pre>
       *&#47; Exceed and Recover SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public int getMaxRainySpeed() {
        return maxRainySpeed_;
      }
      /**
       * <code>optional uint32 maxRainySpeed = 10;</code>
       *
       * <pre>
       *&#47; Exceed and Recover SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public Builder setMaxRainySpeed(int value) {
        bitField0_ |= 0x00000200;
        maxRainySpeed_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 maxRainySpeed = 10;</code>
       *
       * <pre>
       *&#47; Exceed and Recover SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public Builder clearMaxRainySpeed() {
        bitField0_ = (bitField0_ & ~0x00000200);
        maxRainySpeed_ = 0;
        onChanged();
        return this;
      }

      private int angles_ ;
      /**
       * <code>optional uint32 angles = 11;</code>
       *
       * <pre>
       *&#47; Pitching and Rolling SupportedBy: MXT162
       * </pre>
       */
      public boolean hasAngles() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional uint32 angles = 11;</code>
       *
       * <pre>
       *&#47; Pitching and Rolling SupportedBy: MXT162
       * </pre>
       */
      public int getAngles() {
        return angles_;
      }
      /**
       * <code>optional uint32 angles = 11;</code>
       *
       * <pre>
       *&#47; Pitching and Rolling SupportedBy: MXT162
       * </pre>
       */
      public Builder setAngles(int value) {
        bitField0_ |= 0x00000400;
        angles_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 angles = 11;</code>
       *
       * <pre>
       *&#47; Pitching and Rolling SupportedBy: MXT162
       * </pre>
       */
      public Builder clearAngles() {
        bitField0_ = (bitField0_ & ~0x00000400);
        angles_ = 0;
        onChanged();
        return this;
      }

      private int history_ ;
      /**
       * <code>optional uint32 history = 12;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162
       * </pre>
       */
      public boolean hasHistory() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional uint32 history = 12;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162
       * </pre>
       */
      public int getHistory() {
        return history_;
      }
      /**
       * <code>optional uint32 history = 12;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162
       * </pre>
       */
      public Builder setHistory(int value) {
        bitField0_ |= 0x00000800;
        history_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 history = 12;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162
       * </pre>
       */
      public Builder clearHistory() {
        bitField0_ = (bitField0_ & ~0x00000800);
        history_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:maxpb.TelemetryEventsTransmissionMask)
    }

    static {
      defaultInstance = new TelemetryEventsTransmissionMask(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:maxpb.TelemetryEventsTransmissionMask)
  }

  public interface TelemetryEventsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:maxpb.TelemetryEvents)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required .maxpb.TelemetryEvent eventID = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT162, MXT180
     * </pre>
     */
    boolean hasEventID();
    /**
     * <code>required .maxpb.TelemetryEvent eventID = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT162, MXT180
     * </pre>
     */
    maxpb.MaxpbTelemetry.TelemetryEvent getEventID();

    /**
     * <code>optional uint32 duration = 2;</code>
     *
     * <pre>
     *&#47; Miliseconds SupportedBy: MXT142, MXT162, MXT180
     * </pre>
     */
    boolean hasDuration();
    /**
     * <code>optional uint32 duration = 2;</code>
     *
     * <pre>
     *&#47; Miliseconds SupportedBy: MXT142, MXT162, MXT180
     * </pre>
     */
    int getDuration();

    /**
     * <code>optional int32 maximumValue = 3;</code>
     *
     * <pre>
     *&#47; the unit depends of the eventID SupportedBy: MXT142, MXT162, MXT180
     * </pre>
     */
    boolean hasMaximumValue();
    /**
     * <code>optional int32 maximumValue = 3;</code>
     *
     * <pre>
     *&#47; the unit depends of the eventID SupportedBy: MXT142, MXT162, MXT180
     * </pre>
     */
    int getMaximumValue();

    /**
     * <code>optional int32 meanValue = 4;</code>
     *
     * <pre>
     *&#47; the unit depends of the eventID SupportedBy: MXT162, MXT180
     * </pre>
     */
    boolean hasMeanValue();
    /**
     * <code>optional int32 meanValue = 4;</code>
     *
     * <pre>
     *&#47; the unit depends of the eventID SupportedBy: MXT162, MXT180
     * </pre>
     */
    int getMeanValue();

    /**
     * <code>optional int32 minimumValue = 5;</code>
     *
     * <pre>
     *&#47; the unit depends of the eventID SupportedBy: MXT162, MXT180
     * </pre>
     */
    boolean hasMinimumValue();
    /**
     * <code>optional int32 minimumValue = 5;</code>
     *
     * <pre>
     *&#47; the unit depends of the eventID SupportedBy: MXT162, MXT180
     * </pre>
     */
    int getMinimumValue();

    /**
     * <code>optional int32 parameterConfigured = 6;</code>
     *
     * <pre>
     *&#47; the unit depends of the eventID SupportedBy: MXT162, MXT180
     * </pre>
     */
    boolean hasParameterConfigured();
    /**
     * <code>optional int32 parameterConfigured = 6;</code>
     *
     * <pre>
     *&#47; the unit depends of the eventID SupportedBy: MXT162, MXT180
     * </pre>
     */
    int getParameterConfigured();

    /**
     * <code>optional .maxpb.TelemetryParameterSource parameterSource = 7;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    boolean hasParameterSource();
    /**
     * <code>optional .maxpb.TelemetryParameterSource parameterSource = 7;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    maxpb.MaxpbTelemetry.TelemetryParameterSource getParameterSource();

    /**
     * <code>optional .maxpb.TelemetryDataSource valueSource = 8;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    boolean hasValueSource();
    /**
     * <code>optional .maxpb.TelemetryDataSource valueSource = 8;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    maxpb.MaxpbTelemetry.TelemetryDataSource getValueSource();

    /**
     * <code>optional int32 initialSpeed = 9;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162
     * </pre>
     */
    boolean hasInitialSpeed();
    /**
     * <code>optional int32 initialSpeed = 9;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162
     * </pre>
     */
    int getInitialSpeed();

    /**
     * <code>optional int32 finalSpeed = 10;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162
     * </pre>
     */
    boolean hasFinalSpeed();
    /**
     * <code>optional int32 finalSpeed = 10;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162
     * </pre>
     */
    int getFinalSpeed();

    /**
     * <code>optional uint32 timeToMax = 11;</code>
     *
     * <pre>
     *&#47; Miliseconds SupportedBy: MXT142, MXT162
     * </pre>
     */
    boolean hasTimeToMax();
    /**
     * <code>optional uint32 timeToMax = 11;</code>
     *
     * <pre>
     *&#47; Miliseconds SupportedBy: MXT142, MXT162
     * </pre>
     */
    int getTimeToMax();

    /**
     * <code>optional .maxpb.AccelerometerData accelerometer = 13;</code>
     *
     * <pre>
     *&#47;optional AxisData finalAxis                     = 12; ///&#64;exclude Deprecated SupportedBy: MXT162
     * </pre>
     */
    boolean hasAccelerometer();
    /**
     * <code>optional .maxpb.AccelerometerData accelerometer = 13;</code>
     *
     * <pre>
     *&#47;optional AxisData finalAxis                     = 12; ///&#64;exclude Deprecated SupportedBy: MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.AccelerometerData getAccelerometer();
    /**
     * <code>optional .maxpb.AccelerometerData accelerometer = 13;</code>
     *
     * <pre>
     *&#47;optional AxisData finalAxis                     = 12; ///&#64;exclude Deprecated SupportedBy: MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.AccelerometerDataOrBuilder getAccelerometerOrBuilder();
  }
  /**
   * Protobuf type {@code maxpb.TelemetryEvents}
   */
  public static final class TelemetryEvents extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:maxpb.TelemetryEvents)
      TelemetryEventsOrBuilder {
    // Use TelemetryEvents.newBuilder() to construct.
    private TelemetryEvents(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private TelemetryEvents(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final TelemetryEvents defaultInstance;
    public static TelemetryEvents getDefaultInstance() {
      return defaultInstance;
    }

    public TelemetryEvents getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private TelemetryEvents(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              maxpb.MaxpbTelemetry.TelemetryEvent value = maxpb.MaxpbTelemetry.TelemetryEvent.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(1, rawValue);
              } else {
                bitField0_ |= 0x00000001;
                eventID_ = value;
              }
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              duration_ = input.readUInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              maximumValue_ = input.readInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              meanValue_ = input.readInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              minimumValue_ = input.readInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              parameterConfigured_ = input.readInt32();
              break;
            }
            case 56: {
              int rawValue = input.readEnum();
              maxpb.MaxpbTelemetry.TelemetryParameterSource value = maxpb.MaxpbTelemetry.TelemetryParameterSource.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(7, rawValue);
              } else {
                bitField0_ |= 0x00000040;
                parameterSource_ = value;
              }
              break;
            }
            case 64: {
              int rawValue = input.readEnum();
              maxpb.MaxpbTelemetry.TelemetryDataSource value = maxpb.MaxpbTelemetry.TelemetryDataSource.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(8, rawValue);
              } else {
                bitField0_ |= 0x00000080;
                valueSource_ = value;
              }
              break;
            }
            case 72: {
              bitField0_ |= 0x00000100;
              initialSpeed_ = input.readInt32();
              break;
            }
            case 80: {
              bitField0_ |= 0x00000200;
              finalSpeed_ = input.readInt32();
              break;
            }
            case 88: {
              bitField0_ |= 0x00000400;
              timeToMax_ = input.readUInt32();
              break;
            }
            case 106: {
              maxpb.MaxpbTelemetry.AccelerometerData.Builder subBuilder = null;
              if (((bitField0_ & 0x00000800) == 0x00000800)) {
                subBuilder = accelerometer_.toBuilder();
              }
              accelerometer_ = input.readMessage(maxpb.MaxpbTelemetry.AccelerometerData.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(accelerometer_);
                accelerometer_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000800;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return maxpb.MaxpbTelemetry.internal_static_maxpb_TelemetryEvents_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return maxpb.MaxpbTelemetry.internal_static_maxpb_TelemetryEvents_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              maxpb.MaxpbTelemetry.TelemetryEvents.class, maxpb.MaxpbTelemetry.TelemetryEvents.Builder.class);
    }

    public static com.google.protobuf.Parser<TelemetryEvents> PARSER =
        new com.google.protobuf.AbstractParser<TelemetryEvents>() {
      public TelemetryEvents parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new TelemetryEvents(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<TelemetryEvents> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int EVENTID_FIELD_NUMBER = 1;
    private maxpb.MaxpbTelemetry.TelemetryEvent eventID_;
    /**
     * <code>required .maxpb.TelemetryEvent eventID = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT162, MXT180
     * </pre>
     */
    public boolean hasEventID() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .maxpb.TelemetryEvent eventID = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT162, MXT180
     * </pre>
     */
    public maxpb.MaxpbTelemetry.TelemetryEvent getEventID() {
      return eventID_;
    }

    public static final int DURATION_FIELD_NUMBER = 2;
    private int duration_;
    /**
     * <code>optional uint32 duration = 2;</code>
     *
     * <pre>
     *&#47; Miliseconds SupportedBy: MXT142, MXT162, MXT180
     * </pre>
     */
    public boolean hasDuration() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional uint32 duration = 2;</code>
     *
     * <pre>
     *&#47; Miliseconds SupportedBy: MXT142, MXT162, MXT180
     * </pre>
     */
    public int getDuration() {
      return duration_;
    }

    public static final int MAXIMUMVALUE_FIELD_NUMBER = 3;
    private int maximumValue_;
    /**
     * <code>optional int32 maximumValue = 3;</code>
     *
     * <pre>
     *&#47; the unit depends of the eventID SupportedBy: MXT142, MXT162, MXT180
     * </pre>
     */
    public boolean hasMaximumValue() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 maximumValue = 3;</code>
     *
     * <pre>
     *&#47; the unit depends of the eventID SupportedBy: MXT142, MXT162, MXT180
     * </pre>
     */
    public int getMaximumValue() {
      return maximumValue_;
    }

    public static final int MEANVALUE_FIELD_NUMBER = 4;
    private int meanValue_;
    /**
     * <code>optional int32 meanValue = 4;</code>
     *
     * <pre>
     *&#47; the unit depends of the eventID SupportedBy: MXT162, MXT180
     * </pre>
     */
    public boolean hasMeanValue() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 meanValue = 4;</code>
     *
     * <pre>
     *&#47; the unit depends of the eventID SupportedBy: MXT162, MXT180
     * </pre>
     */
    public int getMeanValue() {
      return meanValue_;
    }

    public static final int MINIMUMVALUE_FIELD_NUMBER = 5;
    private int minimumValue_;
    /**
     * <code>optional int32 minimumValue = 5;</code>
     *
     * <pre>
     *&#47; the unit depends of the eventID SupportedBy: MXT162, MXT180
     * </pre>
     */
    public boolean hasMinimumValue() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 minimumValue = 5;</code>
     *
     * <pre>
     *&#47; the unit depends of the eventID SupportedBy: MXT162, MXT180
     * </pre>
     */
    public int getMinimumValue() {
      return minimumValue_;
    }

    public static final int PARAMETERCONFIGURED_FIELD_NUMBER = 6;
    private int parameterConfigured_;
    /**
     * <code>optional int32 parameterConfigured = 6;</code>
     *
     * <pre>
     *&#47; the unit depends of the eventID SupportedBy: MXT162, MXT180
     * </pre>
     */
    public boolean hasParameterConfigured() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional int32 parameterConfigured = 6;</code>
     *
     * <pre>
     *&#47; the unit depends of the eventID SupportedBy: MXT162, MXT180
     * </pre>
     */
    public int getParameterConfigured() {
      return parameterConfigured_;
    }

    public static final int PARAMETERSOURCE_FIELD_NUMBER = 7;
    private maxpb.MaxpbTelemetry.TelemetryParameterSource parameterSource_;
    /**
     * <code>optional .maxpb.TelemetryParameterSource parameterSource = 7;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public boolean hasParameterSource() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional .maxpb.TelemetryParameterSource parameterSource = 7;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public maxpb.MaxpbTelemetry.TelemetryParameterSource getParameterSource() {
      return parameterSource_;
    }

    public static final int VALUESOURCE_FIELD_NUMBER = 8;
    private maxpb.MaxpbTelemetry.TelemetryDataSource valueSource_;
    /**
     * <code>optional .maxpb.TelemetryDataSource valueSource = 8;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public boolean hasValueSource() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional .maxpb.TelemetryDataSource valueSource = 8;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public maxpb.MaxpbTelemetry.TelemetryDataSource getValueSource() {
      return valueSource_;
    }

    public static final int INITIALSPEED_FIELD_NUMBER = 9;
    private int initialSpeed_;
    /**
     * <code>optional int32 initialSpeed = 9;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162
     * </pre>
     */
    public boolean hasInitialSpeed() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional int32 initialSpeed = 9;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162
     * </pre>
     */
    public int getInitialSpeed() {
      return initialSpeed_;
    }

    public static final int FINALSPEED_FIELD_NUMBER = 10;
    private int finalSpeed_;
    /**
     * <code>optional int32 finalSpeed = 10;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162
     * </pre>
     */
    public boolean hasFinalSpeed() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional int32 finalSpeed = 10;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162
     * </pre>
     */
    public int getFinalSpeed() {
      return finalSpeed_;
    }

    public static final int TIMETOMAX_FIELD_NUMBER = 11;
    private int timeToMax_;
    /**
     * <code>optional uint32 timeToMax = 11;</code>
     *
     * <pre>
     *&#47; Miliseconds SupportedBy: MXT142, MXT162
     * </pre>
     */
    public boolean hasTimeToMax() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional uint32 timeToMax = 11;</code>
     *
     * <pre>
     *&#47; Miliseconds SupportedBy: MXT142, MXT162
     * </pre>
     */
    public int getTimeToMax() {
      return timeToMax_;
    }

    public static final int ACCELEROMETER_FIELD_NUMBER = 13;
    private maxpb.MaxpbTelemetry.AccelerometerData accelerometer_;
    /**
     * <code>optional .maxpb.AccelerometerData accelerometer = 13;</code>
     *
     * <pre>
     *&#47;optional AxisData finalAxis                     = 12; ///&#64;exclude Deprecated SupportedBy: MXT162
     * </pre>
     */
    public boolean hasAccelerometer() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional .maxpb.AccelerometerData accelerometer = 13;</code>
     *
     * <pre>
     *&#47;optional AxisData finalAxis                     = 12; ///&#64;exclude Deprecated SupportedBy: MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.AccelerometerData getAccelerometer() {
      return accelerometer_;
    }
    /**
     * <code>optional .maxpb.AccelerometerData accelerometer = 13;</code>
     *
     * <pre>
     *&#47;optional AxisData finalAxis                     = 12; ///&#64;exclude Deprecated SupportedBy: MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.AccelerometerDataOrBuilder getAccelerometerOrBuilder() {
      return accelerometer_;
    }

    private void initFields() {
      eventID_ = maxpb.MaxpbTelemetry.TelemetryEvent.TE_NONE;
      duration_ = 0;
      maximumValue_ = 0;
      meanValue_ = 0;
      minimumValue_ = 0;
      parameterConfigured_ = 0;
      parameterSource_ = maxpb.MaxpbTelemetry.TelemetryParameterSource.TPS_CONFIG;
      valueSource_ = maxpb.MaxpbTelemetry.TelemetryDataSource.TDS_GPS;
      initialSpeed_ = 0;
      finalSpeed_ = 0;
      timeToMax_ = 0;
      accelerometer_ = maxpb.MaxpbTelemetry.AccelerometerData.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasEventID()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, eventID_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, duration_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, maximumValue_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(4, meanValue_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(5, minimumValue_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(6, parameterConfigured_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeEnum(7, parameterSource_.getNumber());
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeEnum(8, valueSource_.getNumber());
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeInt32(9, initialSpeed_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeInt32(10, finalSpeed_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeUInt32(11, timeToMax_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeMessage(13, accelerometer_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, eventID_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, duration_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, maximumValue_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, meanValue_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, minimumValue_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, parameterConfigured_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(7, parameterSource_.getNumber());
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(8, valueSource_.getNumber());
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(9, initialSpeed_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(10, finalSpeed_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(11, timeToMax_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(13, accelerometer_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static maxpb.MaxpbTelemetry.TelemetryEvents parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static maxpb.MaxpbTelemetry.TelemetryEvents parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetry.TelemetryEvents parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static maxpb.MaxpbTelemetry.TelemetryEvents parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetry.TelemetryEvents parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static maxpb.MaxpbTelemetry.TelemetryEvents parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetry.TelemetryEvents parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static maxpb.MaxpbTelemetry.TelemetryEvents parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetry.TelemetryEvents parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static maxpb.MaxpbTelemetry.TelemetryEvents parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(maxpb.MaxpbTelemetry.TelemetryEvents prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code maxpb.TelemetryEvents}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:maxpb.TelemetryEvents)
        maxpb.MaxpbTelemetry.TelemetryEventsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return maxpb.MaxpbTelemetry.internal_static_maxpb_TelemetryEvents_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return maxpb.MaxpbTelemetry.internal_static_maxpb_TelemetryEvents_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                maxpb.MaxpbTelemetry.TelemetryEvents.class, maxpb.MaxpbTelemetry.TelemetryEvents.Builder.class);
      }

      // Construct using maxpb.MaxpbTelemetry.TelemetryEvents.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getAccelerometerFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        eventID_ = maxpb.MaxpbTelemetry.TelemetryEvent.TE_NONE;
        bitField0_ = (bitField0_ & ~0x00000001);
        duration_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        maximumValue_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        meanValue_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        minimumValue_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        parameterConfigured_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        parameterSource_ = maxpb.MaxpbTelemetry.TelemetryParameterSource.TPS_CONFIG;
        bitField0_ = (bitField0_ & ~0x00000040);
        valueSource_ = maxpb.MaxpbTelemetry.TelemetryDataSource.TDS_GPS;
        bitField0_ = (bitField0_ & ~0x00000080);
        initialSpeed_ = 0;
        bitField0_ = (bitField0_ & ~0x00000100);
        finalSpeed_ = 0;
        bitField0_ = (bitField0_ & ~0x00000200);
        timeToMax_ = 0;
        bitField0_ = (bitField0_ & ~0x00000400);
        if (accelerometerBuilder_ == null) {
          accelerometer_ = maxpb.MaxpbTelemetry.AccelerometerData.getDefaultInstance();
        } else {
          accelerometerBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000800);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return maxpb.MaxpbTelemetry.internal_static_maxpb_TelemetryEvents_descriptor;
      }

      public maxpb.MaxpbTelemetry.TelemetryEvents getDefaultInstanceForType() {
        return maxpb.MaxpbTelemetry.TelemetryEvents.getDefaultInstance();
      }

      public maxpb.MaxpbTelemetry.TelemetryEvents build() {
        maxpb.MaxpbTelemetry.TelemetryEvents result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public maxpb.MaxpbTelemetry.TelemetryEvents buildPartial() {
        maxpb.MaxpbTelemetry.TelemetryEvents result = new maxpb.MaxpbTelemetry.TelemetryEvents(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.eventID_ = eventID_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.duration_ = duration_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.maximumValue_ = maximumValue_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.meanValue_ = meanValue_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.minimumValue_ = minimumValue_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.parameterConfigured_ = parameterConfigured_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.parameterSource_ = parameterSource_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.valueSource_ = valueSource_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.initialSpeed_ = initialSpeed_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.finalSpeed_ = finalSpeed_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        result.timeToMax_ = timeToMax_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000800;
        }
        if (accelerometerBuilder_ == null) {
          result.accelerometer_ = accelerometer_;
        } else {
          result.accelerometer_ = accelerometerBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof maxpb.MaxpbTelemetry.TelemetryEvents) {
          return mergeFrom((maxpb.MaxpbTelemetry.TelemetryEvents)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(maxpb.MaxpbTelemetry.TelemetryEvents other) {
        if (other == maxpb.MaxpbTelemetry.TelemetryEvents.getDefaultInstance()) return this;
        if (other.hasEventID()) {
          setEventID(other.getEventID());
        }
        if (other.hasDuration()) {
          setDuration(other.getDuration());
        }
        if (other.hasMaximumValue()) {
          setMaximumValue(other.getMaximumValue());
        }
        if (other.hasMeanValue()) {
          setMeanValue(other.getMeanValue());
        }
        if (other.hasMinimumValue()) {
          setMinimumValue(other.getMinimumValue());
        }
        if (other.hasParameterConfigured()) {
          setParameterConfigured(other.getParameterConfigured());
        }
        if (other.hasParameterSource()) {
          setParameterSource(other.getParameterSource());
        }
        if (other.hasValueSource()) {
          setValueSource(other.getValueSource());
        }
        if (other.hasInitialSpeed()) {
          setInitialSpeed(other.getInitialSpeed());
        }
        if (other.hasFinalSpeed()) {
          setFinalSpeed(other.getFinalSpeed());
        }
        if (other.hasTimeToMax()) {
          setTimeToMax(other.getTimeToMax());
        }
        if (other.hasAccelerometer()) {
          mergeAccelerometer(other.getAccelerometer());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasEventID()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        maxpb.MaxpbTelemetry.TelemetryEvents parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (maxpb.MaxpbTelemetry.TelemetryEvents) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private maxpb.MaxpbTelemetry.TelemetryEvent eventID_ = maxpb.MaxpbTelemetry.TelemetryEvent.TE_NONE;
      /**
       * <code>required .maxpb.TelemetryEvent eventID = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT162, MXT180
       * </pre>
       */
      public boolean hasEventID() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .maxpb.TelemetryEvent eventID = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT162, MXT180
       * </pre>
       */
      public maxpb.MaxpbTelemetry.TelemetryEvent getEventID() {
        return eventID_;
      }
      /**
       * <code>required .maxpb.TelemetryEvent eventID = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT162, MXT180
       * </pre>
       */
      public Builder setEventID(maxpb.MaxpbTelemetry.TelemetryEvent value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        eventID_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required .maxpb.TelemetryEvent eventID = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT162, MXT180
       * </pre>
       */
      public Builder clearEventID() {
        bitField0_ = (bitField0_ & ~0x00000001);
        eventID_ = maxpb.MaxpbTelemetry.TelemetryEvent.TE_NONE;
        onChanged();
        return this;
      }

      private int duration_ ;
      /**
       * <code>optional uint32 duration = 2;</code>
       *
       * <pre>
       *&#47; Miliseconds SupportedBy: MXT142, MXT162, MXT180
       * </pre>
       */
      public boolean hasDuration() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional uint32 duration = 2;</code>
       *
       * <pre>
       *&#47; Miliseconds SupportedBy: MXT142, MXT162, MXT180
       * </pre>
       */
      public int getDuration() {
        return duration_;
      }
      /**
       * <code>optional uint32 duration = 2;</code>
       *
       * <pre>
       *&#47; Miliseconds SupportedBy: MXT142, MXT162, MXT180
       * </pre>
       */
      public Builder setDuration(int value) {
        bitField0_ |= 0x00000002;
        duration_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 duration = 2;</code>
       *
       * <pre>
       *&#47; Miliseconds SupportedBy: MXT142, MXT162, MXT180
       * </pre>
       */
      public Builder clearDuration() {
        bitField0_ = (bitField0_ & ~0x00000002);
        duration_ = 0;
        onChanged();
        return this;
      }

      private int maximumValue_ ;
      /**
       * <code>optional int32 maximumValue = 3;</code>
       *
       * <pre>
       *&#47; the unit depends of the eventID SupportedBy: MXT142, MXT162, MXT180
       * </pre>
       */
      public boolean hasMaximumValue() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 maximumValue = 3;</code>
       *
       * <pre>
       *&#47; the unit depends of the eventID SupportedBy: MXT142, MXT162, MXT180
       * </pre>
       */
      public int getMaximumValue() {
        return maximumValue_;
      }
      /**
       * <code>optional int32 maximumValue = 3;</code>
       *
       * <pre>
       *&#47; the unit depends of the eventID SupportedBy: MXT142, MXT162, MXT180
       * </pre>
       */
      public Builder setMaximumValue(int value) {
        bitField0_ |= 0x00000004;
        maximumValue_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 maximumValue = 3;</code>
       *
       * <pre>
       *&#47; the unit depends of the eventID SupportedBy: MXT142, MXT162, MXT180
       * </pre>
       */
      public Builder clearMaximumValue() {
        bitField0_ = (bitField0_ & ~0x00000004);
        maximumValue_ = 0;
        onChanged();
        return this;
      }

      private int meanValue_ ;
      /**
       * <code>optional int32 meanValue = 4;</code>
       *
       * <pre>
       *&#47; the unit depends of the eventID SupportedBy: MXT162, MXT180
       * </pre>
       */
      public boolean hasMeanValue() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int32 meanValue = 4;</code>
       *
       * <pre>
       *&#47; the unit depends of the eventID SupportedBy: MXT162, MXT180
       * </pre>
       */
      public int getMeanValue() {
        return meanValue_;
      }
      /**
       * <code>optional int32 meanValue = 4;</code>
       *
       * <pre>
       *&#47; the unit depends of the eventID SupportedBy: MXT162, MXT180
       * </pre>
       */
      public Builder setMeanValue(int value) {
        bitField0_ |= 0x00000008;
        meanValue_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 meanValue = 4;</code>
       *
       * <pre>
       *&#47; the unit depends of the eventID SupportedBy: MXT162, MXT180
       * </pre>
       */
      public Builder clearMeanValue() {
        bitField0_ = (bitField0_ & ~0x00000008);
        meanValue_ = 0;
        onChanged();
        return this;
      }

      private int minimumValue_ ;
      /**
       * <code>optional int32 minimumValue = 5;</code>
       *
       * <pre>
       *&#47; the unit depends of the eventID SupportedBy: MXT162, MXT180
       * </pre>
       */
      public boolean hasMinimumValue() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional int32 minimumValue = 5;</code>
       *
       * <pre>
       *&#47; the unit depends of the eventID SupportedBy: MXT162, MXT180
       * </pre>
       */
      public int getMinimumValue() {
        return minimumValue_;
      }
      /**
       * <code>optional int32 minimumValue = 5;</code>
       *
       * <pre>
       *&#47; the unit depends of the eventID SupportedBy: MXT162, MXT180
       * </pre>
       */
      public Builder setMinimumValue(int value) {
        bitField0_ |= 0x00000010;
        minimumValue_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 minimumValue = 5;</code>
       *
       * <pre>
       *&#47; the unit depends of the eventID SupportedBy: MXT162, MXT180
       * </pre>
       */
      public Builder clearMinimumValue() {
        bitField0_ = (bitField0_ & ~0x00000010);
        minimumValue_ = 0;
        onChanged();
        return this;
      }

      private int parameterConfigured_ ;
      /**
       * <code>optional int32 parameterConfigured = 6;</code>
       *
       * <pre>
       *&#47; the unit depends of the eventID SupportedBy: MXT162, MXT180
       * </pre>
       */
      public boolean hasParameterConfigured() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional int32 parameterConfigured = 6;</code>
       *
       * <pre>
       *&#47; the unit depends of the eventID SupportedBy: MXT162, MXT180
       * </pre>
       */
      public int getParameterConfigured() {
        return parameterConfigured_;
      }
      /**
       * <code>optional int32 parameterConfigured = 6;</code>
       *
       * <pre>
       *&#47; the unit depends of the eventID SupportedBy: MXT162, MXT180
       * </pre>
       */
      public Builder setParameterConfigured(int value) {
        bitField0_ |= 0x00000020;
        parameterConfigured_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 parameterConfigured = 6;</code>
       *
       * <pre>
       *&#47; the unit depends of the eventID SupportedBy: MXT162, MXT180
       * </pre>
       */
      public Builder clearParameterConfigured() {
        bitField0_ = (bitField0_ & ~0x00000020);
        parameterConfigured_ = 0;
        onChanged();
        return this;
      }

      private maxpb.MaxpbTelemetry.TelemetryParameterSource parameterSource_ = maxpb.MaxpbTelemetry.TelemetryParameterSource.TPS_CONFIG;
      /**
       * <code>optional .maxpb.TelemetryParameterSource parameterSource = 7;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public boolean hasParameterSource() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional .maxpb.TelemetryParameterSource parameterSource = 7;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public maxpb.MaxpbTelemetry.TelemetryParameterSource getParameterSource() {
        return parameterSource_;
      }
      /**
       * <code>optional .maxpb.TelemetryParameterSource parameterSource = 7;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder setParameterSource(maxpb.MaxpbTelemetry.TelemetryParameterSource value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000040;
        parameterSource_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .maxpb.TelemetryParameterSource parameterSource = 7;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder clearParameterSource() {
        bitField0_ = (bitField0_ & ~0x00000040);
        parameterSource_ = maxpb.MaxpbTelemetry.TelemetryParameterSource.TPS_CONFIG;
        onChanged();
        return this;
      }

      private maxpb.MaxpbTelemetry.TelemetryDataSource valueSource_ = maxpb.MaxpbTelemetry.TelemetryDataSource.TDS_GPS;
      /**
       * <code>optional .maxpb.TelemetryDataSource valueSource = 8;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public boolean hasValueSource() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional .maxpb.TelemetryDataSource valueSource = 8;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public maxpb.MaxpbTelemetry.TelemetryDataSource getValueSource() {
        return valueSource_;
      }
      /**
       * <code>optional .maxpb.TelemetryDataSource valueSource = 8;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder setValueSource(maxpb.MaxpbTelemetry.TelemetryDataSource value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000080;
        valueSource_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .maxpb.TelemetryDataSource valueSource = 8;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder clearValueSource() {
        bitField0_ = (bitField0_ & ~0x00000080);
        valueSource_ = maxpb.MaxpbTelemetry.TelemetryDataSource.TDS_GPS;
        onChanged();
        return this;
      }

      private int initialSpeed_ ;
      /**
       * <code>optional int32 initialSpeed = 9;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162
       * </pre>
       */
      public boolean hasInitialSpeed() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional int32 initialSpeed = 9;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162
       * </pre>
       */
      public int getInitialSpeed() {
        return initialSpeed_;
      }
      /**
       * <code>optional int32 initialSpeed = 9;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162
       * </pre>
       */
      public Builder setInitialSpeed(int value) {
        bitField0_ |= 0x00000100;
        initialSpeed_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 initialSpeed = 9;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162
       * </pre>
       */
      public Builder clearInitialSpeed() {
        bitField0_ = (bitField0_ & ~0x00000100);
        initialSpeed_ = 0;
        onChanged();
        return this;
      }

      private int finalSpeed_ ;
      /**
       * <code>optional int32 finalSpeed = 10;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162
       * </pre>
       */
      public boolean hasFinalSpeed() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional int32 finalSpeed = 10;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162
       * </pre>
       */
      public int getFinalSpeed() {
        return finalSpeed_;
      }
      /**
       * <code>optional int32 finalSpeed = 10;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162
       * </pre>
       */
      public Builder setFinalSpeed(int value) {
        bitField0_ |= 0x00000200;
        finalSpeed_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 finalSpeed = 10;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162
       * </pre>
       */
      public Builder clearFinalSpeed() {
        bitField0_ = (bitField0_ & ~0x00000200);
        finalSpeed_ = 0;
        onChanged();
        return this;
      }

      private int timeToMax_ ;
      /**
       * <code>optional uint32 timeToMax = 11;</code>
       *
       * <pre>
       *&#47; Miliseconds SupportedBy: MXT142, MXT162
       * </pre>
       */
      public boolean hasTimeToMax() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional uint32 timeToMax = 11;</code>
       *
       * <pre>
       *&#47; Miliseconds SupportedBy: MXT142, MXT162
       * </pre>
       */
      public int getTimeToMax() {
        return timeToMax_;
      }
      /**
       * <code>optional uint32 timeToMax = 11;</code>
       *
       * <pre>
       *&#47; Miliseconds SupportedBy: MXT142, MXT162
       * </pre>
       */
      public Builder setTimeToMax(int value) {
        bitField0_ |= 0x00000400;
        timeToMax_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 timeToMax = 11;</code>
       *
       * <pre>
       *&#47; Miliseconds SupportedBy: MXT142, MXT162
       * </pre>
       */
      public Builder clearTimeToMax() {
        bitField0_ = (bitField0_ & ~0x00000400);
        timeToMax_ = 0;
        onChanged();
        return this;
      }

      private maxpb.MaxpbTelemetry.AccelerometerData accelerometer_ = maxpb.MaxpbTelemetry.AccelerometerData.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.AccelerometerData, maxpb.MaxpbTelemetry.AccelerometerData.Builder, maxpb.MaxpbTelemetry.AccelerometerDataOrBuilder> accelerometerBuilder_;
      /**
       * <code>optional .maxpb.AccelerometerData accelerometer = 13;</code>
       *
       * <pre>
       *&#47;optional AxisData finalAxis                     = 12; ///&#64;exclude Deprecated SupportedBy: MXT162
       * </pre>
       */
      public boolean hasAccelerometer() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional .maxpb.AccelerometerData accelerometer = 13;</code>
       *
       * <pre>
       *&#47;optional AxisData finalAxis                     = 12; ///&#64;exclude Deprecated SupportedBy: MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.AccelerometerData getAccelerometer() {
        if (accelerometerBuilder_ == null) {
          return accelerometer_;
        } else {
          return accelerometerBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .maxpb.AccelerometerData accelerometer = 13;</code>
       *
       * <pre>
       *&#47;optional AxisData finalAxis                     = 12; ///&#64;exclude Deprecated SupportedBy: MXT162
       * </pre>
       */
      public Builder setAccelerometer(maxpb.MaxpbTelemetry.AccelerometerData value) {
        if (accelerometerBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          accelerometer_ = value;
          onChanged();
        } else {
          accelerometerBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000800;
        return this;
      }
      /**
       * <code>optional .maxpb.AccelerometerData accelerometer = 13;</code>
       *
       * <pre>
       *&#47;optional AxisData finalAxis                     = 12; ///&#64;exclude Deprecated SupportedBy: MXT162
       * </pre>
       */
      public Builder setAccelerometer(
          maxpb.MaxpbTelemetry.AccelerometerData.Builder builderForValue) {
        if (accelerometerBuilder_ == null) {
          accelerometer_ = builderForValue.build();
          onChanged();
        } else {
          accelerometerBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000800;
        return this;
      }
      /**
       * <code>optional .maxpb.AccelerometerData accelerometer = 13;</code>
       *
       * <pre>
       *&#47;optional AxisData finalAxis                     = 12; ///&#64;exclude Deprecated SupportedBy: MXT162
       * </pre>
       */
      public Builder mergeAccelerometer(maxpb.MaxpbTelemetry.AccelerometerData value) {
        if (accelerometerBuilder_ == null) {
          if (((bitField0_ & 0x00000800) == 0x00000800) &&
              accelerometer_ != maxpb.MaxpbTelemetry.AccelerometerData.getDefaultInstance()) {
            accelerometer_ =
              maxpb.MaxpbTelemetry.AccelerometerData.newBuilder(accelerometer_).mergeFrom(value).buildPartial();
          } else {
            accelerometer_ = value;
          }
          onChanged();
        } else {
          accelerometerBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000800;
        return this;
      }
      /**
       * <code>optional .maxpb.AccelerometerData accelerometer = 13;</code>
       *
       * <pre>
       *&#47;optional AxisData finalAxis                     = 12; ///&#64;exclude Deprecated SupportedBy: MXT162
       * </pre>
       */
      public Builder clearAccelerometer() {
        if (accelerometerBuilder_ == null) {
          accelerometer_ = maxpb.MaxpbTelemetry.AccelerometerData.getDefaultInstance();
          onChanged();
        } else {
          accelerometerBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000800);
        return this;
      }
      /**
       * <code>optional .maxpb.AccelerometerData accelerometer = 13;</code>
       *
       * <pre>
       *&#47;optional AxisData finalAxis                     = 12; ///&#64;exclude Deprecated SupportedBy: MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.AccelerometerData.Builder getAccelerometerBuilder() {
        bitField0_ |= 0x00000800;
        onChanged();
        return getAccelerometerFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .maxpb.AccelerometerData accelerometer = 13;</code>
       *
       * <pre>
       *&#47;optional AxisData finalAxis                     = 12; ///&#64;exclude Deprecated SupportedBy: MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.AccelerometerDataOrBuilder getAccelerometerOrBuilder() {
        if (accelerometerBuilder_ != null) {
          return accelerometerBuilder_.getMessageOrBuilder();
        } else {
          return accelerometer_;
        }
      }
      /**
       * <code>optional .maxpb.AccelerometerData accelerometer = 13;</code>
       *
       * <pre>
       *&#47;optional AxisData finalAxis                     = 12; ///&#64;exclude Deprecated SupportedBy: MXT162
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.AccelerometerData, maxpb.MaxpbTelemetry.AccelerometerData.Builder, maxpb.MaxpbTelemetry.AccelerometerDataOrBuilder> 
          getAccelerometerFieldBuilder() {
        if (accelerometerBuilder_ == null) {
          accelerometerBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              maxpb.MaxpbTelemetry.AccelerometerData, maxpb.MaxpbTelemetry.AccelerometerData.Builder, maxpb.MaxpbTelemetry.AccelerometerDataOrBuilder>(
                  getAccelerometer(),
                  getParentForChildren(),
                  isClean());
          accelerometer_ = null;
        }
        return accelerometerBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:maxpb.TelemetryEvents)
    }

    static {
      defaultInstance = new TelemetryEvents(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:maxpb.TelemetryEvents)
  }

  public interface TelemetryFlagsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:maxpb.TelemetryFlags)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional bool overSpeed = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180
     * </pre>
     */
    boolean hasOverSpeed();
    /**
     * <code>optional bool overSpeed = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180
     * </pre>
     */
    boolean getOverSpeed();

    /**
     * <code>optional bool stoppedExcess = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180
     * </pre>
     */
    boolean hasStoppedExcess();
    /**
     * <code>optional bool stoppedExcess = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180
     * </pre>
     */
    boolean getStoppedExcess();

    /**
     * <code>optional bool moving = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180
     * </pre>
     */
    boolean hasMoving();
    /**
     * <code>optional bool moving = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180
     * </pre>
     */
    boolean getMoving();

    /**
     * <code>optional .maxpb.AccelerometerState accelerometerState = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180
     * </pre>
     */
    boolean hasAccelerometerState();
    /**
     * <code>optional .maxpb.AccelerometerState accelerometerState = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180
     * </pre>
     */
    maxpb.MaxpbTelemetry.AccelerometerState getAccelerometerState();

    /**
     * <code>optional uint32 vehicleOperationTime = 5;</code>
     *
     * <pre>
     *&#47; Seconds SupportedBy: MXT142, MXT160, MXT162, MXT180
     * </pre>
     */
    boolean hasVehicleOperationTime();
    /**
     * <code>optional uint32 vehicleOperationTime = 5;</code>
     *
     * <pre>
     *&#47; Seconds SupportedBy: MXT142, MXT160, MXT162, MXT180
     * </pre>
     */
    int getVehicleOperationTime();

    /**
     * <code>optional bool clutch = 6;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162, MAXIO
     * </pre>
     */
    boolean hasClutch();
    /**
     * <code>optional bool clutch = 6;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162, MAXIO
     * </pre>
     */
    boolean getClutch();

    /**
     * <code>optional bool brake = 7;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162, MAXIO
     * </pre>
     */
    boolean hasBrake();
    /**
     * <code>optional bool brake = 7;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162, MAXIO
     * </pre>
     */
    boolean getBrake();

    /**
     * <code>optional bool parkingBrake = 8;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162, MAXIO
     * </pre>
     */
    boolean hasParkingBrake();
    /**
     * <code>optional bool parkingBrake = 8;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162, MAXIO
     * </pre>
     */
    boolean getParkingBrake();

    /**
     * <code>optional bool motorBrake = 9;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162, MAXIO
     * </pre>
     */
    boolean hasMotorBrake();
    /**
     * <code>optional bool motorBrake = 9;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162, MAXIO
     * </pre>
     */
    boolean getMotorBrake();

    /**
     * <code>optional bool windowShieldWipers = 10;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162, MAXIO
     * </pre>
     */
    boolean hasWindowShieldWipers();
    /**
     * <code>optional bool windowShieldWipers = 10;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162, MAXIO
     * </pre>
     */
    boolean getWindowShieldWipers();

    /**
     * <code>optional bool doorClosed = 11;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162, MAXIO
     * </pre>
     */
    boolean hasDoorClosed();
    /**
     * <code>optional bool doorClosed = 11;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162, MAXIO
     * </pre>
     */
    boolean getDoorClosed();

    /**
     * <code>optional bool doorLocked = 12;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162, MAXIO
     * </pre>
     */
    boolean hasDoorLocked();
    /**
     * <code>optional bool doorLocked = 12;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162, MAXIO
     * </pre>
     */
    boolean getDoorLocked();

    /**
     * <code>optional bool trunk = 13;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162, MAXIO
     * </pre>
     */
    boolean hasTrunk();
    /**
     * <code>optional bool trunk = 13;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162, MAXIO
     * </pre>
     */
    boolean getTrunk();

    /**
     * <code>optional bool seatBelt = 14;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162, MAXIO
     * </pre>
     */
    boolean hasSeatBelt();
    /**
     * <code>optional bool seatBelt = 14;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162, MAXIO
     * </pre>
     */
    boolean getSeatBelt();

    /**
     * <code>optional bool headlights = 15;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162, MAXIO
     * </pre>
     */
    boolean hasHeadlights();
    /**
     * <code>optional bool headlights = 15;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162, MAXIO
     * </pre>
     */
    boolean getHeadlights();

    /**
     * <code>optional .maxpb.TractionState tractionState = 16;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162, MAXIO
     * </pre>
     */
    boolean hasTractionState();
    /**
     * <code>optional .maxpb.TractionState tractionState = 16;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162, MAXIO
     * </pre>
     */
    maxpb.MaxpbTelemetry.TractionState getTractionState();

    /**
     * <code>optional bool moduleRemoved = 17;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    boolean hasModuleRemoved();
    /**
     * <code>optional bool moduleRemoved = 17;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    boolean getModuleRemoved();
  }
  /**
   * Protobuf type {@code maxpb.TelemetryFlags}
   */
  public static final class TelemetryFlags extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:maxpb.TelemetryFlags)
      TelemetryFlagsOrBuilder {
    // Use TelemetryFlags.newBuilder() to construct.
    private TelemetryFlags(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private TelemetryFlags(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final TelemetryFlags defaultInstance;
    public static TelemetryFlags getDefaultInstance() {
      return defaultInstance;
    }

    public TelemetryFlags getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private TelemetryFlags(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              overSpeed_ = input.readBool();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              stoppedExcess_ = input.readBool();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              moving_ = input.readBool();
              break;
            }
            case 32: {
              int rawValue = input.readEnum();
              maxpb.MaxpbTelemetry.AccelerometerState value = maxpb.MaxpbTelemetry.AccelerometerState.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(4, rawValue);
              } else {
                bitField0_ |= 0x00000008;
                accelerometerState_ = value;
              }
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              vehicleOperationTime_ = input.readUInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              clutch_ = input.readBool();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              brake_ = input.readBool();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000080;
              parkingBrake_ = input.readBool();
              break;
            }
            case 72: {
              bitField0_ |= 0x00000100;
              motorBrake_ = input.readBool();
              break;
            }
            case 80: {
              bitField0_ |= 0x00000200;
              windowShieldWipers_ = input.readBool();
              break;
            }
            case 88: {
              bitField0_ |= 0x00000400;
              doorClosed_ = input.readBool();
              break;
            }
            case 96: {
              bitField0_ |= 0x00000800;
              doorLocked_ = input.readBool();
              break;
            }
            case 104: {
              bitField0_ |= 0x00001000;
              trunk_ = input.readBool();
              break;
            }
            case 112: {
              bitField0_ |= 0x00002000;
              seatBelt_ = input.readBool();
              break;
            }
            case 120: {
              bitField0_ |= 0x00004000;
              headlights_ = input.readBool();
              break;
            }
            case 128: {
              int rawValue = input.readEnum();
              maxpb.MaxpbTelemetry.TractionState value = maxpb.MaxpbTelemetry.TractionState.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(16, rawValue);
              } else {
                bitField0_ |= 0x00008000;
                tractionState_ = value;
              }
              break;
            }
            case 136: {
              bitField0_ |= 0x00010000;
              moduleRemoved_ = input.readBool();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return maxpb.MaxpbTelemetry.internal_static_maxpb_TelemetryFlags_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return maxpb.MaxpbTelemetry.internal_static_maxpb_TelemetryFlags_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              maxpb.MaxpbTelemetry.TelemetryFlags.class, maxpb.MaxpbTelemetry.TelemetryFlags.Builder.class);
    }

    public static com.google.protobuf.Parser<TelemetryFlags> PARSER =
        new com.google.protobuf.AbstractParser<TelemetryFlags>() {
      public TelemetryFlags parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new TelemetryFlags(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<TelemetryFlags> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int OVERSPEED_FIELD_NUMBER = 1;
    private boolean overSpeed_;
    /**
     * <code>optional bool overSpeed = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180
     * </pre>
     */
    public boolean hasOverSpeed() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional bool overSpeed = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180
     * </pre>
     */
    public boolean getOverSpeed() {
      return overSpeed_;
    }

    public static final int STOPPEDEXCESS_FIELD_NUMBER = 2;
    private boolean stoppedExcess_;
    /**
     * <code>optional bool stoppedExcess = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180
     * </pre>
     */
    public boolean hasStoppedExcess() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional bool stoppedExcess = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180
     * </pre>
     */
    public boolean getStoppedExcess() {
      return stoppedExcess_;
    }

    public static final int MOVING_FIELD_NUMBER = 3;
    private boolean moving_;
    /**
     * <code>optional bool moving = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180
     * </pre>
     */
    public boolean hasMoving() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional bool moving = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180
     * </pre>
     */
    public boolean getMoving() {
      return moving_;
    }

    public static final int ACCELEROMETERSTATE_FIELD_NUMBER = 4;
    private maxpb.MaxpbTelemetry.AccelerometerState accelerometerState_;
    /**
     * <code>optional .maxpb.AccelerometerState accelerometerState = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180
     * </pre>
     */
    public boolean hasAccelerometerState() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional .maxpb.AccelerometerState accelerometerState = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180
     * </pre>
     */
    public maxpb.MaxpbTelemetry.AccelerometerState getAccelerometerState() {
      return accelerometerState_;
    }

    public static final int VEHICLEOPERATIONTIME_FIELD_NUMBER = 5;
    private int vehicleOperationTime_;
    /**
     * <code>optional uint32 vehicleOperationTime = 5;</code>
     *
     * <pre>
     *&#47; Seconds SupportedBy: MXT142, MXT160, MXT162, MXT180
     * </pre>
     */
    public boolean hasVehicleOperationTime() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional uint32 vehicleOperationTime = 5;</code>
     *
     * <pre>
     *&#47; Seconds SupportedBy: MXT142, MXT160, MXT162, MXT180
     * </pre>
     */
    public int getVehicleOperationTime() {
      return vehicleOperationTime_;
    }

    public static final int CLUTCH_FIELD_NUMBER = 6;
    private boolean clutch_;
    /**
     * <code>optional bool clutch = 6;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162, MAXIO
     * </pre>
     */
    public boolean hasClutch() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional bool clutch = 6;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162, MAXIO
     * </pre>
     */
    public boolean getClutch() {
      return clutch_;
    }

    public static final int BRAKE_FIELD_NUMBER = 7;
    private boolean brake_;
    /**
     * <code>optional bool brake = 7;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162, MAXIO
     * </pre>
     */
    public boolean hasBrake() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional bool brake = 7;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162, MAXIO
     * </pre>
     */
    public boolean getBrake() {
      return brake_;
    }

    public static final int PARKINGBRAKE_FIELD_NUMBER = 8;
    private boolean parkingBrake_;
    /**
     * <code>optional bool parkingBrake = 8;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162, MAXIO
     * </pre>
     */
    public boolean hasParkingBrake() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional bool parkingBrake = 8;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162, MAXIO
     * </pre>
     */
    public boolean getParkingBrake() {
      return parkingBrake_;
    }

    public static final int MOTORBRAKE_FIELD_NUMBER = 9;
    private boolean motorBrake_;
    /**
     * <code>optional bool motorBrake = 9;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162, MAXIO
     * </pre>
     */
    public boolean hasMotorBrake() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional bool motorBrake = 9;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162, MAXIO
     * </pre>
     */
    public boolean getMotorBrake() {
      return motorBrake_;
    }

    public static final int WINDOWSHIELDWIPERS_FIELD_NUMBER = 10;
    private boolean windowShieldWipers_;
    /**
     * <code>optional bool windowShieldWipers = 10;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162, MAXIO
     * </pre>
     */
    public boolean hasWindowShieldWipers() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional bool windowShieldWipers = 10;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162, MAXIO
     * </pre>
     */
    public boolean getWindowShieldWipers() {
      return windowShieldWipers_;
    }

    public static final int DOORCLOSED_FIELD_NUMBER = 11;
    private boolean doorClosed_;
    /**
     * <code>optional bool doorClosed = 11;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162, MAXIO
     * </pre>
     */
    public boolean hasDoorClosed() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional bool doorClosed = 11;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162, MAXIO
     * </pre>
     */
    public boolean getDoorClosed() {
      return doorClosed_;
    }

    public static final int DOORLOCKED_FIELD_NUMBER = 12;
    private boolean doorLocked_;
    /**
     * <code>optional bool doorLocked = 12;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162, MAXIO
     * </pre>
     */
    public boolean hasDoorLocked() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional bool doorLocked = 12;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162, MAXIO
     * </pre>
     */
    public boolean getDoorLocked() {
      return doorLocked_;
    }

    public static final int TRUNK_FIELD_NUMBER = 13;
    private boolean trunk_;
    /**
     * <code>optional bool trunk = 13;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162, MAXIO
     * </pre>
     */
    public boolean hasTrunk() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>optional bool trunk = 13;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162, MAXIO
     * </pre>
     */
    public boolean getTrunk() {
      return trunk_;
    }

    public static final int SEATBELT_FIELD_NUMBER = 14;
    private boolean seatBelt_;
    /**
     * <code>optional bool seatBelt = 14;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162, MAXIO
     * </pre>
     */
    public boolean hasSeatBelt() {
      return ((bitField0_ & 0x00002000) == 0x00002000);
    }
    /**
     * <code>optional bool seatBelt = 14;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162, MAXIO
     * </pre>
     */
    public boolean getSeatBelt() {
      return seatBelt_;
    }

    public static final int HEADLIGHTS_FIELD_NUMBER = 15;
    private boolean headlights_;
    /**
     * <code>optional bool headlights = 15;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162, MAXIO
     * </pre>
     */
    public boolean hasHeadlights() {
      return ((bitField0_ & 0x00004000) == 0x00004000);
    }
    /**
     * <code>optional bool headlights = 15;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162, MAXIO
     * </pre>
     */
    public boolean getHeadlights() {
      return headlights_;
    }

    public static final int TRACTIONSTATE_FIELD_NUMBER = 16;
    private maxpb.MaxpbTelemetry.TractionState tractionState_;
    /**
     * <code>optional .maxpb.TractionState tractionState = 16;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162, MAXIO
     * </pre>
     */
    public boolean hasTractionState() {
      return ((bitField0_ & 0x00008000) == 0x00008000);
    }
    /**
     * <code>optional .maxpb.TractionState tractionState = 16;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162, MAXIO
     * </pre>
     */
    public maxpb.MaxpbTelemetry.TractionState getTractionState() {
      return tractionState_;
    }

    public static final int MODULEREMOVED_FIELD_NUMBER = 17;
    private boolean moduleRemoved_;
    /**
     * <code>optional bool moduleRemoved = 17;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    public boolean hasModuleRemoved() {
      return ((bitField0_ & 0x00010000) == 0x00010000);
    }
    /**
     * <code>optional bool moduleRemoved = 17;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    public boolean getModuleRemoved() {
      return moduleRemoved_;
    }

    private void initFields() {
      overSpeed_ = false;
      stoppedExcess_ = false;
      moving_ = false;
      accelerometerState_ = maxpb.MaxpbTelemetry.AccelerometerState.AST_NONE;
      vehicleOperationTime_ = 0;
      clutch_ = false;
      brake_ = false;
      parkingBrake_ = false;
      motorBrake_ = false;
      windowShieldWipers_ = false;
      doorClosed_ = false;
      doorLocked_ = false;
      trunk_ = false;
      seatBelt_ = false;
      headlights_ = false;
      tractionState_ = maxpb.MaxpbTelemetry.TractionState.TS_4X2;
      moduleRemoved_ = false;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBool(1, overSpeed_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBool(2, stoppedExcess_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBool(3, moving_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeEnum(4, accelerometerState_.getNumber());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeUInt32(5, vehicleOperationTime_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeBool(6, clutch_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeBool(7, brake_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeBool(8, parkingBrake_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeBool(9, motorBrake_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeBool(10, windowShieldWipers_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeBool(11, doorClosed_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeBool(12, doorLocked_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeBool(13, trunk_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        output.writeBool(14, seatBelt_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        output.writeBool(15, headlights_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        output.writeEnum(16, tractionState_.getNumber());
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        output.writeBool(17, moduleRemoved_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(1, overSpeed_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(2, stoppedExcess_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(3, moving_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(4, accelerometerState_.getNumber());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(5, vehicleOperationTime_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(6, clutch_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(7, brake_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(8, parkingBrake_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(9, motorBrake_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(10, windowShieldWipers_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(11, doorClosed_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(12, doorLocked_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(13, trunk_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(14, seatBelt_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(15, headlights_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(16, tractionState_.getNumber());
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(17, moduleRemoved_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static maxpb.MaxpbTelemetry.TelemetryFlags parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static maxpb.MaxpbTelemetry.TelemetryFlags parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetry.TelemetryFlags parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static maxpb.MaxpbTelemetry.TelemetryFlags parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetry.TelemetryFlags parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static maxpb.MaxpbTelemetry.TelemetryFlags parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetry.TelemetryFlags parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static maxpb.MaxpbTelemetry.TelemetryFlags parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetry.TelemetryFlags parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static maxpb.MaxpbTelemetry.TelemetryFlags parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(maxpb.MaxpbTelemetry.TelemetryFlags prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code maxpb.TelemetryFlags}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:maxpb.TelemetryFlags)
        maxpb.MaxpbTelemetry.TelemetryFlagsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return maxpb.MaxpbTelemetry.internal_static_maxpb_TelemetryFlags_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return maxpb.MaxpbTelemetry.internal_static_maxpb_TelemetryFlags_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                maxpb.MaxpbTelemetry.TelemetryFlags.class, maxpb.MaxpbTelemetry.TelemetryFlags.Builder.class);
      }

      // Construct using maxpb.MaxpbTelemetry.TelemetryFlags.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        overSpeed_ = false;
        bitField0_ = (bitField0_ & ~0x00000001);
        stoppedExcess_ = false;
        bitField0_ = (bitField0_ & ~0x00000002);
        moving_ = false;
        bitField0_ = (bitField0_ & ~0x00000004);
        accelerometerState_ = maxpb.MaxpbTelemetry.AccelerometerState.AST_NONE;
        bitField0_ = (bitField0_ & ~0x00000008);
        vehicleOperationTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        clutch_ = false;
        bitField0_ = (bitField0_ & ~0x00000020);
        brake_ = false;
        bitField0_ = (bitField0_ & ~0x00000040);
        parkingBrake_ = false;
        bitField0_ = (bitField0_ & ~0x00000080);
        motorBrake_ = false;
        bitField0_ = (bitField0_ & ~0x00000100);
        windowShieldWipers_ = false;
        bitField0_ = (bitField0_ & ~0x00000200);
        doorClosed_ = false;
        bitField0_ = (bitField0_ & ~0x00000400);
        doorLocked_ = false;
        bitField0_ = (bitField0_ & ~0x00000800);
        trunk_ = false;
        bitField0_ = (bitField0_ & ~0x00001000);
        seatBelt_ = false;
        bitField0_ = (bitField0_ & ~0x00002000);
        headlights_ = false;
        bitField0_ = (bitField0_ & ~0x00004000);
        tractionState_ = maxpb.MaxpbTelemetry.TractionState.TS_4X2;
        bitField0_ = (bitField0_ & ~0x00008000);
        moduleRemoved_ = false;
        bitField0_ = (bitField0_ & ~0x00010000);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return maxpb.MaxpbTelemetry.internal_static_maxpb_TelemetryFlags_descriptor;
      }

      public maxpb.MaxpbTelemetry.TelemetryFlags getDefaultInstanceForType() {
        return maxpb.MaxpbTelemetry.TelemetryFlags.getDefaultInstance();
      }

      public maxpb.MaxpbTelemetry.TelemetryFlags build() {
        maxpb.MaxpbTelemetry.TelemetryFlags result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public maxpb.MaxpbTelemetry.TelemetryFlags buildPartial() {
        maxpb.MaxpbTelemetry.TelemetryFlags result = new maxpb.MaxpbTelemetry.TelemetryFlags(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.overSpeed_ = overSpeed_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.stoppedExcess_ = stoppedExcess_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.moving_ = moving_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.accelerometerState_ = accelerometerState_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.vehicleOperationTime_ = vehicleOperationTime_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.clutch_ = clutch_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.brake_ = brake_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.parkingBrake_ = parkingBrake_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.motorBrake_ = motorBrake_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.windowShieldWipers_ = windowShieldWipers_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        result.doorClosed_ = doorClosed_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000800;
        }
        result.doorLocked_ = doorLocked_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00001000;
        }
        result.trunk_ = trunk_;
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00002000;
        }
        result.seatBelt_ = seatBelt_;
        if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
          to_bitField0_ |= 0x00004000;
        }
        result.headlights_ = headlights_;
        if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
          to_bitField0_ |= 0x00008000;
        }
        result.tractionState_ = tractionState_;
        if (((from_bitField0_ & 0x00010000) == 0x00010000)) {
          to_bitField0_ |= 0x00010000;
        }
        result.moduleRemoved_ = moduleRemoved_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof maxpb.MaxpbTelemetry.TelemetryFlags) {
          return mergeFrom((maxpb.MaxpbTelemetry.TelemetryFlags)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(maxpb.MaxpbTelemetry.TelemetryFlags other) {
        if (other == maxpb.MaxpbTelemetry.TelemetryFlags.getDefaultInstance()) return this;
        if (other.hasOverSpeed()) {
          setOverSpeed(other.getOverSpeed());
        }
        if (other.hasStoppedExcess()) {
          setStoppedExcess(other.getStoppedExcess());
        }
        if (other.hasMoving()) {
          setMoving(other.getMoving());
        }
        if (other.hasAccelerometerState()) {
          setAccelerometerState(other.getAccelerometerState());
        }
        if (other.hasVehicleOperationTime()) {
          setVehicleOperationTime(other.getVehicleOperationTime());
        }
        if (other.hasClutch()) {
          setClutch(other.getClutch());
        }
        if (other.hasBrake()) {
          setBrake(other.getBrake());
        }
        if (other.hasParkingBrake()) {
          setParkingBrake(other.getParkingBrake());
        }
        if (other.hasMotorBrake()) {
          setMotorBrake(other.getMotorBrake());
        }
        if (other.hasWindowShieldWipers()) {
          setWindowShieldWipers(other.getWindowShieldWipers());
        }
        if (other.hasDoorClosed()) {
          setDoorClosed(other.getDoorClosed());
        }
        if (other.hasDoorLocked()) {
          setDoorLocked(other.getDoorLocked());
        }
        if (other.hasTrunk()) {
          setTrunk(other.getTrunk());
        }
        if (other.hasSeatBelt()) {
          setSeatBelt(other.getSeatBelt());
        }
        if (other.hasHeadlights()) {
          setHeadlights(other.getHeadlights());
        }
        if (other.hasTractionState()) {
          setTractionState(other.getTractionState());
        }
        if (other.hasModuleRemoved()) {
          setModuleRemoved(other.getModuleRemoved());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        maxpb.MaxpbTelemetry.TelemetryFlags parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (maxpb.MaxpbTelemetry.TelemetryFlags) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private boolean overSpeed_ ;
      /**
       * <code>optional bool overSpeed = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180
       * </pre>
       */
      public boolean hasOverSpeed() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional bool overSpeed = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180
       * </pre>
       */
      public boolean getOverSpeed() {
        return overSpeed_;
      }
      /**
       * <code>optional bool overSpeed = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180
       * </pre>
       */
      public Builder setOverSpeed(boolean value) {
        bitField0_ |= 0x00000001;
        overSpeed_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool overSpeed = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180
       * </pre>
       */
      public Builder clearOverSpeed() {
        bitField0_ = (bitField0_ & ~0x00000001);
        overSpeed_ = false;
        onChanged();
        return this;
      }

      private boolean stoppedExcess_ ;
      /**
       * <code>optional bool stoppedExcess = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180
       * </pre>
       */
      public boolean hasStoppedExcess() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional bool stoppedExcess = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180
       * </pre>
       */
      public boolean getStoppedExcess() {
        return stoppedExcess_;
      }
      /**
       * <code>optional bool stoppedExcess = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180
       * </pre>
       */
      public Builder setStoppedExcess(boolean value) {
        bitField0_ |= 0x00000002;
        stoppedExcess_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool stoppedExcess = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180
       * </pre>
       */
      public Builder clearStoppedExcess() {
        bitField0_ = (bitField0_ & ~0x00000002);
        stoppedExcess_ = false;
        onChanged();
        return this;
      }

      private boolean moving_ ;
      /**
       * <code>optional bool moving = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180
       * </pre>
       */
      public boolean hasMoving() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional bool moving = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180
       * </pre>
       */
      public boolean getMoving() {
        return moving_;
      }
      /**
       * <code>optional bool moving = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180
       * </pre>
       */
      public Builder setMoving(boolean value) {
        bitField0_ |= 0x00000004;
        moving_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool moving = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180
       * </pre>
       */
      public Builder clearMoving() {
        bitField0_ = (bitField0_ & ~0x00000004);
        moving_ = false;
        onChanged();
        return this;
      }

      private maxpb.MaxpbTelemetry.AccelerometerState accelerometerState_ = maxpb.MaxpbTelemetry.AccelerometerState.AST_NONE;
      /**
       * <code>optional .maxpb.AccelerometerState accelerometerState = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180
       * </pre>
       */
      public boolean hasAccelerometerState() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional .maxpb.AccelerometerState accelerometerState = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180
       * </pre>
       */
      public maxpb.MaxpbTelemetry.AccelerometerState getAccelerometerState() {
        return accelerometerState_;
      }
      /**
       * <code>optional .maxpb.AccelerometerState accelerometerState = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180
       * </pre>
       */
      public Builder setAccelerometerState(maxpb.MaxpbTelemetry.AccelerometerState value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000008;
        accelerometerState_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .maxpb.AccelerometerState accelerometerState = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180
       * </pre>
       */
      public Builder clearAccelerometerState() {
        bitField0_ = (bitField0_ & ~0x00000008);
        accelerometerState_ = maxpb.MaxpbTelemetry.AccelerometerState.AST_NONE;
        onChanged();
        return this;
      }

      private int vehicleOperationTime_ ;
      /**
       * <code>optional uint32 vehicleOperationTime = 5;</code>
       *
       * <pre>
       *&#47; Seconds SupportedBy: MXT142, MXT160, MXT162, MXT180
       * </pre>
       */
      public boolean hasVehicleOperationTime() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional uint32 vehicleOperationTime = 5;</code>
       *
       * <pre>
       *&#47; Seconds SupportedBy: MXT142, MXT160, MXT162, MXT180
       * </pre>
       */
      public int getVehicleOperationTime() {
        return vehicleOperationTime_;
      }
      /**
       * <code>optional uint32 vehicleOperationTime = 5;</code>
       *
       * <pre>
       *&#47; Seconds SupportedBy: MXT142, MXT160, MXT162, MXT180
       * </pre>
       */
      public Builder setVehicleOperationTime(int value) {
        bitField0_ |= 0x00000010;
        vehicleOperationTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 vehicleOperationTime = 5;</code>
       *
       * <pre>
       *&#47; Seconds SupportedBy: MXT142, MXT160, MXT162, MXT180
       * </pre>
       */
      public Builder clearVehicleOperationTime() {
        bitField0_ = (bitField0_ & ~0x00000010);
        vehicleOperationTime_ = 0;
        onChanged();
        return this;
      }

      private boolean clutch_ ;
      /**
       * <code>optional bool clutch = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162, MAXIO
       * </pre>
       */
      public boolean hasClutch() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional bool clutch = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162, MAXIO
       * </pre>
       */
      public boolean getClutch() {
        return clutch_;
      }
      /**
       * <code>optional bool clutch = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162, MAXIO
       * </pre>
       */
      public Builder setClutch(boolean value) {
        bitField0_ |= 0x00000020;
        clutch_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool clutch = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162, MAXIO
       * </pre>
       */
      public Builder clearClutch() {
        bitField0_ = (bitField0_ & ~0x00000020);
        clutch_ = false;
        onChanged();
        return this;
      }

      private boolean brake_ ;
      /**
       * <code>optional bool brake = 7;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162, MAXIO
       * </pre>
       */
      public boolean hasBrake() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional bool brake = 7;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162, MAXIO
       * </pre>
       */
      public boolean getBrake() {
        return brake_;
      }
      /**
       * <code>optional bool brake = 7;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162, MAXIO
       * </pre>
       */
      public Builder setBrake(boolean value) {
        bitField0_ |= 0x00000040;
        brake_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool brake = 7;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162, MAXIO
       * </pre>
       */
      public Builder clearBrake() {
        bitField0_ = (bitField0_ & ~0x00000040);
        brake_ = false;
        onChanged();
        return this;
      }

      private boolean parkingBrake_ ;
      /**
       * <code>optional bool parkingBrake = 8;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162, MAXIO
       * </pre>
       */
      public boolean hasParkingBrake() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional bool parkingBrake = 8;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162, MAXIO
       * </pre>
       */
      public boolean getParkingBrake() {
        return parkingBrake_;
      }
      /**
       * <code>optional bool parkingBrake = 8;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162, MAXIO
       * </pre>
       */
      public Builder setParkingBrake(boolean value) {
        bitField0_ |= 0x00000080;
        parkingBrake_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool parkingBrake = 8;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162, MAXIO
       * </pre>
       */
      public Builder clearParkingBrake() {
        bitField0_ = (bitField0_ & ~0x00000080);
        parkingBrake_ = false;
        onChanged();
        return this;
      }

      private boolean motorBrake_ ;
      /**
       * <code>optional bool motorBrake = 9;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162, MAXIO
       * </pre>
       */
      public boolean hasMotorBrake() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional bool motorBrake = 9;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162, MAXIO
       * </pre>
       */
      public boolean getMotorBrake() {
        return motorBrake_;
      }
      /**
       * <code>optional bool motorBrake = 9;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162, MAXIO
       * </pre>
       */
      public Builder setMotorBrake(boolean value) {
        bitField0_ |= 0x00000100;
        motorBrake_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool motorBrake = 9;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162, MAXIO
       * </pre>
       */
      public Builder clearMotorBrake() {
        bitField0_ = (bitField0_ & ~0x00000100);
        motorBrake_ = false;
        onChanged();
        return this;
      }

      private boolean windowShieldWipers_ ;
      /**
       * <code>optional bool windowShieldWipers = 10;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162, MAXIO
       * </pre>
       */
      public boolean hasWindowShieldWipers() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional bool windowShieldWipers = 10;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162, MAXIO
       * </pre>
       */
      public boolean getWindowShieldWipers() {
        return windowShieldWipers_;
      }
      /**
       * <code>optional bool windowShieldWipers = 10;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162, MAXIO
       * </pre>
       */
      public Builder setWindowShieldWipers(boolean value) {
        bitField0_ |= 0x00000200;
        windowShieldWipers_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool windowShieldWipers = 10;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162, MAXIO
       * </pre>
       */
      public Builder clearWindowShieldWipers() {
        bitField0_ = (bitField0_ & ~0x00000200);
        windowShieldWipers_ = false;
        onChanged();
        return this;
      }

      private boolean doorClosed_ ;
      /**
       * <code>optional bool doorClosed = 11;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162, MAXIO
       * </pre>
       */
      public boolean hasDoorClosed() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional bool doorClosed = 11;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162, MAXIO
       * </pre>
       */
      public boolean getDoorClosed() {
        return doorClosed_;
      }
      /**
       * <code>optional bool doorClosed = 11;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162, MAXIO
       * </pre>
       */
      public Builder setDoorClosed(boolean value) {
        bitField0_ |= 0x00000400;
        doorClosed_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool doorClosed = 11;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162, MAXIO
       * </pre>
       */
      public Builder clearDoorClosed() {
        bitField0_ = (bitField0_ & ~0x00000400);
        doorClosed_ = false;
        onChanged();
        return this;
      }

      private boolean doorLocked_ ;
      /**
       * <code>optional bool doorLocked = 12;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162, MAXIO
       * </pre>
       */
      public boolean hasDoorLocked() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional bool doorLocked = 12;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162, MAXIO
       * </pre>
       */
      public boolean getDoorLocked() {
        return doorLocked_;
      }
      /**
       * <code>optional bool doorLocked = 12;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162, MAXIO
       * </pre>
       */
      public Builder setDoorLocked(boolean value) {
        bitField0_ |= 0x00000800;
        doorLocked_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool doorLocked = 12;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162, MAXIO
       * </pre>
       */
      public Builder clearDoorLocked() {
        bitField0_ = (bitField0_ & ~0x00000800);
        doorLocked_ = false;
        onChanged();
        return this;
      }

      private boolean trunk_ ;
      /**
       * <code>optional bool trunk = 13;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162, MAXIO
       * </pre>
       */
      public boolean hasTrunk() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional bool trunk = 13;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162, MAXIO
       * </pre>
       */
      public boolean getTrunk() {
        return trunk_;
      }
      /**
       * <code>optional bool trunk = 13;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162, MAXIO
       * </pre>
       */
      public Builder setTrunk(boolean value) {
        bitField0_ |= 0x00001000;
        trunk_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool trunk = 13;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162, MAXIO
       * </pre>
       */
      public Builder clearTrunk() {
        bitField0_ = (bitField0_ & ~0x00001000);
        trunk_ = false;
        onChanged();
        return this;
      }

      private boolean seatBelt_ ;
      /**
       * <code>optional bool seatBelt = 14;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162, MAXIO
       * </pre>
       */
      public boolean hasSeatBelt() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>optional bool seatBelt = 14;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162, MAXIO
       * </pre>
       */
      public boolean getSeatBelt() {
        return seatBelt_;
      }
      /**
       * <code>optional bool seatBelt = 14;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162, MAXIO
       * </pre>
       */
      public Builder setSeatBelt(boolean value) {
        bitField0_ |= 0x00002000;
        seatBelt_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool seatBelt = 14;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162, MAXIO
       * </pre>
       */
      public Builder clearSeatBelt() {
        bitField0_ = (bitField0_ & ~0x00002000);
        seatBelt_ = false;
        onChanged();
        return this;
      }

      private boolean headlights_ ;
      /**
       * <code>optional bool headlights = 15;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162, MAXIO
       * </pre>
       */
      public boolean hasHeadlights() {
        return ((bitField0_ & 0x00004000) == 0x00004000);
      }
      /**
       * <code>optional bool headlights = 15;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162, MAXIO
       * </pre>
       */
      public boolean getHeadlights() {
        return headlights_;
      }
      /**
       * <code>optional bool headlights = 15;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162, MAXIO
       * </pre>
       */
      public Builder setHeadlights(boolean value) {
        bitField0_ |= 0x00004000;
        headlights_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool headlights = 15;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162, MAXIO
       * </pre>
       */
      public Builder clearHeadlights() {
        bitField0_ = (bitField0_ & ~0x00004000);
        headlights_ = false;
        onChanged();
        return this;
      }

      private maxpb.MaxpbTelemetry.TractionState tractionState_ = maxpb.MaxpbTelemetry.TractionState.TS_4X2;
      /**
       * <code>optional .maxpb.TractionState tractionState = 16;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162, MAXIO
       * </pre>
       */
      public boolean hasTractionState() {
        return ((bitField0_ & 0x00008000) == 0x00008000);
      }
      /**
       * <code>optional .maxpb.TractionState tractionState = 16;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162, MAXIO
       * </pre>
       */
      public maxpb.MaxpbTelemetry.TractionState getTractionState() {
        return tractionState_;
      }
      /**
       * <code>optional .maxpb.TractionState tractionState = 16;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162, MAXIO
       * </pre>
       */
      public Builder setTractionState(maxpb.MaxpbTelemetry.TractionState value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00008000;
        tractionState_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .maxpb.TractionState tractionState = 16;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162, MAXIO
       * </pre>
       */
      public Builder clearTractionState() {
        bitField0_ = (bitField0_ & ~0x00008000);
        tractionState_ = maxpb.MaxpbTelemetry.TractionState.TS_4X2;
        onChanged();
        return this;
      }

      private boolean moduleRemoved_ ;
      /**
       * <code>optional bool moduleRemoved = 17;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public boolean hasModuleRemoved() {
        return ((bitField0_ & 0x00010000) == 0x00010000);
      }
      /**
       * <code>optional bool moduleRemoved = 17;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public boolean getModuleRemoved() {
        return moduleRemoved_;
      }
      /**
       * <code>optional bool moduleRemoved = 17;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public Builder setModuleRemoved(boolean value) {
        bitField0_ |= 0x00010000;
        moduleRemoved_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool moduleRemoved = 17;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public Builder clearModuleRemoved() {
        bitField0_ = (bitField0_ & ~0x00010000);
        moduleRemoved_ = false;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:maxpb.TelemetryFlags)
    }

    static {
      defaultInstance = new TelemetryFlags(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:maxpb.TelemetryFlags)
  }

  public interface OdometerInfoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:maxpb.OdometerInfo)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required .maxpb.TelemetryDataSource main = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180, MAXIO
     * </pre>
     */
    boolean hasMain();
    /**
     * <code>required .maxpb.TelemetryDataSource main = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180, MAXIO
     * </pre>
     */
    maxpb.MaxpbTelemetry.TelemetryDataSource getMain();

    /**
     * <code>optional uint64 gps = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180
     * </pre>
     */
    boolean hasGps();
    /**
     * <code>optional uint64 gps = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180
     * </pre>
     */
    long getGps();

    /**
     * <code>optional uint64 pulse = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    boolean hasPulse();
    /**
     * <code>optional uint64 pulse = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    long getPulse();

    /**
     * <code>optional uint64 can = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT162, MAXIO
     * </pre>
     */
    boolean hasCan();
    /**
     * <code>optional uint64 can = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT162, MAXIO
     * </pre>
     */
    long getCan();
  }
  /**
   * Protobuf type {@code maxpb.OdometerInfo}
   *
   * <pre>
   *&#47;Odometer in meters
   * </pre>
   */
  public static final class OdometerInfo extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:maxpb.OdometerInfo)
      OdometerInfoOrBuilder {
    // Use OdometerInfo.newBuilder() to construct.
    private OdometerInfo(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private OdometerInfo(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final OdometerInfo defaultInstance;
    public static OdometerInfo getDefaultInstance() {
      return defaultInstance;
    }

    public OdometerInfo getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private OdometerInfo(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              maxpb.MaxpbTelemetry.TelemetryDataSource value = maxpb.MaxpbTelemetry.TelemetryDataSource.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(1, rawValue);
              } else {
                bitField0_ |= 0x00000001;
                main_ = value;
              }
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              gps_ = input.readUInt64();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              pulse_ = input.readUInt64();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              can_ = input.readUInt64();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return maxpb.MaxpbTelemetry.internal_static_maxpb_OdometerInfo_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return maxpb.MaxpbTelemetry.internal_static_maxpb_OdometerInfo_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              maxpb.MaxpbTelemetry.OdometerInfo.class, maxpb.MaxpbTelemetry.OdometerInfo.Builder.class);
    }

    public static com.google.protobuf.Parser<OdometerInfo> PARSER =
        new com.google.protobuf.AbstractParser<OdometerInfo>() {
      public OdometerInfo parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new OdometerInfo(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<OdometerInfo> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int MAIN_FIELD_NUMBER = 1;
    private maxpb.MaxpbTelemetry.TelemetryDataSource main_;
    /**
     * <code>required .maxpb.TelemetryDataSource main = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180, MAXIO
     * </pre>
     */
    public boolean hasMain() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .maxpb.TelemetryDataSource main = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180, MAXIO
     * </pre>
     */
    public maxpb.MaxpbTelemetry.TelemetryDataSource getMain() {
      return main_;
    }

    public static final int GPS_FIELD_NUMBER = 2;
    private long gps_;
    /**
     * <code>optional uint64 gps = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180
     * </pre>
     */
    public boolean hasGps() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional uint64 gps = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180
     * </pre>
     */
    public long getGps() {
      return gps_;
    }

    public static final int PULSE_FIELD_NUMBER = 3;
    private long pulse_;
    /**
     * <code>optional uint64 pulse = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public boolean hasPulse() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional uint64 pulse = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public long getPulse() {
      return pulse_;
    }

    public static final int CAN_FIELD_NUMBER = 4;
    private long can_;
    /**
     * <code>optional uint64 can = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT162, MAXIO
     * </pre>
     */
    public boolean hasCan() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional uint64 can = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT162, MAXIO
     * </pre>
     */
    public long getCan() {
      return can_;
    }

    private void initFields() {
      main_ = maxpb.MaxpbTelemetry.TelemetryDataSource.TDS_GPS;
      gps_ = 0L;
      pulse_ = 0L;
      can_ = 0L;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasMain()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, main_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt64(2, gps_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt64(3, pulse_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeUInt64(4, can_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, main_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(2, gps_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(3, pulse_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(4, can_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static maxpb.MaxpbTelemetry.OdometerInfo parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static maxpb.MaxpbTelemetry.OdometerInfo parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetry.OdometerInfo parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static maxpb.MaxpbTelemetry.OdometerInfo parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetry.OdometerInfo parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static maxpb.MaxpbTelemetry.OdometerInfo parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetry.OdometerInfo parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static maxpb.MaxpbTelemetry.OdometerInfo parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetry.OdometerInfo parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static maxpb.MaxpbTelemetry.OdometerInfo parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(maxpb.MaxpbTelemetry.OdometerInfo prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code maxpb.OdometerInfo}
     *
     * <pre>
     *&#47;Odometer in meters
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:maxpb.OdometerInfo)
        maxpb.MaxpbTelemetry.OdometerInfoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return maxpb.MaxpbTelemetry.internal_static_maxpb_OdometerInfo_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return maxpb.MaxpbTelemetry.internal_static_maxpb_OdometerInfo_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                maxpb.MaxpbTelemetry.OdometerInfo.class, maxpb.MaxpbTelemetry.OdometerInfo.Builder.class);
      }

      // Construct using maxpb.MaxpbTelemetry.OdometerInfo.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        main_ = maxpb.MaxpbTelemetry.TelemetryDataSource.TDS_GPS;
        bitField0_ = (bitField0_ & ~0x00000001);
        gps_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000002);
        pulse_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000004);
        can_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return maxpb.MaxpbTelemetry.internal_static_maxpb_OdometerInfo_descriptor;
      }

      public maxpb.MaxpbTelemetry.OdometerInfo getDefaultInstanceForType() {
        return maxpb.MaxpbTelemetry.OdometerInfo.getDefaultInstance();
      }

      public maxpb.MaxpbTelemetry.OdometerInfo build() {
        maxpb.MaxpbTelemetry.OdometerInfo result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public maxpb.MaxpbTelemetry.OdometerInfo buildPartial() {
        maxpb.MaxpbTelemetry.OdometerInfo result = new maxpb.MaxpbTelemetry.OdometerInfo(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.main_ = main_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.gps_ = gps_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.pulse_ = pulse_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.can_ = can_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof maxpb.MaxpbTelemetry.OdometerInfo) {
          return mergeFrom((maxpb.MaxpbTelemetry.OdometerInfo)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(maxpb.MaxpbTelemetry.OdometerInfo other) {
        if (other == maxpb.MaxpbTelemetry.OdometerInfo.getDefaultInstance()) return this;
        if (other.hasMain()) {
          setMain(other.getMain());
        }
        if (other.hasGps()) {
          setGps(other.getGps());
        }
        if (other.hasPulse()) {
          setPulse(other.getPulse());
        }
        if (other.hasCan()) {
          setCan(other.getCan());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasMain()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        maxpb.MaxpbTelemetry.OdometerInfo parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (maxpb.MaxpbTelemetry.OdometerInfo) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private maxpb.MaxpbTelemetry.TelemetryDataSource main_ = maxpb.MaxpbTelemetry.TelemetryDataSource.TDS_GPS;
      /**
       * <code>required .maxpb.TelemetryDataSource main = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180, MAXIO
       * </pre>
       */
      public boolean hasMain() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .maxpb.TelemetryDataSource main = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180, MAXIO
       * </pre>
       */
      public maxpb.MaxpbTelemetry.TelemetryDataSource getMain() {
        return main_;
      }
      /**
       * <code>required .maxpb.TelemetryDataSource main = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180, MAXIO
       * </pre>
       */
      public Builder setMain(maxpb.MaxpbTelemetry.TelemetryDataSource value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        main_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required .maxpb.TelemetryDataSource main = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180, MAXIO
       * </pre>
       */
      public Builder clearMain() {
        bitField0_ = (bitField0_ & ~0x00000001);
        main_ = maxpb.MaxpbTelemetry.TelemetryDataSource.TDS_GPS;
        onChanged();
        return this;
      }

      private long gps_ ;
      /**
       * <code>optional uint64 gps = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180
       * </pre>
       */
      public boolean hasGps() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional uint64 gps = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180
       * </pre>
       */
      public long getGps() {
        return gps_;
      }
      /**
       * <code>optional uint64 gps = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180
       * </pre>
       */
      public Builder setGps(long value) {
        bitField0_ |= 0x00000002;
        gps_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint64 gps = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180
       * </pre>
       */
      public Builder clearGps() {
        bitField0_ = (bitField0_ & ~0x00000002);
        gps_ = 0L;
        onChanged();
        return this;
      }

      private long pulse_ ;
      /**
       * <code>optional uint64 pulse = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public boolean hasPulse() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional uint64 pulse = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public long getPulse() {
        return pulse_;
      }
      /**
       * <code>optional uint64 pulse = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder setPulse(long value) {
        bitField0_ |= 0x00000004;
        pulse_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint64 pulse = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder clearPulse() {
        bitField0_ = (bitField0_ & ~0x00000004);
        pulse_ = 0L;
        onChanged();
        return this;
      }

      private long can_ ;
      /**
       * <code>optional uint64 can = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT162, MAXIO
       * </pre>
       */
      public boolean hasCan() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional uint64 can = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT162, MAXIO
       * </pre>
       */
      public long getCan() {
        return can_;
      }
      /**
       * <code>optional uint64 can = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT162, MAXIO
       * </pre>
       */
      public Builder setCan(long value) {
        bitField0_ |= 0x00000008;
        can_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint64 can = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT162, MAXIO
       * </pre>
       */
      public Builder clearCan() {
        bitField0_ = (bitField0_ & ~0x00000008);
        can_ = 0L;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:maxpb.OdometerInfo)
    }

    static {
      defaultInstance = new OdometerInfo(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:maxpb.OdometerInfo)
  }

  public interface SpeedInfoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:maxpb.SpeedInfo)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required .maxpb.TelemetryDataSource main = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180, MAXIO
     * </pre>
     */
    boolean hasMain();
    /**
     * <code>required .maxpb.TelemetryDataSource main = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180, MAXIO
     * </pre>
     */
    maxpb.MaxpbTelemetry.TelemetryDataSource getMain();

    /**
     * <code>optional uint32 gps = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180
     * </pre>
     */
    boolean hasGps();
    /**
     * <code>optional uint32 gps = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180
     * </pre>
     */
    int getGps();

    /**
     * <code>optional uint32 pulse = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    boolean hasPulse();
    /**
     * <code>optional uint32 pulse = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    int getPulse();

    /**
     * <code>optional uint32 can = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT162, MAXIO
     * </pre>
     */
    boolean hasCan();
    /**
     * <code>optional uint32 can = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT162, MAXIO
     * </pre>
     */
    int getCan();
  }
  /**
   * Protobuf type {@code maxpb.SpeedInfo}
   *
   * <pre>
   *&#47; Speed in Km/h
   * </pre>
   */
  public static final class SpeedInfo extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:maxpb.SpeedInfo)
      SpeedInfoOrBuilder {
    // Use SpeedInfo.newBuilder() to construct.
    private SpeedInfo(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private SpeedInfo(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final SpeedInfo defaultInstance;
    public static SpeedInfo getDefaultInstance() {
      return defaultInstance;
    }

    public SpeedInfo getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private SpeedInfo(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              maxpb.MaxpbTelemetry.TelemetryDataSource value = maxpb.MaxpbTelemetry.TelemetryDataSource.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(1, rawValue);
              } else {
                bitField0_ |= 0x00000001;
                main_ = value;
              }
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              gps_ = input.readUInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              pulse_ = input.readUInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              can_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return maxpb.MaxpbTelemetry.internal_static_maxpb_SpeedInfo_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return maxpb.MaxpbTelemetry.internal_static_maxpb_SpeedInfo_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              maxpb.MaxpbTelemetry.SpeedInfo.class, maxpb.MaxpbTelemetry.SpeedInfo.Builder.class);
    }

    public static com.google.protobuf.Parser<SpeedInfo> PARSER =
        new com.google.protobuf.AbstractParser<SpeedInfo>() {
      public SpeedInfo parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new SpeedInfo(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<SpeedInfo> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int MAIN_FIELD_NUMBER = 1;
    private maxpb.MaxpbTelemetry.TelemetryDataSource main_;
    /**
     * <code>required .maxpb.TelemetryDataSource main = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180, MAXIO
     * </pre>
     */
    public boolean hasMain() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .maxpb.TelemetryDataSource main = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180, MAXIO
     * </pre>
     */
    public maxpb.MaxpbTelemetry.TelemetryDataSource getMain() {
      return main_;
    }

    public static final int GPS_FIELD_NUMBER = 2;
    private int gps_;
    /**
     * <code>optional uint32 gps = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180
     * </pre>
     */
    public boolean hasGps() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional uint32 gps = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180
     * </pre>
     */
    public int getGps() {
      return gps_;
    }

    public static final int PULSE_FIELD_NUMBER = 3;
    private int pulse_;
    /**
     * <code>optional uint32 pulse = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public boolean hasPulse() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional uint32 pulse = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public int getPulse() {
      return pulse_;
    }

    public static final int CAN_FIELD_NUMBER = 4;
    private int can_;
    /**
     * <code>optional uint32 can = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT162, MAXIO
     * </pre>
     */
    public boolean hasCan() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional uint32 can = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT162, MAXIO
     * </pre>
     */
    public int getCan() {
      return can_;
    }

    private void initFields() {
      main_ = maxpb.MaxpbTelemetry.TelemetryDataSource.TDS_GPS;
      gps_ = 0;
      pulse_ = 0;
      can_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasMain()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, main_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, gps_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(3, pulse_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeUInt32(4, can_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, main_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, gps_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, pulse_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, can_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static maxpb.MaxpbTelemetry.SpeedInfo parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static maxpb.MaxpbTelemetry.SpeedInfo parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetry.SpeedInfo parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static maxpb.MaxpbTelemetry.SpeedInfo parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetry.SpeedInfo parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static maxpb.MaxpbTelemetry.SpeedInfo parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetry.SpeedInfo parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static maxpb.MaxpbTelemetry.SpeedInfo parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetry.SpeedInfo parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static maxpb.MaxpbTelemetry.SpeedInfo parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(maxpb.MaxpbTelemetry.SpeedInfo prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code maxpb.SpeedInfo}
     *
     * <pre>
     *&#47; Speed in Km/h
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:maxpb.SpeedInfo)
        maxpb.MaxpbTelemetry.SpeedInfoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return maxpb.MaxpbTelemetry.internal_static_maxpb_SpeedInfo_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return maxpb.MaxpbTelemetry.internal_static_maxpb_SpeedInfo_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                maxpb.MaxpbTelemetry.SpeedInfo.class, maxpb.MaxpbTelemetry.SpeedInfo.Builder.class);
      }

      // Construct using maxpb.MaxpbTelemetry.SpeedInfo.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        main_ = maxpb.MaxpbTelemetry.TelemetryDataSource.TDS_GPS;
        bitField0_ = (bitField0_ & ~0x00000001);
        gps_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        pulse_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        can_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return maxpb.MaxpbTelemetry.internal_static_maxpb_SpeedInfo_descriptor;
      }

      public maxpb.MaxpbTelemetry.SpeedInfo getDefaultInstanceForType() {
        return maxpb.MaxpbTelemetry.SpeedInfo.getDefaultInstance();
      }

      public maxpb.MaxpbTelemetry.SpeedInfo build() {
        maxpb.MaxpbTelemetry.SpeedInfo result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public maxpb.MaxpbTelemetry.SpeedInfo buildPartial() {
        maxpb.MaxpbTelemetry.SpeedInfo result = new maxpb.MaxpbTelemetry.SpeedInfo(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.main_ = main_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.gps_ = gps_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.pulse_ = pulse_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.can_ = can_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof maxpb.MaxpbTelemetry.SpeedInfo) {
          return mergeFrom((maxpb.MaxpbTelemetry.SpeedInfo)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(maxpb.MaxpbTelemetry.SpeedInfo other) {
        if (other == maxpb.MaxpbTelemetry.SpeedInfo.getDefaultInstance()) return this;
        if (other.hasMain()) {
          setMain(other.getMain());
        }
        if (other.hasGps()) {
          setGps(other.getGps());
        }
        if (other.hasPulse()) {
          setPulse(other.getPulse());
        }
        if (other.hasCan()) {
          setCan(other.getCan());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasMain()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        maxpb.MaxpbTelemetry.SpeedInfo parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (maxpb.MaxpbTelemetry.SpeedInfo) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private maxpb.MaxpbTelemetry.TelemetryDataSource main_ = maxpb.MaxpbTelemetry.TelemetryDataSource.TDS_GPS;
      /**
       * <code>required .maxpb.TelemetryDataSource main = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180, MAXIO
       * </pre>
       */
      public boolean hasMain() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .maxpb.TelemetryDataSource main = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180, MAXIO
       * </pre>
       */
      public maxpb.MaxpbTelemetry.TelemetryDataSource getMain() {
        return main_;
      }
      /**
       * <code>required .maxpb.TelemetryDataSource main = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180, MAXIO
       * </pre>
       */
      public Builder setMain(maxpb.MaxpbTelemetry.TelemetryDataSource value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        main_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required .maxpb.TelemetryDataSource main = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180, MAXIO
       * </pre>
       */
      public Builder clearMain() {
        bitField0_ = (bitField0_ & ~0x00000001);
        main_ = maxpb.MaxpbTelemetry.TelemetryDataSource.TDS_GPS;
        onChanged();
        return this;
      }

      private int gps_ ;
      /**
       * <code>optional uint32 gps = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180
       * </pre>
       */
      public boolean hasGps() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional uint32 gps = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180
       * </pre>
       */
      public int getGps() {
        return gps_;
      }
      /**
       * <code>optional uint32 gps = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180
       * </pre>
       */
      public Builder setGps(int value) {
        bitField0_ |= 0x00000002;
        gps_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 gps = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180
       * </pre>
       */
      public Builder clearGps() {
        bitField0_ = (bitField0_ & ~0x00000002);
        gps_ = 0;
        onChanged();
        return this;
      }

      private int pulse_ ;
      /**
       * <code>optional uint32 pulse = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public boolean hasPulse() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional uint32 pulse = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public int getPulse() {
        return pulse_;
      }
      /**
       * <code>optional uint32 pulse = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder setPulse(int value) {
        bitField0_ |= 0x00000004;
        pulse_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 pulse = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder clearPulse() {
        bitField0_ = (bitField0_ & ~0x00000004);
        pulse_ = 0;
        onChanged();
        return this;
      }

      private int can_ ;
      /**
       * <code>optional uint32 can = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT162, MAXIO
       * </pre>
       */
      public boolean hasCan() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional uint32 can = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT162, MAXIO
       * </pre>
       */
      public int getCan() {
        return can_;
      }
      /**
       * <code>optional uint32 can = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT162, MAXIO
       * </pre>
       */
      public Builder setCan(int value) {
        bitField0_ |= 0x00000008;
        can_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 can = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT162, MAXIO
       * </pre>
       */
      public Builder clearCan() {
        bitField0_ = (bitField0_ & ~0x00000008);
        can_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:maxpb.SpeedInfo)
    }

    static {
      defaultInstance = new SpeedInfo(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:maxpb.SpeedInfo)
  }

  public interface RpmInfoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:maxpb.RpmInfo)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required .maxpb.TelemetryDataSource main = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT162, MAXIO
     * </pre>
     */
    boolean hasMain();
    /**
     * <code>required .maxpb.TelemetryDataSource main = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT162, MAXIO
     * </pre>
     */
    maxpb.MaxpbTelemetry.TelemetryDataSource getMain();

    /**
     * <code>optional uint32 pulse = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    boolean hasPulse();
    /**
     * <code>optional uint32 pulse = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    int getPulse();

    /**
     * <code>optional uint32 can = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT162, MAXIO
     * </pre>
     */
    boolean hasCan();
    /**
     * <code>optional uint32 can = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT162, MAXIO
     * </pre>
     */
    int getCan();
  }
  /**
   * Protobuf type {@code maxpb.RpmInfo}
   */
  public static final class RpmInfo extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:maxpb.RpmInfo)
      RpmInfoOrBuilder {
    // Use RpmInfo.newBuilder() to construct.
    private RpmInfo(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private RpmInfo(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final RpmInfo defaultInstance;
    public static RpmInfo getDefaultInstance() {
      return defaultInstance;
    }

    public RpmInfo getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private RpmInfo(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              maxpb.MaxpbTelemetry.TelemetryDataSource value = maxpb.MaxpbTelemetry.TelemetryDataSource.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(1, rawValue);
              } else {
                bitField0_ |= 0x00000001;
                main_ = value;
              }
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              pulse_ = input.readUInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              can_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return maxpb.MaxpbTelemetry.internal_static_maxpb_RpmInfo_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return maxpb.MaxpbTelemetry.internal_static_maxpb_RpmInfo_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              maxpb.MaxpbTelemetry.RpmInfo.class, maxpb.MaxpbTelemetry.RpmInfo.Builder.class);
    }

    public static com.google.protobuf.Parser<RpmInfo> PARSER =
        new com.google.protobuf.AbstractParser<RpmInfo>() {
      public RpmInfo parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new RpmInfo(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<RpmInfo> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int MAIN_FIELD_NUMBER = 1;
    private maxpb.MaxpbTelemetry.TelemetryDataSource main_;
    /**
     * <code>required .maxpb.TelemetryDataSource main = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT162, MAXIO
     * </pre>
     */
    public boolean hasMain() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .maxpb.TelemetryDataSource main = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT162, MAXIO
     * </pre>
     */
    public maxpb.MaxpbTelemetry.TelemetryDataSource getMain() {
      return main_;
    }

    public static final int PULSE_FIELD_NUMBER = 2;
    private int pulse_;
    /**
     * <code>optional uint32 pulse = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public boolean hasPulse() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional uint32 pulse = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public int getPulse() {
      return pulse_;
    }

    public static final int CAN_FIELD_NUMBER = 3;
    private int can_;
    /**
     * <code>optional uint32 can = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT162, MAXIO
     * </pre>
     */
    public boolean hasCan() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional uint32 can = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT162, MAXIO
     * </pre>
     */
    public int getCan() {
      return can_;
    }

    private void initFields() {
      main_ = maxpb.MaxpbTelemetry.TelemetryDataSource.TDS_GPS;
      pulse_ = 0;
      can_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasMain()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, main_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, pulse_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(3, can_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, main_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, pulse_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, can_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static maxpb.MaxpbTelemetry.RpmInfo parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static maxpb.MaxpbTelemetry.RpmInfo parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetry.RpmInfo parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static maxpb.MaxpbTelemetry.RpmInfo parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetry.RpmInfo parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static maxpb.MaxpbTelemetry.RpmInfo parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetry.RpmInfo parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static maxpb.MaxpbTelemetry.RpmInfo parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetry.RpmInfo parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static maxpb.MaxpbTelemetry.RpmInfo parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(maxpb.MaxpbTelemetry.RpmInfo prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code maxpb.RpmInfo}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:maxpb.RpmInfo)
        maxpb.MaxpbTelemetry.RpmInfoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return maxpb.MaxpbTelemetry.internal_static_maxpb_RpmInfo_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return maxpb.MaxpbTelemetry.internal_static_maxpb_RpmInfo_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                maxpb.MaxpbTelemetry.RpmInfo.class, maxpb.MaxpbTelemetry.RpmInfo.Builder.class);
      }

      // Construct using maxpb.MaxpbTelemetry.RpmInfo.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        main_ = maxpb.MaxpbTelemetry.TelemetryDataSource.TDS_GPS;
        bitField0_ = (bitField0_ & ~0x00000001);
        pulse_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        can_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return maxpb.MaxpbTelemetry.internal_static_maxpb_RpmInfo_descriptor;
      }

      public maxpb.MaxpbTelemetry.RpmInfo getDefaultInstanceForType() {
        return maxpb.MaxpbTelemetry.RpmInfo.getDefaultInstance();
      }

      public maxpb.MaxpbTelemetry.RpmInfo build() {
        maxpb.MaxpbTelemetry.RpmInfo result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public maxpb.MaxpbTelemetry.RpmInfo buildPartial() {
        maxpb.MaxpbTelemetry.RpmInfo result = new maxpb.MaxpbTelemetry.RpmInfo(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.main_ = main_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.pulse_ = pulse_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.can_ = can_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof maxpb.MaxpbTelemetry.RpmInfo) {
          return mergeFrom((maxpb.MaxpbTelemetry.RpmInfo)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(maxpb.MaxpbTelemetry.RpmInfo other) {
        if (other == maxpb.MaxpbTelemetry.RpmInfo.getDefaultInstance()) return this;
        if (other.hasMain()) {
          setMain(other.getMain());
        }
        if (other.hasPulse()) {
          setPulse(other.getPulse());
        }
        if (other.hasCan()) {
          setCan(other.getCan());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasMain()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        maxpb.MaxpbTelemetry.RpmInfo parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (maxpb.MaxpbTelemetry.RpmInfo) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private maxpb.MaxpbTelemetry.TelemetryDataSource main_ = maxpb.MaxpbTelemetry.TelemetryDataSource.TDS_GPS;
      /**
       * <code>required .maxpb.TelemetryDataSource main = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT162, MAXIO
       * </pre>
       */
      public boolean hasMain() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .maxpb.TelemetryDataSource main = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT162, MAXIO
       * </pre>
       */
      public maxpb.MaxpbTelemetry.TelemetryDataSource getMain() {
        return main_;
      }
      /**
       * <code>required .maxpb.TelemetryDataSource main = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT162, MAXIO
       * </pre>
       */
      public Builder setMain(maxpb.MaxpbTelemetry.TelemetryDataSource value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        main_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required .maxpb.TelemetryDataSource main = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT162, MAXIO
       * </pre>
       */
      public Builder clearMain() {
        bitField0_ = (bitField0_ & ~0x00000001);
        main_ = maxpb.MaxpbTelemetry.TelemetryDataSource.TDS_GPS;
        onChanged();
        return this;
      }

      private int pulse_ ;
      /**
       * <code>optional uint32 pulse = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public boolean hasPulse() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional uint32 pulse = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public int getPulse() {
        return pulse_;
      }
      /**
       * <code>optional uint32 pulse = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder setPulse(int value) {
        bitField0_ |= 0x00000002;
        pulse_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 pulse = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder clearPulse() {
        bitField0_ = (bitField0_ & ~0x00000002);
        pulse_ = 0;
        onChanged();
        return this;
      }

      private int can_ ;
      /**
       * <code>optional uint32 can = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT162, MAXIO
       * </pre>
       */
      public boolean hasCan() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional uint32 can = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT162, MAXIO
       * </pre>
       */
      public int getCan() {
        return can_;
      }
      /**
       * <code>optional uint32 can = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT162, MAXIO
       * </pre>
       */
      public Builder setCan(int value) {
        bitField0_ |= 0x00000004;
        can_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 can = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT162, MAXIO
       * </pre>
       */
      public Builder clearCan() {
        bitField0_ = (bitField0_ & ~0x00000004);
        can_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:maxpb.RpmInfo)
    }

    static {
      defaultInstance = new RpmInfo(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:maxpb.RpmInfo)
  }

  public interface AngleInfoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:maxpb.AngleInfo)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional int32 pitchingAngle = 1;</code>
     *
     * <pre>
     *&#47; Degrees SupportedBy: MXT162
     * </pre>
     */
    boolean hasPitchingAngle();
    /**
     * <code>optional int32 pitchingAngle = 1;</code>
     *
     * <pre>
     *&#47; Degrees SupportedBy: MXT162
     * </pre>
     */
    int getPitchingAngle();

    /**
     * <code>optional int32 rollingAngle = 2;</code>
     *
     * <pre>
     *&#47; Degrees SupportedBy: MXT162
     * </pre>
     */
    boolean hasRollingAngle();
    /**
     * <code>optional int32 rollingAngle = 2;</code>
     *
     * <pre>
     *&#47; Degrees SupportedBy: MXT162
     * </pre>
     */
    int getRollingAngle();
  }
  /**
   * Protobuf type {@code maxpb.AngleInfo}
   */
  public static final class AngleInfo extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:maxpb.AngleInfo)
      AngleInfoOrBuilder {
    // Use AngleInfo.newBuilder() to construct.
    private AngleInfo(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private AngleInfo(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final AngleInfo defaultInstance;
    public static AngleInfo getDefaultInstance() {
      return defaultInstance;
    }

    public AngleInfo getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private AngleInfo(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              pitchingAngle_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              rollingAngle_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return maxpb.MaxpbTelemetry.internal_static_maxpb_AngleInfo_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return maxpb.MaxpbTelemetry.internal_static_maxpb_AngleInfo_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              maxpb.MaxpbTelemetry.AngleInfo.class, maxpb.MaxpbTelemetry.AngleInfo.Builder.class);
    }

    public static com.google.protobuf.Parser<AngleInfo> PARSER =
        new com.google.protobuf.AbstractParser<AngleInfo>() {
      public AngleInfo parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new AngleInfo(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<AngleInfo> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int PITCHINGANGLE_FIELD_NUMBER = 1;
    private int pitchingAngle_;
    /**
     * <code>optional int32 pitchingAngle = 1;</code>
     *
     * <pre>
     *&#47; Degrees SupportedBy: MXT162
     * </pre>
     */
    public boolean hasPitchingAngle() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 pitchingAngle = 1;</code>
     *
     * <pre>
     *&#47; Degrees SupportedBy: MXT162
     * </pre>
     */
    public int getPitchingAngle() {
      return pitchingAngle_;
    }

    public static final int ROLLINGANGLE_FIELD_NUMBER = 2;
    private int rollingAngle_;
    /**
     * <code>optional int32 rollingAngle = 2;</code>
     *
     * <pre>
     *&#47; Degrees SupportedBy: MXT162
     * </pre>
     */
    public boolean hasRollingAngle() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 rollingAngle = 2;</code>
     *
     * <pre>
     *&#47; Degrees SupportedBy: MXT162
     * </pre>
     */
    public int getRollingAngle() {
      return rollingAngle_;
    }

    private void initFields() {
      pitchingAngle_ = 0;
      rollingAngle_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, pitchingAngle_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, rollingAngle_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, pitchingAngle_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, rollingAngle_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static maxpb.MaxpbTelemetry.AngleInfo parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static maxpb.MaxpbTelemetry.AngleInfo parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetry.AngleInfo parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static maxpb.MaxpbTelemetry.AngleInfo parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetry.AngleInfo parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static maxpb.MaxpbTelemetry.AngleInfo parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetry.AngleInfo parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static maxpb.MaxpbTelemetry.AngleInfo parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetry.AngleInfo parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static maxpb.MaxpbTelemetry.AngleInfo parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(maxpb.MaxpbTelemetry.AngleInfo prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code maxpb.AngleInfo}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:maxpb.AngleInfo)
        maxpb.MaxpbTelemetry.AngleInfoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return maxpb.MaxpbTelemetry.internal_static_maxpb_AngleInfo_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return maxpb.MaxpbTelemetry.internal_static_maxpb_AngleInfo_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                maxpb.MaxpbTelemetry.AngleInfo.class, maxpb.MaxpbTelemetry.AngleInfo.Builder.class);
      }

      // Construct using maxpb.MaxpbTelemetry.AngleInfo.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        pitchingAngle_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        rollingAngle_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return maxpb.MaxpbTelemetry.internal_static_maxpb_AngleInfo_descriptor;
      }

      public maxpb.MaxpbTelemetry.AngleInfo getDefaultInstanceForType() {
        return maxpb.MaxpbTelemetry.AngleInfo.getDefaultInstance();
      }

      public maxpb.MaxpbTelemetry.AngleInfo build() {
        maxpb.MaxpbTelemetry.AngleInfo result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public maxpb.MaxpbTelemetry.AngleInfo buildPartial() {
        maxpb.MaxpbTelemetry.AngleInfo result = new maxpb.MaxpbTelemetry.AngleInfo(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.pitchingAngle_ = pitchingAngle_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.rollingAngle_ = rollingAngle_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof maxpb.MaxpbTelemetry.AngleInfo) {
          return mergeFrom((maxpb.MaxpbTelemetry.AngleInfo)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(maxpb.MaxpbTelemetry.AngleInfo other) {
        if (other == maxpb.MaxpbTelemetry.AngleInfo.getDefaultInstance()) return this;
        if (other.hasPitchingAngle()) {
          setPitchingAngle(other.getPitchingAngle());
        }
        if (other.hasRollingAngle()) {
          setRollingAngle(other.getRollingAngle());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        maxpb.MaxpbTelemetry.AngleInfo parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (maxpb.MaxpbTelemetry.AngleInfo) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int pitchingAngle_ ;
      /**
       * <code>optional int32 pitchingAngle = 1;</code>
       *
       * <pre>
       *&#47; Degrees SupportedBy: MXT162
       * </pre>
       */
      public boolean hasPitchingAngle() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 pitchingAngle = 1;</code>
       *
       * <pre>
       *&#47; Degrees SupportedBy: MXT162
       * </pre>
       */
      public int getPitchingAngle() {
        return pitchingAngle_;
      }
      /**
       * <code>optional int32 pitchingAngle = 1;</code>
       *
       * <pre>
       *&#47; Degrees SupportedBy: MXT162
       * </pre>
       */
      public Builder setPitchingAngle(int value) {
        bitField0_ |= 0x00000001;
        pitchingAngle_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 pitchingAngle = 1;</code>
       *
       * <pre>
       *&#47; Degrees SupportedBy: MXT162
       * </pre>
       */
      public Builder clearPitchingAngle() {
        bitField0_ = (bitField0_ & ~0x00000001);
        pitchingAngle_ = 0;
        onChanged();
        return this;
      }

      private int rollingAngle_ ;
      /**
       * <code>optional int32 rollingAngle = 2;</code>
       *
       * <pre>
       *&#47; Degrees SupportedBy: MXT162
       * </pre>
       */
      public boolean hasRollingAngle() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 rollingAngle = 2;</code>
       *
       * <pre>
       *&#47; Degrees SupportedBy: MXT162
       * </pre>
       */
      public int getRollingAngle() {
        return rollingAngle_;
      }
      /**
       * <code>optional int32 rollingAngle = 2;</code>
       *
       * <pre>
       *&#47; Degrees SupportedBy: MXT162
       * </pre>
       */
      public Builder setRollingAngle(int value) {
        bitField0_ |= 0x00000002;
        rollingAngle_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 rollingAngle = 2;</code>
       *
       * <pre>
       *&#47; Degrees SupportedBy: MXT162
       * </pre>
       */
      public Builder clearRollingAngle() {
        bitField0_ = (bitField0_ & ~0x00000002);
        rollingAngle_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:maxpb.AngleInfo)
    }

    static {
      defaultInstance = new AngleInfo(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:maxpb.AngleInfo)
  }

  public interface FuelInfoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:maxpb.FuelInfo)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional uint32 fuelLevelTank1 = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162, MAXIO
     * </pre>
     */
    boolean hasFuelLevelTank1();
    /**
     * <code>optional uint32 fuelLevelTank1 = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162, MAXIO
     * </pre>
     */
    int getFuelLevelTank1();

    /**
     * <code>optional uint32 fuelLevelTank2 = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162, MAXIO
     * </pre>
     */
    boolean hasFuelLevelTank2();
    /**
     * <code>optional uint32 fuelLevelTank2 = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162, MAXIO
     * </pre>
     */
    int getFuelLevelTank2();

    /**
     * <code>optional uint32 fuelConsumption = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162, MAXIO
     * </pre>
     */
    boolean hasFuelConsumption();
    /**
     * <code>optional uint32 fuelConsumption = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162, MAXIO
     * </pre>
     */
    int getFuelConsumption();

    /**
     * <code>optional .maxpb.FuelType fuelType = 4;</code>
     *
     * <pre>
     *&#47;&#64;excluded SupportedBy:
     * </pre>
     */
    boolean hasFuelType();
    /**
     * <code>optional .maxpb.FuelType fuelType = 4;</code>
     *
     * <pre>
     *&#47;&#64;excluded SupportedBy:
     * </pre>
     */
    maxpb.MaxpbTelemetry.FuelType getFuelType();

    /**
     * <code>optional uint32 ethanolRatio = 5;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    boolean hasEthanolRatio();
    /**
     * <code>optional uint32 ethanolRatio = 5;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    int getEthanolRatio();

    /**
     * <code>optional uint32 engineFuelRate = 6;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    boolean hasEngineFuelRate();
    /**
     * <code>optional uint32 engineFuelRate = 6;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    int getEngineFuelRate();
  }
  /**
   * Protobuf type {@code maxpb.FuelInfo}
   */
  public static final class FuelInfo extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:maxpb.FuelInfo)
      FuelInfoOrBuilder {
    // Use FuelInfo.newBuilder() to construct.
    private FuelInfo(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private FuelInfo(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final FuelInfo defaultInstance;
    public static FuelInfo getDefaultInstance() {
      return defaultInstance;
    }

    public FuelInfo getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private FuelInfo(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              fuelLevelTank1_ = input.readUInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              fuelLevelTank2_ = input.readUInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              fuelConsumption_ = input.readUInt32();
              break;
            }
            case 32: {
              int rawValue = input.readEnum();
              maxpb.MaxpbTelemetry.FuelType value = maxpb.MaxpbTelemetry.FuelType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(4, rawValue);
              } else {
                bitField0_ |= 0x00000008;
                fuelType_ = value;
              }
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              ethanolRatio_ = input.readUInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              engineFuelRate_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return maxpb.MaxpbTelemetry.internal_static_maxpb_FuelInfo_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return maxpb.MaxpbTelemetry.internal_static_maxpb_FuelInfo_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              maxpb.MaxpbTelemetry.FuelInfo.class, maxpb.MaxpbTelemetry.FuelInfo.Builder.class);
    }

    public static com.google.protobuf.Parser<FuelInfo> PARSER =
        new com.google.protobuf.AbstractParser<FuelInfo>() {
      public FuelInfo parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new FuelInfo(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<FuelInfo> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int FUELLEVELTANK1_FIELD_NUMBER = 1;
    private int fuelLevelTank1_;
    /**
     * <code>optional uint32 fuelLevelTank1 = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162, MAXIO
     * </pre>
     */
    public boolean hasFuelLevelTank1() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional uint32 fuelLevelTank1 = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162, MAXIO
     * </pre>
     */
    public int getFuelLevelTank1() {
      return fuelLevelTank1_;
    }

    public static final int FUELLEVELTANK2_FIELD_NUMBER = 2;
    private int fuelLevelTank2_;
    /**
     * <code>optional uint32 fuelLevelTank2 = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162, MAXIO
     * </pre>
     */
    public boolean hasFuelLevelTank2() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional uint32 fuelLevelTank2 = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162, MAXIO
     * </pre>
     */
    public int getFuelLevelTank2() {
      return fuelLevelTank2_;
    }

    public static final int FUELCONSUMPTION_FIELD_NUMBER = 3;
    private int fuelConsumption_;
    /**
     * <code>optional uint32 fuelConsumption = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162, MAXIO
     * </pre>
     */
    public boolean hasFuelConsumption() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional uint32 fuelConsumption = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162, MAXIO
     * </pre>
     */
    public int getFuelConsumption() {
      return fuelConsumption_;
    }

    public static final int FUELTYPE_FIELD_NUMBER = 4;
    private maxpb.MaxpbTelemetry.FuelType fuelType_;
    /**
     * <code>optional .maxpb.FuelType fuelType = 4;</code>
     *
     * <pre>
     *&#47;&#64;excluded SupportedBy:
     * </pre>
     */
    public boolean hasFuelType() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional .maxpb.FuelType fuelType = 4;</code>
     *
     * <pre>
     *&#47;&#64;excluded SupportedBy:
     * </pre>
     */
    public maxpb.MaxpbTelemetry.FuelType getFuelType() {
      return fuelType_;
    }

    public static final int ETHANOLRATIO_FIELD_NUMBER = 5;
    private int ethanolRatio_;
    /**
     * <code>optional uint32 ethanolRatio = 5;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    public boolean hasEthanolRatio() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional uint32 ethanolRatio = 5;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    public int getEthanolRatio() {
      return ethanolRatio_;
    }

    public static final int ENGINEFUELRATE_FIELD_NUMBER = 6;
    private int engineFuelRate_;
    /**
     * <code>optional uint32 engineFuelRate = 6;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    public boolean hasEngineFuelRate() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional uint32 engineFuelRate = 6;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    public int getEngineFuelRate() {
      return engineFuelRate_;
    }

    private void initFields() {
      fuelLevelTank1_ = 0;
      fuelLevelTank2_ = 0;
      fuelConsumption_ = 0;
      fuelType_ = maxpb.MaxpbTelemetry.FuelType.FUT_NOT_AVAILABLE;
      ethanolRatio_ = 0;
      engineFuelRate_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, fuelLevelTank1_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, fuelLevelTank2_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(3, fuelConsumption_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeEnum(4, fuelType_.getNumber());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeUInt32(5, ethanolRatio_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeUInt32(6, engineFuelRate_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, fuelLevelTank1_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, fuelLevelTank2_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, fuelConsumption_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(4, fuelType_.getNumber());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(5, ethanolRatio_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(6, engineFuelRate_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static maxpb.MaxpbTelemetry.FuelInfo parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static maxpb.MaxpbTelemetry.FuelInfo parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetry.FuelInfo parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static maxpb.MaxpbTelemetry.FuelInfo parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetry.FuelInfo parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static maxpb.MaxpbTelemetry.FuelInfo parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetry.FuelInfo parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static maxpb.MaxpbTelemetry.FuelInfo parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetry.FuelInfo parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static maxpb.MaxpbTelemetry.FuelInfo parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(maxpb.MaxpbTelemetry.FuelInfo prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code maxpb.FuelInfo}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:maxpb.FuelInfo)
        maxpb.MaxpbTelemetry.FuelInfoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return maxpb.MaxpbTelemetry.internal_static_maxpb_FuelInfo_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return maxpb.MaxpbTelemetry.internal_static_maxpb_FuelInfo_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                maxpb.MaxpbTelemetry.FuelInfo.class, maxpb.MaxpbTelemetry.FuelInfo.Builder.class);
      }

      // Construct using maxpb.MaxpbTelemetry.FuelInfo.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        fuelLevelTank1_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        fuelLevelTank2_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        fuelConsumption_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        fuelType_ = maxpb.MaxpbTelemetry.FuelType.FUT_NOT_AVAILABLE;
        bitField0_ = (bitField0_ & ~0x00000008);
        ethanolRatio_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        engineFuelRate_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return maxpb.MaxpbTelemetry.internal_static_maxpb_FuelInfo_descriptor;
      }

      public maxpb.MaxpbTelemetry.FuelInfo getDefaultInstanceForType() {
        return maxpb.MaxpbTelemetry.FuelInfo.getDefaultInstance();
      }

      public maxpb.MaxpbTelemetry.FuelInfo build() {
        maxpb.MaxpbTelemetry.FuelInfo result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public maxpb.MaxpbTelemetry.FuelInfo buildPartial() {
        maxpb.MaxpbTelemetry.FuelInfo result = new maxpb.MaxpbTelemetry.FuelInfo(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.fuelLevelTank1_ = fuelLevelTank1_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.fuelLevelTank2_ = fuelLevelTank2_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.fuelConsumption_ = fuelConsumption_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.fuelType_ = fuelType_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.ethanolRatio_ = ethanolRatio_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.engineFuelRate_ = engineFuelRate_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof maxpb.MaxpbTelemetry.FuelInfo) {
          return mergeFrom((maxpb.MaxpbTelemetry.FuelInfo)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(maxpb.MaxpbTelemetry.FuelInfo other) {
        if (other == maxpb.MaxpbTelemetry.FuelInfo.getDefaultInstance()) return this;
        if (other.hasFuelLevelTank1()) {
          setFuelLevelTank1(other.getFuelLevelTank1());
        }
        if (other.hasFuelLevelTank2()) {
          setFuelLevelTank2(other.getFuelLevelTank2());
        }
        if (other.hasFuelConsumption()) {
          setFuelConsumption(other.getFuelConsumption());
        }
        if (other.hasFuelType()) {
          setFuelType(other.getFuelType());
        }
        if (other.hasEthanolRatio()) {
          setEthanolRatio(other.getEthanolRatio());
        }
        if (other.hasEngineFuelRate()) {
          setEngineFuelRate(other.getEngineFuelRate());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        maxpb.MaxpbTelemetry.FuelInfo parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (maxpb.MaxpbTelemetry.FuelInfo) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int fuelLevelTank1_ ;
      /**
       * <code>optional uint32 fuelLevelTank1 = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162, MAXIO
       * </pre>
       */
      public boolean hasFuelLevelTank1() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint32 fuelLevelTank1 = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162, MAXIO
       * </pre>
       */
      public int getFuelLevelTank1() {
        return fuelLevelTank1_;
      }
      /**
       * <code>optional uint32 fuelLevelTank1 = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162, MAXIO
       * </pre>
       */
      public Builder setFuelLevelTank1(int value) {
        bitField0_ |= 0x00000001;
        fuelLevelTank1_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 fuelLevelTank1 = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162, MAXIO
       * </pre>
       */
      public Builder clearFuelLevelTank1() {
        bitField0_ = (bitField0_ & ~0x00000001);
        fuelLevelTank1_ = 0;
        onChanged();
        return this;
      }

      private int fuelLevelTank2_ ;
      /**
       * <code>optional uint32 fuelLevelTank2 = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162, MAXIO
       * </pre>
       */
      public boolean hasFuelLevelTank2() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional uint32 fuelLevelTank2 = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162, MAXIO
       * </pre>
       */
      public int getFuelLevelTank2() {
        return fuelLevelTank2_;
      }
      /**
       * <code>optional uint32 fuelLevelTank2 = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162, MAXIO
       * </pre>
       */
      public Builder setFuelLevelTank2(int value) {
        bitField0_ |= 0x00000002;
        fuelLevelTank2_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 fuelLevelTank2 = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162, MAXIO
       * </pre>
       */
      public Builder clearFuelLevelTank2() {
        bitField0_ = (bitField0_ & ~0x00000002);
        fuelLevelTank2_ = 0;
        onChanged();
        return this;
      }

      private int fuelConsumption_ ;
      /**
       * <code>optional uint32 fuelConsumption = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162, MAXIO
       * </pre>
       */
      public boolean hasFuelConsumption() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional uint32 fuelConsumption = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162, MAXIO
       * </pre>
       */
      public int getFuelConsumption() {
        return fuelConsumption_;
      }
      /**
       * <code>optional uint32 fuelConsumption = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162, MAXIO
       * </pre>
       */
      public Builder setFuelConsumption(int value) {
        bitField0_ |= 0x00000004;
        fuelConsumption_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 fuelConsumption = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162, MAXIO
       * </pre>
       */
      public Builder clearFuelConsumption() {
        bitField0_ = (bitField0_ & ~0x00000004);
        fuelConsumption_ = 0;
        onChanged();
        return this;
      }

      private maxpb.MaxpbTelemetry.FuelType fuelType_ = maxpb.MaxpbTelemetry.FuelType.FUT_NOT_AVAILABLE;
      /**
       * <code>optional .maxpb.FuelType fuelType = 4;</code>
       *
       * <pre>
       *&#47;&#64;excluded SupportedBy:
       * </pre>
       */
      public boolean hasFuelType() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional .maxpb.FuelType fuelType = 4;</code>
       *
       * <pre>
       *&#47;&#64;excluded SupportedBy:
       * </pre>
       */
      public maxpb.MaxpbTelemetry.FuelType getFuelType() {
        return fuelType_;
      }
      /**
       * <code>optional .maxpb.FuelType fuelType = 4;</code>
       *
       * <pre>
       *&#47;&#64;excluded SupportedBy:
       * </pre>
       */
      public Builder setFuelType(maxpb.MaxpbTelemetry.FuelType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000008;
        fuelType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .maxpb.FuelType fuelType = 4;</code>
       *
       * <pre>
       *&#47;&#64;excluded SupportedBy:
       * </pre>
       */
      public Builder clearFuelType() {
        bitField0_ = (bitField0_ & ~0x00000008);
        fuelType_ = maxpb.MaxpbTelemetry.FuelType.FUT_NOT_AVAILABLE;
        onChanged();
        return this;
      }

      private int ethanolRatio_ ;
      /**
       * <code>optional uint32 ethanolRatio = 5;</code>
       *
       * <pre>
       *&#47; SupportedBy:
       * </pre>
       */
      public boolean hasEthanolRatio() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional uint32 ethanolRatio = 5;</code>
       *
       * <pre>
       *&#47; SupportedBy:
       * </pre>
       */
      public int getEthanolRatio() {
        return ethanolRatio_;
      }
      /**
       * <code>optional uint32 ethanolRatio = 5;</code>
       *
       * <pre>
       *&#47; SupportedBy:
       * </pre>
       */
      public Builder setEthanolRatio(int value) {
        bitField0_ |= 0x00000010;
        ethanolRatio_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 ethanolRatio = 5;</code>
       *
       * <pre>
       *&#47; SupportedBy:
       * </pre>
       */
      public Builder clearEthanolRatio() {
        bitField0_ = (bitField0_ & ~0x00000010);
        ethanolRatio_ = 0;
        onChanged();
        return this;
      }

      private int engineFuelRate_ ;
      /**
       * <code>optional uint32 engineFuelRate = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy:
       * </pre>
       */
      public boolean hasEngineFuelRate() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional uint32 engineFuelRate = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy:
       * </pre>
       */
      public int getEngineFuelRate() {
        return engineFuelRate_;
      }
      /**
       * <code>optional uint32 engineFuelRate = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy:
       * </pre>
       */
      public Builder setEngineFuelRate(int value) {
        bitField0_ |= 0x00000020;
        engineFuelRate_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 engineFuelRate = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy:
       * </pre>
       */
      public Builder clearEngineFuelRate() {
        bitField0_ = (bitField0_ & ~0x00000020);
        engineFuelRate_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:maxpb.FuelInfo)
    }

    static {
      defaultInstance = new FuelInfo(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:maxpb.FuelInfo)
  }

  public interface EngineInfoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:maxpb.EngineInfo)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional int32 intakeAirTemperature = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    boolean hasIntakeAirTemperature();
    /**
     * <code>optional int32 intakeAirTemperature = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    int getIntakeAirTemperature();

    /**
     * <code>optional uint32 intakeAirFlow = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    boolean hasIntakeAirFlow();
    /**
     * <code>optional uint32 intakeAirFlow = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    int getIntakeAirFlow();

    /**
     * <code>optional int32 oilTemperature = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162, MAXIO
     * </pre>
     */
    boolean hasOilTemperature();
    /**
     * <code>optional int32 oilTemperature = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162, MAXIO
     * </pre>
     */
    int getOilTemperature();

    /**
     * <code>optional uint32 engineRefTorque = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    boolean hasEngineRefTorque();
    /**
     * <code>optional uint32 engineRefTorque = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    int getEngineRefTorque();

    /**
     * <code>optional int32 engineTemperature = 5;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162, MAXIO
     * </pre>
     */
    boolean hasEngineTemperature();
    /**
     * <code>optional int32 engineTemperature = 5;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162, MAXIO
     * </pre>
     */
    int getEngineTemperature();

    /**
     * <code>optional int32 currentGear = 6;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162, MAXIO
     * </pre>
     */
    boolean hasCurrentGear();
    /**
     * <code>optional int32 currentGear = 6;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162, MAXIO
     * </pre>
     */
    int getCurrentGear();

    /**
     * <code>optional uint32 throttlePosition = 7;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    boolean hasThrottlePosition();
    /**
     * <code>optional uint32 throttlePosition = 7;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    int getThrottlePosition();
  }
  /**
   * Protobuf type {@code maxpb.EngineInfo}
   */
  public static final class EngineInfo extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:maxpb.EngineInfo)
      EngineInfoOrBuilder {
    // Use EngineInfo.newBuilder() to construct.
    private EngineInfo(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private EngineInfo(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final EngineInfo defaultInstance;
    public static EngineInfo getDefaultInstance() {
      return defaultInstance;
    }

    public EngineInfo getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private EngineInfo(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              intakeAirTemperature_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              intakeAirFlow_ = input.readUInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              oilTemperature_ = input.readInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              engineRefTorque_ = input.readUInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              engineTemperature_ = input.readInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              currentGear_ = input.readInt32();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              throttlePosition_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return maxpb.MaxpbTelemetry.internal_static_maxpb_EngineInfo_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return maxpb.MaxpbTelemetry.internal_static_maxpb_EngineInfo_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              maxpb.MaxpbTelemetry.EngineInfo.class, maxpb.MaxpbTelemetry.EngineInfo.Builder.class);
    }

    public static com.google.protobuf.Parser<EngineInfo> PARSER =
        new com.google.protobuf.AbstractParser<EngineInfo>() {
      public EngineInfo parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new EngineInfo(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<EngineInfo> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int INTAKEAIRTEMPERATURE_FIELD_NUMBER = 1;
    private int intakeAirTemperature_;
    /**
     * <code>optional int32 intakeAirTemperature = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    public boolean hasIntakeAirTemperature() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 intakeAirTemperature = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    public int getIntakeAirTemperature() {
      return intakeAirTemperature_;
    }

    public static final int INTAKEAIRFLOW_FIELD_NUMBER = 2;
    private int intakeAirFlow_;
    /**
     * <code>optional uint32 intakeAirFlow = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    public boolean hasIntakeAirFlow() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional uint32 intakeAirFlow = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    public int getIntakeAirFlow() {
      return intakeAirFlow_;
    }

    public static final int OILTEMPERATURE_FIELD_NUMBER = 3;
    private int oilTemperature_;
    /**
     * <code>optional int32 oilTemperature = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162, MAXIO
     * </pre>
     */
    public boolean hasOilTemperature() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 oilTemperature = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162, MAXIO
     * </pre>
     */
    public int getOilTemperature() {
      return oilTemperature_;
    }

    public static final int ENGINEREFTORQUE_FIELD_NUMBER = 4;
    private int engineRefTorque_;
    /**
     * <code>optional uint32 engineRefTorque = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    public boolean hasEngineRefTorque() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional uint32 engineRefTorque = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    public int getEngineRefTorque() {
      return engineRefTorque_;
    }

    public static final int ENGINETEMPERATURE_FIELD_NUMBER = 5;
    private int engineTemperature_;
    /**
     * <code>optional int32 engineTemperature = 5;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162, MAXIO
     * </pre>
     */
    public boolean hasEngineTemperature() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 engineTemperature = 5;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162, MAXIO
     * </pre>
     */
    public int getEngineTemperature() {
      return engineTemperature_;
    }

    public static final int CURRENTGEAR_FIELD_NUMBER = 6;
    private int currentGear_;
    /**
     * <code>optional int32 currentGear = 6;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162, MAXIO
     * </pre>
     */
    public boolean hasCurrentGear() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional int32 currentGear = 6;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162, MAXIO
     * </pre>
     */
    public int getCurrentGear() {
      return currentGear_;
    }

    public static final int THROTTLEPOSITION_FIELD_NUMBER = 7;
    private int throttlePosition_;
    /**
     * <code>optional uint32 throttlePosition = 7;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    public boolean hasThrottlePosition() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional uint32 throttlePosition = 7;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    public int getThrottlePosition() {
      return throttlePosition_;
    }

    private void initFields() {
      intakeAirTemperature_ = 0;
      intakeAirFlow_ = 0;
      oilTemperature_ = 0;
      engineRefTorque_ = 0;
      engineTemperature_ = 0;
      currentGear_ = 0;
      throttlePosition_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, intakeAirTemperature_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, intakeAirFlow_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, oilTemperature_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeUInt32(4, engineRefTorque_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(5, engineTemperature_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(6, currentGear_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeUInt32(7, throttlePosition_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, intakeAirTemperature_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, intakeAirFlow_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, oilTemperature_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, engineRefTorque_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, engineTemperature_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, currentGear_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(7, throttlePosition_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static maxpb.MaxpbTelemetry.EngineInfo parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static maxpb.MaxpbTelemetry.EngineInfo parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetry.EngineInfo parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static maxpb.MaxpbTelemetry.EngineInfo parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetry.EngineInfo parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static maxpb.MaxpbTelemetry.EngineInfo parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetry.EngineInfo parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static maxpb.MaxpbTelemetry.EngineInfo parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetry.EngineInfo parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static maxpb.MaxpbTelemetry.EngineInfo parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(maxpb.MaxpbTelemetry.EngineInfo prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code maxpb.EngineInfo}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:maxpb.EngineInfo)
        maxpb.MaxpbTelemetry.EngineInfoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return maxpb.MaxpbTelemetry.internal_static_maxpb_EngineInfo_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return maxpb.MaxpbTelemetry.internal_static_maxpb_EngineInfo_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                maxpb.MaxpbTelemetry.EngineInfo.class, maxpb.MaxpbTelemetry.EngineInfo.Builder.class);
      }

      // Construct using maxpb.MaxpbTelemetry.EngineInfo.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        intakeAirTemperature_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        intakeAirFlow_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        oilTemperature_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        engineRefTorque_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        engineTemperature_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        currentGear_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        throttlePosition_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return maxpb.MaxpbTelemetry.internal_static_maxpb_EngineInfo_descriptor;
      }

      public maxpb.MaxpbTelemetry.EngineInfo getDefaultInstanceForType() {
        return maxpb.MaxpbTelemetry.EngineInfo.getDefaultInstance();
      }

      public maxpb.MaxpbTelemetry.EngineInfo build() {
        maxpb.MaxpbTelemetry.EngineInfo result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public maxpb.MaxpbTelemetry.EngineInfo buildPartial() {
        maxpb.MaxpbTelemetry.EngineInfo result = new maxpb.MaxpbTelemetry.EngineInfo(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.intakeAirTemperature_ = intakeAirTemperature_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.intakeAirFlow_ = intakeAirFlow_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.oilTemperature_ = oilTemperature_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.engineRefTorque_ = engineRefTorque_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.engineTemperature_ = engineTemperature_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.currentGear_ = currentGear_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.throttlePosition_ = throttlePosition_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof maxpb.MaxpbTelemetry.EngineInfo) {
          return mergeFrom((maxpb.MaxpbTelemetry.EngineInfo)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(maxpb.MaxpbTelemetry.EngineInfo other) {
        if (other == maxpb.MaxpbTelemetry.EngineInfo.getDefaultInstance()) return this;
        if (other.hasIntakeAirTemperature()) {
          setIntakeAirTemperature(other.getIntakeAirTemperature());
        }
        if (other.hasIntakeAirFlow()) {
          setIntakeAirFlow(other.getIntakeAirFlow());
        }
        if (other.hasOilTemperature()) {
          setOilTemperature(other.getOilTemperature());
        }
        if (other.hasEngineRefTorque()) {
          setEngineRefTorque(other.getEngineRefTorque());
        }
        if (other.hasEngineTemperature()) {
          setEngineTemperature(other.getEngineTemperature());
        }
        if (other.hasCurrentGear()) {
          setCurrentGear(other.getCurrentGear());
        }
        if (other.hasThrottlePosition()) {
          setThrottlePosition(other.getThrottlePosition());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        maxpb.MaxpbTelemetry.EngineInfo parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (maxpb.MaxpbTelemetry.EngineInfo) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int intakeAirTemperature_ ;
      /**
       * <code>optional int32 intakeAirTemperature = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy:
       * </pre>
       */
      public boolean hasIntakeAirTemperature() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 intakeAirTemperature = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy:
       * </pre>
       */
      public int getIntakeAirTemperature() {
        return intakeAirTemperature_;
      }
      /**
       * <code>optional int32 intakeAirTemperature = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy:
       * </pre>
       */
      public Builder setIntakeAirTemperature(int value) {
        bitField0_ |= 0x00000001;
        intakeAirTemperature_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 intakeAirTemperature = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy:
       * </pre>
       */
      public Builder clearIntakeAirTemperature() {
        bitField0_ = (bitField0_ & ~0x00000001);
        intakeAirTemperature_ = 0;
        onChanged();
        return this;
      }

      private int intakeAirFlow_ ;
      /**
       * <code>optional uint32 intakeAirFlow = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy:
       * </pre>
       */
      public boolean hasIntakeAirFlow() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional uint32 intakeAirFlow = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy:
       * </pre>
       */
      public int getIntakeAirFlow() {
        return intakeAirFlow_;
      }
      /**
       * <code>optional uint32 intakeAirFlow = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy:
       * </pre>
       */
      public Builder setIntakeAirFlow(int value) {
        bitField0_ |= 0x00000002;
        intakeAirFlow_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 intakeAirFlow = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy:
       * </pre>
       */
      public Builder clearIntakeAirFlow() {
        bitField0_ = (bitField0_ & ~0x00000002);
        intakeAirFlow_ = 0;
        onChanged();
        return this;
      }

      private int oilTemperature_ ;
      /**
       * <code>optional int32 oilTemperature = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162, MAXIO
       * </pre>
       */
      public boolean hasOilTemperature() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 oilTemperature = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162, MAXIO
       * </pre>
       */
      public int getOilTemperature() {
        return oilTemperature_;
      }
      /**
       * <code>optional int32 oilTemperature = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162, MAXIO
       * </pre>
       */
      public Builder setOilTemperature(int value) {
        bitField0_ |= 0x00000004;
        oilTemperature_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 oilTemperature = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162, MAXIO
       * </pre>
       */
      public Builder clearOilTemperature() {
        bitField0_ = (bitField0_ & ~0x00000004);
        oilTemperature_ = 0;
        onChanged();
        return this;
      }

      private int engineRefTorque_ ;
      /**
       * <code>optional uint32 engineRefTorque = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy:
       * </pre>
       */
      public boolean hasEngineRefTorque() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional uint32 engineRefTorque = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy:
       * </pre>
       */
      public int getEngineRefTorque() {
        return engineRefTorque_;
      }
      /**
       * <code>optional uint32 engineRefTorque = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy:
       * </pre>
       */
      public Builder setEngineRefTorque(int value) {
        bitField0_ |= 0x00000008;
        engineRefTorque_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 engineRefTorque = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy:
       * </pre>
       */
      public Builder clearEngineRefTorque() {
        bitField0_ = (bitField0_ & ~0x00000008);
        engineRefTorque_ = 0;
        onChanged();
        return this;
      }

      private int engineTemperature_ ;
      /**
       * <code>optional int32 engineTemperature = 5;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162, MAXIO
       * </pre>
       */
      public boolean hasEngineTemperature() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional int32 engineTemperature = 5;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162, MAXIO
       * </pre>
       */
      public int getEngineTemperature() {
        return engineTemperature_;
      }
      /**
       * <code>optional int32 engineTemperature = 5;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162, MAXIO
       * </pre>
       */
      public Builder setEngineTemperature(int value) {
        bitField0_ |= 0x00000010;
        engineTemperature_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 engineTemperature = 5;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162, MAXIO
       * </pre>
       */
      public Builder clearEngineTemperature() {
        bitField0_ = (bitField0_ & ~0x00000010);
        engineTemperature_ = 0;
        onChanged();
        return this;
      }

      private int currentGear_ ;
      /**
       * <code>optional int32 currentGear = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162, MAXIO
       * </pre>
       */
      public boolean hasCurrentGear() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional int32 currentGear = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162, MAXIO
       * </pre>
       */
      public int getCurrentGear() {
        return currentGear_;
      }
      /**
       * <code>optional int32 currentGear = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162, MAXIO
       * </pre>
       */
      public Builder setCurrentGear(int value) {
        bitField0_ |= 0x00000020;
        currentGear_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 currentGear = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162, MAXIO
       * </pre>
       */
      public Builder clearCurrentGear() {
        bitField0_ = (bitField0_ & ~0x00000020);
        currentGear_ = 0;
        onChanged();
        return this;
      }

      private int throttlePosition_ ;
      /**
       * <code>optional uint32 throttlePosition = 7;</code>
       *
       * <pre>
       *&#47; SupportedBy:
       * </pre>
       */
      public boolean hasThrottlePosition() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional uint32 throttlePosition = 7;</code>
       *
       * <pre>
       *&#47; SupportedBy:
       * </pre>
       */
      public int getThrottlePosition() {
        return throttlePosition_;
      }
      /**
       * <code>optional uint32 throttlePosition = 7;</code>
       *
       * <pre>
       *&#47; SupportedBy:
       * </pre>
       */
      public Builder setThrottlePosition(int value) {
        bitField0_ |= 0x00000040;
        throttlePosition_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 throttlePosition = 7;</code>
       *
       * <pre>
       *&#47; SupportedBy:
       * </pre>
       */
      public Builder clearThrottlePosition() {
        bitField0_ = (bitField0_ & ~0x00000040);
        throttlePosition_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:maxpb.EngineInfo)
    }

    static {
      defaultInstance = new EngineInfo(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:maxpb.EngineInfo)
  }

  public interface EnvironmentInfoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:maxpb.EnvironmentInfo)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional uint32 barometricPressure = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    boolean hasBarometricPressure();
    /**
     * <code>optional uint32 barometricPressure = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    int getBarometricPressure();

    /**
     * <code>optional int32 airTemperature = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    boolean hasAirTemperature();
    /**
     * <code>optional int32 airTemperature = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    int getAirTemperature();
  }
  /**
   * Protobuf type {@code maxpb.EnvironmentInfo}
   */
  public static final class EnvironmentInfo extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:maxpb.EnvironmentInfo)
      EnvironmentInfoOrBuilder {
    // Use EnvironmentInfo.newBuilder() to construct.
    private EnvironmentInfo(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private EnvironmentInfo(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final EnvironmentInfo defaultInstance;
    public static EnvironmentInfo getDefaultInstance() {
      return defaultInstance;
    }

    public EnvironmentInfo getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private EnvironmentInfo(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              barometricPressure_ = input.readUInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              airTemperature_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return maxpb.MaxpbTelemetry.internal_static_maxpb_EnvironmentInfo_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return maxpb.MaxpbTelemetry.internal_static_maxpb_EnvironmentInfo_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              maxpb.MaxpbTelemetry.EnvironmentInfo.class, maxpb.MaxpbTelemetry.EnvironmentInfo.Builder.class);
    }

    public static com.google.protobuf.Parser<EnvironmentInfo> PARSER =
        new com.google.protobuf.AbstractParser<EnvironmentInfo>() {
      public EnvironmentInfo parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new EnvironmentInfo(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<EnvironmentInfo> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int BAROMETRICPRESSURE_FIELD_NUMBER = 1;
    private int barometricPressure_;
    /**
     * <code>optional uint32 barometricPressure = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    public boolean hasBarometricPressure() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional uint32 barometricPressure = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    public int getBarometricPressure() {
      return barometricPressure_;
    }

    public static final int AIRTEMPERATURE_FIELD_NUMBER = 2;
    private int airTemperature_;
    /**
     * <code>optional int32 airTemperature = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    public boolean hasAirTemperature() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int32 airTemperature = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    public int getAirTemperature() {
      return airTemperature_;
    }

    private void initFields() {
      barometricPressure_ = 0;
      airTemperature_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, barometricPressure_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, airTemperature_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, barometricPressure_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, airTemperature_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static maxpb.MaxpbTelemetry.EnvironmentInfo parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static maxpb.MaxpbTelemetry.EnvironmentInfo parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetry.EnvironmentInfo parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static maxpb.MaxpbTelemetry.EnvironmentInfo parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetry.EnvironmentInfo parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static maxpb.MaxpbTelemetry.EnvironmentInfo parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetry.EnvironmentInfo parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static maxpb.MaxpbTelemetry.EnvironmentInfo parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetry.EnvironmentInfo parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static maxpb.MaxpbTelemetry.EnvironmentInfo parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(maxpb.MaxpbTelemetry.EnvironmentInfo prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code maxpb.EnvironmentInfo}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:maxpb.EnvironmentInfo)
        maxpb.MaxpbTelemetry.EnvironmentInfoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return maxpb.MaxpbTelemetry.internal_static_maxpb_EnvironmentInfo_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return maxpb.MaxpbTelemetry.internal_static_maxpb_EnvironmentInfo_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                maxpb.MaxpbTelemetry.EnvironmentInfo.class, maxpb.MaxpbTelemetry.EnvironmentInfo.Builder.class);
      }

      // Construct using maxpb.MaxpbTelemetry.EnvironmentInfo.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        barometricPressure_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        airTemperature_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return maxpb.MaxpbTelemetry.internal_static_maxpb_EnvironmentInfo_descriptor;
      }

      public maxpb.MaxpbTelemetry.EnvironmentInfo getDefaultInstanceForType() {
        return maxpb.MaxpbTelemetry.EnvironmentInfo.getDefaultInstance();
      }

      public maxpb.MaxpbTelemetry.EnvironmentInfo build() {
        maxpb.MaxpbTelemetry.EnvironmentInfo result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public maxpb.MaxpbTelemetry.EnvironmentInfo buildPartial() {
        maxpb.MaxpbTelemetry.EnvironmentInfo result = new maxpb.MaxpbTelemetry.EnvironmentInfo(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.barometricPressure_ = barometricPressure_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.airTemperature_ = airTemperature_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof maxpb.MaxpbTelemetry.EnvironmentInfo) {
          return mergeFrom((maxpb.MaxpbTelemetry.EnvironmentInfo)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(maxpb.MaxpbTelemetry.EnvironmentInfo other) {
        if (other == maxpb.MaxpbTelemetry.EnvironmentInfo.getDefaultInstance()) return this;
        if (other.hasBarometricPressure()) {
          setBarometricPressure(other.getBarometricPressure());
        }
        if (other.hasAirTemperature()) {
          setAirTemperature(other.getAirTemperature());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        maxpb.MaxpbTelemetry.EnvironmentInfo parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (maxpb.MaxpbTelemetry.EnvironmentInfo) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int barometricPressure_ ;
      /**
       * <code>optional uint32 barometricPressure = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy:
       * </pre>
       */
      public boolean hasBarometricPressure() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint32 barometricPressure = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy:
       * </pre>
       */
      public int getBarometricPressure() {
        return barometricPressure_;
      }
      /**
       * <code>optional uint32 barometricPressure = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy:
       * </pre>
       */
      public Builder setBarometricPressure(int value) {
        bitField0_ |= 0x00000001;
        barometricPressure_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 barometricPressure = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy:
       * </pre>
       */
      public Builder clearBarometricPressure() {
        bitField0_ = (bitField0_ & ~0x00000001);
        barometricPressure_ = 0;
        onChanged();
        return this;
      }

      private int airTemperature_ ;
      /**
       * <code>optional int32 airTemperature = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy:
       * </pre>
       */
      public boolean hasAirTemperature() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 airTemperature = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy:
       * </pre>
       */
      public int getAirTemperature() {
        return airTemperature_;
      }
      /**
       * <code>optional int32 airTemperature = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy:
       * </pre>
       */
      public Builder setAirTemperature(int value) {
        bitField0_ |= 0x00000002;
        airTemperature_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 airTemperature = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy:
       * </pre>
       */
      public Builder clearAirTemperature() {
        bitField0_ = (bitField0_ & ~0x00000002);
        airTemperature_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:maxpb.EnvironmentInfo)
    }

    static {
      defaultInstance = new EnvironmentInfo(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:maxpb.EnvironmentInfo)
  }

  public interface ECUInfoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:maxpb.ECUInfo)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional uint32 controlModuleVoltage = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    boolean hasControlModuleVoltage();
    /**
     * <code>optional uint32 controlModuleVoltage = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    int getControlModuleVoltage();

    /**
     * <code>optional string VIN = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    boolean hasVIN();
    /**
     * <code>optional string VIN = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    java.lang.String getVIN();
    /**
     * <code>optional string VIN = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    com.google.protobuf.ByteString
        getVINBytes();

    /**
     * <code>optional bool malFunctionIndLamp = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    boolean hasMalFunctionIndLamp();
    /**
     * <code>optional bool malFunctionIndLamp = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    boolean getMalFunctionIndLamp();

    /**
     * <code>repeated uint32 dtcCodes = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    java.util.List<java.lang.Integer> getDtcCodesList();
    /**
     * <code>repeated uint32 dtcCodes = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    int getDtcCodesCount();
    /**
     * <code>repeated uint32 dtcCodes = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    int getDtcCodes(int index);

    /**
     * <code>optional .maxpb.CanBitRate canBitRate = 5;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162, MAXIO
     * </pre>
     */
    boolean hasCanBitRate();
    /**
     * <code>optional .maxpb.CanBitRate canBitRate = 5;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162, MAXIO
     * </pre>
     */
    maxpb.MaxpbInterfaces.CanBitRate getCanBitRate();

    /**
     * <code>optional bool isCanExtended = 6;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162, MAXIO
     * </pre>
     */
    boolean hasIsCanExtended();
    /**
     * <code>optional bool isCanExtended = 6;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162, MAXIO
     * </pre>
     */
    boolean getIsCanExtended();

    /**
     * <code>optional bool avaiableObdInfoReady = 7;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    boolean hasAvaiableObdInfoReady();
    /**
     * <code>optional bool avaiableObdInfoReady = 7;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    boolean getAvaiableObdInfoReady();
  }
  /**
   * Protobuf type {@code maxpb.ECUInfo}
   */
  public static final class ECUInfo extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:maxpb.ECUInfo)
      ECUInfoOrBuilder {
    // Use ECUInfo.newBuilder() to construct.
    private ECUInfo(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private ECUInfo(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final ECUInfo defaultInstance;
    public static ECUInfo getDefaultInstance() {
      return defaultInstance;
    }

    public ECUInfo getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private ECUInfo(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              controlModuleVoltage_ = input.readUInt32();
              break;
            }
            case 18: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000002;
              vIN_ = bs;
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              malFunctionIndLamp_ = input.readBool();
              break;
            }
            case 32: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                dtcCodes_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              dtcCodes_.add(input.readUInt32());
              break;
            }
            case 34: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008) && input.getBytesUntilLimit() > 0) {
                dtcCodes_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000008;
              }
              while (input.getBytesUntilLimit() > 0) {
                dtcCodes_.add(input.readUInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 40: {
              int rawValue = input.readEnum();
              maxpb.MaxpbInterfaces.CanBitRate value = maxpb.MaxpbInterfaces.CanBitRate.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(5, rawValue);
              } else {
                bitField0_ |= 0x00000008;
                canBitRate_ = value;
              }
              break;
            }
            case 48: {
              bitField0_ |= 0x00000010;
              isCanExtended_ = input.readBool();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000020;
              avaiableObdInfoReady_ = input.readBool();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          dtcCodes_ = java.util.Collections.unmodifiableList(dtcCodes_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return maxpb.MaxpbTelemetry.internal_static_maxpb_ECUInfo_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return maxpb.MaxpbTelemetry.internal_static_maxpb_ECUInfo_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              maxpb.MaxpbTelemetry.ECUInfo.class, maxpb.MaxpbTelemetry.ECUInfo.Builder.class);
    }

    public static com.google.protobuf.Parser<ECUInfo> PARSER =
        new com.google.protobuf.AbstractParser<ECUInfo>() {
      public ECUInfo parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ECUInfo(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<ECUInfo> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int CONTROLMODULEVOLTAGE_FIELD_NUMBER = 1;
    private int controlModuleVoltage_;
    /**
     * <code>optional uint32 controlModuleVoltage = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public boolean hasControlModuleVoltage() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional uint32 controlModuleVoltage = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public int getControlModuleVoltage() {
      return controlModuleVoltage_;
    }

    public static final int VIN_FIELD_NUMBER = 2;
    private java.lang.Object vIN_;
    /**
     * <code>optional string VIN = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public boolean hasVIN() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional string VIN = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public java.lang.String getVIN() {
      java.lang.Object ref = vIN_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          vIN_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string VIN = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public com.google.protobuf.ByteString
        getVINBytes() {
      java.lang.Object ref = vIN_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        vIN_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int MALFUNCTIONINDLAMP_FIELD_NUMBER = 3;
    private boolean malFunctionIndLamp_;
    /**
     * <code>optional bool malFunctionIndLamp = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public boolean hasMalFunctionIndLamp() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional bool malFunctionIndLamp = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public boolean getMalFunctionIndLamp() {
      return malFunctionIndLamp_;
    }

    public static final int DTCCODES_FIELD_NUMBER = 4;
    private java.util.List<java.lang.Integer> dtcCodes_;
    /**
     * <code>repeated uint32 dtcCodes = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getDtcCodesList() {
      return dtcCodes_;
    }
    /**
     * <code>repeated uint32 dtcCodes = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public int getDtcCodesCount() {
      return dtcCodes_.size();
    }
    /**
     * <code>repeated uint32 dtcCodes = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public int getDtcCodes(int index) {
      return dtcCodes_.get(index);
    }

    public static final int CANBITRATE_FIELD_NUMBER = 5;
    private maxpb.MaxpbInterfaces.CanBitRate canBitRate_;
    /**
     * <code>optional .maxpb.CanBitRate canBitRate = 5;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162, MAXIO
     * </pre>
     */
    public boolean hasCanBitRate() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional .maxpb.CanBitRate canBitRate = 5;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162, MAXIO
     * </pre>
     */
    public maxpb.MaxpbInterfaces.CanBitRate getCanBitRate() {
      return canBitRate_;
    }

    public static final int ISCANEXTENDED_FIELD_NUMBER = 6;
    private boolean isCanExtended_;
    /**
     * <code>optional bool isCanExtended = 6;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162, MAXIO
     * </pre>
     */
    public boolean hasIsCanExtended() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional bool isCanExtended = 6;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162, MAXIO
     * </pre>
     */
    public boolean getIsCanExtended() {
      return isCanExtended_;
    }

    public static final int AVAIABLEOBDINFOREADY_FIELD_NUMBER = 7;
    private boolean avaiableObdInfoReady_;
    /**
     * <code>optional bool avaiableObdInfoReady = 7;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public boolean hasAvaiableObdInfoReady() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional bool avaiableObdInfoReady = 7;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public boolean getAvaiableObdInfoReady() {
      return avaiableObdInfoReady_;
    }

    private void initFields() {
      controlModuleVoltage_ = 0;
      vIN_ = "";
      malFunctionIndLamp_ = false;
      dtcCodes_ = java.util.Collections.emptyList();
      canBitRate_ = maxpb.MaxpbInterfaces.CanBitRate.CBR_NONE;
      isCanExtended_ = false;
      avaiableObdInfoReady_ = false;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, controlModuleVoltage_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, getVINBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBool(3, malFunctionIndLamp_);
      }
      for (int i = 0; i < dtcCodes_.size(); i++) {
        output.writeUInt32(4, dtcCodes_.get(i));
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeEnum(5, canBitRate_.getNumber());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeBool(6, isCanExtended_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeBool(7, avaiableObdInfoReady_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, controlModuleVoltage_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, getVINBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(3, malFunctionIndLamp_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < dtcCodes_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeUInt32SizeNoTag(dtcCodes_.get(i));
        }
        size += dataSize;
        size += 1 * getDtcCodesList().size();
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(5, canBitRate_.getNumber());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(6, isCanExtended_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(7, avaiableObdInfoReady_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static maxpb.MaxpbTelemetry.ECUInfo parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static maxpb.MaxpbTelemetry.ECUInfo parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetry.ECUInfo parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static maxpb.MaxpbTelemetry.ECUInfo parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetry.ECUInfo parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static maxpb.MaxpbTelemetry.ECUInfo parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetry.ECUInfo parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static maxpb.MaxpbTelemetry.ECUInfo parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetry.ECUInfo parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static maxpb.MaxpbTelemetry.ECUInfo parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(maxpb.MaxpbTelemetry.ECUInfo prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code maxpb.ECUInfo}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:maxpb.ECUInfo)
        maxpb.MaxpbTelemetry.ECUInfoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return maxpb.MaxpbTelemetry.internal_static_maxpb_ECUInfo_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return maxpb.MaxpbTelemetry.internal_static_maxpb_ECUInfo_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                maxpb.MaxpbTelemetry.ECUInfo.class, maxpb.MaxpbTelemetry.ECUInfo.Builder.class);
      }

      // Construct using maxpb.MaxpbTelemetry.ECUInfo.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        controlModuleVoltage_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        vIN_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        malFunctionIndLamp_ = false;
        bitField0_ = (bitField0_ & ~0x00000004);
        dtcCodes_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        canBitRate_ = maxpb.MaxpbInterfaces.CanBitRate.CBR_NONE;
        bitField0_ = (bitField0_ & ~0x00000010);
        isCanExtended_ = false;
        bitField0_ = (bitField0_ & ~0x00000020);
        avaiableObdInfoReady_ = false;
        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return maxpb.MaxpbTelemetry.internal_static_maxpb_ECUInfo_descriptor;
      }

      public maxpb.MaxpbTelemetry.ECUInfo getDefaultInstanceForType() {
        return maxpb.MaxpbTelemetry.ECUInfo.getDefaultInstance();
      }

      public maxpb.MaxpbTelemetry.ECUInfo build() {
        maxpb.MaxpbTelemetry.ECUInfo result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public maxpb.MaxpbTelemetry.ECUInfo buildPartial() {
        maxpb.MaxpbTelemetry.ECUInfo result = new maxpb.MaxpbTelemetry.ECUInfo(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.controlModuleVoltage_ = controlModuleVoltage_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.vIN_ = vIN_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.malFunctionIndLamp_ = malFunctionIndLamp_;
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          dtcCodes_ = java.util.Collections.unmodifiableList(dtcCodes_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.dtcCodes_ = dtcCodes_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000008;
        }
        result.canBitRate_ = canBitRate_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000010;
        }
        result.isCanExtended_ = isCanExtended_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000020;
        }
        result.avaiableObdInfoReady_ = avaiableObdInfoReady_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof maxpb.MaxpbTelemetry.ECUInfo) {
          return mergeFrom((maxpb.MaxpbTelemetry.ECUInfo)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(maxpb.MaxpbTelemetry.ECUInfo other) {
        if (other == maxpb.MaxpbTelemetry.ECUInfo.getDefaultInstance()) return this;
        if (other.hasControlModuleVoltage()) {
          setControlModuleVoltage(other.getControlModuleVoltage());
        }
        if (other.hasVIN()) {
          bitField0_ |= 0x00000002;
          vIN_ = other.vIN_;
          onChanged();
        }
        if (other.hasMalFunctionIndLamp()) {
          setMalFunctionIndLamp(other.getMalFunctionIndLamp());
        }
        if (!other.dtcCodes_.isEmpty()) {
          if (dtcCodes_.isEmpty()) {
            dtcCodes_ = other.dtcCodes_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureDtcCodesIsMutable();
            dtcCodes_.addAll(other.dtcCodes_);
          }
          onChanged();
        }
        if (other.hasCanBitRate()) {
          setCanBitRate(other.getCanBitRate());
        }
        if (other.hasIsCanExtended()) {
          setIsCanExtended(other.getIsCanExtended());
        }
        if (other.hasAvaiableObdInfoReady()) {
          setAvaiableObdInfoReady(other.getAvaiableObdInfoReady());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        maxpb.MaxpbTelemetry.ECUInfo parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (maxpb.MaxpbTelemetry.ECUInfo) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int controlModuleVoltage_ ;
      /**
       * <code>optional uint32 controlModuleVoltage = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public boolean hasControlModuleVoltage() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint32 controlModuleVoltage = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public int getControlModuleVoltage() {
        return controlModuleVoltage_;
      }
      /**
       * <code>optional uint32 controlModuleVoltage = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder setControlModuleVoltage(int value) {
        bitField0_ |= 0x00000001;
        controlModuleVoltage_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 controlModuleVoltage = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder clearControlModuleVoltage() {
        bitField0_ = (bitField0_ & ~0x00000001);
        controlModuleVoltage_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object vIN_ = "";
      /**
       * <code>optional string VIN = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public boolean hasVIN() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional string VIN = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public java.lang.String getVIN() {
        java.lang.Object ref = vIN_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            vIN_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string VIN = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public com.google.protobuf.ByteString
          getVINBytes() {
        java.lang.Object ref = vIN_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          vIN_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string VIN = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder setVIN(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        vIN_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string VIN = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder clearVIN() {
        bitField0_ = (bitField0_ & ~0x00000002);
        vIN_ = getDefaultInstance().getVIN();
        onChanged();
        return this;
      }
      /**
       * <code>optional string VIN = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder setVINBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        vIN_ = value;
        onChanged();
        return this;
      }

      private boolean malFunctionIndLamp_ ;
      /**
       * <code>optional bool malFunctionIndLamp = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public boolean hasMalFunctionIndLamp() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional bool malFunctionIndLamp = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public boolean getMalFunctionIndLamp() {
        return malFunctionIndLamp_;
      }
      /**
       * <code>optional bool malFunctionIndLamp = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder setMalFunctionIndLamp(boolean value) {
        bitField0_ |= 0x00000004;
        malFunctionIndLamp_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool malFunctionIndLamp = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder clearMalFunctionIndLamp() {
        bitField0_ = (bitField0_ & ~0x00000004);
        malFunctionIndLamp_ = false;
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Integer> dtcCodes_ = java.util.Collections.emptyList();
      private void ensureDtcCodesIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          dtcCodes_ = new java.util.ArrayList<java.lang.Integer>(dtcCodes_);
          bitField0_ |= 0x00000008;
         }
      }
      /**
       * <code>repeated uint32 dtcCodes = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getDtcCodesList() {
        return java.util.Collections.unmodifiableList(dtcCodes_);
      }
      /**
       * <code>repeated uint32 dtcCodes = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public int getDtcCodesCount() {
        return dtcCodes_.size();
      }
      /**
       * <code>repeated uint32 dtcCodes = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public int getDtcCodes(int index) {
        return dtcCodes_.get(index);
      }
      /**
       * <code>repeated uint32 dtcCodes = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder setDtcCodes(
          int index, int value) {
        ensureDtcCodesIsMutable();
        dtcCodes_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 dtcCodes = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder addDtcCodes(int value) {
        ensureDtcCodesIsMutable();
        dtcCodes_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 dtcCodes = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder addAllDtcCodes(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureDtcCodesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, dtcCodes_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 dtcCodes = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder clearDtcCodes() {
        dtcCodes_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }

      private maxpb.MaxpbInterfaces.CanBitRate canBitRate_ = maxpb.MaxpbInterfaces.CanBitRate.CBR_NONE;
      /**
       * <code>optional .maxpb.CanBitRate canBitRate = 5;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162, MAXIO
       * </pre>
       */
      public boolean hasCanBitRate() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional .maxpb.CanBitRate canBitRate = 5;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162, MAXIO
       * </pre>
       */
      public maxpb.MaxpbInterfaces.CanBitRate getCanBitRate() {
        return canBitRate_;
      }
      /**
       * <code>optional .maxpb.CanBitRate canBitRate = 5;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162, MAXIO
       * </pre>
       */
      public Builder setCanBitRate(maxpb.MaxpbInterfaces.CanBitRate value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000010;
        canBitRate_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .maxpb.CanBitRate canBitRate = 5;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162, MAXIO
       * </pre>
       */
      public Builder clearCanBitRate() {
        bitField0_ = (bitField0_ & ~0x00000010);
        canBitRate_ = maxpb.MaxpbInterfaces.CanBitRate.CBR_NONE;
        onChanged();
        return this;
      }

      private boolean isCanExtended_ ;
      /**
       * <code>optional bool isCanExtended = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162, MAXIO
       * </pre>
       */
      public boolean hasIsCanExtended() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional bool isCanExtended = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162, MAXIO
       * </pre>
       */
      public boolean getIsCanExtended() {
        return isCanExtended_;
      }
      /**
       * <code>optional bool isCanExtended = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162, MAXIO
       * </pre>
       */
      public Builder setIsCanExtended(boolean value) {
        bitField0_ |= 0x00000020;
        isCanExtended_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool isCanExtended = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162, MAXIO
       * </pre>
       */
      public Builder clearIsCanExtended() {
        bitField0_ = (bitField0_ & ~0x00000020);
        isCanExtended_ = false;
        onChanged();
        return this;
      }

      private boolean avaiableObdInfoReady_ ;
      /**
       * <code>optional bool avaiableObdInfoReady = 7;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public boolean hasAvaiableObdInfoReady() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional bool avaiableObdInfoReady = 7;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public boolean getAvaiableObdInfoReady() {
        return avaiableObdInfoReady_;
      }
      /**
       * <code>optional bool avaiableObdInfoReady = 7;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder setAvaiableObdInfoReady(boolean value) {
        bitField0_ |= 0x00000040;
        avaiableObdInfoReady_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool avaiableObdInfoReady = 7;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder clearAvaiableObdInfoReady() {
        bitField0_ = (bitField0_ & ~0x00000040);
        avaiableObdInfoReady_ = false;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:maxpb.ECUInfo)
    }

    static {
      defaultInstance = new ECUInfo(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:maxpb.ECUInfo)
  }

  public interface AccelerometerEventHistoryOrBuilder extends
      // @@protoc_insertion_point(interface_extends:maxpb.AccelerometerEventHistory)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional sfixed32 latitude = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasLatitude();
    /**
     * <code>optional sfixed32 latitude = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    int getLatitude();

    /**
     * <code>optional sfixed32 longitude = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasLongitude();
    /**
     * <code>optional sfixed32 longitude = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    int getLongitude();

    /**
     * <code>optional uint32 speed = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasSpeed();
    /**
     * <code>optional uint32 speed = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    int getSpeed();

    /**
     * <code>optional uint32 rpm = 4;</code>
     *
     * <pre>
     *&#47; rpm / 100 SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasRpm();
    /**
     * <code>optional uint32 rpm = 4;</code>
     *
     * <pre>
     *&#47; rpm / 100 SupportedBy: MXT160, MXT162
     * </pre>
     */
    int getRpm();

    /**
     * <code>optional uint32 axisFront = 5;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasAxisFront();
    /**
     * <code>optional uint32 axisFront = 5;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    int getAxisFront();

    /**
     * <code>optional uint32 axisBack = 6;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasAxisBack();
    /**
     * <code>optional uint32 axisBack = 6;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    int getAxisBack();

    /**
     * <code>optional uint32 axisRight = 7;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasAxisRight();
    /**
     * <code>optional uint32 axisRight = 7;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    int getAxisRight();

    /**
     * <code>optional uint32 axisLeft = 8;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasAxisLeft();
    /**
     * <code>optional uint32 axisLeft = 8;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    int getAxisLeft();

    /**
     * <code>optional uint32 axisAbsSide = 9;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasAxisAbsSide();
    /**
     * <code>optional uint32 axisAbsSide = 9;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    int getAxisAbsSide();

    /**
     * <code>optional uint32 axisUp = 10;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasAxisUp();
    /**
     * <code>optional uint32 axisUp = 10;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    int getAxisUp();

    /**
     * <code>optional uint32 axisDown = 11;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasAxisDown();
    /**
     * <code>optional uint32 axisDown = 11;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    int getAxisDown();

    /**
     * <code>optional uint64 dateTime = 12;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasDateTime();
    /**
     * <code>optional uint64 dateTime = 12;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    long getDateTime();
  }
  /**
   * Protobuf type {@code maxpb.AccelerometerEventHistory}
   */
  public static final class AccelerometerEventHistory extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:maxpb.AccelerometerEventHistory)
      AccelerometerEventHistoryOrBuilder {
    // Use AccelerometerEventHistory.newBuilder() to construct.
    private AccelerometerEventHistory(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private AccelerometerEventHistory(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final AccelerometerEventHistory defaultInstance;
    public static AccelerometerEventHistory getDefaultInstance() {
      return defaultInstance;
    }

    public AccelerometerEventHistory getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private AccelerometerEventHistory(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 13: {
              bitField0_ |= 0x00000001;
              latitude_ = input.readSFixed32();
              break;
            }
            case 21: {
              bitField0_ |= 0x00000002;
              longitude_ = input.readSFixed32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              speed_ = input.readUInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              rpm_ = input.readUInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              axisFront_ = input.readUInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              axisBack_ = input.readUInt32();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              axisRight_ = input.readUInt32();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000080;
              axisLeft_ = input.readUInt32();
              break;
            }
            case 72: {
              bitField0_ |= 0x00000100;
              axisAbsSide_ = input.readUInt32();
              break;
            }
            case 80: {
              bitField0_ |= 0x00000200;
              axisUp_ = input.readUInt32();
              break;
            }
            case 88: {
              bitField0_ |= 0x00000400;
              axisDown_ = input.readUInt32();
              break;
            }
            case 96: {
              bitField0_ |= 0x00000800;
              dateTime_ = input.readUInt64();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return maxpb.MaxpbTelemetry.internal_static_maxpb_AccelerometerEventHistory_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return maxpb.MaxpbTelemetry.internal_static_maxpb_AccelerometerEventHistory_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              maxpb.MaxpbTelemetry.AccelerometerEventHistory.class, maxpb.MaxpbTelemetry.AccelerometerEventHistory.Builder.class);
    }

    public static com.google.protobuf.Parser<AccelerometerEventHistory> PARSER =
        new com.google.protobuf.AbstractParser<AccelerometerEventHistory>() {
      public AccelerometerEventHistory parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new AccelerometerEventHistory(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<AccelerometerEventHistory> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int LATITUDE_FIELD_NUMBER = 1;
    private int latitude_;
    /**
     * <code>optional sfixed32 latitude = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasLatitude() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional sfixed32 latitude = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public int getLatitude() {
      return latitude_;
    }

    public static final int LONGITUDE_FIELD_NUMBER = 2;
    private int longitude_;
    /**
     * <code>optional sfixed32 longitude = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasLongitude() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional sfixed32 longitude = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public int getLongitude() {
      return longitude_;
    }

    public static final int SPEED_FIELD_NUMBER = 3;
    private int speed_;
    /**
     * <code>optional uint32 speed = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasSpeed() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional uint32 speed = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public int getSpeed() {
      return speed_;
    }

    public static final int RPM_FIELD_NUMBER = 4;
    private int rpm_;
    /**
     * <code>optional uint32 rpm = 4;</code>
     *
     * <pre>
     *&#47; rpm / 100 SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasRpm() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional uint32 rpm = 4;</code>
     *
     * <pre>
     *&#47; rpm / 100 SupportedBy: MXT160, MXT162
     * </pre>
     */
    public int getRpm() {
      return rpm_;
    }

    public static final int AXISFRONT_FIELD_NUMBER = 5;
    private int axisFront_;
    /**
     * <code>optional uint32 axisFront = 5;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasAxisFront() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional uint32 axisFront = 5;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public int getAxisFront() {
      return axisFront_;
    }

    public static final int AXISBACK_FIELD_NUMBER = 6;
    private int axisBack_;
    /**
     * <code>optional uint32 axisBack = 6;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasAxisBack() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional uint32 axisBack = 6;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public int getAxisBack() {
      return axisBack_;
    }

    public static final int AXISRIGHT_FIELD_NUMBER = 7;
    private int axisRight_;
    /**
     * <code>optional uint32 axisRight = 7;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasAxisRight() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional uint32 axisRight = 7;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public int getAxisRight() {
      return axisRight_;
    }

    public static final int AXISLEFT_FIELD_NUMBER = 8;
    private int axisLeft_;
    /**
     * <code>optional uint32 axisLeft = 8;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasAxisLeft() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional uint32 axisLeft = 8;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public int getAxisLeft() {
      return axisLeft_;
    }

    public static final int AXISABSSIDE_FIELD_NUMBER = 9;
    private int axisAbsSide_;
    /**
     * <code>optional uint32 axisAbsSide = 9;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasAxisAbsSide() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional uint32 axisAbsSide = 9;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public int getAxisAbsSide() {
      return axisAbsSide_;
    }

    public static final int AXISUP_FIELD_NUMBER = 10;
    private int axisUp_;
    /**
     * <code>optional uint32 axisUp = 10;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasAxisUp() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional uint32 axisUp = 10;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public int getAxisUp() {
      return axisUp_;
    }

    public static final int AXISDOWN_FIELD_NUMBER = 11;
    private int axisDown_;
    /**
     * <code>optional uint32 axisDown = 11;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasAxisDown() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional uint32 axisDown = 11;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public int getAxisDown() {
      return axisDown_;
    }

    public static final int DATETIME_FIELD_NUMBER = 12;
    private long dateTime_;
    /**
     * <code>optional uint64 dateTime = 12;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasDateTime() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional uint64 dateTime = 12;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public long getDateTime() {
      return dateTime_;
    }

    private void initFields() {
      latitude_ = 0;
      longitude_ = 0;
      speed_ = 0;
      rpm_ = 0;
      axisFront_ = 0;
      axisBack_ = 0;
      axisRight_ = 0;
      axisLeft_ = 0;
      axisAbsSide_ = 0;
      axisUp_ = 0;
      axisDown_ = 0;
      dateTime_ = 0L;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeSFixed32(1, latitude_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeSFixed32(2, longitude_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(3, speed_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeUInt32(4, rpm_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeUInt32(5, axisFront_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeUInt32(6, axisBack_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeUInt32(7, axisRight_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeUInt32(8, axisLeft_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeUInt32(9, axisAbsSide_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeUInt32(10, axisUp_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeUInt32(11, axisDown_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeUInt64(12, dateTime_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSFixed32Size(1, latitude_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSFixed32Size(2, longitude_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, speed_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, rpm_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(5, axisFront_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(6, axisBack_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(7, axisRight_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(8, axisLeft_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(9, axisAbsSide_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(10, axisUp_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(11, axisDown_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(12, dateTime_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static maxpb.MaxpbTelemetry.AccelerometerEventHistory parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static maxpb.MaxpbTelemetry.AccelerometerEventHistory parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetry.AccelerometerEventHistory parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static maxpb.MaxpbTelemetry.AccelerometerEventHistory parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetry.AccelerometerEventHistory parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static maxpb.MaxpbTelemetry.AccelerometerEventHistory parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetry.AccelerometerEventHistory parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static maxpb.MaxpbTelemetry.AccelerometerEventHistory parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetry.AccelerometerEventHistory parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static maxpb.MaxpbTelemetry.AccelerometerEventHistory parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(maxpb.MaxpbTelemetry.AccelerometerEventHistory prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code maxpb.AccelerometerEventHistory}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:maxpb.AccelerometerEventHistory)
        maxpb.MaxpbTelemetry.AccelerometerEventHistoryOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return maxpb.MaxpbTelemetry.internal_static_maxpb_AccelerometerEventHistory_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return maxpb.MaxpbTelemetry.internal_static_maxpb_AccelerometerEventHistory_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                maxpb.MaxpbTelemetry.AccelerometerEventHistory.class, maxpb.MaxpbTelemetry.AccelerometerEventHistory.Builder.class);
      }

      // Construct using maxpb.MaxpbTelemetry.AccelerometerEventHistory.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        latitude_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        longitude_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        speed_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        rpm_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        axisFront_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        axisBack_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        axisRight_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        axisLeft_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        axisAbsSide_ = 0;
        bitField0_ = (bitField0_ & ~0x00000100);
        axisUp_ = 0;
        bitField0_ = (bitField0_ & ~0x00000200);
        axisDown_ = 0;
        bitField0_ = (bitField0_ & ~0x00000400);
        dateTime_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000800);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return maxpb.MaxpbTelemetry.internal_static_maxpb_AccelerometerEventHistory_descriptor;
      }

      public maxpb.MaxpbTelemetry.AccelerometerEventHistory getDefaultInstanceForType() {
        return maxpb.MaxpbTelemetry.AccelerometerEventHistory.getDefaultInstance();
      }

      public maxpb.MaxpbTelemetry.AccelerometerEventHistory build() {
        maxpb.MaxpbTelemetry.AccelerometerEventHistory result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public maxpb.MaxpbTelemetry.AccelerometerEventHistory buildPartial() {
        maxpb.MaxpbTelemetry.AccelerometerEventHistory result = new maxpb.MaxpbTelemetry.AccelerometerEventHistory(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.latitude_ = latitude_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.longitude_ = longitude_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.speed_ = speed_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.rpm_ = rpm_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.axisFront_ = axisFront_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.axisBack_ = axisBack_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.axisRight_ = axisRight_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.axisLeft_ = axisLeft_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.axisAbsSide_ = axisAbsSide_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.axisUp_ = axisUp_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        result.axisDown_ = axisDown_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000800;
        }
        result.dateTime_ = dateTime_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof maxpb.MaxpbTelemetry.AccelerometerEventHistory) {
          return mergeFrom((maxpb.MaxpbTelemetry.AccelerometerEventHistory)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(maxpb.MaxpbTelemetry.AccelerometerEventHistory other) {
        if (other == maxpb.MaxpbTelemetry.AccelerometerEventHistory.getDefaultInstance()) return this;
        if (other.hasLatitude()) {
          setLatitude(other.getLatitude());
        }
        if (other.hasLongitude()) {
          setLongitude(other.getLongitude());
        }
        if (other.hasSpeed()) {
          setSpeed(other.getSpeed());
        }
        if (other.hasRpm()) {
          setRpm(other.getRpm());
        }
        if (other.hasAxisFront()) {
          setAxisFront(other.getAxisFront());
        }
        if (other.hasAxisBack()) {
          setAxisBack(other.getAxisBack());
        }
        if (other.hasAxisRight()) {
          setAxisRight(other.getAxisRight());
        }
        if (other.hasAxisLeft()) {
          setAxisLeft(other.getAxisLeft());
        }
        if (other.hasAxisAbsSide()) {
          setAxisAbsSide(other.getAxisAbsSide());
        }
        if (other.hasAxisUp()) {
          setAxisUp(other.getAxisUp());
        }
        if (other.hasAxisDown()) {
          setAxisDown(other.getAxisDown());
        }
        if (other.hasDateTime()) {
          setDateTime(other.getDateTime());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        maxpb.MaxpbTelemetry.AccelerometerEventHistory parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (maxpb.MaxpbTelemetry.AccelerometerEventHistory) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int latitude_ ;
      /**
       * <code>optional sfixed32 latitude = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasLatitude() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional sfixed32 latitude = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public int getLatitude() {
        return latitude_;
      }
      /**
       * <code>optional sfixed32 latitude = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setLatitude(int value) {
        bitField0_ |= 0x00000001;
        latitude_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sfixed32 latitude = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearLatitude() {
        bitField0_ = (bitField0_ & ~0x00000001);
        latitude_ = 0;
        onChanged();
        return this;
      }

      private int longitude_ ;
      /**
       * <code>optional sfixed32 longitude = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasLongitude() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional sfixed32 longitude = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public int getLongitude() {
        return longitude_;
      }
      /**
       * <code>optional sfixed32 longitude = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setLongitude(int value) {
        bitField0_ |= 0x00000002;
        longitude_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sfixed32 longitude = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearLongitude() {
        bitField0_ = (bitField0_ & ~0x00000002);
        longitude_ = 0;
        onChanged();
        return this;
      }

      private int speed_ ;
      /**
       * <code>optional uint32 speed = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasSpeed() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional uint32 speed = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public int getSpeed() {
        return speed_;
      }
      /**
       * <code>optional uint32 speed = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setSpeed(int value) {
        bitField0_ |= 0x00000004;
        speed_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 speed = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearSpeed() {
        bitField0_ = (bitField0_ & ~0x00000004);
        speed_ = 0;
        onChanged();
        return this;
      }

      private int rpm_ ;
      /**
       * <code>optional uint32 rpm = 4;</code>
       *
       * <pre>
       *&#47; rpm / 100 SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasRpm() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional uint32 rpm = 4;</code>
       *
       * <pre>
       *&#47; rpm / 100 SupportedBy: MXT160, MXT162
       * </pre>
       */
      public int getRpm() {
        return rpm_;
      }
      /**
       * <code>optional uint32 rpm = 4;</code>
       *
       * <pre>
       *&#47; rpm / 100 SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setRpm(int value) {
        bitField0_ |= 0x00000008;
        rpm_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 rpm = 4;</code>
       *
       * <pre>
       *&#47; rpm / 100 SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearRpm() {
        bitField0_ = (bitField0_ & ~0x00000008);
        rpm_ = 0;
        onChanged();
        return this;
      }

      private int axisFront_ ;
      /**
       * <code>optional uint32 axisFront = 5;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasAxisFront() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional uint32 axisFront = 5;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public int getAxisFront() {
        return axisFront_;
      }
      /**
       * <code>optional uint32 axisFront = 5;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setAxisFront(int value) {
        bitField0_ |= 0x00000010;
        axisFront_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 axisFront = 5;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearAxisFront() {
        bitField0_ = (bitField0_ & ~0x00000010);
        axisFront_ = 0;
        onChanged();
        return this;
      }

      private int axisBack_ ;
      /**
       * <code>optional uint32 axisBack = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasAxisBack() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional uint32 axisBack = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public int getAxisBack() {
        return axisBack_;
      }
      /**
       * <code>optional uint32 axisBack = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setAxisBack(int value) {
        bitField0_ |= 0x00000020;
        axisBack_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 axisBack = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearAxisBack() {
        bitField0_ = (bitField0_ & ~0x00000020);
        axisBack_ = 0;
        onChanged();
        return this;
      }

      private int axisRight_ ;
      /**
       * <code>optional uint32 axisRight = 7;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasAxisRight() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional uint32 axisRight = 7;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public int getAxisRight() {
        return axisRight_;
      }
      /**
       * <code>optional uint32 axisRight = 7;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setAxisRight(int value) {
        bitField0_ |= 0x00000040;
        axisRight_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 axisRight = 7;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearAxisRight() {
        bitField0_ = (bitField0_ & ~0x00000040);
        axisRight_ = 0;
        onChanged();
        return this;
      }

      private int axisLeft_ ;
      /**
       * <code>optional uint32 axisLeft = 8;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasAxisLeft() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional uint32 axisLeft = 8;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public int getAxisLeft() {
        return axisLeft_;
      }
      /**
       * <code>optional uint32 axisLeft = 8;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setAxisLeft(int value) {
        bitField0_ |= 0x00000080;
        axisLeft_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 axisLeft = 8;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearAxisLeft() {
        bitField0_ = (bitField0_ & ~0x00000080);
        axisLeft_ = 0;
        onChanged();
        return this;
      }

      private int axisAbsSide_ ;
      /**
       * <code>optional uint32 axisAbsSide = 9;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasAxisAbsSide() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional uint32 axisAbsSide = 9;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public int getAxisAbsSide() {
        return axisAbsSide_;
      }
      /**
       * <code>optional uint32 axisAbsSide = 9;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setAxisAbsSide(int value) {
        bitField0_ |= 0x00000100;
        axisAbsSide_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 axisAbsSide = 9;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearAxisAbsSide() {
        bitField0_ = (bitField0_ & ~0x00000100);
        axisAbsSide_ = 0;
        onChanged();
        return this;
      }

      private int axisUp_ ;
      /**
       * <code>optional uint32 axisUp = 10;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasAxisUp() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional uint32 axisUp = 10;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public int getAxisUp() {
        return axisUp_;
      }
      /**
       * <code>optional uint32 axisUp = 10;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setAxisUp(int value) {
        bitField0_ |= 0x00000200;
        axisUp_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 axisUp = 10;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearAxisUp() {
        bitField0_ = (bitField0_ & ~0x00000200);
        axisUp_ = 0;
        onChanged();
        return this;
      }

      private int axisDown_ ;
      /**
       * <code>optional uint32 axisDown = 11;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasAxisDown() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional uint32 axisDown = 11;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public int getAxisDown() {
        return axisDown_;
      }
      /**
       * <code>optional uint32 axisDown = 11;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setAxisDown(int value) {
        bitField0_ |= 0x00000400;
        axisDown_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 axisDown = 11;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearAxisDown() {
        bitField0_ = (bitField0_ & ~0x00000400);
        axisDown_ = 0;
        onChanged();
        return this;
      }

      private long dateTime_ ;
      /**
       * <code>optional uint64 dateTime = 12;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasDateTime() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional uint64 dateTime = 12;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public long getDateTime() {
        return dateTime_;
      }
      /**
       * <code>optional uint64 dateTime = 12;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setDateTime(long value) {
        bitField0_ |= 0x00000800;
        dateTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint64 dateTime = 12;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearDateTime() {
        bitField0_ = (bitField0_ & ~0x00000800);
        dateTime_ = 0L;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:maxpb.AccelerometerEventHistory)
    }

    static {
      defaultInstance = new AccelerometerEventHistory(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:maxpb.AccelerometerEventHistory)
  }

  public interface AccelerometerHistoryOrBuilder extends
      // @@protoc_insertion_point(interface_extends:maxpb.AccelerometerHistory)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required uint64 dateTime = 1;</code>
     *
     * <pre>
     *&#47; Unix time, seconds since 01/01/1970 SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasDateTime();
    /**
     * <code>required uint64 dateTime = 1;</code>
     *
     * <pre>
     *&#47; Unix time, seconds since 01/01/1970 SupportedBy: MXT160, MXT162
     * </pre>
     */
    long getDateTime();

    /**
     * <code>required .maxpb.AccelerometerHistorySamples historySamples = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasHistorySamples();
    /**
     * <code>required .maxpb.AccelerometerHistorySamples historySamples = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.AccelerometerHistorySamples getHistorySamples();

    /**
     * <code>repeated .maxpb.AccelerometerEventHistory history = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    java.util.List<maxpb.MaxpbTelemetry.AccelerometerEventHistory> 
        getHistoryList();
    /**
     * <code>repeated .maxpb.AccelerometerEventHistory history = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.AccelerometerEventHistory getHistory(int index);
    /**
     * <code>repeated .maxpb.AccelerometerEventHistory history = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    int getHistoryCount();
    /**
     * <code>repeated .maxpb.AccelerometerEventHistory history = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    java.util.List<? extends maxpb.MaxpbTelemetry.AccelerometerEventHistoryOrBuilder> 
        getHistoryOrBuilderList();
    /**
     * <code>repeated .maxpb.AccelerometerEventHistory history = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.AccelerometerEventHistoryOrBuilder getHistoryOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code maxpb.AccelerometerHistory}
   */
  public static final class AccelerometerHistory extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:maxpb.AccelerometerHistory)
      AccelerometerHistoryOrBuilder {
    // Use AccelerometerHistory.newBuilder() to construct.
    private AccelerometerHistory(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private AccelerometerHistory(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final AccelerometerHistory defaultInstance;
    public static AccelerometerHistory getDefaultInstance() {
      return defaultInstance;
    }

    public AccelerometerHistory getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private AccelerometerHistory(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              dateTime_ = input.readUInt64();
              break;
            }
            case 16: {
              int rawValue = input.readEnum();
              maxpb.MaxpbTelemetry.AccelerometerHistorySamples value = maxpb.MaxpbTelemetry.AccelerometerHistorySamples.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(2, rawValue);
              } else {
                bitField0_ |= 0x00000002;
                historySamples_ = value;
              }
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                history_ = new java.util.ArrayList<maxpb.MaxpbTelemetry.AccelerometerEventHistory>();
                mutable_bitField0_ |= 0x00000004;
              }
              history_.add(input.readMessage(maxpb.MaxpbTelemetry.AccelerometerEventHistory.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          history_ = java.util.Collections.unmodifiableList(history_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return maxpb.MaxpbTelemetry.internal_static_maxpb_AccelerometerHistory_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return maxpb.MaxpbTelemetry.internal_static_maxpb_AccelerometerHistory_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              maxpb.MaxpbTelemetry.AccelerometerHistory.class, maxpb.MaxpbTelemetry.AccelerometerHistory.Builder.class);
    }

    public static com.google.protobuf.Parser<AccelerometerHistory> PARSER =
        new com.google.protobuf.AbstractParser<AccelerometerHistory>() {
      public AccelerometerHistory parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new AccelerometerHistory(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<AccelerometerHistory> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int DATETIME_FIELD_NUMBER = 1;
    private long dateTime_;
    /**
     * <code>required uint64 dateTime = 1;</code>
     *
     * <pre>
     *&#47; Unix time, seconds since 01/01/1970 SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasDateTime() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required uint64 dateTime = 1;</code>
     *
     * <pre>
     *&#47; Unix time, seconds since 01/01/1970 SupportedBy: MXT160, MXT162
     * </pre>
     */
    public long getDateTime() {
      return dateTime_;
    }

    public static final int HISTORYSAMPLES_FIELD_NUMBER = 2;
    private maxpb.MaxpbTelemetry.AccelerometerHistorySamples historySamples_;
    /**
     * <code>required .maxpb.AccelerometerHistorySamples historySamples = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasHistorySamples() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required .maxpb.AccelerometerHistorySamples historySamples = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.AccelerometerHistorySamples getHistorySamples() {
      return historySamples_;
    }

    public static final int HISTORY_FIELD_NUMBER = 3;
    private java.util.List<maxpb.MaxpbTelemetry.AccelerometerEventHistory> history_;
    /**
     * <code>repeated .maxpb.AccelerometerEventHistory history = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public java.util.List<maxpb.MaxpbTelemetry.AccelerometerEventHistory> getHistoryList() {
      return history_;
    }
    /**
     * <code>repeated .maxpb.AccelerometerEventHistory history = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public java.util.List<? extends maxpb.MaxpbTelemetry.AccelerometerEventHistoryOrBuilder> 
        getHistoryOrBuilderList() {
      return history_;
    }
    /**
     * <code>repeated .maxpb.AccelerometerEventHistory history = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public int getHistoryCount() {
      return history_.size();
    }
    /**
     * <code>repeated .maxpb.AccelerometerEventHistory history = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.AccelerometerEventHistory getHistory(int index) {
      return history_.get(index);
    }
    /**
     * <code>repeated .maxpb.AccelerometerEventHistory history = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.AccelerometerEventHistoryOrBuilder getHistoryOrBuilder(
        int index) {
      return history_.get(index);
    }

    private void initFields() {
      dateTime_ = 0L;
      historySamples_ = maxpb.MaxpbTelemetry.AccelerometerHistorySamples.AH_4HZ;
      history_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasDateTime()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasHistorySamples()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt64(1, dateTime_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeEnum(2, historySamples_.getNumber());
      }
      for (int i = 0; i < history_.size(); i++) {
        output.writeMessage(3, history_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(1, dateTime_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(2, historySamples_.getNumber());
      }
      for (int i = 0; i < history_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, history_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static maxpb.MaxpbTelemetry.AccelerometerHistory parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static maxpb.MaxpbTelemetry.AccelerometerHistory parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetry.AccelerometerHistory parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static maxpb.MaxpbTelemetry.AccelerometerHistory parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetry.AccelerometerHistory parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static maxpb.MaxpbTelemetry.AccelerometerHistory parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetry.AccelerometerHistory parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static maxpb.MaxpbTelemetry.AccelerometerHistory parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetry.AccelerometerHistory parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static maxpb.MaxpbTelemetry.AccelerometerHistory parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(maxpb.MaxpbTelemetry.AccelerometerHistory prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code maxpb.AccelerometerHistory}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:maxpb.AccelerometerHistory)
        maxpb.MaxpbTelemetry.AccelerometerHistoryOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return maxpb.MaxpbTelemetry.internal_static_maxpb_AccelerometerHistory_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return maxpb.MaxpbTelemetry.internal_static_maxpb_AccelerometerHistory_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                maxpb.MaxpbTelemetry.AccelerometerHistory.class, maxpb.MaxpbTelemetry.AccelerometerHistory.Builder.class);
      }

      // Construct using maxpb.MaxpbTelemetry.AccelerometerHistory.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getHistoryFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        dateTime_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000001);
        historySamples_ = maxpb.MaxpbTelemetry.AccelerometerHistorySamples.AH_4HZ;
        bitField0_ = (bitField0_ & ~0x00000002);
        if (historyBuilder_ == null) {
          history_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          historyBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return maxpb.MaxpbTelemetry.internal_static_maxpb_AccelerometerHistory_descriptor;
      }

      public maxpb.MaxpbTelemetry.AccelerometerHistory getDefaultInstanceForType() {
        return maxpb.MaxpbTelemetry.AccelerometerHistory.getDefaultInstance();
      }

      public maxpb.MaxpbTelemetry.AccelerometerHistory build() {
        maxpb.MaxpbTelemetry.AccelerometerHistory result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public maxpb.MaxpbTelemetry.AccelerometerHistory buildPartial() {
        maxpb.MaxpbTelemetry.AccelerometerHistory result = new maxpb.MaxpbTelemetry.AccelerometerHistory(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.dateTime_ = dateTime_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.historySamples_ = historySamples_;
        if (historyBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004)) {
            history_ = java.util.Collections.unmodifiableList(history_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.history_ = history_;
        } else {
          result.history_ = historyBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof maxpb.MaxpbTelemetry.AccelerometerHistory) {
          return mergeFrom((maxpb.MaxpbTelemetry.AccelerometerHistory)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(maxpb.MaxpbTelemetry.AccelerometerHistory other) {
        if (other == maxpb.MaxpbTelemetry.AccelerometerHistory.getDefaultInstance()) return this;
        if (other.hasDateTime()) {
          setDateTime(other.getDateTime());
        }
        if (other.hasHistorySamples()) {
          setHistorySamples(other.getHistorySamples());
        }
        if (historyBuilder_ == null) {
          if (!other.history_.isEmpty()) {
            if (history_.isEmpty()) {
              history_ = other.history_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureHistoryIsMutable();
              history_.addAll(other.history_);
            }
            onChanged();
          }
        } else {
          if (!other.history_.isEmpty()) {
            if (historyBuilder_.isEmpty()) {
              historyBuilder_.dispose();
              historyBuilder_ = null;
              history_ = other.history_;
              bitField0_ = (bitField0_ & ~0x00000004);
              historyBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getHistoryFieldBuilder() : null;
            } else {
              historyBuilder_.addAllMessages(other.history_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasDateTime()) {
          
          return false;
        }
        if (!hasHistorySamples()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        maxpb.MaxpbTelemetry.AccelerometerHistory parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (maxpb.MaxpbTelemetry.AccelerometerHistory) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private long dateTime_ ;
      /**
       * <code>required uint64 dateTime = 1;</code>
       *
       * <pre>
       *&#47; Unix time, seconds since 01/01/1970 SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasDateTime() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint64 dateTime = 1;</code>
       *
       * <pre>
       *&#47; Unix time, seconds since 01/01/1970 SupportedBy: MXT160, MXT162
       * </pre>
       */
      public long getDateTime() {
        return dateTime_;
      }
      /**
       * <code>required uint64 dateTime = 1;</code>
       *
       * <pre>
       *&#47; Unix time, seconds since 01/01/1970 SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setDateTime(long value) {
        bitField0_ |= 0x00000001;
        dateTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint64 dateTime = 1;</code>
       *
       * <pre>
       *&#47; Unix time, seconds since 01/01/1970 SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearDateTime() {
        bitField0_ = (bitField0_ & ~0x00000001);
        dateTime_ = 0L;
        onChanged();
        return this;
      }

      private maxpb.MaxpbTelemetry.AccelerometerHistorySamples historySamples_ = maxpb.MaxpbTelemetry.AccelerometerHistorySamples.AH_4HZ;
      /**
       * <code>required .maxpb.AccelerometerHistorySamples historySamples = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasHistorySamples() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required .maxpb.AccelerometerHistorySamples historySamples = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.AccelerometerHistorySamples getHistorySamples() {
        return historySamples_;
      }
      /**
       * <code>required .maxpb.AccelerometerHistorySamples historySamples = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setHistorySamples(maxpb.MaxpbTelemetry.AccelerometerHistorySamples value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000002;
        historySamples_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required .maxpb.AccelerometerHistorySamples historySamples = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearHistorySamples() {
        bitField0_ = (bitField0_ & ~0x00000002);
        historySamples_ = maxpb.MaxpbTelemetry.AccelerometerHistorySamples.AH_4HZ;
        onChanged();
        return this;
      }

      private java.util.List<maxpb.MaxpbTelemetry.AccelerometerEventHistory> history_ =
        java.util.Collections.emptyList();
      private void ensureHistoryIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          history_ = new java.util.ArrayList<maxpb.MaxpbTelemetry.AccelerometerEventHistory>(history_);
          bitField0_ |= 0x00000004;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          maxpb.MaxpbTelemetry.AccelerometerEventHistory, maxpb.MaxpbTelemetry.AccelerometerEventHistory.Builder, maxpb.MaxpbTelemetry.AccelerometerEventHistoryOrBuilder> historyBuilder_;

      /**
       * <code>repeated .maxpb.AccelerometerEventHistory history = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public java.util.List<maxpb.MaxpbTelemetry.AccelerometerEventHistory> getHistoryList() {
        if (historyBuilder_ == null) {
          return java.util.Collections.unmodifiableList(history_);
        } else {
          return historyBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .maxpb.AccelerometerEventHistory history = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public int getHistoryCount() {
        if (historyBuilder_ == null) {
          return history_.size();
        } else {
          return historyBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .maxpb.AccelerometerEventHistory history = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.AccelerometerEventHistory getHistory(int index) {
        if (historyBuilder_ == null) {
          return history_.get(index);
        } else {
          return historyBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .maxpb.AccelerometerEventHistory history = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setHistory(
          int index, maxpb.MaxpbTelemetry.AccelerometerEventHistory value) {
        if (historyBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureHistoryIsMutable();
          history_.set(index, value);
          onChanged();
        } else {
          historyBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .maxpb.AccelerometerEventHistory history = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setHistory(
          int index, maxpb.MaxpbTelemetry.AccelerometerEventHistory.Builder builderForValue) {
        if (historyBuilder_ == null) {
          ensureHistoryIsMutable();
          history_.set(index, builderForValue.build());
          onChanged();
        } else {
          historyBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .maxpb.AccelerometerEventHistory history = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder addHistory(maxpb.MaxpbTelemetry.AccelerometerEventHistory value) {
        if (historyBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureHistoryIsMutable();
          history_.add(value);
          onChanged();
        } else {
          historyBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .maxpb.AccelerometerEventHistory history = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder addHistory(
          int index, maxpb.MaxpbTelemetry.AccelerometerEventHistory value) {
        if (historyBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureHistoryIsMutable();
          history_.add(index, value);
          onChanged();
        } else {
          historyBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .maxpb.AccelerometerEventHistory history = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder addHistory(
          maxpb.MaxpbTelemetry.AccelerometerEventHistory.Builder builderForValue) {
        if (historyBuilder_ == null) {
          ensureHistoryIsMutable();
          history_.add(builderForValue.build());
          onChanged();
        } else {
          historyBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .maxpb.AccelerometerEventHistory history = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder addHistory(
          int index, maxpb.MaxpbTelemetry.AccelerometerEventHistory.Builder builderForValue) {
        if (historyBuilder_ == null) {
          ensureHistoryIsMutable();
          history_.add(index, builderForValue.build());
          onChanged();
        } else {
          historyBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .maxpb.AccelerometerEventHistory history = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder addAllHistory(
          java.lang.Iterable<? extends maxpb.MaxpbTelemetry.AccelerometerEventHistory> values) {
        if (historyBuilder_ == null) {
          ensureHistoryIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, history_);
          onChanged();
        } else {
          historyBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .maxpb.AccelerometerEventHistory history = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearHistory() {
        if (historyBuilder_ == null) {
          history_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          historyBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .maxpb.AccelerometerEventHistory history = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder removeHistory(int index) {
        if (historyBuilder_ == null) {
          ensureHistoryIsMutable();
          history_.remove(index);
          onChanged();
        } else {
          historyBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .maxpb.AccelerometerEventHistory history = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.AccelerometerEventHistory.Builder getHistoryBuilder(
          int index) {
        return getHistoryFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .maxpb.AccelerometerEventHistory history = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.AccelerometerEventHistoryOrBuilder getHistoryOrBuilder(
          int index) {
        if (historyBuilder_ == null) {
          return history_.get(index);  } else {
          return historyBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .maxpb.AccelerometerEventHistory history = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public java.util.List<? extends maxpb.MaxpbTelemetry.AccelerometerEventHistoryOrBuilder> 
           getHistoryOrBuilderList() {
        if (historyBuilder_ != null) {
          return historyBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(history_);
        }
      }
      /**
       * <code>repeated .maxpb.AccelerometerEventHistory history = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.AccelerometerEventHistory.Builder addHistoryBuilder() {
        return getHistoryFieldBuilder().addBuilder(
            maxpb.MaxpbTelemetry.AccelerometerEventHistory.getDefaultInstance());
      }
      /**
       * <code>repeated .maxpb.AccelerometerEventHistory history = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.AccelerometerEventHistory.Builder addHistoryBuilder(
          int index) {
        return getHistoryFieldBuilder().addBuilder(
            index, maxpb.MaxpbTelemetry.AccelerometerEventHistory.getDefaultInstance());
      }
      /**
       * <code>repeated .maxpb.AccelerometerEventHistory history = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public java.util.List<maxpb.MaxpbTelemetry.AccelerometerEventHistory.Builder> 
           getHistoryBuilderList() {
        return getHistoryFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          maxpb.MaxpbTelemetry.AccelerometerEventHistory, maxpb.MaxpbTelemetry.AccelerometerEventHistory.Builder, maxpb.MaxpbTelemetry.AccelerometerEventHistoryOrBuilder> 
          getHistoryFieldBuilder() {
        if (historyBuilder_ == null) {
          historyBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              maxpb.MaxpbTelemetry.AccelerometerEventHistory, maxpb.MaxpbTelemetry.AccelerometerEventHistory.Builder, maxpb.MaxpbTelemetry.AccelerometerEventHistoryOrBuilder>(
                  history_,
                  ((bitField0_ & 0x00000004) == 0x00000004),
                  getParentForChildren(),
                  isClean());
          history_ = null;
        }
        return historyBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:maxpb.AccelerometerHistory)
    }

    static {
      defaultInstance = new AccelerometerHistory(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:maxpb.AccelerometerHistory)
  }

  public interface TelemetryInfoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:maxpb.TelemetryInfo)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional .maxpb.TelemetryFlags flags = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180, MAXIO
     * </pre>
     */
    boolean hasFlags();
    /**
     * <code>optional .maxpb.TelemetryFlags flags = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180, MAXIO
     * </pre>
     */
    maxpb.MaxpbTelemetry.TelemetryFlags getFlags();
    /**
     * <code>optional .maxpb.TelemetryFlags flags = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180, MAXIO
     * </pre>
     */
    maxpb.MaxpbTelemetry.TelemetryFlagsOrBuilder getFlagsOrBuilder();

    /**
     * <code>optional .maxpb.OdometerInfo odometer = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180, MAXIO
     * </pre>
     */
    boolean hasOdometer();
    /**
     * <code>optional .maxpb.OdometerInfo odometer = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180, MAXIO
     * </pre>
     */
    maxpb.MaxpbTelemetry.OdometerInfo getOdometer();
    /**
     * <code>optional .maxpb.OdometerInfo odometer = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180, MAXIO
     * </pre>
     */
    maxpb.MaxpbTelemetry.OdometerInfoOrBuilder getOdometerOrBuilder();

    /**
     * <code>optional .maxpb.SpeedInfo speed = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180, MAXIO
     * </pre>
     */
    boolean hasSpeed();
    /**
     * <code>optional .maxpb.SpeedInfo speed = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180, MAXIO
     * </pre>
     */
    maxpb.MaxpbTelemetry.SpeedInfo getSpeed();
    /**
     * <code>optional .maxpb.SpeedInfo speed = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180, MAXIO
     * </pre>
     */
    maxpb.MaxpbTelemetry.SpeedInfoOrBuilder getSpeedOrBuilder();

    /**
     * <code>optional .maxpb.RpmInfo rpm = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT162, MAXIO
     * </pre>
     */
    boolean hasRpm();
    /**
     * <code>optional .maxpb.RpmInfo rpm = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT162, MAXIO
     * </pre>
     */
    maxpb.MaxpbTelemetry.RpmInfo getRpm();
    /**
     * <code>optional .maxpb.RpmInfo rpm = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT162, MAXIO
     * </pre>
     */
    maxpb.MaxpbTelemetry.RpmInfoOrBuilder getRpmOrBuilder();

    /**
     * <code>optional .maxpb.AngleInfo angles = 5;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162
     * </pre>
     */
    boolean hasAngles();
    /**
     * <code>optional .maxpb.AngleInfo angles = 5;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.AngleInfo getAngles();
    /**
     * <code>optional .maxpb.AngleInfo angles = 5;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.AngleInfoOrBuilder getAnglesOrBuilder();

    /**
     * <code>optional .maxpb.FuelInfo fuel = 6;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162, MAXIO
     * </pre>
     */
    boolean hasFuel();
    /**
     * <code>optional .maxpb.FuelInfo fuel = 6;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162, MAXIO
     * </pre>
     */
    maxpb.MaxpbTelemetry.FuelInfo getFuel();
    /**
     * <code>optional .maxpb.FuelInfo fuel = 6;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162, MAXIO
     * </pre>
     */
    maxpb.MaxpbTelemetry.FuelInfoOrBuilder getFuelOrBuilder();

    /**
     * <code>optional .maxpb.EngineInfo engine = 7;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162, MAXIO
     * </pre>
     */
    boolean hasEngine();
    /**
     * <code>optional .maxpb.EngineInfo engine = 7;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162, MAXIO
     * </pre>
     */
    maxpb.MaxpbTelemetry.EngineInfo getEngine();
    /**
     * <code>optional .maxpb.EngineInfo engine = 7;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162, MAXIO
     * </pre>
     */
    maxpb.MaxpbTelemetry.EngineInfoOrBuilder getEngineOrBuilder();

    /**
     * <code>optional .maxpb.EnvironmentInfo environment = 8;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    boolean hasEnvironment();
    /**
     * <code>optional .maxpb.EnvironmentInfo environment = 8;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    maxpb.MaxpbTelemetry.EnvironmentInfo getEnvironment();
    /**
     * <code>optional .maxpb.EnvironmentInfo environment = 8;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    maxpb.MaxpbTelemetry.EnvironmentInfoOrBuilder getEnvironmentOrBuilder();

    /**
     * <code>optional .maxpb.ECUInfo ecu = 9;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162, MAXIO
     * </pre>
     */
    boolean hasEcu();
    /**
     * <code>optional .maxpb.ECUInfo ecu = 9;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162, MAXIO
     * </pre>
     */
    maxpb.MaxpbTelemetry.ECUInfo getEcu();
    /**
     * <code>optional .maxpb.ECUInfo ecu = 9;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162, MAXIO
     * </pre>
     */
    maxpb.MaxpbTelemetry.ECUInfoOrBuilder getEcuOrBuilder();

    /**
     * <code>repeated .maxpb.TelemetryDelta delta = 10;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    java.util.List<maxpb.MaxpbTelemetryDelta.TelemetryDelta> 
        getDeltaList();
    /**
     * <code>repeated .maxpb.TelemetryDelta delta = 10;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetryDelta.TelemetryDelta getDelta(int index);
    /**
     * <code>repeated .maxpb.TelemetryDelta delta = 10;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    int getDeltaCount();
    /**
     * <code>repeated .maxpb.TelemetryDelta delta = 10;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    java.util.List<? extends maxpb.MaxpbTelemetryDelta.TelemetryDeltaOrBuilder> 
        getDeltaOrBuilderList();
    /**
     * <code>repeated .maxpb.TelemetryDelta delta = 10;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetryDelta.TelemetryDeltaOrBuilder getDeltaOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code maxpb.TelemetryInfo}
   */
  public static final class TelemetryInfo extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:maxpb.TelemetryInfo)
      TelemetryInfoOrBuilder {
    // Use TelemetryInfo.newBuilder() to construct.
    private TelemetryInfo(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private TelemetryInfo(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final TelemetryInfo defaultInstance;
    public static TelemetryInfo getDefaultInstance() {
      return defaultInstance;
    }

    public TelemetryInfo getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private TelemetryInfo(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              maxpb.MaxpbTelemetry.TelemetryFlags.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = flags_.toBuilder();
              }
              flags_ = input.readMessage(maxpb.MaxpbTelemetry.TelemetryFlags.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(flags_);
                flags_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 18: {
              maxpb.MaxpbTelemetry.OdometerInfo.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = odometer_.toBuilder();
              }
              odometer_ = input.readMessage(maxpb.MaxpbTelemetry.OdometerInfo.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(odometer_);
                odometer_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
            case 26: {
              maxpb.MaxpbTelemetry.SpeedInfo.Builder subBuilder = null;
              if (((bitField0_ & 0x00000004) == 0x00000004)) {
                subBuilder = speed_.toBuilder();
              }
              speed_ = input.readMessage(maxpb.MaxpbTelemetry.SpeedInfo.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(speed_);
                speed_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000004;
              break;
            }
            case 34: {
              maxpb.MaxpbTelemetry.RpmInfo.Builder subBuilder = null;
              if (((bitField0_ & 0x00000008) == 0x00000008)) {
                subBuilder = rpm_.toBuilder();
              }
              rpm_ = input.readMessage(maxpb.MaxpbTelemetry.RpmInfo.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(rpm_);
                rpm_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000008;
              break;
            }
            case 42: {
              maxpb.MaxpbTelemetry.AngleInfo.Builder subBuilder = null;
              if (((bitField0_ & 0x00000010) == 0x00000010)) {
                subBuilder = angles_.toBuilder();
              }
              angles_ = input.readMessage(maxpb.MaxpbTelemetry.AngleInfo.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(angles_);
                angles_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000010;
              break;
            }
            case 50: {
              maxpb.MaxpbTelemetry.FuelInfo.Builder subBuilder = null;
              if (((bitField0_ & 0x00000020) == 0x00000020)) {
                subBuilder = fuel_.toBuilder();
              }
              fuel_ = input.readMessage(maxpb.MaxpbTelemetry.FuelInfo.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(fuel_);
                fuel_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000020;
              break;
            }
            case 58: {
              maxpb.MaxpbTelemetry.EngineInfo.Builder subBuilder = null;
              if (((bitField0_ & 0x00000040) == 0x00000040)) {
                subBuilder = engine_.toBuilder();
              }
              engine_ = input.readMessage(maxpb.MaxpbTelemetry.EngineInfo.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(engine_);
                engine_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000040;
              break;
            }
            case 66: {
              maxpb.MaxpbTelemetry.EnvironmentInfo.Builder subBuilder = null;
              if (((bitField0_ & 0x00000080) == 0x00000080)) {
                subBuilder = environment_.toBuilder();
              }
              environment_ = input.readMessage(maxpb.MaxpbTelemetry.EnvironmentInfo.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(environment_);
                environment_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000080;
              break;
            }
            case 74: {
              maxpb.MaxpbTelemetry.ECUInfo.Builder subBuilder = null;
              if (((bitField0_ & 0x00000100) == 0x00000100)) {
                subBuilder = ecu_.toBuilder();
              }
              ecu_ = input.readMessage(maxpb.MaxpbTelemetry.ECUInfo.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(ecu_);
                ecu_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000100;
              break;
            }
            case 82: {
              if (!((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
                delta_ = new java.util.ArrayList<maxpb.MaxpbTelemetryDelta.TelemetryDelta>();
                mutable_bitField0_ |= 0x00000200;
              }
              delta_.add(input.readMessage(maxpb.MaxpbTelemetryDelta.TelemetryDelta.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
          delta_ = java.util.Collections.unmodifiableList(delta_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return maxpb.MaxpbTelemetry.internal_static_maxpb_TelemetryInfo_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return maxpb.MaxpbTelemetry.internal_static_maxpb_TelemetryInfo_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              maxpb.MaxpbTelemetry.TelemetryInfo.class, maxpb.MaxpbTelemetry.TelemetryInfo.Builder.class);
    }

    public static com.google.protobuf.Parser<TelemetryInfo> PARSER =
        new com.google.protobuf.AbstractParser<TelemetryInfo>() {
      public TelemetryInfo parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new TelemetryInfo(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<TelemetryInfo> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int FLAGS_FIELD_NUMBER = 1;
    private maxpb.MaxpbTelemetry.TelemetryFlags flags_;
    /**
     * <code>optional .maxpb.TelemetryFlags flags = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180, MAXIO
     * </pre>
     */
    public boolean hasFlags() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .maxpb.TelemetryFlags flags = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180, MAXIO
     * </pre>
     */
    public maxpb.MaxpbTelemetry.TelemetryFlags getFlags() {
      return flags_;
    }
    /**
     * <code>optional .maxpb.TelemetryFlags flags = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180, MAXIO
     * </pre>
     */
    public maxpb.MaxpbTelemetry.TelemetryFlagsOrBuilder getFlagsOrBuilder() {
      return flags_;
    }

    public static final int ODOMETER_FIELD_NUMBER = 2;
    private maxpb.MaxpbTelemetry.OdometerInfo odometer_;
    /**
     * <code>optional .maxpb.OdometerInfo odometer = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180, MAXIO
     * </pre>
     */
    public boolean hasOdometer() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional .maxpb.OdometerInfo odometer = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180, MAXIO
     * </pre>
     */
    public maxpb.MaxpbTelemetry.OdometerInfo getOdometer() {
      return odometer_;
    }
    /**
     * <code>optional .maxpb.OdometerInfo odometer = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180, MAXIO
     * </pre>
     */
    public maxpb.MaxpbTelemetry.OdometerInfoOrBuilder getOdometerOrBuilder() {
      return odometer_;
    }

    public static final int SPEED_FIELD_NUMBER = 3;
    private maxpb.MaxpbTelemetry.SpeedInfo speed_;
    /**
     * <code>optional .maxpb.SpeedInfo speed = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180, MAXIO
     * </pre>
     */
    public boolean hasSpeed() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional .maxpb.SpeedInfo speed = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180, MAXIO
     * </pre>
     */
    public maxpb.MaxpbTelemetry.SpeedInfo getSpeed() {
      return speed_;
    }
    /**
     * <code>optional .maxpb.SpeedInfo speed = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180, MAXIO
     * </pre>
     */
    public maxpb.MaxpbTelemetry.SpeedInfoOrBuilder getSpeedOrBuilder() {
      return speed_;
    }

    public static final int RPM_FIELD_NUMBER = 4;
    private maxpb.MaxpbTelemetry.RpmInfo rpm_;
    /**
     * <code>optional .maxpb.RpmInfo rpm = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT162, MAXIO
     * </pre>
     */
    public boolean hasRpm() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional .maxpb.RpmInfo rpm = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT162, MAXIO
     * </pre>
     */
    public maxpb.MaxpbTelemetry.RpmInfo getRpm() {
      return rpm_;
    }
    /**
     * <code>optional .maxpb.RpmInfo rpm = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT142, MXT162, MAXIO
     * </pre>
     */
    public maxpb.MaxpbTelemetry.RpmInfoOrBuilder getRpmOrBuilder() {
      return rpm_;
    }

    public static final int ANGLES_FIELD_NUMBER = 5;
    private maxpb.MaxpbTelemetry.AngleInfo angles_;
    /**
     * <code>optional .maxpb.AngleInfo angles = 5;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162
     * </pre>
     */
    public boolean hasAngles() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional .maxpb.AngleInfo angles = 5;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.AngleInfo getAngles() {
      return angles_;
    }
    /**
     * <code>optional .maxpb.AngleInfo angles = 5;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.AngleInfoOrBuilder getAnglesOrBuilder() {
      return angles_;
    }

    public static final int FUEL_FIELD_NUMBER = 6;
    private maxpb.MaxpbTelemetry.FuelInfo fuel_;
    /**
     * <code>optional .maxpb.FuelInfo fuel = 6;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162, MAXIO
     * </pre>
     */
    public boolean hasFuel() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional .maxpb.FuelInfo fuel = 6;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162, MAXIO
     * </pre>
     */
    public maxpb.MaxpbTelemetry.FuelInfo getFuel() {
      return fuel_;
    }
    /**
     * <code>optional .maxpb.FuelInfo fuel = 6;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162, MAXIO
     * </pre>
     */
    public maxpb.MaxpbTelemetry.FuelInfoOrBuilder getFuelOrBuilder() {
      return fuel_;
    }

    public static final int ENGINE_FIELD_NUMBER = 7;
    private maxpb.MaxpbTelemetry.EngineInfo engine_;
    /**
     * <code>optional .maxpb.EngineInfo engine = 7;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162, MAXIO
     * </pre>
     */
    public boolean hasEngine() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional .maxpb.EngineInfo engine = 7;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162, MAXIO
     * </pre>
     */
    public maxpb.MaxpbTelemetry.EngineInfo getEngine() {
      return engine_;
    }
    /**
     * <code>optional .maxpb.EngineInfo engine = 7;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162, MAXIO
     * </pre>
     */
    public maxpb.MaxpbTelemetry.EngineInfoOrBuilder getEngineOrBuilder() {
      return engine_;
    }

    public static final int ENVIRONMENT_FIELD_NUMBER = 8;
    private maxpb.MaxpbTelemetry.EnvironmentInfo environment_;
    /**
     * <code>optional .maxpb.EnvironmentInfo environment = 8;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public boolean hasEnvironment() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional .maxpb.EnvironmentInfo environment = 8;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public maxpb.MaxpbTelemetry.EnvironmentInfo getEnvironment() {
      return environment_;
    }
    /**
     * <code>optional .maxpb.EnvironmentInfo environment = 8;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public maxpb.MaxpbTelemetry.EnvironmentInfoOrBuilder getEnvironmentOrBuilder() {
      return environment_;
    }

    public static final int ECU_FIELD_NUMBER = 9;
    private maxpb.MaxpbTelemetry.ECUInfo ecu_;
    /**
     * <code>optional .maxpb.ECUInfo ecu = 9;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162, MAXIO
     * </pre>
     */
    public boolean hasEcu() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional .maxpb.ECUInfo ecu = 9;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162, MAXIO
     * </pre>
     */
    public maxpb.MaxpbTelemetry.ECUInfo getEcu() {
      return ecu_;
    }
    /**
     * <code>optional .maxpb.ECUInfo ecu = 9;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT162, MAXIO
     * </pre>
     */
    public maxpb.MaxpbTelemetry.ECUInfoOrBuilder getEcuOrBuilder() {
      return ecu_;
    }

    public static final int DELTA_FIELD_NUMBER = 10;
    private java.util.List<maxpb.MaxpbTelemetryDelta.TelemetryDelta> delta_;
    /**
     * <code>repeated .maxpb.TelemetryDelta delta = 10;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public java.util.List<maxpb.MaxpbTelemetryDelta.TelemetryDelta> getDeltaList() {
      return delta_;
    }
    /**
     * <code>repeated .maxpb.TelemetryDelta delta = 10;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public java.util.List<? extends maxpb.MaxpbTelemetryDelta.TelemetryDeltaOrBuilder> 
        getDeltaOrBuilderList() {
      return delta_;
    }
    /**
     * <code>repeated .maxpb.TelemetryDelta delta = 10;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public int getDeltaCount() {
      return delta_.size();
    }
    /**
     * <code>repeated .maxpb.TelemetryDelta delta = 10;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetryDelta.TelemetryDelta getDelta(int index) {
      return delta_.get(index);
    }
    /**
     * <code>repeated .maxpb.TelemetryDelta delta = 10;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetryDelta.TelemetryDeltaOrBuilder getDeltaOrBuilder(
        int index) {
      return delta_.get(index);
    }

    private void initFields() {
      flags_ = maxpb.MaxpbTelemetry.TelemetryFlags.getDefaultInstance();
      odometer_ = maxpb.MaxpbTelemetry.OdometerInfo.getDefaultInstance();
      speed_ = maxpb.MaxpbTelemetry.SpeedInfo.getDefaultInstance();
      rpm_ = maxpb.MaxpbTelemetry.RpmInfo.getDefaultInstance();
      angles_ = maxpb.MaxpbTelemetry.AngleInfo.getDefaultInstance();
      fuel_ = maxpb.MaxpbTelemetry.FuelInfo.getDefaultInstance();
      engine_ = maxpb.MaxpbTelemetry.EngineInfo.getDefaultInstance();
      environment_ = maxpb.MaxpbTelemetry.EnvironmentInfo.getDefaultInstance();
      ecu_ = maxpb.MaxpbTelemetry.ECUInfo.getDefaultInstance();
      delta_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (hasOdometer()) {
        if (!getOdometer().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasSpeed()) {
        if (!getSpeed().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasRpm()) {
        if (!getRpm().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, flags_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, odometer_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(3, speed_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeMessage(4, rpm_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeMessage(5, angles_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeMessage(6, fuel_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeMessage(7, engine_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeMessage(8, environment_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeMessage(9, ecu_);
      }
      for (int i = 0; i < delta_.size(); i++) {
        output.writeMessage(10, delta_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, flags_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, odometer_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, speed_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, rpm_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, angles_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, fuel_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, engine_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, environment_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(9, ecu_);
      }
      for (int i = 0; i < delta_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(10, delta_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static maxpb.MaxpbTelemetry.TelemetryInfo parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static maxpb.MaxpbTelemetry.TelemetryInfo parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetry.TelemetryInfo parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static maxpb.MaxpbTelemetry.TelemetryInfo parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetry.TelemetryInfo parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static maxpb.MaxpbTelemetry.TelemetryInfo parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetry.TelemetryInfo parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static maxpb.MaxpbTelemetry.TelemetryInfo parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetry.TelemetryInfo parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static maxpb.MaxpbTelemetry.TelemetryInfo parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(maxpb.MaxpbTelemetry.TelemetryInfo prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code maxpb.TelemetryInfo}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:maxpb.TelemetryInfo)
        maxpb.MaxpbTelemetry.TelemetryInfoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return maxpb.MaxpbTelemetry.internal_static_maxpb_TelemetryInfo_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return maxpb.MaxpbTelemetry.internal_static_maxpb_TelemetryInfo_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                maxpb.MaxpbTelemetry.TelemetryInfo.class, maxpb.MaxpbTelemetry.TelemetryInfo.Builder.class);
      }

      // Construct using maxpb.MaxpbTelemetry.TelemetryInfo.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getFlagsFieldBuilder();
          getOdometerFieldBuilder();
          getSpeedFieldBuilder();
          getRpmFieldBuilder();
          getAnglesFieldBuilder();
          getFuelFieldBuilder();
          getEngineFieldBuilder();
          getEnvironmentFieldBuilder();
          getEcuFieldBuilder();
          getDeltaFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (flagsBuilder_ == null) {
          flags_ = maxpb.MaxpbTelemetry.TelemetryFlags.getDefaultInstance();
        } else {
          flagsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        if (odometerBuilder_ == null) {
          odometer_ = maxpb.MaxpbTelemetry.OdometerInfo.getDefaultInstance();
        } else {
          odometerBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        if (speedBuilder_ == null) {
          speed_ = maxpb.MaxpbTelemetry.SpeedInfo.getDefaultInstance();
        } else {
          speedBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        if (rpmBuilder_ == null) {
          rpm_ = maxpb.MaxpbTelemetry.RpmInfo.getDefaultInstance();
        } else {
          rpmBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        if (anglesBuilder_ == null) {
          angles_ = maxpb.MaxpbTelemetry.AngleInfo.getDefaultInstance();
        } else {
          anglesBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        if (fuelBuilder_ == null) {
          fuel_ = maxpb.MaxpbTelemetry.FuelInfo.getDefaultInstance();
        } else {
          fuelBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000020);
        if (engineBuilder_ == null) {
          engine_ = maxpb.MaxpbTelemetry.EngineInfo.getDefaultInstance();
        } else {
          engineBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000040);
        if (environmentBuilder_ == null) {
          environment_ = maxpb.MaxpbTelemetry.EnvironmentInfo.getDefaultInstance();
        } else {
          environmentBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000080);
        if (ecuBuilder_ == null) {
          ecu_ = maxpb.MaxpbTelemetry.ECUInfo.getDefaultInstance();
        } else {
          ecuBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000100);
        if (deltaBuilder_ == null) {
          delta_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000200);
        } else {
          deltaBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return maxpb.MaxpbTelemetry.internal_static_maxpb_TelemetryInfo_descriptor;
      }

      public maxpb.MaxpbTelemetry.TelemetryInfo getDefaultInstanceForType() {
        return maxpb.MaxpbTelemetry.TelemetryInfo.getDefaultInstance();
      }

      public maxpb.MaxpbTelemetry.TelemetryInfo build() {
        maxpb.MaxpbTelemetry.TelemetryInfo result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public maxpb.MaxpbTelemetry.TelemetryInfo buildPartial() {
        maxpb.MaxpbTelemetry.TelemetryInfo result = new maxpb.MaxpbTelemetry.TelemetryInfo(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (flagsBuilder_ == null) {
          result.flags_ = flags_;
        } else {
          result.flags_ = flagsBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        if (odometerBuilder_ == null) {
          result.odometer_ = odometer_;
        } else {
          result.odometer_ = odometerBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        if (speedBuilder_ == null) {
          result.speed_ = speed_;
        } else {
          result.speed_ = speedBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        if (rpmBuilder_ == null) {
          result.rpm_ = rpm_;
        } else {
          result.rpm_ = rpmBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        if (anglesBuilder_ == null) {
          result.angles_ = angles_;
        } else {
          result.angles_ = anglesBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        if (fuelBuilder_ == null) {
          result.fuel_ = fuel_;
        } else {
          result.fuel_ = fuelBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        if (engineBuilder_ == null) {
          result.engine_ = engine_;
        } else {
          result.engine_ = engineBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        if (environmentBuilder_ == null) {
          result.environment_ = environment_;
        } else {
          result.environment_ = environmentBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        if (ecuBuilder_ == null) {
          result.ecu_ = ecu_;
        } else {
          result.ecu_ = ecuBuilder_.build();
        }
        if (deltaBuilder_ == null) {
          if (((bitField0_ & 0x00000200) == 0x00000200)) {
            delta_ = java.util.Collections.unmodifiableList(delta_);
            bitField0_ = (bitField0_ & ~0x00000200);
          }
          result.delta_ = delta_;
        } else {
          result.delta_ = deltaBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof maxpb.MaxpbTelemetry.TelemetryInfo) {
          return mergeFrom((maxpb.MaxpbTelemetry.TelemetryInfo)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(maxpb.MaxpbTelemetry.TelemetryInfo other) {
        if (other == maxpb.MaxpbTelemetry.TelemetryInfo.getDefaultInstance()) return this;
        if (other.hasFlags()) {
          mergeFlags(other.getFlags());
        }
        if (other.hasOdometer()) {
          mergeOdometer(other.getOdometer());
        }
        if (other.hasSpeed()) {
          mergeSpeed(other.getSpeed());
        }
        if (other.hasRpm()) {
          mergeRpm(other.getRpm());
        }
        if (other.hasAngles()) {
          mergeAngles(other.getAngles());
        }
        if (other.hasFuel()) {
          mergeFuel(other.getFuel());
        }
        if (other.hasEngine()) {
          mergeEngine(other.getEngine());
        }
        if (other.hasEnvironment()) {
          mergeEnvironment(other.getEnvironment());
        }
        if (other.hasEcu()) {
          mergeEcu(other.getEcu());
        }
        if (deltaBuilder_ == null) {
          if (!other.delta_.isEmpty()) {
            if (delta_.isEmpty()) {
              delta_ = other.delta_;
              bitField0_ = (bitField0_ & ~0x00000200);
            } else {
              ensureDeltaIsMutable();
              delta_.addAll(other.delta_);
            }
            onChanged();
          }
        } else {
          if (!other.delta_.isEmpty()) {
            if (deltaBuilder_.isEmpty()) {
              deltaBuilder_.dispose();
              deltaBuilder_ = null;
              delta_ = other.delta_;
              bitField0_ = (bitField0_ & ~0x00000200);
              deltaBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getDeltaFieldBuilder() : null;
            } else {
              deltaBuilder_.addAllMessages(other.delta_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (hasOdometer()) {
          if (!getOdometer().isInitialized()) {
            
            return false;
          }
        }
        if (hasSpeed()) {
          if (!getSpeed().isInitialized()) {
            
            return false;
          }
        }
        if (hasRpm()) {
          if (!getRpm().isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        maxpb.MaxpbTelemetry.TelemetryInfo parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (maxpb.MaxpbTelemetry.TelemetryInfo) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private maxpb.MaxpbTelemetry.TelemetryFlags flags_ = maxpb.MaxpbTelemetry.TelemetryFlags.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.TelemetryFlags, maxpb.MaxpbTelemetry.TelemetryFlags.Builder, maxpb.MaxpbTelemetry.TelemetryFlagsOrBuilder> flagsBuilder_;
      /**
       * <code>optional .maxpb.TelemetryFlags flags = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180, MAXIO
       * </pre>
       */
      public boolean hasFlags() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .maxpb.TelemetryFlags flags = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180, MAXIO
       * </pre>
       */
      public maxpb.MaxpbTelemetry.TelemetryFlags getFlags() {
        if (flagsBuilder_ == null) {
          return flags_;
        } else {
          return flagsBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .maxpb.TelemetryFlags flags = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180, MAXIO
       * </pre>
       */
      public Builder setFlags(maxpb.MaxpbTelemetry.TelemetryFlags value) {
        if (flagsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          flags_ = value;
          onChanged();
        } else {
          flagsBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .maxpb.TelemetryFlags flags = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180, MAXIO
       * </pre>
       */
      public Builder setFlags(
          maxpb.MaxpbTelemetry.TelemetryFlags.Builder builderForValue) {
        if (flagsBuilder_ == null) {
          flags_ = builderForValue.build();
          onChanged();
        } else {
          flagsBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .maxpb.TelemetryFlags flags = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180, MAXIO
       * </pre>
       */
      public Builder mergeFlags(maxpb.MaxpbTelemetry.TelemetryFlags value) {
        if (flagsBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              flags_ != maxpb.MaxpbTelemetry.TelemetryFlags.getDefaultInstance()) {
            flags_ =
              maxpb.MaxpbTelemetry.TelemetryFlags.newBuilder(flags_).mergeFrom(value).buildPartial();
          } else {
            flags_ = value;
          }
          onChanged();
        } else {
          flagsBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .maxpb.TelemetryFlags flags = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180, MAXIO
       * </pre>
       */
      public Builder clearFlags() {
        if (flagsBuilder_ == null) {
          flags_ = maxpb.MaxpbTelemetry.TelemetryFlags.getDefaultInstance();
          onChanged();
        } else {
          flagsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>optional .maxpb.TelemetryFlags flags = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180, MAXIO
       * </pre>
       */
      public maxpb.MaxpbTelemetry.TelemetryFlags.Builder getFlagsBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getFlagsFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .maxpb.TelemetryFlags flags = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180, MAXIO
       * </pre>
       */
      public maxpb.MaxpbTelemetry.TelemetryFlagsOrBuilder getFlagsOrBuilder() {
        if (flagsBuilder_ != null) {
          return flagsBuilder_.getMessageOrBuilder();
        } else {
          return flags_;
        }
      }
      /**
       * <code>optional .maxpb.TelemetryFlags flags = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180, MAXIO
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.TelemetryFlags, maxpb.MaxpbTelemetry.TelemetryFlags.Builder, maxpb.MaxpbTelemetry.TelemetryFlagsOrBuilder> 
          getFlagsFieldBuilder() {
        if (flagsBuilder_ == null) {
          flagsBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              maxpb.MaxpbTelemetry.TelemetryFlags, maxpb.MaxpbTelemetry.TelemetryFlags.Builder, maxpb.MaxpbTelemetry.TelemetryFlagsOrBuilder>(
                  getFlags(),
                  getParentForChildren(),
                  isClean());
          flags_ = null;
        }
        return flagsBuilder_;
      }

      private maxpb.MaxpbTelemetry.OdometerInfo odometer_ = maxpb.MaxpbTelemetry.OdometerInfo.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.OdometerInfo, maxpb.MaxpbTelemetry.OdometerInfo.Builder, maxpb.MaxpbTelemetry.OdometerInfoOrBuilder> odometerBuilder_;
      /**
       * <code>optional .maxpb.OdometerInfo odometer = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180, MAXIO
       * </pre>
       */
      public boolean hasOdometer() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional .maxpb.OdometerInfo odometer = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180, MAXIO
       * </pre>
       */
      public maxpb.MaxpbTelemetry.OdometerInfo getOdometer() {
        if (odometerBuilder_ == null) {
          return odometer_;
        } else {
          return odometerBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .maxpb.OdometerInfo odometer = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180, MAXIO
       * </pre>
       */
      public Builder setOdometer(maxpb.MaxpbTelemetry.OdometerInfo value) {
        if (odometerBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          odometer_ = value;
          onChanged();
        } else {
          odometerBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .maxpb.OdometerInfo odometer = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180, MAXIO
       * </pre>
       */
      public Builder setOdometer(
          maxpb.MaxpbTelemetry.OdometerInfo.Builder builderForValue) {
        if (odometerBuilder_ == null) {
          odometer_ = builderForValue.build();
          onChanged();
        } else {
          odometerBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .maxpb.OdometerInfo odometer = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180, MAXIO
       * </pre>
       */
      public Builder mergeOdometer(maxpb.MaxpbTelemetry.OdometerInfo value) {
        if (odometerBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              odometer_ != maxpb.MaxpbTelemetry.OdometerInfo.getDefaultInstance()) {
            odometer_ =
              maxpb.MaxpbTelemetry.OdometerInfo.newBuilder(odometer_).mergeFrom(value).buildPartial();
          } else {
            odometer_ = value;
          }
          onChanged();
        } else {
          odometerBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .maxpb.OdometerInfo odometer = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180, MAXIO
       * </pre>
       */
      public Builder clearOdometer() {
        if (odometerBuilder_ == null) {
          odometer_ = maxpb.MaxpbTelemetry.OdometerInfo.getDefaultInstance();
          onChanged();
        } else {
          odometerBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      /**
       * <code>optional .maxpb.OdometerInfo odometer = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180, MAXIO
       * </pre>
       */
      public maxpb.MaxpbTelemetry.OdometerInfo.Builder getOdometerBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getOdometerFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .maxpb.OdometerInfo odometer = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180, MAXIO
       * </pre>
       */
      public maxpb.MaxpbTelemetry.OdometerInfoOrBuilder getOdometerOrBuilder() {
        if (odometerBuilder_ != null) {
          return odometerBuilder_.getMessageOrBuilder();
        } else {
          return odometer_;
        }
      }
      /**
       * <code>optional .maxpb.OdometerInfo odometer = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180, MAXIO
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.OdometerInfo, maxpb.MaxpbTelemetry.OdometerInfo.Builder, maxpb.MaxpbTelemetry.OdometerInfoOrBuilder> 
          getOdometerFieldBuilder() {
        if (odometerBuilder_ == null) {
          odometerBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              maxpb.MaxpbTelemetry.OdometerInfo, maxpb.MaxpbTelemetry.OdometerInfo.Builder, maxpb.MaxpbTelemetry.OdometerInfoOrBuilder>(
                  getOdometer(),
                  getParentForChildren(),
                  isClean());
          odometer_ = null;
        }
        return odometerBuilder_;
      }

      private maxpb.MaxpbTelemetry.SpeedInfo speed_ = maxpb.MaxpbTelemetry.SpeedInfo.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.SpeedInfo, maxpb.MaxpbTelemetry.SpeedInfo.Builder, maxpb.MaxpbTelemetry.SpeedInfoOrBuilder> speedBuilder_;
      /**
       * <code>optional .maxpb.SpeedInfo speed = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180, MAXIO
       * </pre>
       */
      public boolean hasSpeed() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional .maxpb.SpeedInfo speed = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180, MAXIO
       * </pre>
       */
      public maxpb.MaxpbTelemetry.SpeedInfo getSpeed() {
        if (speedBuilder_ == null) {
          return speed_;
        } else {
          return speedBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .maxpb.SpeedInfo speed = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180, MAXIO
       * </pre>
       */
      public Builder setSpeed(maxpb.MaxpbTelemetry.SpeedInfo value) {
        if (speedBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          speed_ = value;
          onChanged();
        } else {
          speedBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .maxpb.SpeedInfo speed = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180, MAXIO
       * </pre>
       */
      public Builder setSpeed(
          maxpb.MaxpbTelemetry.SpeedInfo.Builder builderForValue) {
        if (speedBuilder_ == null) {
          speed_ = builderForValue.build();
          onChanged();
        } else {
          speedBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .maxpb.SpeedInfo speed = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180, MAXIO
       * </pre>
       */
      public Builder mergeSpeed(maxpb.MaxpbTelemetry.SpeedInfo value) {
        if (speedBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004) &&
              speed_ != maxpb.MaxpbTelemetry.SpeedInfo.getDefaultInstance()) {
            speed_ =
              maxpb.MaxpbTelemetry.SpeedInfo.newBuilder(speed_).mergeFrom(value).buildPartial();
          } else {
            speed_ = value;
          }
          onChanged();
        } else {
          speedBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .maxpb.SpeedInfo speed = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180, MAXIO
       * </pre>
       */
      public Builder clearSpeed() {
        if (speedBuilder_ == null) {
          speed_ = maxpb.MaxpbTelemetry.SpeedInfo.getDefaultInstance();
          onChanged();
        } else {
          speedBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }
      /**
       * <code>optional .maxpb.SpeedInfo speed = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180, MAXIO
       * </pre>
       */
      public maxpb.MaxpbTelemetry.SpeedInfo.Builder getSpeedBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getSpeedFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .maxpb.SpeedInfo speed = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180, MAXIO
       * </pre>
       */
      public maxpb.MaxpbTelemetry.SpeedInfoOrBuilder getSpeedOrBuilder() {
        if (speedBuilder_ != null) {
          return speedBuilder_.getMessageOrBuilder();
        } else {
          return speed_;
        }
      }
      /**
       * <code>optional .maxpb.SpeedInfo speed = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT160, MXT162, MXT180, MAXIO
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.SpeedInfo, maxpb.MaxpbTelemetry.SpeedInfo.Builder, maxpb.MaxpbTelemetry.SpeedInfoOrBuilder> 
          getSpeedFieldBuilder() {
        if (speedBuilder_ == null) {
          speedBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              maxpb.MaxpbTelemetry.SpeedInfo, maxpb.MaxpbTelemetry.SpeedInfo.Builder, maxpb.MaxpbTelemetry.SpeedInfoOrBuilder>(
                  getSpeed(),
                  getParentForChildren(),
                  isClean());
          speed_ = null;
        }
        return speedBuilder_;
      }

      private maxpb.MaxpbTelemetry.RpmInfo rpm_ = maxpb.MaxpbTelemetry.RpmInfo.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.RpmInfo, maxpb.MaxpbTelemetry.RpmInfo.Builder, maxpb.MaxpbTelemetry.RpmInfoOrBuilder> rpmBuilder_;
      /**
       * <code>optional .maxpb.RpmInfo rpm = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT162, MAXIO
       * </pre>
       */
      public boolean hasRpm() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional .maxpb.RpmInfo rpm = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT162, MAXIO
       * </pre>
       */
      public maxpb.MaxpbTelemetry.RpmInfo getRpm() {
        if (rpmBuilder_ == null) {
          return rpm_;
        } else {
          return rpmBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .maxpb.RpmInfo rpm = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT162, MAXIO
       * </pre>
       */
      public Builder setRpm(maxpb.MaxpbTelemetry.RpmInfo value) {
        if (rpmBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          rpm_ = value;
          onChanged();
        } else {
          rpmBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .maxpb.RpmInfo rpm = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT162, MAXIO
       * </pre>
       */
      public Builder setRpm(
          maxpb.MaxpbTelemetry.RpmInfo.Builder builderForValue) {
        if (rpmBuilder_ == null) {
          rpm_ = builderForValue.build();
          onChanged();
        } else {
          rpmBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .maxpb.RpmInfo rpm = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT162, MAXIO
       * </pre>
       */
      public Builder mergeRpm(maxpb.MaxpbTelemetry.RpmInfo value) {
        if (rpmBuilder_ == null) {
          if (((bitField0_ & 0x00000008) == 0x00000008) &&
              rpm_ != maxpb.MaxpbTelemetry.RpmInfo.getDefaultInstance()) {
            rpm_ =
              maxpb.MaxpbTelemetry.RpmInfo.newBuilder(rpm_).mergeFrom(value).buildPartial();
          } else {
            rpm_ = value;
          }
          onChanged();
        } else {
          rpmBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .maxpb.RpmInfo rpm = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT162, MAXIO
       * </pre>
       */
      public Builder clearRpm() {
        if (rpmBuilder_ == null) {
          rpm_ = maxpb.MaxpbTelemetry.RpmInfo.getDefaultInstance();
          onChanged();
        } else {
          rpmBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }
      /**
       * <code>optional .maxpb.RpmInfo rpm = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT162, MAXIO
       * </pre>
       */
      public maxpb.MaxpbTelemetry.RpmInfo.Builder getRpmBuilder() {
        bitField0_ |= 0x00000008;
        onChanged();
        return getRpmFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .maxpb.RpmInfo rpm = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT162, MAXIO
       * </pre>
       */
      public maxpb.MaxpbTelemetry.RpmInfoOrBuilder getRpmOrBuilder() {
        if (rpmBuilder_ != null) {
          return rpmBuilder_.getMessageOrBuilder();
        } else {
          return rpm_;
        }
      }
      /**
       * <code>optional .maxpb.RpmInfo rpm = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT142, MXT162, MAXIO
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.RpmInfo, maxpb.MaxpbTelemetry.RpmInfo.Builder, maxpb.MaxpbTelemetry.RpmInfoOrBuilder> 
          getRpmFieldBuilder() {
        if (rpmBuilder_ == null) {
          rpmBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              maxpb.MaxpbTelemetry.RpmInfo, maxpb.MaxpbTelemetry.RpmInfo.Builder, maxpb.MaxpbTelemetry.RpmInfoOrBuilder>(
                  getRpm(),
                  getParentForChildren(),
                  isClean());
          rpm_ = null;
        }
        return rpmBuilder_;
      }

      private maxpb.MaxpbTelemetry.AngleInfo angles_ = maxpb.MaxpbTelemetry.AngleInfo.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.AngleInfo, maxpb.MaxpbTelemetry.AngleInfo.Builder, maxpb.MaxpbTelemetry.AngleInfoOrBuilder> anglesBuilder_;
      /**
       * <code>optional .maxpb.AngleInfo angles = 5;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162
       * </pre>
       */
      public boolean hasAngles() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional .maxpb.AngleInfo angles = 5;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.AngleInfo getAngles() {
        if (anglesBuilder_ == null) {
          return angles_;
        } else {
          return anglesBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .maxpb.AngleInfo angles = 5;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162
       * </pre>
       */
      public Builder setAngles(maxpb.MaxpbTelemetry.AngleInfo value) {
        if (anglesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          angles_ = value;
          onChanged();
        } else {
          anglesBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .maxpb.AngleInfo angles = 5;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162
       * </pre>
       */
      public Builder setAngles(
          maxpb.MaxpbTelemetry.AngleInfo.Builder builderForValue) {
        if (anglesBuilder_ == null) {
          angles_ = builderForValue.build();
          onChanged();
        } else {
          anglesBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .maxpb.AngleInfo angles = 5;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162
       * </pre>
       */
      public Builder mergeAngles(maxpb.MaxpbTelemetry.AngleInfo value) {
        if (anglesBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010) &&
              angles_ != maxpb.MaxpbTelemetry.AngleInfo.getDefaultInstance()) {
            angles_ =
              maxpb.MaxpbTelemetry.AngleInfo.newBuilder(angles_).mergeFrom(value).buildPartial();
          } else {
            angles_ = value;
          }
          onChanged();
        } else {
          anglesBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .maxpb.AngleInfo angles = 5;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162
       * </pre>
       */
      public Builder clearAngles() {
        if (anglesBuilder_ == null) {
          angles_ = maxpb.MaxpbTelemetry.AngleInfo.getDefaultInstance();
          onChanged();
        } else {
          anglesBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }
      /**
       * <code>optional .maxpb.AngleInfo angles = 5;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.AngleInfo.Builder getAnglesBuilder() {
        bitField0_ |= 0x00000010;
        onChanged();
        return getAnglesFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .maxpb.AngleInfo angles = 5;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.AngleInfoOrBuilder getAnglesOrBuilder() {
        if (anglesBuilder_ != null) {
          return anglesBuilder_.getMessageOrBuilder();
        } else {
          return angles_;
        }
      }
      /**
       * <code>optional .maxpb.AngleInfo angles = 5;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.AngleInfo, maxpb.MaxpbTelemetry.AngleInfo.Builder, maxpb.MaxpbTelemetry.AngleInfoOrBuilder> 
          getAnglesFieldBuilder() {
        if (anglesBuilder_ == null) {
          anglesBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              maxpb.MaxpbTelemetry.AngleInfo, maxpb.MaxpbTelemetry.AngleInfo.Builder, maxpb.MaxpbTelemetry.AngleInfoOrBuilder>(
                  getAngles(),
                  getParentForChildren(),
                  isClean());
          angles_ = null;
        }
        return anglesBuilder_;
      }

      private maxpb.MaxpbTelemetry.FuelInfo fuel_ = maxpb.MaxpbTelemetry.FuelInfo.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.FuelInfo, maxpb.MaxpbTelemetry.FuelInfo.Builder, maxpb.MaxpbTelemetry.FuelInfoOrBuilder> fuelBuilder_;
      /**
       * <code>optional .maxpb.FuelInfo fuel = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162, MAXIO
       * </pre>
       */
      public boolean hasFuel() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional .maxpb.FuelInfo fuel = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162, MAXIO
       * </pre>
       */
      public maxpb.MaxpbTelemetry.FuelInfo getFuel() {
        if (fuelBuilder_ == null) {
          return fuel_;
        } else {
          return fuelBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .maxpb.FuelInfo fuel = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162, MAXIO
       * </pre>
       */
      public Builder setFuel(maxpb.MaxpbTelemetry.FuelInfo value) {
        if (fuelBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          fuel_ = value;
          onChanged();
        } else {
          fuelBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .maxpb.FuelInfo fuel = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162, MAXIO
       * </pre>
       */
      public Builder setFuel(
          maxpb.MaxpbTelemetry.FuelInfo.Builder builderForValue) {
        if (fuelBuilder_ == null) {
          fuel_ = builderForValue.build();
          onChanged();
        } else {
          fuelBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .maxpb.FuelInfo fuel = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162, MAXIO
       * </pre>
       */
      public Builder mergeFuel(maxpb.MaxpbTelemetry.FuelInfo value) {
        if (fuelBuilder_ == null) {
          if (((bitField0_ & 0x00000020) == 0x00000020) &&
              fuel_ != maxpb.MaxpbTelemetry.FuelInfo.getDefaultInstance()) {
            fuel_ =
              maxpb.MaxpbTelemetry.FuelInfo.newBuilder(fuel_).mergeFrom(value).buildPartial();
          } else {
            fuel_ = value;
          }
          onChanged();
        } else {
          fuelBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .maxpb.FuelInfo fuel = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162, MAXIO
       * </pre>
       */
      public Builder clearFuel() {
        if (fuelBuilder_ == null) {
          fuel_ = maxpb.MaxpbTelemetry.FuelInfo.getDefaultInstance();
          onChanged();
        } else {
          fuelBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }
      /**
       * <code>optional .maxpb.FuelInfo fuel = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162, MAXIO
       * </pre>
       */
      public maxpb.MaxpbTelemetry.FuelInfo.Builder getFuelBuilder() {
        bitField0_ |= 0x00000020;
        onChanged();
        return getFuelFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .maxpb.FuelInfo fuel = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162, MAXIO
       * </pre>
       */
      public maxpb.MaxpbTelemetry.FuelInfoOrBuilder getFuelOrBuilder() {
        if (fuelBuilder_ != null) {
          return fuelBuilder_.getMessageOrBuilder();
        } else {
          return fuel_;
        }
      }
      /**
       * <code>optional .maxpb.FuelInfo fuel = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162, MAXIO
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.FuelInfo, maxpb.MaxpbTelemetry.FuelInfo.Builder, maxpb.MaxpbTelemetry.FuelInfoOrBuilder> 
          getFuelFieldBuilder() {
        if (fuelBuilder_ == null) {
          fuelBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              maxpb.MaxpbTelemetry.FuelInfo, maxpb.MaxpbTelemetry.FuelInfo.Builder, maxpb.MaxpbTelemetry.FuelInfoOrBuilder>(
                  getFuel(),
                  getParentForChildren(),
                  isClean());
          fuel_ = null;
        }
        return fuelBuilder_;
      }

      private maxpb.MaxpbTelemetry.EngineInfo engine_ = maxpb.MaxpbTelemetry.EngineInfo.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.EngineInfo, maxpb.MaxpbTelemetry.EngineInfo.Builder, maxpb.MaxpbTelemetry.EngineInfoOrBuilder> engineBuilder_;
      /**
       * <code>optional .maxpb.EngineInfo engine = 7;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162, MAXIO
       * </pre>
       */
      public boolean hasEngine() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional .maxpb.EngineInfo engine = 7;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162, MAXIO
       * </pre>
       */
      public maxpb.MaxpbTelemetry.EngineInfo getEngine() {
        if (engineBuilder_ == null) {
          return engine_;
        } else {
          return engineBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .maxpb.EngineInfo engine = 7;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162, MAXIO
       * </pre>
       */
      public Builder setEngine(maxpb.MaxpbTelemetry.EngineInfo value) {
        if (engineBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          engine_ = value;
          onChanged();
        } else {
          engineBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <code>optional .maxpb.EngineInfo engine = 7;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162, MAXIO
       * </pre>
       */
      public Builder setEngine(
          maxpb.MaxpbTelemetry.EngineInfo.Builder builderForValue) {
        if (engineBuilder_ == null) {
          engine_ = builderForValue.build();
          onChanged();
        } else {
          engineBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <code>optional .maxpb.EngineInfo engine = 7;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162, MAXIO
       * </pre>
       */
      public Builder mergeEngine(maxpb.MaxpbTelemetry.EngineInfo value) {
        if (engineBuilder_ == null) {
          if (((bitField0_ & 0x00000040) == 0x00000040) &&
              engine_ != maxpb.MaxpbTelemetry.EngineInfo.getDefaultInstance()) {
            engine_ =
              maxpb.MaxpbTelemetry.EngineInfo.newBuilder(engine_).mergeFrom(value).buildPartial();
          } else {
            engine_ = value;
          }
          onChanged();
        } else {
          engineBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <code>optional .maxpb.EngineInfo engine = 7;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162, MAXIO
       * </pre>
       */
      public Builder clearEngine() {
        if (engineBuilder_ == null) {
          engine_ = maxpb.MaxpbTelemetry.EngineInfo.getDefaultInstance();
          onChanged();
        } else {
          engineBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }
      /**
       * <code>optional .maxpb.EngineInfo engine = 7;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162, MAXIO
       * </pre>
       */
      public maxpb.MaxpbTelemetry.EngineInfo.Builder getEngineBuilder() {
        bitField0_ |= 0x00000040;
        onChanged();
        return getEngineFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .maxpb.EngineInfo engine = 7;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162, MAXIO
       * </pre>
       */
      public maxpb.MaxpbTelemetry.EngineInfoOrBuilder getEngineOrBuilder() {
        if (engineBuilder_ != null) {
          return engineBuilder_.getMessageOrBuilder();
        } else {
          return engine_;
        }
      }
      /**
       * <code>optional .maxpb.EngineInfo engine = 7;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162, MAXIO
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.EngineInfo, maxpb.MaxpbTelemetry.EngineInfo.Builder, maxpb.MaxpbTelemetry.EngineInfoOrBuilder> 
          getEngineFieldBuilder() {
        if (engineBuilder_ == null) {
          engineBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              maxpb.MaxpbTelemetry.EngineInfo, maxpb.MaxpbTelemetry.EngineInfo.Builder, maxpb.MaxpbTelemetry.EngineInfoOrBuilder>(
                  getEngine(),
                  getParentForChildren(),
                  isClean());
          engine_ = null;
        }
        return engineBuilder_;
      }

      private maxpb.MaxpbTelemetry.EnvironmentInfo environment_ = maxpb.MaxpbTelemetry.EnvironmentInfo.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.EnvironmentInfo, maxpb.MaxpbTelemetry.EnvironmentInfo.Builder, maxpb.MaxpbTelemetry.EnvironmentInfoOrBuilder> environmentBuilder_;
      /**
       * <code>optional .maxpb.EnvironmentInfo environment = 8;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public boolean hasEnvironment() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional .maxpb.EnvironmentInfo environment = 8;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public maxpb.MaxpbTelemetry.EnvironmentInfo getEnvironment() {
        if (environmentBuilder_ == null) {
          return environment_;
        } else {
          return environmentBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .maxpb.EnvironmentInfo environment = 8;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder setEnvironment(maxpb.MaxpbTelemetry.EnvironmentInfo value) {
        if (environmentBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          environment_ = value;
          onChanged();
        } else {
          environmentBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000080;
        return this;
      }
      /**
       * <code>optional .maxpb.EnvironmentInfo environment = 8;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder setEnvironment(
          maxpb.MaxpbTelemetry.EnvironmentInfo.Builder builderForValue) {
        if (environmentBuilder_ == null) {
          environment_ = builderForValue.build();
          onChanged();
        } else {
          environmentBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000080;
        return this;
      }
      /**
       * <code>optional .maxpb.EnvironmentInfo environment = 8;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder mergeEnvironment(maxpb.MaxpbTelemetry.EnvironmentInfo value) {
        if (environmentBuilder_ == null) {
          if (((bitField0_ & 0x00000080) == 0x00000080) &&
              environment_ != maxpb.MaxpbTelemetry.EnvironmentInfo.getDefaultInstance()) {
            environment_ =
              maxpb.MaxpbTelemetry.EnvironmentInfo.newBuilder(environment_).mergeFrom(value).buildPartial();
          } else {
            environment_ = value;
          }
          onChanged();
        } else {
          environmentBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000080;
        return this;
      }
      /**
       * <code>optional .maxpb.EnvironmentInfo environment = 8;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder clearEnvironment() {
        if (environmentBuilder_ == null) {
          environment_ = maxpb.MaxpbTelemetry.EnvironmentInfo.getDefaultInstance();
          onChanged();
        } else {
          environmentBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000080);
        return this;
      }
      /**
       * <code>optional .maxpb.EnvironmentInfo environment = 8;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public maxpb.MaxpbTelemetry.EnvironmentInfo.Builder getEnvironmentBuilder() {
        bitField0_ |= 0x00000080;
        onChanged();
        return getEnvironmentFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .maxpb.EnvironmentInfo environment = 8;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public maxpb.MaxpbTelemetry.EnvironmentInfoOrBuilder getEnvironmentOrBuilder() {
        if (environmentBuilder_ != null) {
          return environmentBuilder_.getMessageOrBuilder();
        } else {
          return environment_;
        }
      }
      /**
       * <code>optional .maxpb.EnvironmentInfo environment = 8;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.EnvironmentInfo, maxpb.MaxpbTelemetry.EnvironmentInfo.Builder, maxpb.MaxpbTelemetry.EnvironmentInfoOrBuilder> 
          getEnvironmentFieldBuilder() {
        if (environmentBuilder_ == null) {
          environmentBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              maxpb.MaxpbTelemetry.EnvironmentInfo, maxpb.MaxpbTelemetry.EnvironmentInfo.Builder, maxpb.MaxpbTelemetry.EnvironmentInfoOrBuilder>(
                  getEnvironment(),
                  getParentForChildren(),
                  isClean());
          environment_ = null;
        }
        return environmentBuilder_;
      }

      private maxpb.MaxpbTelemetry.ECUInfo ecu_ = maxpb.MaxpbTelemetry.ECUInfo.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.ECUInfo, maxpb.MaxpbTelemetry.ECUInfo.Builder, maxpb.MaxpbTelemetry.ECUInfoOrBuilder> ecuBuilder_;
      /**
       * <code>optional .maxpb.ECUInfo ecu = 9;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162, MAXIO
       * </pre>
       */
      public boolean hasEcu() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional .maxpb.ECUInfo ecu = 9;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162, MAXIO
       * </pre>
       */
      public maxpb.MaxpbTelemetry.ECUInfo getEcu() {
        if (ecuBuilder_ == null) {
          return ecu_;
        } else {
          return ecuBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .maxpb.ECUInfo ecu = 9;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162, MAXIO
       * </pre>
       */
      public Builder setEcu(maxpb.MaxpbTelemetry.ECUInfo value) {
        if (ecuBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ecu_ = value;
          onChanged();
        } else {
          ecuBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000100;
        return this;
      }
      /**
       * <code>optional .maxpb.ECUInfo ecu = 9;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162, MAXIO
       * </pre>
       */
      public Builder setEcu(
          maxpb.MaxpbTelemetry.ECUInfo.Builder builderForValue) {
        if (ecuBuilder_ == null) {
          ecu_ = builderForValue.build();
          onChanged();
        } else {
          ecuBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000100;
        return this;
      }
      /**
       * <code>optional .maxpb.ECUInfo ecu = 9;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162, MAXIO
       * </pre>
       */
      public Builder mergeEcu(maxpb.MaxpbTelemetry.ECUInfo value) {
        if (ecuBuilder_ == null) {
          if (((bitField0_ & 0x00000100) == 0x00000100) &&
              ecu_ != maxpb.MaxpbTelemetry.ECUInfo.getDefaultInstance()) {
            ecu_ =
              maxpb.MaxpbTelemetry.ECUInfo.newBuilder(ecu_).mergeFrom(value).buildPartial();
          } else {
            ecu_ = value;
          }
          onChanged();
        } else {
          ecuBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000100;
        return this;
      }
      /**
       * <code>optional .maxpb.ECUInfo ecu = 9;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162, MAXIO
       * </pre>
       */
      public Builder clearEcu() {
        if (ecuBuilder_ == null) {
          ecu_ = maxpb.MaxpbTelemetry.ECUInfo.getDefaultInstance();
          onChanged();
        } else {
          ecuBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000100);
        return this;
      }
      /**
       * <code>optional .maxpb.ECUInfo ecu = 9;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162, MAXIO
       * </pre>
       */
      public maxpb.MaxpbTelemetry.ECUInfo.Builder getEcuBuilder() {
        bitField0_ |= 0x00000100;
        onChanged();
        return getEcuFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .maxpb.ECUInfo ecu = 9;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162, MAXIO
       * </pre>
       */
      public maxpb.MaxpbTelemetry.ECUInfoOrBuilder getEcuOrBuilder() {
        if (ecuBuilder_ != null) {
          return ecuBuilder_.getMessageOrBuilder();
        } else {
          return ecu_;
        }
      }
      /**
       * <code>optional .maxpb.ECUInfo ecu = 9;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT162, MAXIO
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.ECUInfo, maxpb.MaxpbTelemetry.ECUInfo.Builder, maxpb.MaxpbTelemetry.ECUInfoOrBuilder> 
          getEcuFieldBuilder() {
        if (ecuBuilder_ == null) {
          ecuBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              maxpb.MaxpbTelemetry.ECUInfo, maxpb.MaxpbTelemetry.ECUInfo.Builder, maxpb.MaxpbTelemetry.ECUInfoOrBuilder>(
                  getEcu(),
                  getParentForChildren(),
                  isClean());
          ecu_ = null;
        }
        return ecuBuilder_;
      }

      private java.util.List<maxpb.MaxpbTelemetryDelta.TelemetryDelta> delta_ =
        java.util.Collections.emptyList();
      private void ensureDeltaIsMutable() {
        if (!((bitField0_ & 0x00000200) == 0x00000200)) {
          delta_ = new java.util.ArrayList<maxpb.MaxpbTelemetryDelta.TelemetryDelta>(delta_);
          bitField0_ |= 0x00000200;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          maxpb.MaxpbTelemetryDelta.TelemetryDelta, maxpb.MaxpbTelemetryDelta.TelemetryDelta.Builder, maxpb.MaxpbTelemetryDelta.TelemetryDeltaOrBuilder> deltaBuilder_;

      /**
       * <code>repeated .maxpb.TelemetryDelta delta = 10;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public java.util.List<maxpb.MaxpbTelemetryDelta.TelemetryDelta> getDeltaList() {
        if (deltaBuilder_ == null) {
          return java.util.Collections.unmodifiableList(delta_);
        } else {
          return deltaBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .maxpb.TelemetryDelta delta = 10;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public int getDeltaCount() {
        if (deltaBuilder_ == null) {
          return delta_.size();
        } else {
          return deltaBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .maxpb.TelemetryDelta delta = 10;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetryDelta.TelemetryDelta getDelta(int index) {
        if (deltaBuilder_ == null) {
          return delta_.get(index);
        } else {
          return deltaBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .maxpb.TelemetryDelta delta = 10;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setDelta(
          int index, maxpb.MaxpbTelemetryDelta.TelemetryDelta value) {
        if (deltaBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDeltaIsMutable();
          delta_.set(index, value);
          onChanged();
        } else {
          deltaBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .maxpb.TelemetryDelta delta = 10;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setDelta(
          int index, maxpb.MaxpbTelemetryDelta.TelemetryDelta.Builder builderForValue) {
        if (deltaBuilder_ == null) {
          ensureDeltaIsMutable();
          delta_.set(index, builderForValue.build());
          onChanged();
        } else {
          deltaBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .maxpb.TelemetryDelta delta = 10;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder addDelta(maxpb.MaxpbTelemetryDelta.TelemetryDelta value) {
        if (deltaBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDeltaIsMutable();
          delta_.add(value);
          onChanged();
        } else {
          deltaBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .maxpb.TelemetryDelta delta = 10;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder addDelta(
          int index, maxpb.MaxpbTelemetryDelta.TelemetryDelta value) {
        if (deltaBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDeltaIsMutable();
          delta_.add(index, value);
          onChanged();
        } else {
          deltaBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .maxpb.TelemetryDelta delta = 10;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder addDelta(
          maxpb.MaxpbTelemetryDelta.TelemetryDelta.Builder builderForValue) {
        if (deltaBuilder_ == null) {
          ensureDeltaIsMutable();
          delta_.add(builderForValue.build());
          onChanged();
        } else {
          deltaBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .maxpb.TelemetryDelta delta = 10;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder addDelta(
          int index, maxpb.MaxpbTelemetryDelta.TelemetryDelta.Builder builderForValue) {
        if (deltaBuilder_ == null) {
          ensureDeltaIsMutable();
          delta_.add(index, builderForValue.build());
          onChanged();
        } else {
          deltaBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .maxpb.TelemetryDelta delta = 10;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder addAllDelta(
          java.lang.Iterable<? extends maxpb.MaxpbTelemetryDelta.TelemetryDelta> values) {
        if (deltaBuilder_ == null) {
          ensureDeltaIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, delta_);
          onChanged();
        } else {
          deltaBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .maxpb.TelemetryDelta delta = 10;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearDelta() {
        if (deltaBuilder_ == null) {
          delta_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000200);
          onChanged();
        } else {
          deltaBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .maxpb.TelemetryDelta delta = 10;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder removeDelta(int index) {
        if (deltaBuilder_ == null) {
          ensureDeltaIsMutable();
          delta_.remove(index);
          onChanged();
        } else {
          deltaBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .maxpb.TelemetryDelta delta = 10;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetryDelta.TelemetryDelta.Builder getDeltaBuilder(
          int index) {
        return getDeltaFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .maxpb.TelemetryDelta delta = 10;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetryDelta.TelemetryDeltaOrBuilder getDeltaOrBuilder(
          int index) {
        if (deltaBuilder_ == null) {
          return delta_.get(index);  } else {
          return deltaBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .maxpb.TelemetryDelta delta = 10;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public java.util.List<? extends maxpb.MaxpbTelemetryDelta.TelemetryDeltaOrBuilder> 
           getDeltaOrBuilderList() {
        if (deltaBuilder_ != null) {
          return deltaBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(delta_);
        }
      }
      /**
       * <code>repeated .maxpb.TelemetryDelta delta = 10;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetryDelta.TelemetryDelta.Builder addDeltaBuilder() {
        return getDeltaFieldBuilder().addBuilder(
            maxpb.MaxpbTelemetryDelta.TelemetryDelta.getDefaultInstance());
      }
      /**
       * <code>repeated .maxpb.TelemetryDelta delta = 10;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetryDelta.TelemetryDelta.Builder addDeltaBuilder(
          int index) {
        return getDeltaFieldBuilder().addBuilder(
            index, maxpb.MaxpbTelemetryDelta.TelemetryDelta.getDefaultInstance());
      }
      /**
       * <code>repeated .maxpb.TelemetryDelta delta = 10;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public java.util.List<maxpb.MaxpbTelemetryDelta.TelemetryDelta.Builder> 
           getDeltaBuilderList() {
        return getDeltaFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          maxpb.MaxpbTelemetryDelta.TelemetryDelta, maxpb.MaxpbTelemetryDelta.TelemetryDelta.Builder, maxpb.MaxpbTelemetryDelta.TelemetryDeltaOrBuilder> 
          getDeltaFieldBuilder() {
        if (deltaBuilder_ == null) {
          deltaBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              maxpb.MaxpbTelemetryDelta.TelemetryDelta, maxpb.MaxpbTelemetryDelta.TelemetryDelta.Builder, maxpb.MaxpbTelemetryDelta.TelemetryDeltaOrBuilder>(
                  delta_,
                  ((bitField0_ & 0x00000200) == 0x00000200),
                  getParentForChildren(),
                  isClean());
          delta_ = null;
        }
        return deltaBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:maxpb.TelemetryInfo)
    }

    static {
      defaultInstance = new TelemetryInfo(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:maxpb.TelemetryInfo)
  }

  public interface SpeedsConfigOrBuilder extends
      // @@protoc_insertion_point(interface_extends:maxpb.SpeedsConfig)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional uint32 maxSpeed = 1;</code>
     *
     * <pre>
     *&#47; Km/h SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    boolean hasMaxSpeed();
    /**
     * <code>optional uint32 maxSpeed = 1;</code>
     *
     * <pre>
     *&#47; Km/h SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    int getMaxSpeed();

    /**
     * <code>optional uint32 maxRainySpeed = 2;</code>
     *
     * <pre>
     *&#47; Km/h SupportedBy: 
     * </pre>
     */
    boolean hasMaxRainySpeed();
    /**
     * <code>optional uint32 maxRainySpeed = 2;</code>
     *
     * <pre>
     *&#47; Km/h SupportedBy: 
     * </pre>
     */
    int getMaxRainySpeed();

    /**
     * <code>optional uint32 debounceOn = 3;</code>
     *
     * <pre>
     *&#47; Miliseconds SupportedBy: MXT162
     * </pre>
     */
    boolean hasDebounceOn();
    /**
     * <code>optional uint32 debounceOn = 3;</code>
     *
     * <pre>
     *&#47; Miliseconds SupportedBy: MXT162
     * </pre>
     */
    int getDebounceOn();

    /**
     * <code>optional uint32 histogramSlotsQty = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasHistogramSlotsQty();
    /**
     * <code>optional uint32 histogramSlotsQty = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    int getHistogramSlotsQty();

    /**
     * <code>optional uint32 histogramSlotsSize = 5;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasHistogramSlotsSize();
    /**
     * <code>optional uint32 histogramSlotsSize = 5;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    int getHistogramSlotsSize();
  }
  /**
   * Protobuf type {@code maxpb.SpeedsConfig}
   *
   * <pre>
   *&#47;Telemetry Speeds in Km/h
   * </pre>
   */
  public static final class SpeedsConfig extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:maxpb.SpeedsConfig)
      SpeedsConfigOrBuilder {
    // Use SpeedsConfig.newBuilder() to construct.
    private SpeedsConfig(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private SpeedsConfig(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final SpeedsConfig defaultInstance;
    public static SpeedsConfig getDefaultInstance() {
      return defaultInstance;
    }

    public SpeedsConfig getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private SpeedsConfig(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              maxSpeed_ = input.readUInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              maxRainySpeed_ = input.readUInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              debounceOn_ = input.readUInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              histogramSlotsQty_ = input.readUInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              histogramSlotsSize_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return maxpb.MaxpbTelemetry.internal_static_maxpb_SpeedsConfig_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return maxpb.MaxpbTelemetry.internal_static_maxpb_SpeedsConfig_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              maxpb.MaxpbTelemetry.SpeedsConfig.class, maxpb.MaxpbTelemetry.SpeedsConfig.Builder.class);
    }

    public static com.google.protobuf.Parser<SpeedsConfig> PARSER =
        new com.google.protobuf.AbstractParser<SpeedsConfig>() {
      public SpeedsConfig parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new SpeedsConfig(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<SpeedsConfig> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int MAXSPEED_FIELD_NUMBER = 1;
    private int maxSpeed_;
    /**
     * <code>optional uint32 maxSpeed = 1;</code>
     *
     * <pre>
     *&#47; Km/h SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    public boolean hasMaxSpeed() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional uint32 maxSpeed = 1;</code>
     *
     * <pre>
     *&#47; Km/h SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    public int getMaxSpeed() {
      return maxSpeed_;
    }

    public static final int MAXRAINYSPEED_FIELD_NUMBER = 2;
    private int maxRainySpeed_;
    /**
     * <code>optional uint32 maxRainySpeed = 2;</code>
     *
     * <pre>
     *&#47; Km/h SupportedBy: 
     * </pre>
     */
    public boolean hasMaxRainySpeed() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional uint32 maxRainySpeed = 2;</code>
     *
     * <pre>
     *&#47; Km/h SupportedBy: 
     * </pre>
     */
    public int getMaxRainySpeed() {
      return maxRainySpeed_;
    }

    public static final int DEBOUNCEON_FIELD_NUMBER = 3;
    private int debounceOn_;
    /**
     * <code>optional uint32 debounceOn = 3;</code>
     *
     * <pre>
     *&#47; Miliseconds SupportedBy: MXT162
     * </pre>
     */
    public boolean hasDebounceOn() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional uint32 debounceOn = 3;</code>
     *
     * <pre>
     *&#47; Miliseconds SupportedBy: MXT162
     * </pre>
     */
    public int getDebounceOn() {
      return debounceOn_;
    }

    public static final int HISTOGRAMSLOTSQTY_FIELD_NUMBER = 4;
    private int histogramSlotsQty_;
    /**
     * <code>optional uint32 histogramSlotsQty = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasHistogramSlotsQty() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional uint32 histogramSlotsQty = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public int getHistogramSlotsQty() {
      return histogramSlotsQty_;
    }

    public static final int HISTOGRAMSLOTSSIZE_FIELD_NUMBER = 5;
    private int histogramSlotsSize_;
    /**
     * <code>optional uint32 histogramSlotsSize = 5;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasHistogramSlotsSize() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional uint32 histogramSlotsSize = 5;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public int getHistogramSlotsSize() {
      return histogramSlotsSize_;
    }

    private void initFields() {
      maxSpeed_ = 0;
      maxRainySpeed_ = 0;
      debounceOn_ = 0;
      histogramSlotsQty_ = 0;
      histogramSlotsSize_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, maxSpeed_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, maxRainySpeed_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(3, debounceOn_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeUInt32(4, histogramSlotsQty_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeUInt32(5, histogramSlotsSize_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, maxSpeed_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, maxRainySpeed_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, debounceOn_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, histogramSlotsQty_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(5, histogramSlotsSize_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static maxpb.MaxpbTelemetry.SpeedsConfig parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static maxpb.MaxpbTelemetry.SpeedsConfig parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetry.SpeedsConfig parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static maxpb.MaxpbTelemetry.SpeedsConfig parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetry.SpeedsConfig parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static maxpb.MaxpbTelemetry.SpeedsConfig parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetry.SpeedsConfig parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static maxpb.MaxpbTelemetry.SpeedsConfig parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetry.SpeedsConfig parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static maxpb.MaxpbTelemetry.SpeedsConfig parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(maxpb.MaxpbTelemetry.SpeedsConfig prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code maxpb.SpeedsConfig}
     *
     * <pre>
     *&#47;Telemetry Speeds in Km/h
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:maxpb.SpeedsConfig)
        maxpb.MaxpbTelemetry.SpeedsConfigOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return maxpb.MaxpbTelemetry.internal_static_maxpb_SpeedsConfig_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return maxpb.MaxpbTelemetry.internal_static_maxpb_SpeedsConfig_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                maxpb.MaxpbTelemetry.SpeedsConfig.class, maxpb.MaxpbTelemetry.SpeedsConfig.Builder.class);
      }

      // Construct using maxpb.MaxpbTelemetry.SpeedsConfig.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        maxSpeed_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        maxRainySpeed_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        debounceOn_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        histogramSlotsQty_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        histogramSlotsSize_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return maxpb.MaxpbTelemetry.internal_static_maxpb_SpeedsConfig_descriptor;
      }

      public maxpb.MaxpbTelemetry.SpeedsConfig getDefaultInstanceForType() {
        return maxpb.MaxpbTelemetry.SpeedsConfig.getDefaultInstance();
      }

      public maxpb.MaxpbTelemetry.SpeedsConfig build() {
        maxpb.MaxpbTelemetry.SpeedsConfig result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public maxpb.MaxpbTelemetry.SpeedsConfig buildPartial() {
        maxpb.MaxpbTelemetry.SpeedsConfig result = new maxpb.MaxpbTelemetry.SpeedsConfig(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.maxSpeed_ = maxSpeed_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.maxRainySpeed_ = maxRainySpeed_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.debounceOn_ = debounceOn_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.histogramSlotsQty_ = histogramSlotsQty_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.histogramSlotsSize_ = histogramSlotsSize_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof maxpb.MaxpbTelemetry.SpeedsConfig) {
          return mergeFrom((maxpb.MaxpbTelemetry.SpeedsConfig)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(maxpb.MaxpbTelemetry.SpeedsConfig other) {
        if (other == maxpb.MaxpbTelemetry.SpeedsConfig.getDefaultInstance()) return this;
        if (other.hasMaxSpeed()) {
          setMaxSpeed(other.getMaxSpeed());
        }
        if (other.hasMaxRainySpeed()) {
          setMaxRainySpeed(other.getMaxRainySpeed());
        }
        if (other.hasDebounceOn()) {
          setDebounceOn(other.getDebounceOn());
        }
        if (other.hasHistogramSlotsQty()) {
          setHistogramSlotsQty(other.getHistogramSlotsQty());
        }
        if (other.hasHistogramSlotsSize()) {
          setHistogramSlotsSize(other.getHistogramSlotsSize());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        maxpb.MaxpbTelemetry.SpeedsConfig parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (maxpb.MaxpbTelemetry.SpeedsConfig) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int maxSpeed_ ;
      /**
       * <code>optional uint32 maxSpeed = 1;</code>
       *
       * <pre>
       *&#47; Km/h SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public boolean hasMaxSpeed() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint32 maxSpeed = 1;</code>
       *
       * <pre>
       *&#47; Km/h SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public int getMaxSpeed() {
        return maxSpeed_;
      }
      /**
       * <code>optional uint32 maxSpeed = 1;</code>
       *
       * <pre>
       *&#47; Km/h SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public Builder setMaxSpeed(int value) {
        bitField0_ |= 0x00000001;
        maxSpeed_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 maxSpeed = 1;</code>
       *
       * <pre>
       *&#47; Km/h SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public Builder clearMaxSpeed() {
        bitField0_ = (bitField0_ & ~0x00000001);
        maxSpeed_ = 0;
        onChanged();
        return this;
      }

      private int maxRainySpeed_ ;
      /**
       * <code>optional uint32 maxRainySpeed = 2;</code>
       *
       * <pre>
       *&#47; Km/h SupportedBy: 
       * </pre>
       */
      public boolean hasMaxRainySpeed() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional uint32 maxRainySpeed = 2;</code>
       *
       * <pre>
       *&#47; Km/h SupportedBy: 
       * </pre>
       */
      public int getMaxRainySpeed() {
        return maxRainySpeed_;
      }
      /**
       * <code>optional uint32 maxRainySpeed = 2;</code>
       *
       * <pre>
       *&#47; Km/h SupportedBy: 
       * </pre>
       */
      public Builder setMaxRainySpeed(int value) {
        bitField0_ |= 0x00000002;
        maxRainySpeed_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 maxRainySpeed = 2;</code>
       *
       * <pre>
       *&#47; Km/h SupportedBy: 
       * </pre>
       */
      public Builder clearMaxRainySpeed() {
        bitField0_ = (bitField0_ & ~0x00000002);
        maxRainySpeed_ = 0;
        onChanged();
        return this;
      }

      private int debounceOn_ ;
      /**
       * <code>optional uint32 debounceOn = 3;</code>
       *
       * <pre>
       *&#47; Miliseconds SupportedBy: MXT162
       * </pre>
       */
      public boolean hasDebounceOn() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional uint32 debounceOn = 3;</code>
       *
       * <pre>
       *&#47; Miliseconds SupportedBy: MXT162
       * </pre>
       */
      public int getDebounceOn() {
        return debounceOn_;
      }
      /**
       * <code>optional uint32 debounceOn = 3;</code>
       *
       * <pre>
       *&#47; Miliseconds SupportedBy: MXT162
       * </pre>
       */
      public Builder setDebounceOn(int value) {
        bitField0_ |= 0x00000004;
        debounceOn_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 debounceOn = 3;</code>
       *
       * <pre>
       *&#47; Miliseconds SupportedBy: MXT162
       * </pre>
       */
      public Builder clearDebounceOn() {
        bitField0_ = (bitField0_ & ~0x00000004);
        debounceOn_ = 0;
        onChanged();
        return this;
      }

      private int histogramSlotsQty_ ;
      /**
       * <code>optional uint32 histogramSlotsQty = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasHistogramSlotsQty() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional uint32 histogramSlotsQty = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public int getHistogramSlotsQty() {
        return histogramSlotsQty_;
      }
      /**
       * <code>optional uint32 histogramSlotsQty = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setHistogramSlotsQty(int value) {
        bitField0_ |= 0x00000008;
        histogramSlotsQty_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 histogramSlotsQty = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearHistogramSlotsQty() {
        bitField0_ = (bitField0_ & ~0x00000008);
        histogramSlotsQty_ = 0;
        onChanged();
        return this;
      }

      private int histogramSlotsSize_ ;
      /**
       * <code>optional uint32 histogramSlotsSize = 5;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasHistogramSlotsSize() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional uint32 histogramSlotsSize = 5;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public int getHistogramSlotsSize() {
        return histogramSlotsSize_;
      }
      /**
       * <code>optional uint32 histogramSlotsSize = 5;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setHistogramSlotsSize(int value) {
        bitField0_ |= 0x00000010;
        histogramSlotsSize_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 histogramSlotsSize = 5;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearHistogramSlotsSize() {
        bitField0_ = (bitField0_ & ~0x00000010);
        histogramSlotsSize_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:maxpb.SpeedsConfig)
    }

    static {
      defaultInstance = new SpeedsConfig(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:maxpb.SpeedsConfig)
  }

  public interface TimersConfigOrBuilder extends
      // @@protoc_insertion_point(interface_extends:maxpb.TimersConfig)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional uint32 stoppedExcess = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    boolean hasStoppedExcess();
    /**
     * <code>optional uint32 stoppedExcess = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    int getStoppedExcess();
  }
  /**
   * Protobuf type {@code maxpb.TimersConfig}
   *
   * <pre>
   *&#47;Telemetry timers in seconds
   * </pre>
   */
  public static final class TimersConfig extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:maxpb.TimersConfig)
      TimersConfigOrBuilder {
    // Use TimersConfig.newBuilder() to construct.
    private TimersConfig(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private TimersConfig(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final TimersConfig defaultInstance;
    public static TimersConfig getDefaultInstance() {
      return defaultInstance;
    }

    public TimersConfig getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private TimersConfig(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              stoppedExcess_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return maxpb.MaxpbTelemetry.internal_static_maxpb_TimersConfig_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return maxpb.MaxpbTelemetry.internal_static_maxpb_TimersConfig_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              maxpb.MaxpbTelemetry.TimersConfig.class, maxpb.MaxpbTelemetry.TimersConfig.Builder.class);
    }

    public static com.google.protobuf.Parser<TimersConfig> PARSER =
        new com.google.protobuf.AbstractParser<TimersConfig>() {
      public TimersConfig parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new TimersConfig(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<TimersConfig> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int STOPPEDEXCESS_FIELD_NUMBER = 1;
    private int stoppedExcess_;
    /**
     * <code>optional uint32 stoppedExcess = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    public boolean hasStoppedExcess() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional uint32 stoppedExcess = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    public int getStoppedExcess() {
      return stoppedExcess_;
    }

    private void initFields() {
      stoppedExcess_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, stoppedExcess_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, stoppedExcess_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static maxpb.MaxpbTelemetry.TimersConfig parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static maxpb.MaxpbTelemetry.TimersConfig parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetry.TimersConfig parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static maxpb.MaxpbTelemetry.TimersConfig parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetry.TimersConfig parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static maxpb.MaxpbTelemetry.TimersConfig parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetry.TimersConfig parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static maxpb.MaxpbTelemetry.TimersConfig parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetry.TimersConfig parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static maxpb.MaxpbTelemetry.TimersConfig parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(maxpb.MaxpbTelemetry.TimersConfig prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code maxpb.TimersConfig}
     *
     * <pre>
     *&#47;Telemetry timers in seconds
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:maxpb.TimersConfig)
        maxpb.MaxpbTelemetry.TimersConfigOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return maxpb.MaxpbTelemetry.internal_static_maxpb_TimersConfig_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return maxpb.MaxpbTelemetry.internal_static_maxpb_TimersConfig_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                maxpb.MaxpbTelemetry.TimersConfig.class, maxpb.MaxpbTelemetry.TimersConfig.Builder.class);
      }

      // Construct using maxpb.MaxpbTelemetry.TimersConfig.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        stoppedExcess_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return maxpb.MaxpbTelemetry.internal_static_maxpb_TimersConfig_descriptor;
      }

      public maxpb.MaxpbTelemetry.TimersConfig getDefaultInstanceForType() {
        return maxpb.MaxpbTelemetry.TimersConfig.getDefaultInstance();
      }

      public maxpb.MaxpbTelemetry.TimersConfig build() {
        maxpb.MaxpbTelemetry.TimersConfig result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public maxpb.MaxpbTelemetry.TimersConfig buildPartial() {
        maxpb.MaxpbTelemetry.TimersConfig result = new maxpb.MaxpbTelemetry.TimersConfig(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.stoppedExcess_ = stoppedExcess_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof maxpb.MaxpbTelemetry.TimersConfig) {
          return mergeFrom((maxpb.MaxpbTelemetry.TimersConfig)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(maxpb.MaxpbTelemetry.TimersConfig other) {
        if (other == maxpb.MaxpbTelemetry.TimersConfig.getDefaultInstance()) return this;
        if (other.hasStoppedExcess()) {
          setStoppedExcess(other.getStoppedExcess());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        maxpb.MaxpbTelemetry.TimersConfig parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (maxpb.MaxpbTelemetry.TimersConfig) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int stoppedExcess_ ;
      /**
       * <code>optional uint32 stoppedExcess = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public boolean hasStoppedExcess() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint32 stoppedExcess = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public int getStoppedExcess() {
        return stoppedExcess_;
      }
      /**
       * <code>optional uint32 stoppedExcess = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public Builder setStoppedExcess(int value) {
        bitField0_ |= 0x00000001;
        stoppedExcess_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 stoppedExcess = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public Builder clearStoppedExcess() {
        bitField0_ = (bitField0_ & ~0x00000001);
        stoppedExcess_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:maxpb.TimersConfig)
    }

    static {
      defaultInstance = new TimersConfig(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:maxpb.TimersConfig)
  }

  public interface GSensorAlarmConfigOrBuilder extends
      // @@protoc_insertion_point(interface_extends:maxpb.GSensorAlarmConfig)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional uint32 trigger = 1;</code>
     *
     * <pre>
     *&#47; mG (Note: 1 mG = 0,0098 m/s2) SupportedBy: MXT162
     * </pre>
     */
    boolean hasTrigger();
    /**
     * <code>optional uint32 trigger = 1;</code>
     *
     * <pre>
     *&#47; mG (Note: 1 mG = 0,0098 m/s2) SupportedBy: MXT162
     * </pre>
     */
    int getTrigger();

    /**
     * <code>optional uint32 debounce = 2;</code>
     *
     * <pre>
     *&#47; Miliseconds SupportedBy: MXT162
     * </pre>
     */
    boolean hasDebounce();
    /**
     * <code>optional uint32 debounce = 2;</code>
     *
     * <pre>
     *&#47; Miliseconds SupportedBy: MXT162
     * </pre>
     */
    int getDebounce();
  }
  /**
   * Protobuf type {@code maxpb.GSensorAlarmConfig}
   */
  public static final class GSensorAlarmConfig extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:maxpb.GSensorAlarmConfig)
      GSensorAlarmConfigOrBuilder {
    // Use GSensorAlarmConfig.newBuilder() to construct.
    private GSensorAlarmConfig(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private GSensorAlarmConfig(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final GSensorAlarmConfig defaultInstance;
    public static GSensorAlarmConfig getDefaultInstance() {
      return defaultInstance;
    }

    public GSensorAlarmConfig getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private GSensorAlarmConfig(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              trigger_ = input.readUInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              debounce_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return maxpb.MaxpbTelemetry.internal_static_maxpb_GSensorAlarmConfig_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return maxpb.MaxpbTelemetry.internal_static_maxpb_GSensorAlarmConfig_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              maxpb.MaxpbTelemetry.GSensorAlarmConfig.class, maxpb.MaxpbTelemetry.GSensorAlarmConfig.Builder.class);
    }

    public static com.google.protobuf.Parser<GSensorAlarmConfig> PARSER =
        new com.google.protobuf.AbstractParser<GSensorAlarmConfig>() {
      public GSensorAlarmConfig parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new GSensorAlarmConfig(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<GSensorAlarmConfig> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int TRIGGER_FIELD_NUMBER = 1;
    private int trigger_;
    /**
     * <code>optional uint32 trigger = 1;</code>
     *
     * <pre>
     *&#47; mG (Note: 1 mG = 0,0098 m/s2) SupportedBy: MXT162
     * </pre>
     */
    public boolean hasTrigger() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional uint32 trigger = 1;</code>
     *
     * <pre>
     *&#47; mG (Note: 1 mG = 0,0098 m/s2) SupportedBy: MXT162
     * </pre>
     */
    public int getTrigger() {
      return trigger_;
    }

    public static final int DEBOUNCE_FIELD_NUMBER = 2;
    private int debounce_;
    /**
     * <code>optional uint32 debounce = 2;</code>
     *
     * <pre>
     *&#47; Miliseconds SupportedBy: MXT162
     * </pre>
     */
    public boolean hasDebounce() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional uint32 debounce = 2;</code>
     *
     * <pre>
     *&#47; Miliseconds SupportedBy: MXT162
     * </pre>
     */
    public int getDebounce() {
      return debounce_;
    }

    private void initFields() {
      trigger_ = 0;
      debounce_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, trigger_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, debounce_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, trigger_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, debounce_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static maxpb.MaxpbTelemetry.GSensorAlarmConfig parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static maxpb.MaxpbTelemetry.GSensorAlarmConfig parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetry.GSensorAlarmConfig parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static maxpb.MaxpbTelemetry.GSensorAlarmConfig parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetry.GSensorAlarmConfig parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static maxpb.MaxpbTelemetry.GSensorAlarmConfig parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetry.GSensorAlarmConfig parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static maxpb.MaxpbTelemetry.GSensorAlarmConfig parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetry.GSensorAlarmConfig parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static maxpb.MaxpbTelemetry.GSensorAlarmConfig parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(maxpb.MaxpbTelemetry.GSensorAlarmConfig prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code maxpb.GSensorAlarmConfig}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:maxpb.GSensorAlarmConfig)
        maxpb.MaxpbTelemetry.GSensorAlarmConfigOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return maxpb.MaxpbTelemetry.internal_static_maxpb_GSensorAlarmConfig_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return maxpb.MaxpbTelemetry.internal_static_maxpb_GSensorAlarmConfig_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                maxpb.MaxpbTelemetry.GSensorAlarmConfig.class, maxpb.MaxpbTelemetry.GSensorAlarmConfig.Builder.class);
      }

      // Construct using maxpb.MaxpbTelemetry.GSensorAlarmConfig.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        trigger_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        debounce_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return maxpb.MaxpbTelemetry.internal_static_maxpb_GSensorAlarmConfig_descriptor;
      }

      public maxpb.MaxpbTelemetry.GSensorAlarmConfig getDefaultInstanceForType() {
        return maxpb.MaxpbTelemetry.GSensorAlarmConfig.getDefaultInstance();
      }

      public maxpb.MaxpbTelemetry.GSensorAlarmConfig build() {
        maxpb.MaxpbTelemetry.GSensorAlarmConfig result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public maxpb.MaxpbTelemetry.GSensorAlarmConfig buildPartial() {
        maxpb.MaxpbTelemetry.GSensorAlarmConfig result = new maxpb.MaxpbTelemetry.GSensorAlarmConfig(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.trigger_ = trigger_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.debounce_ = debounce_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof maxpb.MaxpbTelemetry.GSensorAlarmConfig) {
          return mergeFrom((maxpb.MaxpbTelemetry.GSensorAlarmConfig)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(maxpb.MaxpbTelemetry.GSensorAlarmConfig other) {
        if (other == maxpb.MaxpbTelemetry.GSensorAlarmConfig.getDefaultInstance()) return this;
        if (other.hasTrigger()) {
          setTrigger(other.getTrigger());
        }
        if (other.hasDebounce()) {
          setDebounce(other.getDebounce());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        maxpb.MaxpbTelemetry.GSensorAlarmConfig parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (maxpb.MaxpbTelemetry.GSensorAlarmConfig) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int trigger_ ;
      /**
       * <code>optional uint32 trigger = 1;</code>
       *
       * <pre>
       *&#47; mG (Note: 1 mG = 0,0098 m/s2) SupportedBy: MXT162
       * </pre>
       */
      public boolean hasTrigger() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint32 trigger = 1;</code>
       *
       * <pre>
       *&#47; mG (Note: 1 mG = 0,0098 m/s2) SupportedBy: MXT162
       * </pre>
       */
      public int getTrigger() {
        return trigger_;
      }
      /**
       * <code>optional uint32 trigger = 1;</code>
       *
       * <pre>
       *&#47; mG (Note: 1 mG = 0,0098 m/s2) SupportedBy: MXT162
       * </pre>
       */
      public Builder setTrigger(int value) {
        bitField0_ |= 0x00000001;
        trigger_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 trigger = 1;</code>
       *
       * <pre>
       *&#47; mG (Note: 1 mG = 0,0098 m/s2) SupportedBy: MXT162
       * </pre>
       */
      public Builder clearTrigger() {
        bitField0_ = (bitField0_ & ~0x00000001);
        trigger_ = 0;
        onChanged();
        return this;
      }

      private int debounce_ ;
      /**
       * <code>optional uint32 debounce = 2;</code>
       *
       * <pre>
       *&#47; Miliseconds SupportedBy: MXT162
       * </pre>
       */
      public boolean hasDebounce() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional uint32 debounce = 2;</code>
       *
       * <pre>
       *&#47; Miliseconds SupportedBy: MXT162
       * </pre>
       */
      public int getDebounce() {
        return debounce_;
      }
      /**
       * <code>optional uint32 debounce = 2;</code>
       *
       * <pre>
       *&#47; Miliseconds SupportedBy: MXT162
       * </pre>
       */
      public Builder setDebounce(int value) {
        bitField0_ |= 0x00000002;
        debounce_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 debounce = 2;</code>
       *
       * <pre>
       *&#47; Miliseconds SupportedBy: MXT162
       * </pre>
       */
      public Builder clearDebounce() {
        bitField0_ = (bitField0_ & ~0x00000002);
        debounce_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:maxpb.GSensorAlarmConfig)
    }

    static {
      defaultInstance = new GSensorAlarmConfig(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:maxpb.GSensorAlarmConfig)
  }

  public interface RpmConfigOrBuilder extends
      // @@protoc_insertion_point(interface_extends:maxpb.RpmConfig)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional uint32 minBlueRpm = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    boolean hasMinBlueRpm();
    /**
     * <code>optional uint32 minBlueRpm = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    int getMinBlueRpm();

    /**
     * <code>optional uint32 maxBlueRpm = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    boolean hasMaxBlueRpm();
    /**
     * <code>optional uint32 maxBlueRpm = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    int getMaxBlueRpm();

    /**
     * <code>optional uint32 minGreenRpm = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    boolean hasMinGreenRpm();
    /**
     * <code>optional uint32 minGreenRpm = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    int getMinGreenRpm();

    /**
     * <code>optional uint32 maxGreenRpm = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    boolean hasMaxGreenRpm();
    /**
     * <code>optional uint32 maxGreenRpm = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    int getMaxGreenRpm();

    /**
     * <code>optional uint32 minRedRpm = 5;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    boolean hasMinRedRpm();
    /**
     * <code>optional uint32 minRedRpm = 5;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    int getMinRedRpm();

    /**
     * <code>optional uint32 histogramSlotsQty = 6;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    boolean hasHistogramSlotsQty();
    /**
     * <code>optional uint32 histogramSlotsQty = 6;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    int getHistogramSlotsQty();

    /**
     * <code>optional uint32 histogramSlotsSize = 7;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    boolean hasHistogramSlotsSize();
    /**
     * <code>optional uint32 histogramSlotsSize = 7;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    int getHistogramSlotsSize();
  }
  /**
   * Protobuf type {@code maxpb.RpmConfig}
   */
  public static final class RpmConfig extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:maxpb.RpmConfig)
      RpmConfigOrBuilder {
    // Use RpmConfig.newBuilder() to construct.
    private RpmConfig(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private RpmConfig(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final RpmConfig defaultInstance;
    public static RpmConfig getDefaultInstance() {
      return defaultInstance;
    }

    public RpmConfig getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private RpmConfig(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              minBlueRpm_ = input.readUInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              maxBlueRpm_ = input.readUInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              minGreenRpm_ = input.readUInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              maxGreenRpm_ = input.readUInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              minRedRpm_ = input.readUInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              histogramSlotsQty_ = input.readUInt32();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              histogramSlotsSize_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return maxpb.MaxpbTelemetry.internal_static_maxpb_RpmConfig_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return maxpb.MaxpbTelemetry.internal_static_maxpb_RpmConfig_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              maxpb.MaxpbTelemetry.RpmConfig.class, maxpb.MaxpbTelemetry.RpmConfig.Builder.class);
    }

    public static com.google.protobuf.Parser<RpmConfig> PARSER =
        new com.google.protobuf.AbstractParser<RpmConfig>() {
      public RpmConfig parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new RpmConfig(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<RpmConfig> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int MINBLUERPM_FIELD_NUMBER = 1;
    private int minBlueRpm_;
    /**
     * <code>optional uint32 minBlueRpm = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public boolean hasMinBlueRpm() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional uint32 minBlueRpm = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public int getMinBlueRpm() {
      return minBlueRpm_;
    }

    public static final int MAXBLUERPM_FIELD_NUMBER = 2;
    private int maxBlueRpm_;
    /**
     * <code>optional uint32 maxBlueRpm = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public boolean hasMaxBlueRpm() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional uint32 maxBlueRpm = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public int getMaxBlueRpm() {
      return maxBlueRpm_;
    }

    public static final int MINGREENRPM_FIELD_NUMBER = 3;
    private int minGreenRpm_;
    /**
     * <code>optional uint32 minGreenRpm = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public boolean hasMinGreenRpm() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional uint32 minGreenRpm = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public int getMinGreenRpm() {
      return minGreenRpm_;
    }

    public static final int MAXGREENRPM_FIELD_NUMBER = 4;
    private int maxGreenRpm_;
    /**
     * <code>optional uint32 maxGreenRpm = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public boolean hasMaxGreenRpm() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional uint32 maxGreenRpm = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public int getMaxGreenRpm() {
      return maxGreenRpm_;
    }

    public static final int MINREDRPM_FIELD_NUMBER = 5;
    private int minRedRpm_;
    /**
     * <code>optional uint32 minRedRpm = 5;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public boolean hasMinRedRpm() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional uint32 minRedRpm = 5;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public int getMinRedRpm() {
      return minRedRpm_;
    }

    public static final int HISTOGRAMSLOTSQTY_FIELD_NUMBER = 6;
    private int histogramSlotsQty_;
    /**
     * <code>optional uint32 histogramSlotsQty = 6;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public boolean hasHistogramSlotsQty() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional uint32 histogramSlotsQty = 6;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public int getHistogramSlotsQty() {
      return histogramSlotsQty_;
    }

    public static final int HISTOGRAMSLOTSSIZE_FIELD_NUMBER = 7;
    private int histogramSlotsSize_;
    /**
     * <code>optional uint32 histogramSlotsSize = 7;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public boolean hasHistogramSlotsSize() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional uint32 histogramSlotsSize = 7;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public int getHistogramSlotsSize() {
      return histogramSlotsSize_;
    }

    private void initFields() {
      minBlueRpm_ = 0;
      maxBlueRpm_ = 0;
      minGreenRpm_ = 0;
      maxGreenRpm_ = 0;
      minRedRpm_ = 0;
      histogramSlotsQty_ = 0;
      histogramSlotsSize_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, minBlueRpm_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, maxBlueRpm_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(3, minGreenRpm_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeUInt32(4, maxGreenRpm_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeUInt32(5, minRedRpm_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeUInt32(6, histogramSlotsQty_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeUInt32(7, histogramSlotsSize_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, minBlueRpm_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, maxBlueRpm_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, minGreenRpm_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, maxGreenRpm_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(5, minRedRpm_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(6, histogramSlotsQty_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(7, histogramSlotsSize_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static maxpb.MaxpbTelemetry.RpmConfig parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static maxpb.MaxpbTelemetry.RpmConfig parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetry.RpmConfig parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static maxpb.MaxpbTelemetry.RpmConfig parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetry.RpmConfig parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static maxpb.MaxpbTelemetry.RpmConfig parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetry.RpmConfig parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static maxpb.MaxpbTelemetry.RpmConfig parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetry.RpmConfig parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static maxpb.MaxpbTelemetry.RpmConfig parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(maxpb.MaxpbTelemetry.RpmConfig prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code maxpb.RpmConfig}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:maxpb.RpmConfig)
        maxpb.MaxpbTelemetry.RpmConfigOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return maxpb.MaxpbTelemetry.internal_static_maxpb_RpmConfig_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return maxpb.MaxpbTelemetry.internal_static_maxpb_RpmConfig_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                maxpb.MaxpbTelemetry.RpmConfig.class, maxpb.MaxpbTelemetry.RpmConfig.Builder.class);
      }

      // Construct using maxpb.MaxpbTelemetry.RpmConfig.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        minBlueRpm_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        maxBlueRpm_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        minGreenRpm_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        maxGreenRpm_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        minRedRpm_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        histogramSlotsQty_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        histogramSlotsSize_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return maxpb.MaxpbTelemetry.internal_static_maxpb_RpmConfig_descriptor;
      }

      public maxpb.MaxpbTelemetry.RpmConfig getDefaultInstanceForType() {
        return maxpb.MaxpbTelemetry.RpmConfig.getDefaultInstance();
      }

      public maxpb.MaxpbTelemetry.RpmConfig build() {
        maxpb.MaxpbTelemetry.RpmConfig result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public maxpb.MaxpbTelemetry.RpmConfig buildPartial() {
        maxpb.MaxpbTelemetry.RpmConfig result = new maxpb.MaxpbTelemetry.RpmConfig(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.minBlueRpm_ = minBlueRpm_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.maxBlueRpm_ = maxBlueRpm_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.minGreenRpm_ = minGreenRpm_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.maxGreenRpm_ = maxGreenRpm_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.minRedRpm_ = minRedRpm_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.histogramSlotsQty_ = histogramSlotsQty_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.histogramSlotsSize_ = histogramSlotsSize_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof maxpb.MaxpbTelemetry.RpmConfig) {
          return mergeFrom((maxpb.MaxpbTelemetry.RpmConfig)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(maxpb.MaxpbTelemetry.RpmConfig other) {
        if (other == maxpb.MaxpbTelemetry.RpmConfig.getDefaultInstance()) return this;
        if (other.hasMinBlueRpm()) {
          setMinBlueRpm(other.getMinBlueRpm());
        }
        if (other.hasMaxBlueRpm()) {
          setMaxBlueRpm(other.getMaxBlueRpm());
        }
        if (other.hasMinGreenRpm()) {
          setMinGreenRpm(other.getMinGreenRpm());
        }
        if (other.hasMaxGreenRpm()) {
          setMaxGreenRpm(other.getMaxGreenRpm());
        }
        if (other.hasMinRedRpm()) {
          setMinRedRpm(other.getMinRedRpm());
        }
        if (other.hasHistogramSlotsQty()) {
          setHistogramSlotsQty(other.getHistogramSlotsQty());
        }
        if (other.hasHistogramSlotsSize()) {
          setHistogramSlotsSize(other.getHistogramSlotsSize());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        maxpb.MaxpbTelemetry.RpmConfig parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (maxpb.MaxpbTelemetry.RpmConfig) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int minBlueRpm_ ;
      /**
       * <code>optional uint32 minBlueRpm = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public boolean hasMinBlueRpm() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint32 minBlueRpm = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public int getMinBlueRpm() {
        return minBlueRpm_;
      }
      /**
       * <code>optional uint32 minBlueRpm = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder setMinBlueRpm(int value) {
        bitField0_ |= 0x00000001;
        minBlueRpm_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 minBlueRpm = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder clearMinBlueRpm() {
        bitField0_ = (bitField0_ & ~0x00000001);
        minBlueRpm_ = 0;
        onChanged();
        return this;
      }

      private int maxBlueRpm_ ;
      /**
       * <code>optional uint32 maxBlueRpm = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public boolean hasMaxBlueRpm() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional uint32 maxBlueRpm = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public int getMaxBlueRpm() {
        return maxBlueRpm_;
      }
      /**
       * <code>optional uint32 maxBlueRpm = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder setMaxBlueRpm(int value) {
        bitField0_ |= 0x00000002;
        maxBlueRpm_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 maxBlueRpm = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder clearMaxBlueRpm() {
        bitField0_ = (bitField0_ & ~0x00000002);
        maxBlueRpm_ = 0;
        onChanged();
        return this;
      }

      private int minGreenRpm_ ;
      /**
       * <code>optional uint32 minGreenRpm = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public boolean hasMinGreenRpm() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional uint32 minGreenRpm = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public int getMinGreenRpm() {
        return minGreenRpm_;
      }
      /**
       * <code>optional uint32 minGreenRpm = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder setMinGreenRpm(int value) {
        bitField0_ |= 0x00000004;
        minGreenRpm_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 minGreenRpm = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder clearMinGreenRpm() {
        bitField0_ = (bitField0_ & ~0x00000004);
        minGreenRpm_ = 0;
        onChanged();
        return this;
      }

      private int maxGreenRpm_ ;
      /**
       * <code>optional uint32 maxGreenRpm = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public boolean hasMaxGreenRpm() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional uint32 maxGreenRpm = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public int getMaxGreenRpm() {
        return maxGreenRpm_;
      }
      /**
       * <code>optional uint32 maxGreenRpm = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder setMaxGreenRpm(int value) {
        bitField0_ |= 0x00000008;
        maxGreenRpm_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 maxGreenRpm = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder clearMaxGreenRpm() {
        bitField0_ = (bitField0_ & ~0x00000008);
        maxGreenRpm_ = 0;
        onChanged();
        return this;
      }

      private int minRedRpm_ ;
      /**
       * <code>optional uint32 minRedRpm = 5;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public boolean hasMinRedRpm() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional uint32 minRedRpm = 5;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public int getMinRedRpm() {
        return minRedRpm_;
      }
      /**
       * <code>optional uint32 minRedRpm = 5;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder setMinRedRpm(int value) {
        bitField0_ |= 0x00000010;
        minRedRpm_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 minRedRpm = 5;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder clearMinRedRpm() {
        bitField0_ = (bitField0_ & ~0x00000010);
        minRedRpm_ = 0;
        onChanged();
        return this;
      }

      private int histogramSlotsQty_ ;
      /**
       * <code>optional uint32 histogramSlotsQty = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public boolean hasHistogramSlotsQty() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional uint32 histogramSlotsQty = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public int getHistogramSlotsQty() {
        return histogramSlotsQty_;
      }
      /**
       * <code>optional uint32 histogramSlotsQty = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder setHistogramSlotsQty(int value) {
        bitField0_ |= 0x00000020;
        histogramSlotsQty_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 histogramSlotsQty = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder clearHistogramSlotsQty() {
        bitField0_ = (bitField0_ & ~0x00000020);
        histogramSlotsQty_ = 0;
        onChanged();
        return this;
      }

      private int histogramSlotsSize_ ;
      /**
       * <code>optional uint32 histogramSlotsSize = 7;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public boolean hasHistogramSlotsSize() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional uint32 histogramSlotsSize = 7;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public int getHistogramSlotsSize() {
        return histogramSlotsSize_;
      }
      /**
       * <code>optional uint32 histogramSlotsSize = 7;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder setHistogramSlotsSize(int value) {
        bitField0_ |= 0x00000040;
        histogramSlotsSize_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 histogramSlotsSize = 7;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder clearHistogramSlotsSize() {
        bitField0_ = (bitField0_ & ~0x00000040);
        histogramSlotsSize_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:maxpb.RpmConfig)
    }

    static {
      defaultInstance = new RpmConfig(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:maxpb.RpmConfig)
  }

  public interface DeltaConfigOrBuilder extends
      // @@protoc_insertion_point(interface_extends:maxpb.DeltaConfig)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional bool ignitionOn = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasIgnitionOn();
    /**
     * <code>optional bool ignitionOn = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean getIgnitionOn();

    /**
     * <code>optional bool ignitionOff = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    boolean hasIgnitionOff();
    /**
     * <code>optional bool ignitionOff = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    boolean getIgnitionOff();

    /**
     * <code>optional bool stopped = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    boolean hasStopped();
    /**
     * <code>optional bool stopped = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    boolean getStopped();

    /**
     * <code>optional bool moving = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasMoving();
    /**
     * <code>optional bool moving = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean getMoving();

    /**
     * <code>optional uint32 interval = 5;</code>
     *
     * <pre>
     *&#47; Seconds SupportedBy: 
     * </pre>
     */
    boolean hasInterval();
    /**
     * <code>optional uint32 interval = 5;</code>
     *
     * <pre>
     *&#47; Seconds SupportedBy: 
     * </pre>
     */
    int getInterval();

    /**
     * <code>optional bool hourly = 6;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasHourly();
    /**
     * <code>optional bool hourly = 6;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean getHourly();

    /**
     * <code>optional bool position = 7;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasPosition();
    /**
     * <code>optional bool position = 7;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean getPosition();
  }
  /**
   * Protobuf type {@code maxpb.DeltaConfig}
   */
  public static final class DeltaConfig extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:maxpb.DeltaConfig)
      DeltaConfigOrBuilder {
    // Use DeltaConfig.newBuilder() to construct.
    private DeltaConfig(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private DeltaConfig(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final DeltaConfig defaultInstance;
    public static DeltaConfig getDefaultInstance() {
      return defaultInstance;
    }

    public DeltaConfig getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private DeltaConfig(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              ignitionOn_ = input.readBool();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              ignitionOff_ = input.readBool();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              stopped_ = input.readBool();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              moving_ = input.readBool();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              interval_ = input.readUInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              hourly_ = input.readBool();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              position_ = input.readBool();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return maxpb.MaxpbTelemetry.internal_static_maxpb_DeltaConfig_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return maxpb.MaxpbTelemetry.internal_static_maxpb_DeltaConfig_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              maxpb.MaxpbTelemetry.DeltaConfig.class, maxpb.MaxpbTelemetry.DeltaConfig.Builder.class);
    }

    public static com.google.protobuf.Parser<DeltaConfig> PARSER =
        new com.google.protobuf.AbstractParser<DeltaConfig>() {
      public DeltaConfig parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new DeltaConfig(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<DeltaConfig> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int IGNITIONON_FIELD_NUMBER = 1;
    private boolean ignitionOn_;
    /**
     * <code>optional bool ignitionOn = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasIgnitionOn() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional bool ignitionOn = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean getIgnitionOn() {
      return ignitionOn_;
    }

    public static final int IGNITIONOFF_FIELD_NUMBER = 2;
    private boolean ignitionOff_;
    /**
     * <code>optional bool ignitionOff = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public boolean hasIgnitionOff() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional bool ignitionOff = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public boolean getIgnitionOff() {
      return ignitionOff_;
    }

    public static final int STOPPED_FIELD_NUMBER = 3;
    private boolean stopped_;
    /**
     * <code>optional bool stopped = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public boolean hasStopped() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional bool stopped = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public boolean getStopped() {
      return stopped_;
    }

    public static final int MOVING_FIELD_NUMBER = 4;
    private boolean moving_;
    /**
     * <code>optional bool moving = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasMoving() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional bool moving = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean getMoving() {
      return moving_;
    }

    public static final int INTERVAL_FIELD_NUMBER = 5;
    private int interval_;
    /**
     * <code>optional uint32 interval = 5;</code>
     *
     * <pre>
     *&#47; Seconds SupportedBy: 
     * </pre>
     */
    public boolean hasInterval() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional uint32 interval = 5;</code>
     *
     * <pre>
     *&#47; Seconds SupportedBy: 
     * </pre>
     */
    public int getInterval() {
      return interval_;
    }

    public static final int HOURLY_FIELD_NUMBER = 6;
    private boolean hourly_;
    /**
     * <code>optional bool hourly = 6;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasHourly() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional bool hourly = 6;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean getHourly() {
      return hourly_;
    }

    public static final int POSITION_FIELD_NUMBER = 7;
    private boolean position_;
    /**
     * <code>optional bool position = 7;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasPosition() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional bool position = 7;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean getPosition() {
      return position_;
    }

    private void initFields() {
      ignitionOn_ = false;
      ignitionOff_ = false;
      stopped_ = false;
      moving_ = false;
      interval_ = 0;
      hourly_ = false;
      position_ = false;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBool(1, ignitionOn_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBool(2, ignitionOff_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBool(3, stopped_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeBool(4, moving_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeUInt32(5, interval_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeBool(6, hourly_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeBool(7, position_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(1, ignitionOn_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(2, ignitionOff_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(3, stopped_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(4, moving_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(5, interval_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(6, hourly_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(7, position_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static maxpb.MaxpbTelemetry.DeltaConfig parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static maxpb.MaxpbTelemetry.DeltaConfig parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetry.DeltaConfig parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static maxpb.MaxpbTelemetry.DeltaConfig parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetry.DeltaConfig parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static maxpb.MaxpbTelemetry.DeltaConfig parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetry.DeltaConfig parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static maxpb.MaxpbTelemetry.DeltaConfig parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetry.DeltaConfig parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static maxpb.MaxpbTelemetry.DeltaConfig parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(maxpb.MaxpbTelemetry.DeltaConfig prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code maxpb.DeltaConfig}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:maxpb.DeltaConfig)
        maxpb.MaxpbTelemetry.DeltaConfigOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return maxpb.MaxpbTelemetry.internal_static_maxpb_DeltaConfig_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return maxpb.MaxpbTelemetry.internal_static_maxpb_DeltaConfig_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                maxpb.MaxpbTelemetry.DeltaConfig.class, maxpb.MaxpbTelemetry.DeltaConfig.Builder.class);
      }

      // Construct using maxpb.MaxpbTelemetry.DeltaConfig.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        ignitionOn_ = false;
        bitField0_ = (bitField0_ & ~0x00000001);
        ignitionOff_ = false;
        bitField0_ = (bitField0_ & ~0x00000002);
        stopped_ = false;
        bitField0_ = (bitField0_ & ~0x00000004);
        moving_ = false;
        bitField0_ = (bitField0_ & ~0x00000008);
        interval_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        hourly_ = false;
        bitField0_ = (bitField0_ & ~0x00000020);
        position_ = false;
        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return maxpb.MaxpbTelemetry.internal_static_maxpb_DeltaConfig_descriptor;
      }

      public maxpb.MaxpbTelemetry.DeltaConfig getDefaultInstanceForType() {
        return maxpb.MaxpbTelemetry.DeltaConfig.getDefaultInstance();
      }

      public maxpb.MaxpbTelemetry.DeltaConfig build() {
        maxpb.MaxpbTelemetry.DeltaConfig result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public maxpb.MaxpbTelemetry.DeltaConfig buildPartial() {
        maxpb.MaxpbTelemetry.DeltaConfig result = new maxpb.MaxpbTelemetry.DeltaConfig(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.ignitionOn_ = ignitionOn_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.ignitionOff_ = ignitionOff_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.stopped_ = stopped_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.moving_ = moving_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.interval_ = interval_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.hourly_ = hourly_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.position_ = position_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof maxpb.MaxpbTelemetry.DeltaConfig) {
          return mergeFrom((maxpb.MaxpbTelemetry.DeltaConfig)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(maxpb.MaxpbTelemetry.DeltaConfig other) {
        if (other == maxpb.MaxpbTelemetry.DeltaConfig.getDefaultInstance()) return this;
        if (other.hasIgnitionOn()) {
          setIgnitionOn(other.getIgnitionOn());
        }
        if (other.hasIgnitionOff()) {
          setIgnitionOff(other.getIgnitionOff());
        }
        if (other.hasStopped()) {
          setStopped(other.getStopped());
        }
        if (other.hasMoving()) {
          setMoving(other.getMoving());
        }
        if (other.hasInterval()) {
          setInterval(other.getInterval());
        }
        if (other.hasHourly()) {
          setHourly(other.getHourly());
        }
        if (other.hasPosition()) {
          setPosition(other.getPosition());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        maxpb.MaxpbTelemetry.DeltaConfig parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (maxpb.MaxpbTelemetry.DeltaConfig) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private boolean ignitionOn_ ;
      /**
       * <code>optional bool ignitionOn = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasIgnitionOn() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional bool ignitionOn = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean getIgnitionOn() {
        return ignitionOn_;
      }
      /**
       * <code>optional bool ignitionOn = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setIgnitionOn(boolean value) {
        bitField0_ |= 0x00000001;
        ignitionOn_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool ignitionOn = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearIgnitionOn() {
        bitField0_ = (bitField0_ & ~0x00000001);
        ignitionOn_ = false;
        onChanged();
        return this;
      }

      private boolean ignitionOff_ ;
      /**
       * <code>optional bool ignitionOff = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public boolean hasIgnitionOff() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional bool ignitionOff = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public boolean getIgnitionOff() {
        return ignitionOff_;
      }
      /**
       * <code>optional bool ignitionOff = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder setIgnitionOff(boolean value) {
        bitField0_ |= 0x00000002;
        ignitionOff_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool ignitionOff = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder clearIgnitionOff() {
        bitField0_ = (bitField0_ & ~0x00000002);
        ignitionOff_ = false;
        onChanged();
        return this;
      }

      private boolean stopped_ ;
      /**
       * <code>optional bool stopped = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public boolean hasStopped() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional bool stopped = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public boolean getStopped() {
        return stopped_;
      }
      /**
       * <code>optional bool stopped = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder setStopped(boolean value) {
        bitField0_ |= 0x00000004;
        stopped_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool stopped = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder clearStopped() {
        bitField0_ = (bitField0_ & ~0x00000004);
        stopped_ = false;
        onChanged();
        return this;
      }

      private boolean moving_ ;
      /**
       * <code>optional bool moving = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasMoving() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional bool moving = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean getMoving() {
        return moving_;
      }
      /**
       * <code>optional bool moving = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setMoving(boolean value) {
        bitField0_ |= 0x00000008;
        moving_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool moving = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearMoving() {
        bitField0_ = (bitField0_ & ~0x00000008);
        moving_ = false;
        onChanged();
        return this;
      }

      private int interval_ ;
      /**
       * <code>optional uint32 interval = 5;</code>
       *
       * <pre>
       *&#47; Seconds SupportedBy: 
       * </pre>
       */
      public boolean hasInterval() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional uint32 interval = 5;</code>
       *
       * <pre>
       *&#47; Seconds SupportedBy: 
       * </pre>
       */
      public int getInterval() {
        return interval_;
      }
      /**
       * <code>optional uint32 interval = 5;</code>
       *
       * <pre>
       *&#47; Seconds SupportedBy: 
       * </pre>
       */
      public Builder setInterval(int value) {
        bitField0_ |= 0x00000010;
        interval_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 interval = 5;</code>
       *
       * <pre>
       *&#47; Seconds SupportedBy: 
       * </pre>
       */
      public Builder clearInterval() {
        bitField0_ = (bitField0_ & ~0x00000010);
        interval_ = 0;
        onChanged();
        return this;
      }

      private boolean hourly_ ;
      /**
       * <code>optional bool hourly = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasHourly() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional bool hourly = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean getHourly() {
        return hourly_;
      }
      /**
       * <code>optional bool hourly = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setHourly(boolean value) {
        bitField0_ |= 0x00000020;
        hourly_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool hourly = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearHourly() {
        bitField0_ = (bitField0_ & ~0x00000020);
        hourly_ = false;
        onChanged();
        return this;
      }

      private boolean position_ ;
      /**
       * <code>optional bool position = 7;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasPosition() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional bool position = 7;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean getPosition() {
        return position_;
      }
      /**
       * <code>optional bool position = 7;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setPosition(boolean value) {
        bitField0_ |= 0x00000040;
        position_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool position = 7;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearPosition() {
        bitField0_ = (bitField0_ & ~0x00000040);
        position_ = false;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:maxpb.DeltaConfig)
    }

    static {
      defaultInstance = new DeltaConfig(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:maxpb.DeltaConfig)
  }

  public interface TelemetryConfigOrBuilder extends
      // @@protoc_insertion_point(interface_extends:maxpb.TelemetryConfig)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional .maxpb.SpeedsConfig speeds = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    boolean hasSpeeds();
    /**
     * <code>optional .maxpb.SpeedsConfig speeds = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    maxpb.MaxpbTelemetry.SpeedsConfig getSpeeds();
    /**
     * <code>optional .maxpb.SpeedsConfig speeds = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    maxpb.MaxpbTelemetry.SpeedsConfigOrBuilder getSpeedsOrBuilder();

    /**
     * <code>optional .maxpb.TimersConfig timers = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    boolean hasTimers();
    /**
     * <code>optional .maxpb.TimersConfig timers = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    maxpb.MaxpbTelemetry.TimersConfig getTimers();
    /**
     * <code>optional .maxpb.TimersConfig timers = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    maxpb.MaxpbTelemetry.TimersConfigOrBuilder getTimersOrBuilder();

    /**
     * <code>optional uint32 debounceMoving = 3;</code>
     *
     * <pre>
     *&#47; Miliseconds SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    boolean hasDebounceMoving();
    /**
     * <code>optional uint32 debounceMoving = 3;</code>
     *
     * <pre>
     *&#47; Miliseconds SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    int getDebounceMoving();

    /**
     * <code>optional uint32 debounceStopped = 4;</code>
     *
     * <pre>
     *&#47; Miliseconds SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    boolean hasDebounceStopped();
    /**
     * <code>optional uint32 debounceStopped = 4;</code>
     *
     * <pre>
     *&#47; Miliseconds SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    int getDebounceStopped();

    /**
     * <code>optional int32 pitchingMin = 5;</code>
     *
     * <pre>
     *&#47; Degrees SupportedBy: MXT162
     * </pre>
     */
    boolean hasPitchingMin();
    /**
     * <code>optional int32 pitchingMin = 5;</code>
     *
     * <pre>
     *&#47; Degrees SupportedBy: MXT162
     * </pre>
     */
    int getPitchingMin();

    /**
     * <code>optional int32 pitchingMax = 6;</code>
     *
     * <pre>
     *&#47; Degrees SupportedBy: MXT162
     * </pre>
     */
    boolean hasPitchingMax();
    /**
     * <code>optional int32 pitchingMax = 6;</code>
     *
     * <pre>
     *&#47; Degrees SupportedBy: MXT162
     * </pre>
     */
    int getPitchingMax();

    /**
     * <code>optional int32 rollingMin = 7;</code>
     *
     * <pre>
     *&#47; Degrees SupportedBy: MXT162
     * </pre>
     */
    boolean hasRollingMin();
    /**
     * <code>optional int32 rollingMin = 7;</code>
     *
     * <pre>
     *&#47; Degrees SupportedBy: MXT162
     * </pre>
     */
    int getRollingMin();

    /**
     * <code>optional int32 rollingMax = 8;</code>
     *
     * <pre>
     *&#47; Degrees SupportedBy: MXT162
     * </pre>
     */
    boolean hasRollingMax();
    /**
     * <code>optional int32 rollingMax = 8;</code>
     *
     * <pre>
     *&#47; Degrees SupportedBy: MXT162
     * </pre>
     */
    int getRollingMax();

    /**
     * <code>optional .maxpb.GSensorAlarmConfig hardAcceleration = 9;</code>
     *
     * <pre>
     *&#47; Trigger: mG (Note: 1 mG = 0,0098 m/s2) Debounce: Miliseconds SupportedBy: MXT162
     * </pre>
     */
    boolean hasHardAcceleration();
    /**
     * <code>optional .maxpb.GSensorAlarmConfig hardAcceleration = 9;</code>
     *
     * <pre>
     *&#47; Trigger: mG (Note: 1 mG = 0,0098 m/s2) Debounce: Miliseconds SupportedBy: MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.GSensorAlarmConfig getHardAcceleration();
    /**
     * <code>optional .maxpb.GSensorAlarmConfig hardAcceleration = 9;</code>
     *
     * <pre>
     *&#47; Trigger: mG (Note: 1 mG = 0,0098 m/s2) Debounce: Miliseconds SupportedBy: MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.GSensorAlarmConfigOrBuilder getHardAccelerationOrBuilder();

    /**
     * <code>optional .maxpb.GSensorAlarmConfig hardBrake = 10;</code>
     *
     * <pre>
     *&#47; Trigger: mG (Note: 1 mG = 0,0098 m/s2) Debounce: Miliseconds SupportedBy: MXT162
     * </pre>
     */
    boolean hasHardBrake();
    /**
     * <code>optional .maxpb.GSensorAlarmConfig hardBrake = 10;</code>
     *
     * <pre>
     *&#47; Trigger: mG (Note: 1 mG = 0,0098 m/s2) Debounce: Miliseconds SupportedBy: MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.GSensorAlarmConfig getHardBrake();
    /**
     * <code>optional .maxpb.GSensorAlarmConfig hardBrake = 10;</code>
     *
     * <pre>
     *&#47; Trigger: mG (Note: 1 mG = 0,0098 m/s2) Debounce: Miliseconds SupportedBy: MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.GSensorAlarmConfigOrBuilder getHardBrakeOrBuilder();

    /**
     * <code>optional .maxpb.GSensorAlarmConfig hardCurve = 11;</code>
     *
     * <pre>
     *&#47; Trigger: mG (Note: 1 mG = 0,0098 m/s2) Debounce: Miliseconds SupportedBy: MXT162
     * </pre>
     */
    boolean hasHardCurve();
    /**
     * <code>optional .maxpb.GSensorAlarmConfig hardCurve = 11;</code>
     *
     * <pre>
     *&#47; Trigger: mG (Note: 1 mG = 0,0098 m/s2) Debounce: Miliseconds SupportedBy: MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.GSensorAlarmConfig getHardCurve();
    /**
     * <code>optional .maxpb.GSensorAlarmConfig hardCurve = 11;</code>
     *
     * <pre>
     *&#47; Trigger: mG (Note: 1 mG = 0,0098 m/s2) Debounce: Miliseconds SupportedBy: MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.GSensorAlarmConfigOrBuilder getHardCurveOrBuilder();

    /**
     * <code>optional .maxpb.GSensorAlarmConfig hardBump = 12;</code>
     *
     * <pre>
     *&#47; Trigger: mG (Note: 1 mG = 0,0098 m/s2) Debounce: Miliseconds SupportedBy: MXT162
     * </pre>
     */
    boolean hasHardBump();
    /**
     * <code>optional .maxpb.GSensorAlarmConfig hardBump = 12;</code>
     *
     * <pre>
     *&#47; Trigger: mG (Note: 1 mG = 0,0098 m/s2) Debounce: Miliseconds SupportedBy: MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.GSensorAlarmConfig getHardBump();
    /**
     * <code>optional .maxpb.GSensorAlarmConfig hardBump = 12;</code>
     *
     * <pre>
     *&#47; Trigger: mG (Note: 1 mG = 0,0098 m/s2) Debounce: Miliseconds SupportedBy: MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.GSensorAlarmConfigOrBuilder getHardBumpOrBuilder();

    /**
     * <code>optional .maxpb.GSensorAlarmConfig hardCrash = 13;</code>
     *
     * <pre>
     *&#47; Trigger: mG (Note: 1 mG = 0,0098 m/s2) Debounce: Miliseconds SupportedBy: MXT162
     * </pre>
     */
    boolean hasHardCrash();
    /**
     * <code>optional .maxpb.GSensorAlarmConfig hardCrash = 13;</code>
     *
     * <pre>
     *&#47; Trigger: mG (Note: 1 mG = 0,0098 m/s2) Debounce: Miliseconds SupportedBy: MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.GSensorAlarmConfig getHardCrash();
    /**
     * <code>optional .maxpb.GSensorAlarmConfig hardCrash = 13;</code>
     *
     * <pre>
     *&#47; Trigger: mG (Note: 1 mG = 0,0098 m/s2) Debounce: Miliseconds SupportedBy: MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.GSensorAlarmConfigOrBuilder getHardCrashOrBuilder();

    /**
     * <code>optional .maxpb.TelemetryEventsTransmissionMask eventsMask = 14;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    boolean hasEventsMask();
    /**
     * <code>optional .maxpb.TelemetryEventsTransmissionMask eventsMask = 14;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    maxpb.MaxpbTelemetry.TelemetryEventsTransmissionMask getEventsMask();
    /**
     * <code>optional .maxpb.TelemetryEventsTransmissionMask eventsMask = 14;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    maxpb.MaxpbTelemetry.TelemetryEventsTransmissionMaskOrBuilder getEventsMaskOrBuilder();

    /**
     * <code>optional .maxpb.RpmConfig rpm = 15;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    boolean hasRpm();
    /**
     * <code>optional .maxpb.RpmConfig rpm = 15;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    maxpb.MaxpbTelemetry.RpmConfig getRpm();
    /**
     * <code>optional .maxpb.RpmConfig rpm = 15;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    maxpb.MaxpbTelemetry.RpmConfigOrBuilder getRpmOrBuilder();

    /**
     * <code>optional .maxpb.DeltaConfig delta = 16;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasDelta();
    /**
     * <code>optional .maxpb.DeltaConfig delta = 16;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.DeltaConfig getDelta();
    /**
     * <code>optional .maxpb.DeltaConfig delta = 16;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.DeltaConfigOrBuilder getDeltaOrBuilder();

    /**
     * <code>optional .maxpb.AccelerometerHistorySamples historySamples = 17;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasHistorySamples();
    /**
     * <code>optional .maxpb.AccelerometerHistorySamples historySamples = 17;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.AccelerometerHistorySamples getHistorySamples();

    /**
     * <code>optional uint32 historyEventMask = 18;</code>
     *
     * <pre>
     *&#47; Used HistoryEvents values as bitmask SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasHistoryEventMask();
    /**
     * <code>optional uint32 historyEventMask = 18;</code>
     *
     * <pre>
     *&#47; Used HistoryEvents values as bitmask SupportedBy: MXT160, MXT162
     * </pre>
     */
    int getHistoryEventMask();

    /**
     * <code>optional uint32 accOdometerSpeedLimit = 19;</code>
     *
     * <pre>
     *&#47; Km/h SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasAccOdometerSpeedLimit();
    /**
     * <code>optional uint32 accOdometerSpeedLimit = 19;</code>
     *
     * <pre>
     *&#47; Km/h SupportedBy: MXT160, MXT162
     * </pre>
     */
    int getAccOdometerSpeedLimit();

    /**
     * <code>optional uint32 minimalTimeBetweenCrashEvents = 20;</code>
     *
     * <pre>
     *&#47; Seconds SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasMinimalTimeBetweenCrashEvents();
    /**
     * <code>optional uint32 minimalTimeBetweenCrashEvents = 20;</code>
     *
     * <pre>
     *&#47; Seconds SupportedBy: MXT160, MXT162
     * </pre>
     */
    int getMinimalTimeBetweenCrashEvents();

    /**
     * <code>optional bool recalibAccelerometerNoExtPower = 21;</code>
     *
     * <pre>
     *&#47; Starts accelerometer recalibration when external power is disconnected SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasRecalibAccelerometerNoExtPower();
    /**
     * <code>optional bool recalibAccelerometerNoExtPower = 21;</code>
     *
     * <pre>
     *&#47; Starts accelerometer recalibration when external power is disconnected SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean getRecalibAccelerometerNoExtPower();

    /**
     * <code>optional bool fixedCanLibrary = 22;</code>
     *
     * <pre>
     *&#47; True: Use embedded can library False: Try to discover library automatically SupportedBy: MXT162, MAXIO
     * </pre>
     */
    boolean hasFixedCanLibrary();
    /**
     * <code>optional bool fixedCanLibrary = 22;</code>
     *
     * <pre>
     *&#47; True: Use embedded can library False: Try to discover library automatically SupportedBy: MXT162, MAXIO
     * </pre>
     */
    boolean getFixedCanLibrary();

    /**
     * <code>optional bool blackBox = 23;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasBlackBox();
    /**
     * <code>optional bool blackBox = 23;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean getBlackBox();

    /**
     * <code>optional uint32 blackBoxReportTime = 24;</code>
     *
     * <pre>
     *&#47; Minutes - Maximum value is 1440 (1 day) SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasBlackBoxReportTime();
    /**
     * <code>optional uint32 blackBoxReportTime = 24;</code>
     *
     * <pre>
     *&#47; Minutes - Maximum value is 1440 (1 day) SupportedBy: MXT160, MXT162
     * </pre>
     */
    int getBlackBoxReportTime();
  }
  /**
   * Protobuf type {@code maxpb.TelemetryConfig}
   */
  public static final class TelemetryConfig extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:maxpb.TelemetryConfig)
      TelemetryConfigOrBuilder {
    // Use TelemetryConfig.newBuilder() to construct.
    private TelemetryConfig(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private TelemetryConfig(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final TelemetryConfig defaultInstance;
    public static TelemetryConfig getDefaultInstance() {
      return defaultInstance;
    }

    public TelemetryConfig getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private TelemetryConfig(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              maxpb.MaxpbTelemetry.SpeedsConfig.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = speeds_.toBuilder();
              }
              speeds_ = input.readMessage(maxpb.MaxpbTelemetry.SpeedsConfig.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(speeds_);
                speeds_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 18: {
              maxpb.MaxpbTelemetry.TimersConfig.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = timers_.toBuilder();
              }
              timers_ = input.readMessage(maxpb.MaxpbTelemetry.TimersConfig.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(timers_);
                timers_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              debounceMoving_ = input.readUInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              debounceStopped_ = input.readUInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              pitchingMin_ = input.readInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              pitchingMax_ = input.readInt32();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              rollingMin_ = input.readInt32();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000080;
              rollingMax_ = input.readInt32();
              break;
            }
            case 74: {
              maxpb.MaxpbTelemetry.GSensorAlarmConfig.Builder subBuilder = null;
              if (((bitField0_ & 0x00000100) == 0x00000100)) {
                subBuilder = hardAcceleration_.toBuilder();
              }
              hardAcceleration_ = input.readMessage(maxpb.MaxpbTelemetry.GSensorAlarmConfig.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(hardAcceleration_);
                hardAcceleration_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000100;
              break;
            }
            case 82: {
              maxpb.MaxpbTelemetry.GSensorAlarmConfig.Builder subBuilder = null;
              if (((bitField0_ & 0x00000200) == 0x00000200)) {
                subBuilder = hardBrake_.toBuilder();
              }
              hardBrake_ = input.readMessage(maxpb.MaxpbTelemetry.GSensorAlarmConfig.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(hardBrake_);
                hardBrake_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000200;
              break;
            }
            case 90: {
              maxpb.MaxpbTelemetry.GSensorAlarmConfig.Builder subBuilder = null;
              if (((bitField0_ & 0x00000400) == 0x00000400)) {
                subBuilder = hardCurve_.toBuilder();
              }
              hardCurve_ = input.readMessage(maxpb.MaxpbTelemetry.GSensorAlarmConfig.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(hardCurve_);
                hardCurve_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000400;
              break;
            }
            case 98: {
              maxpb.MaxpbTelemetry.GSensorAlarmConfig.Builder subBuilder = null;
              if (((bitField0_ & 0x00000800) == 0x00000800)) {
                subBuilder = hardBump_.toBuilder();
              }
              hardBump_ = input.readMessage(maxpb.MaxpbTelemetry.GSensorAlarmConfig.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(hardBump_);
                hardBump_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000800;
              break;
            }
            case 106: {
              maxpb.MaxpbTelemetry.GSensorAlarmConfig.Builder subBuilder = null;
              if (((bitField0_ & 0x00001000) == 0x00001000)) {
                subBuilder = hardCrash_.toBuilder();
              }
              hardCrash_ = input.readMessage(maxpb.MaxpbTelemetry.GSensorAlarmConfig.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(hardCrash_);
                hardCrash_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00001000;
              break;
            }
            case 114: {
              maxpb.MaxpbTelemetry.TelemetryEventsTransmissionMask.Builder subBuilder = null;
              if (((bitField0_ & 0x00002000) == 0x00002000)) {
                subBuilder = eventsMask_.toBuilder();
              }
              eventsMask_ = input.readMessage(maxpb.MaxpbTelemetry.TelemetryEventsTransmissionMask.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(eventsMask_);
                eventsMask_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00002000;
              break;
            }
            case 122: {
              maxpb.MaxpbTelemetry.RpmConfig.Builder subBuilder = null;
              if (((bitField0_ & 0x00004000) == 0x00004000)) {
                subBuilder = rpm_.toBuilder();
              }
              rpm_ = input.readMessage(maxpb.MaxpbTelemetry.RpmConfig.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(rpm_);
                rpm_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00004000;
              break;
            }
            case 130: {
              maxpb.MaxpbTelemetry.DeltaConfig.Builder subBuilder = null;
              if (((bitField0_ & 0x00008000) == 0x00008000)) {
                subBuilder = delta_.toBuilder();
              }
              delta_ = input.readMessage(maxpb.MaxpbTelemetry.DeltaConfig.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(delta_);
                delta_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00008000;
              break;
            }
            case 136: {
              int rawValue = input.readEnum();
              maxpb.MaxpbTelemetry.AccelerometerHistorySamples value = maxpb.MaxpbTelemetry.AccelerometerHistorySamples.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(17, rawValue);
              } else {
                bitField0_ |= 0x00010000;
                historySamples_ = value;
              }
              break;
            }
            case 144: {
              bitField0_ |= 0x00020000;
              historyEventMask_ = input.readUInt32();
              break;
            }
            case 152: {
              bitField0_ |= 0x00040000;
              accOdometerSpeedLimit_ = input.readUInt32();
              break;
            }
            case 160: {
              bitField0_ |= 0x00080000;
              minimalTimeBetweenCrashEvents_ = input.readUInt32();
              break;
            }
            case 168: {
              bitField0_ |= 0x00100000;
              recalibAccelerometerNoExtPower_ = input.readBool();
              break;
            }
            case 176: {
              bitField0_ |= 0x00200000;
              fixedCanLibrary_ = input.readBool();
              break;
            }
            case 184: {
              bitField0_ |= 0x00400000;
              blackBox_ = input.readBool();
              break;
            }
            case 192: {
              bitField0_ |= 0x00800000;
              blackBoxReportTime_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return maxpb.MaxpbTelemetry.internal_static_maxpb_TelemetryConfig_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return maxpb.MaxpbTelemetry.internal_static_maxpb_TelemetryConfig_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              maxpb.MaxpbTelemetry.TelemetryConfig.class, maxpb.MaxpbTelemetry.TelemetryConfig.Builder.class);
    }

    public static com.google.protobuf.Parser<TelemetryConfig> PARSER =
        new com.google.protobuf.AbstractParser<TelemetryConfig>() {
      public TelemetryConfig parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new TelemetryConfig(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<TelemetryConfig> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int SPEEDS_FIELD_NUMBER = 1;
    private maxpb.MaxpbTelemetry.SpeedsConfig speeds_;
    /**
     * <code>optional .maxpb.SpeedsConfig speeds = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    public boolean hasSpeeds() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .maxpb.SpeedsConfig speeds = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    public maxpb.MaxpbTelemetry.SpeedsConfig getSpeeds() {
      return speeds_;
    }
    /**
     * <code>optional .maxpb.SpeedsConfig speeds = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    public maxpb.MaxpbTelemetry.SpeedsConfigOrBuilder getSpeedsOrBuilder() {
      return speeds_;
    }

    public static final int TIMERS_FIELD_NUMBER = 2;
    private maxpb.MaxpbTelemetry.TimersConfig timers_;
    /**
     * <code>optional .maxpb.TimersConfig timers = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    public boolean hasTimers() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional .maxpb.TimersConfig timers = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    public maxpb.MaxpbTelemetry.TimersConfig getTimers() {
      return timers_;
    }
    /**
     * <code>optional .maxpb.TimersConfig timers = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    public maxpb.MaxpbTelemetry.TimersConfigOrBuilder getTimersOrBuilder() {
      return timers_;
    }

    public static final int DEBOUNCEMOVING_FIELD_NUMBER = 3;
    private int debounceMoving_;
    /**
     * <code>optional uint32 debounceMoving = 3;</code>
     *
     * <pre>
     *&#47; Miliseconds SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    public boolean hasDebounceMoving() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional uint32 debounceMoving = 3;</code>
     *
     * <pre>
     *&#47; Miliseconds SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    public int getDebounceMoving() {
      return debounceMoving_;
    }

    public static final int DEBOUNCESTOPPED_FIELD_NUMBER = 4;
    private int debounceStopped_;
    /**
     * <code>optional uint32 debounceStopped = 4;</code>
     *
     * <pre>
     *&#47; Miliseconds SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    public boolean hasDebounceStopped() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional uint32 debounceStopped = 4;</code>
     *
     * <pre>
     *&#47; Miliseconds SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    public int getDebounceStopped() {
      return debounceStopped_;
    }

    public static final int PITCHINGMIN_FIELD_NUMBER = 5;
    private int pitchingMin_;
    /**
     * <code>optional int32 pitchingMin = 5;</code>
     *
     * <pre>
     *&#47; Degrees SupportedBy: MXT162
     * </pre>
     */
    public boolean hasPitchingMin() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 pitchingMin = 5;</code>
     *
     * <pre>
     *&#47; Degrees SupportedBy: MXT162
     * </pre>
     */
    public int getPitchingMin() {
      return pitchingMin_;
    }

    public static final int PITCHINGMAX_FIELD_NUMBER = 6;
    private int pitchingMax_;
    /**
     * <code>optional int32 pitchingMax = 6;</code>
     *
     * <pre>
     *&#47; Degrees SupportedBy: MXT162
     * </pre>
     */
    public boolean hasPitchingMax() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional int32 pitchingMax = 6;</code>
     *
     * <pre>
     *&#47; Degrees SupportedBy: MXT162
     * </pre>
     */
    public int getPitchingMax() {
      return pitchingMax_;
    }

    public static final int ROLLINGMIN_FIELD_NUMBER = 7;
    private int rollingMin_;
    /**
     * <code>optional int32 rollingMin = 7;</code>
     *
     * <pre>
     *&#47; Degrees SupportedBy: MXT162
     * </pre>
     */
    public boolean hasRollingMin() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional int32 rollingMin = 7;</code>
     *
     * <pre>
     *&#47; Degrees SupportedBy: MXT162
     * </pre>
     */
    public int getRollingMin() {
      return rollingMin_;
    }

    public static final int ROLLINGMAX_FIELD_NUMBER = 8;
    private int rollingMax_;
    /**
     * <code>optional int32 rollingMax = 8;</code>
     *
     * <pre>
     *&#47; Degrees SupportedBy: MXT162
     * </pre>
     */
    public boolean hasRollingMax() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional int32 rollingMax = 8;</code>
     *
     * <pre>
     *&#47; Degrees SupportedBy: MXT162
     * </pre>
     */
    public int getRollingMax() {
      return rollingMax_;
    }

    public static final int HARDACCELERATION_FIELD_NUMBER = 9;
    private maxpb.MaxpbTelemetry.GSensorAlarmConfig hardAcceleration_;
    /**
     * <code>optional .maxpb.GSensorAlarmConfig hardAcceleration = 9;</code>
     *
     * <pre>
     *&#47; Trigger: mG (Note: 1 mG = 0,0098 m/s2) Debounce: Miliseconds SupportedBy: MXT162
     * </pre>
     */
    public boolean hasHardAcceleration() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional .maxpb.GSensorAlarmConfig hardAcceleration = 9;</code>
     *
     * <pre>
     *&#47; Trigger: mG (Note: 1 mG = 0,0098 m/s2) Debounce: Miliseconds SupportedBy: MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.GSensorAlarmConfig getHardAcceleration() {
      return hardAcceleration_;
    }
    /**
     * <code>optional .maxpb.GSensorAlarmConfig hardAcceleration = 9;</code>
     *
     * <pre>
     *&#47; Trigger: mG (Note: 1 mG = 0,0098 m/s2) Debounce: Miliseconds SupportedBy: MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.GSensorAlarmConfigOrBuilder getHardAccelerationOrBuilder() {
      return hardAcceleration_;
    }

    public static final int HARDBRAKE_FIELD_NUMBER = 10;
    private maxpb.MaxpbTelemetry.GSensorAlarmConfig hardBrake_;
    /**
     * <code>optional .maxpb.GSensorAlarmConfig hardBrake = 10;</code>
     *
     * <pre>
     *&#47; Trigger: mG (Note: 1 mG = 0,0098 m/s2) Debounce: Miliseconds SupportedBy: MXT162
     * </pre>
     */
    public boolean hasHardBrake() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional .maxpb.GSensorAlarmConfig hardBrake = 10;</code>
     *
     * <pre>
     *&#47; Trigger: mG (Note: 1 mG = 0,0098 m/s2) Debounce: Miliseconds SupportedBy: MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.GSensorAlarmConfig getHardBrake() {
      return hardBrake_;
    }
    /**
     * <code>optional .maxpb.GSensorAlarmConfig hardBrake = 10;</code>
     *
     * <pre>
     *&#47; Trigger: mG (Note: 1 mG = 0,0098 m/s2) Debounce: Miliseconds SupportedBy: MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.GSensorAlarmConfigOrBuilder getHardBrakeOrBuilder() {
      return hardBrake_;
    }

    public static final int HARDCURVE_FIELD_NUMBER = 11;
    private maxpb.MaxpbTelemetry.GSensorAlarmConfig hardCurve_;
    /**
     * <code>optional .maxpb.GSensorAlarmConfig hardCurve = 11;</code>
     *
     * <pre>
     *&#47; Trigger: mG (Note: 1 mG = 0,0098 m/s2) Debounce: Miliseconds SupportedBy: MXT162
     * </pre>
     */
    public boolean hasHardCurve() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional .maxpb.GSensorAlarmConfig hardCurve = 11;</code>
     *
     * <pre>
     *&#47; Trigger: mG (Note: 1 mG = 0,0098 m/s2) Debounce: Miliseconds SupportedBy: MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.GSensorAlarmConfig getHardCurve() {
      return hardCurve_;
    }
    /**
     * <code>optional .maxpb.GSensorAlarmConfig hardCurve = 11;</code>
     *
     * <pre>
     *&#47; Trigger: mG (Note: 1 mG = 0,0098 m/s2) Debounce: Miliseconds SupportedBy: MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.GSensorAlarmConfigOrBuilder getHardCurveOrBuilder() {
      return hardCurve_;
    }

    public static final int HARDBUMP_FIELD_NUMBER = 12;
    private maxpb.MaxpbTelemetry.GSensorAlarmConfig hardBump_;
    /**
     * <code>optional .maxpb.GSensorAlarmConfig hardBump = 12;</code>
     *
     * <pre>
     *&#47; Trigger: mG (Note: 1 mG = 0,0098 m/s2) Debounce: Miliseconds SupportedBy: MXT162
     * </pre>
     */
    public boolean hasHardBump() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional .maxpb.GSensorAlarmConfig hardBump = 12;</code>
     *
     * <pre>
     *&#47; Trigger: mG (Note: 1 mG = 0,0098 m/s2) Debounce: Miliseconds SupportedBy: MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.GSensorAlarmConfig getHardBump() {
      return hardBump_;
    }
    /**
     * <code>optional .maxpb.GSensorAlarmConfig hardBump = 12;</code>
     *
     * <pre>
     *&#47; Trigger: mG (Note: 1 mG = 0,0098 m/s2) Debounce: Miliseconds SupportedBy: MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.GSensorAlarmConfigOrBuilder getHardBumpOrBuilder() {
      return hardBump_;
    }

    public static final int HARDCRASH_FIELD_NUMBER = 13;
    private maxpb.MaxpbTelemetry.GSensorAlarmConfig hardCrash_;
    /**
     * <code>optional .maxpb.GSensorAlarmConfig hardCrash = 13;</code>
     *
     * <pre>
     *&#47; Trigger: mG (Note: 1 mG = 0,0098 m/s2) Debounce: Miliseconds SupportedBy: MXT162
     * </pre>
     */
    public boolean hasHardCrash() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>optional .maxpb.GSensorAlarmConfig hardCrash = 13;</code>
     *
     * <pre>
     *&#47; Trigger: mG (Note: 1 mG = 0,0098 m/s2) Debounce: Miliseconds SupportedBy: MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.GSensorAlarmConfig getHardCrash() {
      return hardCrash_;
    }
    /**
     * <code>optional .maxpb.GSensorAlarmConfig hardCrash = 13;</code>
     *
     * <pre>
     *&#47; Trigger: mG (Note: 1 mG = 0,0098 m/s2) Debounce: Miliseconds SupportedBy: MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.GSensorAlarmConfigOrBuilder getHardCrashOrBuilder() {
      return hardCrash_;
    }

    public static final int EVENTSMASK_FIELD_NUMBER = 14;
    private maxpb.MaxpbTelemetry.TelemetryEventsTransmissionMask eventsMask_;
    /**
     * <code>optional .maxpb.TelemetryEventsTransmissionMask eventsMask = 14;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    public boolean hasEventsMask() {
      return ((bitField0_ & 0x00002000) == 0x00002000);
    }
    /**
     * <code>optional .maxpb.TelemetryEventsTransmissionMask eventsMask = 14;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    public maxpb.MaxpbTelemetry.TelemetryEventsTransmissionMask getEventsMask() {
      return eventsMask_;
    }
    /**
     * <code>optional .maxpb.TelemetryEventsTransmissionMask eventsMask = 14;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    public maxpb.MaxpbTelemetry.TelemetryEventsTransmissionMaskOrBuilder getEventsMaskOrBuilder() {
      return eventsMask_;
    }

    public static final int RPM_FIELD_NUMBER = 15;
    private maxpb.MaxpbTelemetry.RpmConfig rpm_;
    /**
     * <code>optional .maxpb.RpmConfig rpm = 15;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public boolean hasRpm() {
      return ((bitField0_ & 0x00004000) == 0x00004000);
    }
    /**
     * <code>optional .maxpb.RpmConfig rpm = 15;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public maxpb.MaxpbTelemetry.RpmConfig getRpm() {
      return rpm_;
    }
    /**
     * <code>optional .maxpb.RpmConfig rpm = 15;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public maxpb.MaxpbTelemetry.RpmConfigOrBuilder getRpmOrBuilder() {
      return rpm_;
    }

    public static final int DELTA_FIELD_NUMBER = 16;
    private maxpb.MaxpbTelemetry.DeltaConfig delta_;
    /**
     * <code>optional .maxpb.DeltaConfig delta = 16;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasDelta() {
      return ((bitField0_ & 0x00008000) == 0x00008000);
    }
    /**
     * <code>optional .maxpb.DeltaConfig delta = 16;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.DeltaConfig getDelta() {
      return delta_;
    }
    /**
     * <code>optional .maxpb.DeltaConfig delta = 16;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.DeltaConfigOrBuilder getDeltaOrBuilder() {
      return delta_;
    }

    public static final int HISTORYSAMPLES_FIELD_NUMBER = 17;
    private maxpb.MaxpbTelemetry.AccelerometerHistorySamples historySamples_;
    /**
     * <code>optional .maxpb.AccelerometerHistorySamples historySamples = 17;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasHistorySamples() {
      return ((bitField0_ & 0x00010000) == 0x00010000);
    }
    /**
     * <code>optional .maxpb.AccelerometerHistorySamples historySamples = 17;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.AccelerometerHistorySamples getHistorySamples() {
      return historySamples_;
    }

    public static final int HISTORYEVENTMASK_FIELD_NUMBER = 18;
    private int historyEventMask_;
    /**
     * <code>optional uint32 historyEventMask = 18;</code>
     *
     * <pre>
     *&#47; Used HistoryEvents values as bitmask SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasHistoryEventMask() {
      return ((bitField0_ & 0x00020000) == 0x00020000);
    }
    /**
     * <code>optional uint32 historyEventMask = 18;</code>
     *
     * <pre>
     *&#47; Used HistoryEvents values as bitmask SupportedBy: MXT160, MXT162
     * </pre>
     */
    public int getHistoryEventMask() {
      return historyEventMask_;
    }

    public static final int ACCODOMETERSPEEDLIMIT_FIELD_NUMBER = 19;
    private int accOdometerSpeedLimit_;
    /**
     * <code>optional uint32 accOdometerSpeedLimit = 19;</code>
     *
     * <pre>
     *&#47; Km/h SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasAccOdometerSpeedLimit() {
      return ((bitField0_ & 0x00040000) == 0x00040000);
    }
    /**
     * <code>optional uint32 accOdometerSpeedLimit = 19;</code>
     *
     * <pre>
     *&#47; Km/h SupportedBy: MXT160, MXT162
     * </pre>
     */
    public int getAccOdometerSpeedLimit() {
      return accOdometerSpeedLimit_;
    }

    public static final int MINIMALTIMEBETWEENCRASHEVENTS_FIELD_NUMBER = 20;
    private int minimalTimeBetweenCrashEvents_;
    /**
     * <code>optional uint32 minimalTimeBetweenCrashEvents = 20;</code>
     *
     * <pre>
     *&#47; Seconds SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasMinimalTimeBetweenCrashEvents() {
      return ((bitField0_ & 0x00080000) == 0x00080000);
    }
    /**
     * <code>optional uint32 minimalTimeBetweenCrashEvents = 20;</code>
     *
     * <pre>
     *&#47; Seconds SupportedBy: MXT160, MXT162
     * </pre>
     */
    public int getMinimalTimeBetweenCrashEvents() {
      return minimalTimeBetweenCrashEvents_;
    }

    public static final int RECALIBACCELEROMETERNOEXTPOWER_FIELD_NUMBER = 21;
    private boolean recalibAccelerometerNoExtPower_;
    /**
     * <code>optional bool recalibAccelerometerNoExtPower = 21;</code>
     *
     * <pre>
     *&#47; Starts accelerometer recalibration when external power is disconnected SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasRecalibAccelerometerNoExtPower() {
      return ((bitField0_ & 0x00100000) == 0x00100000);
    }
    /**
     * <code>optional bool recalibAccelerometerNoExtPower = 21;</code>
     *
     * <pre>
     *&#47; Starts accelerometer recalibration when external power is disconnected SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean getRecalibAccelerometerNoExtPower() {
      return recalibAccelerometerNoExtPower_;
    }

    public static final int FIXEDCANLIBRARY_FIELD_NUMBER = 22;
    private boolean fixedCanLibrary_;
    /**
     * <code>optional bool fixedCanLibrary = 22;</code>
     *
     * <pre>
     *&#47; True: Use embedded can library False: Try to discover library automatically SupportedBy: MXT162, MAXIO
     * </pre>
     */
    public boolean hasFixedCanLibrary() {
      return ((bitField0_ & 0x00200000) == 0x00200000);
    }
    /**
     * <code>optional bool fixedCanLibrary = 22;</code>
     *
     * <pre>
     *&#47; True: Use embedded can library False: Try to discover library automatically SupportedBy: MXT162, MAXIO
     * </pre>
     */
    public boolean getFixedCanLibrary() {
      return fixedCanLibrary_;
    }

    public static final int BLACKBOX_FIELD_NUMBER = 23;
    private boolean blackBox_;
    /**
     * <code>optional bool blackBox = 23;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasBlackBox() {
      return ((bitField0_ & 0x00400000) == 0x00400000);
    }
    /**
     * <code>optional bool blackBox = 23;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean getBlackBox() {
      return blackBox_;
    }

    public static final int BLACKBOXREPORTTIME_FIELD_NUMBER = 24;
    private int blackBoxReportTime_;
    /**
     * <code>optional uint32 blackBoxReportTime = 24;</code>
     *
     * <pre>
     *&#47; Minutes - Maximum value is 1440 (1 day) SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasBlackBoxReportTime() {
      return ((bitField0_ & 0x00800000) == 0x00800000);
    }
    /**
     * <code>optional uint32 blackBoxReportTime = 24;</code>
     *
     * <pre>
     *&#47; Minutes - Maximum value is 1440 (1 day) SupportedBy: MXT160, MXT162
     * </pre>
     */
    public int getBlackBoxReportTime() {
      return blackBoxReportTime_;
    }

    private void initFields() {
      speeds_ = maxpb.MaxpbTelemetry.SpeedsConfig.getDefaultInstance();
      timers_ = maxpb.MaxpbTelemetry.TimersConfig.getDefaultInstance();
      debounceMoving_ = 0;
      debounceStopped_ = 0;
      pitchingMin_ = 0;
      pitchingMax_ = 0;
      rollingMin_ = 0;
      rollingMax_ = 0;
      hardAcceleration_ = maxpb.MaxpbTelemetry.GSensorAlarmConfig.getDefaultInstance();
      hardBrake_ = maxpb.MaxpbTelemetry.GSensorAlarmConfig.getDefaultInstance();
      hardCurve_ = maxpb.MaxpbTelemetry.GSensorAlarmConfig.getDefaultInstance();
      hardBump_ = maxpb.MaxpbTelemetry.GSensorAlarmConfig.getDefaultInstance();
      hardCrash_ = maxpb.MaxpbTelemetry.GSensorAlarmConfig.getDefaultInstance();
      eventsMask_ = maxpb.MaxpbTelemetry.TelemetryEventsTransmissionMask.getDefaultInstance();
      rpm_ = maxpb.MaxpbTelemetry.RpmConfig.getDefaultInstance();
      delta_ = maxpb.MaxpbTelemetry.DeltaConfig.getDefaultInstance();
      historySamples_ = maxpb.MaxpbTelemetry.AccelerometerHistorySamples.AH_4HZ;
      historyEventMask_ = 0;
      accOdometerSpeedLimit_ = 0;
      minimalTimeBetweenCrashEvents_ = 0;
      recalibAccelerometerNoExtPower_ = false;
      fixedCanLibrary_ = false;
      blackBox_ = false;
      blackBoxReportTime_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, speeds_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, timers_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(3, debounceMoving_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeUInt32(4, debounceStopped_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(5, pitchingMin_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(6, pitchingMax_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeInt32(7, rollingMin_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeInt32(8, rollingMax_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeMessage(9, hardAcceleration_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeMessage(10, hardBrake_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeMessage(11, hardCurve_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeMessage(12, hardBump_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeMessage(13, hardCrash_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        output.writeMessage(14, eventsMask_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        output.writeMessage(15, rpm_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        output.writeMessage(16, delta_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        output.writeEnum(17, historySamples_.getNumber());
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        output.writeUInt32(18, historyEventMask_);
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        output.writeUInt32(19, accOdometerSpeedLimit_);
      }
      if (((bitField0_ & 0x00080000) == 0x00080000)) {
        output.writeUInt32(20, minimalTimeBetweenCrashEvents_);
      }
      if (((bitField0_ & 0x00100000) == 0x00100000)) {
        output.writeBool(21, recalibAccelerometerNoExtPower_);
      }
      if (((bitField0_ & 0x00200000) == 0x00200000)) {
        output.writeBool(22, fixedCanLibrary_);
      }
      if (((bitField0_ & 0x00400000) == 0x00400000)) {
        output.writeBool(23, blackBox_);
      }
      if (((bitField0_ & 0x00800000) == 0x00800000)) {
        output.writeUInt32(24, blackBoxReportTime_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, speeds_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, timers_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, debounceMoving_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, debounceStopped_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, pitchingMin_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, pitchingMax_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(7, rollingMin_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(8, rollingMax_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(9, hardAcceleration_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(10, hardBrake_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(11, hardCurve_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(12, hardBump_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(13, hardCrash_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(14, eventsMask_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(15, rpm_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(16, delta_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(17, historySamples_.getNumber());
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(18, historyEventMask_);
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(19, accOdometerSpeedLimit_);
      }
      if (((bitField0_ & 0x00080000) == 0x00080000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(20, minimalTimeBetweenCrashEvents_);
      }
      if (((bitField0_ & 0x00100000) == 0x00100000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(21, recalibAccelerometerNoExtPower_);
      }
      if (((bitField0_ & 0x00200000) == 0x00200000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(22, fixedCanLibrary_);
      }
      if (((bitField0_ & 0x00400000) == 0x00400000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(23, blackBox_);
      }
      if (((bitField0_ & 0x00800000) == 0x00800000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(24, blackBoxReportTime_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static maxpb.MaxpbTelemetry.TelemetryConfig parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static maxpb.MaxpbTelemetry.TelemetryConfig parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetry.TelemetryConfig parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static maxpb.MaxpbTelemetry.TelemetryConfig parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetry.TelemetryConfig parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static maxpb.MaxpbTelemetry.TelemetryConfig parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetry.TelemetryConfig parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static maxpb.MaxpbTelemetry.TelemetryConfig parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetry.TelemetryConfig parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static maxpb.MaxpbTelemetry.TelemetryConfig parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(maxpb.MaxpbTelemetry.TelemetryConfig prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code maxpb.TelemetryConfig}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:maxpb.TelemetryConfig)
        maxpb.MaxpbTelemetry.TelemetryConfigOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return maxpb.MaxpbTelemetry.internal_static_maxpb_TelemetryConfig_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return maxpb.MaxpbTelemetry.internal_static_maxpb_TelemetryConfig_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                maxpb.MaxpbTelemetry.TelemetryConfig.class, maxpb.MaxpbTelemetry.TelemetryConfig.Builder.class);
      }

      // Construct using maxpb.MaxpbTelemetry.TelemetryConfig.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getSpeedsFieldBuilder();
          getTimersFieldBuilder();
          getHardAccelerationFieldBuilder();
          getHardBrakeFieldBuilder();
          getHardCurveFieldBuilder();
          getHardBumpFieldBuilder();
          getHardCrashFieldBuilder();
          getEventsMaskFieldBuilder();
          getRpmFieldBuilder();
          getDeltaFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (speedsBuilder_ == null) {
          speeds_ = maxpb.MaxpbTelemetry.SpeedsConfig.getDefaultInstance();
        } else {
          speedsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        if (timersBuilder_ == null) {
          timers_ = maxpb.MaxpbTelemetry.TimersConfig.getDefaultInstance();
        } else {
          timersBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        debounceMoving_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        debounceStopped_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        pitchingMin_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        pitchingMax_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        rollingMin_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        rollingMax_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        if (hardAccelerationBuilder_ == null) {
          hardAcceleration_ = maxpb.MaxpbTelemetry.GSensorAlarmConfig.getDefaultInstance();
        } else {
          hardAccelerationBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000100);
        if (hardBrakeBuilder_ == null) {
          hardBrake_ = maxpb.MaxpbTelemetry.GSensorAlarmConfig.getDefaultInstance();
        } else {
          hardBrakeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000200);
        if (hardCurveBuilder_ == null) {
          hardCurve_ = maxpb.MaxpbTelemetry.GSensorAlarmConfig.getDefaultInstance();
        } else {
          hardCurveBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000400);
        if (hardBumpBuilder_ == null) {
          hardBump_ = maxpb.MaxpbTelemetry.GSensorAlarmConfig.getDefaultInstance();
        } else {
          hardBumpBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000800);
        if (hardCrashBuilder_ == null) {
          hardCrash_ = maxpb.MaxpbTelemetry.GSensorAlarmConfig.getDefaultInstance();
        } else {
          hardCrashBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00001000);
        if (eventsMaskBuilder_ == null) {
          eventsMask_ = maxpb.MaxpbTelemetry.TelemetryEventsTransmissionMask.getDefaultInstance();
        } else {
          eventsMaskBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00002000);
        if (rpmBuilder_ == null) {
          rpm_ = maxpb.MaxpbTelemetry.RpmConfig.getDefaultInstance();
        } else {
          rpmBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00004000);
        if (deltaBuilder_ == null) {
          delta_ = maxpb.MaxpbTelemetry.DeltaConfig.getDefaultInstance();
        } else {
          deltaBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00008000);
        historySamples_ = maxpb.MaxpbTelemetry.AccelerometerHistorySamples.AH_4HZ;
        bitField0_ = (bitField0_ & ~0x00010000);
        historyEventMask_ = 0;
        bitField0_ = (bitField0_ & ~0x00020000);
        accOdometerSpeedLimit_ = 0;
        bitField0_ = (bitField0_ & ~0x00040000);
        minimalTimeBetweenCrashEvents_ = 0;
        bitField0_ = (bitField0_ & ~0x00080000);
        recalibAccelerometerNoExtPower_ = false;
        bitField0_ = (bitField0_ & ~0x00100000);
        fixedCanLibrary_ = false;
        bitField0_ = (bitField0_ & ~0x00200000);
        blackBox_ = false;
        bitField0_ = (bitField0_ & ~0x00400000);
        blackBoxReportTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00800000);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return maxpb.MaxpbTelemetry.internal_static_maxpb_TelemetryConfig_descriptor;
      }

      public maxpb.MaxpbTelemetry.TelemetryConfig getDefaultInstanceForType() {
        return maxpb.MaxpbTelemetry.TelemetryConfig.getDefaultInstance();
      }

      public maxpb.MaxpbTelemetry.TelemetryConfig build() {
        maxpb.MaxpbTelemetry.TelemetryConfig result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public maxpb.MaxpbTelemetry.TelemetryConfig buildPartial() {
        maxpb.MaxpbTelemetry.TelemetryConfig result = new maxpb.MaxpbTelemetry.TelemetryConfig(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (speedsBuilder_ == null) {
          result.speeds_ = speeds_;
        } else {
          result.speeds_ = speedsBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        if (timersBuilder_ == null) {
          result.timers_ = timers_;
        } else {
          result.timers_ = timersBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.debounceMoving_ = debounceMoving_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.debounceStopped_ = debounceStopped_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.pitchingMin_ = pitchingMin_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.pitchingMax_ = pitchingMax_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.rollingMin_ = rollingMin_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.rollingMax_ = rollingMax_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        if (hardAccelerationBuilder_ == null) {
          result.hardAcceleration_ = hardAcceleration_;
        } else {
          result.hardAcceleration_ = hardAccelerationBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        if (hardBrakeBuilder_ == null) {
          result.hardBrake_ = hardBrake_;
        } else {
          result.hardBrake_ = hardBrakeBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        if (hardCurveBuilder_ == null) {
          result.hardCurve_ = hardCurve_;
        } else {
          result.hardCurve_ = hardCurveBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000800;
        }
        if (hardBumpBuilder_ == null) {
          result.hardBump_ = hardBump_;
        } else {
          result.hardBump_ = hardBumpBuilder_.build();
        }
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00001000;
        }
        if (hardCrashBuilder_ == null) {
          result.hardCrash_ = hardCrash_;
        } else {
          result.hardCrash_ = hardCrashBuilder_.build();
        }
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00002000;
        }
        if (eventsMaskBuilder_ == null) {
          result.eventsMask_ = eventsMask_;
        } else {
          result.eventsMask_ = eventsMaskBuilder_.build();
        }
        if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
          to_bitField0_ |= 0x00004000;
        }
        if (rpmBuilder_ == null) {
          result.rpm_ = rpm_;
        } else {
          result.rpm_ = rpmBuilder_.build();
        }
        if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
          to_bitField0_ |= 0x00008000;
        }
        if (deltaBuilder_ == null) {
          result.delta_ = delta_;
        } else {
          result.delta_ = deltaBuilder_.build();
        }
        if (((from_bitField0_ & 0x00010000) == 0x00010000)) {
          to_bitField0_ |= 0x00010000;
        }
        result.historySamples_ = historySamples_;
        if (((from_bitField0_ & 0x00020000) == 0x00020000)) {
          to_bitField0_ |= 0x00020000;
        }
        result.historyEventMask_ = historyEventMask_;
        if (((from_bitField0_ & 0x00040000) == 0x00040000)) {
          to_bitField0_ |= 0x00040000;
        }
        result.accOdometerSpeedLimit_ = accOdometerSpeedLimit_;
        if (((from_bitField0_ & 0x00080000) == 0x00080000)) {
          to_bitField0_ |= 0x00080000;
        }
        result.minimalTimeBetweenCrashEvents_ = minimalTimeBetweenCrashEvents_;
        if (((from_bitField0_ & 0x00100000) == 0x00100000)) {
          to_bitField0_ |= 0x00100000;
        }
        result.recalibAccelerometerNoExtPower_ = recalibAccelerometerNoExtPower_;
        if (((from_bitField0_ & 0x00200000) == 0x00200000)) {
          to_bitField0_ |= 0x00200000;
        }
        result.fixedCanLibrary_ = fixedCanLibrary_;
        if (((from_bitField0_ & 0x00400000) == 0x00400000)) {
          to_bitField0_ |= 0x00400000;
        }
        result.blackBox_ = blackBox_;
        if (((from_bitField0_ & 0x00800000) == 0x00800000)) {
          to_bitField0_ |= 0x00800000;
        }
        result.blackBoxReportTime_ = blackBoxReportTime_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof maxpb.MaxpbTelemetry.TelemetryConfig) {
          return mergeFrom((maxpb.MaxpbTelemetry.TelemetryConfig)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(maxpb.MaxpbTelemetry.TelemetryConfig other) {
        if (other == maxpb.MaxpbTelemetry.TelemetryConfig.getDefaultInstance()) return this;
        if (other.hasSpeeds()) {
          mergeSpeeds(other.getSpeeds());
        }
        if (other.hasTimers()) {
          mergeTimers(other.getTimers());
        }
        if (other.hasDebounceMoving()) {
          setDebounceMoving(other.getDebounceMoving());
        }
        if (other.hasDebounceStopped()) {
          setDebounceStopped(other.getDebounceStopped());
        }
        if (other.hasPitchingMin()) {
          setPitchingMin(other.getPitchingMin());
        }
        if (other.hasPitchingMax()) {
          setPitchingMax(other.getPitchingMax());
        }
        if (other.hasRollingMin()) {
          setRollingMin(other.getRollingMin());
        }
        if (other.hasRollingMax()) {
          setRollingMax(other.getRollingMax());
        }
        if (other.hasHardAcceleration()) {
          mergeHardAcceleration(other.getHardAcceleration());
        }
        if (other.hasHardBrake()) {
          mergeHardBrake(other.getHardBrake());
        }
        if (other.hasHardCurve()) {
          mergeHardCurve(other.getHardCurve());
        }
        if (other.hasHardBump()) {
          mergeHardBump(other.getHardBump());
        }
        if (other.hasHardCrash()) {
          mergeHardCrash(other.getHardCrash());
        }
        if (other.hasEventsMask()) {
          mergeEventsMask(other.getEventsMask());
        }
        if (other.hasRpm()) {
          mergeRpm(other.getRpm());
        }
        if (other.hasDelta()) {
          mergeDelta(other.getDelta());
        }
        if (other.hasHistorySamples()) {
          setHistorySamples(other.getHistorySamples());
        }
        if (other.hasHistoryEventMask()) {
          setHistoryEventMask(other.getHistoryEventMask());
        }
        if (other.hasAccOdometerSpeedLimit()) {
          setAccOdometerSpeedLimit(other.getAccOdometerSpeedLimit());
        }
        if (other.hasMinimalTimeBetweenCrashEvents()) {
          setMinimalTimeBetweenCrashEvents(other.getMinimalTimeBetweenCrashEvents());
        }
        if (other.hasRecalibAccelerometerNoExtPower()) {
          setRecalibAccelerometerNoExtPower(other.getRecalibAccelerometerNoExtPower());
        }
        if (other.hasFixedCanLibrary()) {
          setFixedCanLibrary(other.getFixedCanLibrary());
        }
        if (other.hasBlackBox()) {
          setBlackBox(other.getBlackBox());
        }
        if (other.hasBlackBoxReportTime()) {
          setBlackBoxReportTime(other.getBlackBoxReportTime());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        maxpb.MaxpbTelemetry.TelemetryConfig parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (maxpb.MaxpbTelemetry.TelemetryConfig) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private maxpb.MaxpbTelemetry.SpeedsConfig speeds_ = maxpb.MaxpbTelemetry.SpeedsConfig.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.SpeedsConfig, maxpb.MaxpbTelemetry.SpeedsConfig.Builder, maxpb.MaxpbTelemetry.SpeedsConfigOrBuilder> speedsBuilder_;
      /**
       * <code>optional .maxpb.SpeedsConfig speeds = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public boolean hasSpeeds() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .maxpb.SpeedsConfig speeds = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public maxpb.MaxpbTelemetry.SpeedsConfig getSpeeds() {
        if (speedsBuilder_ == null) {
          return speeds_;
        } else {
          return speedsBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .maxpb.SpeedsConfig speeds = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public Builder setSpeeds(maxpb.MaxpbTelemetry.SpeedsConfig value) {
        if (speedsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          speeds_ = value;
          onChanged();
        } else {
          speedsBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .maxpb.SpeedsConfig speeds = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public Builder setSpeeds(
          maxpb.MaxpbTelemetry.SpeedsConfig.Builder builderForValue) {
        if (speedsBuilder_ == null) {
          speeds_ = builderForValue.build();
          onChanged();
        } else {
          speedsBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .maxpb.SpeedsConfig speeds = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public Builder mergeSpeeds(maxpb.MaxpbTelemetry.SpeedsConfig value) {
        if (speedsBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              speeds_ != maxpb.MaxpbTelemetry.SpeedsConfig.getDefaultInstance()) {
            speeds_ =
              maxpb.MaxpbTelemetry.SpeedsConfig.newBuilder(speeds_).mergeFrom(value).buildPartial();
          } else {
            speeds_ = value;
          }
          onChanged();
        } else {
          speedsBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .maxpb.SpeedsConfig speeds = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public Builder clearSpeeds() {
        if (speedsBuilder_ == null) {
          speeds_ = maxpb.MaxpbTelemetry.SpeedsConfig.getDefaultInstance();
          onChanged();
        } else {
          speedsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>optional .maxpb.SpeedsConfig speeds = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public maxpb.MaxpbTelemetry.SpeedsConfig.Builder getSpeedsBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getSpeedsFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .maxpb.SpeedsConfig speeds = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public maxpb.MaxpbTelemetry.SpeedsConfigOrBuilder getSpeedsOrBuilder() {
        if (speedsBuilder_ != null) {
          return speedsBuilder_.getMessageOrBuilder();
        } else {
          return speeds_;
        }
      }
      /**
       * <code>optional .maxpb.SpeedsConfig speeds = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.SpeedsConfig, maxpb.MaxpbTelemetry.SpeedsConfig.Builder, maxpb.MaxpbTelemetry.SpeedsConfigOrBuilder> 
          getSpeedsFieldBuilder() {
        if (speedsBuilder_ == null) {
          speedsBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              maxpb.MaxpbTelemetry.SpeedsConfig, maxpb.MaxpbTelemetry.SpeedsConfig.Builder, maxpb.MaxpbTelemetry.SpeedsConfigOrBuilder>(
                  getSpeeds(),
                  getParentForChildren(),
                  isClean());
          speeds_ = null;
        }
        return speedsBuilder_;
      }

      private maxpb.MaxpbTelemetry.TimersConfig timers_ = maxpb.MaxpbTelemetry.TimersConfig.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.TimersConfig, maxpb.MaxpbTelemetry.TimersConfig.Builder, maxpb.MaxpbTelemetry.TimersConfigOrBuilder> timersBuilder_;
      /**
       * <code>optional .maxpb.TimersConfig timers = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public boolean hasTimers() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional .maxpb.TimersConfig timers = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public maxpb.MaxpbTelemetry.TimersConfig getTimers() {
        if (timersBuilder_ == null) {
          return timers_;
        } else {
          return timersBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .maxpb.TimersConfig timers = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public Builder setTimers(maxpb.MaxpbTelemetry.TimersConfig value) {
        if (timersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          timers_ = value;
          onChanged();
        } else {
          timersBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .maxpb.TimersConfig timers = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public Builder setTimers(
          maxpb.MaxpbTelemetry.TimersConfig.Builder builderForValue) {
        if (timersBuilder_ == null) {
          timers_ = builderForValue.build();
          onChanged();
        } else {
          timersBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .maxpb.TimersConfig timers = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public Builder mergeTimers(maxpb.MaxpbTelemetry.TimersConfig value) {
        if (timersBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              timers_ != maxpb.MaxpbTelemetry.TimersConfig.getDefaultInstance()) {
            timers_ =
              maxpb.MaxpbTelemetry.TimersConfig.newBuilder(timers_).mergeFrom(value).buildPartial();
          } else {
            timers_ = value;
          }
          onChanged();
        } else {
          timersBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .maxpb.TimersConfig timers = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public Builder clearTimers() {
        if (timersBuilder_ == null) {
          timers_ = maxpb.MaxpbTelemetry.TimersConfig.getDefaultInstance();
          onChanged();
        } else {
          timersBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      /**
       * <code>optional .maxpb.TimersConfig timers = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public maxpb.MaxpbTelemetry.TimersConfig.Builder getTimersBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getTimersFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .maxpb.TimersConfig timers = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public maxpb.MaxpbTelemetry.TimersConfigOrBuilder getTimersOrBuilder() {
        if (timersBuilder_ != null) {
          return timersBuilder_.getMessageOrBuilder();
        } else {
          return timers_;
        }
      }
      /**
       * <code>optional .maxpb.TimersConfig timers = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.TimersConfig, maxpb.MaxpbTelemetry.TimersConfig.Builder, maxpb.MaxpbTelemetry.TimersConfigOrBuilder> 
          getTimersFieldBuilder() {
        if (timersBuilder_ == null) {
          timersBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              maxpb.MaxpbTelemetry.TimersConfig, maxpb.MaxpbTelemetry.TimersConfig.Builder, maxpb.MaxpbTelemetry.TimersConfigOrBuilder>(
                  getTimers(),
                  getParentForChildren(),
                  isClean());
          timers_ = null;
        }
        return timersBuilder_;
      }

      private int debounceMoving_ ;
      /**
       * <code>optional uint32 debounceMoving = 3;</code>
       *
       * <pre>
       *&#47; Miliseconds SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public boolean hasDebounceMoving() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional uint32 debounceMoving = 3;</code>
       *
       * <pre>
       *&#47; Miliseconds SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public int getDebounceMoving() {
        return debounceMoving_;
      }
      /**
       * <code>optional uint32 debounceMoving = 3;</code>
       *
       * <pre>
       *&#47; Miliseconds SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public Builder setDebounceMoving(int value) {
        bitField0_ |= 0x00000004;
        debounceMoving_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 debounceMoving = 3;</code>
       *
       * <pre>
       *&#47; Miliseconds SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public Builder clearDebounceMoving() {
        bitField0_ = (bitField0_ & ~0x00000004);
        debounceMoving_ = 0;
        onChanged();
        return this;
      }

      private int debounceStopped_ ;
      /**
       * <code>optional uint32 debounceStopped = 4;</code>
       *
       * <pre>
       *&#47; Miliseconds SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public boolean hasDebounceStopped() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional uint32 debounceStopped = 4;</code>
       *
       * <pre>
       *&#47; Miliseconds SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public int getDebounceStopped() {
        return debounceStopped_;
      }
      /**
       * <code>optional uint32 debounceStopped = 4;</code>
       *
       * <pre>
       *&#47; Miliseconds SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public Builder setDebounceStopped(int value) {
        bitField0_ |= 0x00000008;
        debounceStopped_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 debounceStopped = 4;</code>
       *
       * <pre>
       *&#47; Miliseconds SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public Builder clearDebounceStopped() {
        bitField0_ = (bitField0_ & ~0x00000008);
        debounceStopped_ = 0;
        onChanged();
        return this;
      }

      private int pitchingMin_ ;
      /**
       * <code>optional int32 pitchingMin = 5;</code>
       *
       * <pre>
       *&#47; Degrees SupportedBy: MXT162
       * </pre>
       */
      public boolean hasPitchingMin() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional int32 pitchingMin = 5;</code>
       *
       * <pre>
       *&#47; Degrees SupportedBy: MXT162
       * </pre>
       */
      public int getPitchingMin() {
        return pitchingMin_;
      }
      /**
       * <code>optional int32 pitchingMin = 5;</code>
       *
       * <pre>
       *&#47; Degrees SupportedBy: MXT162
       * </pre>
       */
      public Builder setPitchingMin(int value) {
        bitField0_ |= 0x00000010;
        pitchingMin_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 pitchingMin = 5;</code>
       *
       * <pre>
       *&#47; Degrees SupportedBy: MXT162
       * </pre>
       */
      public Builder clearPitchingMin() {
        bitField0_ = (bitField0_ & ~0x00000010);
        pitchingMin_ = 0;
        onChanged();
        return this;
      }

      private int pitchingMax_ ;
      /**
       * <code>optional int32 pitchingMax = 6;</code>
       *
       * <pre>
       *&#47; Degrees SupportedBy: MXT162
       * </pre>
       */
      public boolean hasPitchingMax() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional int32 pitchingMax = 6;</code>
       *
       * <pre>
       *&#47; Degrees SupportedBy: MXT162
       * </pre>
       */
      public int getPitchingMax() {
        return pitchingMax_;
      }
      /**
       * <code>optional int32 pitchingMax = 6;</code>
       *
       * <pre>
       *&#47; Degrees SupportedBy: MXT162
       * </pre>
       */
      public Builder setPitchingMax(int value) {
        bitField0_ |= 0x00000020;
        pitchingMax_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 pitchingMax = 6;</code>
       *
       * <pre>
       *&#47; Degrees SupportedBy: MXT162
       * </pre>
       */
      public Builder clearPitchingMax() {
        bitField0_ = (bitField0_ & ~0x00000020);
        pitchingMax_ = 0;
        onChanged();
        return this;
      }

      private int rollingMin_ ;
      /**
       * <code>optional int32 rollingMin = 7;</code>
       *
       * <pre>
       *&#47; Degrees SupportedBy: MXT162
       * </pre>
       */
      public boolean hasRollingMin() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional int32 rollingMin = 7;</code>
       *
       * <pre>
       *&#47; Degrees SupportedBy: MXT162
       * </pre>
       */
      public int getRollingMin() {
        return rollingMin_;
      }
      /**
       * <code>optional int32 rollingMin = 7;</code>
       *
       * <pre>
       *&#47; Degrees SupportedBy: MXT162
       * </pre>
       */
      public Builder setRollingMin(int value) {
        bitField0_ |= 0x00000040;
        rollingMin_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 rollingMin = 7;</code>
       *
       * <pre>
       *&#47; Degrees SupportedBy: MXT162
       * </pre>
       */
      public Builder clearRollingMin() {
        bitField0_ = (bitField0_ & ~0x00000040);
        rollingMin_ = 0;
        onChanged();
        return this;
      }

      private int rollingMax_ ;
      /**
       * <code>optional int32 rollingMax = 8;</code>
       *
       * <pre>
       *&#47; Degrees SupportedBy: MXT162
       * </pre>
       */
      public boolean hasRollingMax() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional int32 rollingMax = 8;</code>
       *
       * <pre>
       *&#47; Degrees SupportedBy: MXT162
       * </pre>
       */
      public int getRollingMax() {
        return rollingMax_;
      }
      /**
       * <code>optional int32 rollingMax = 8;</code>
       *
       * <pre>
       *&#47; Degrees SupportedBy: MXT162
       * </pre>
       */
      public Builder setRollingMax(int value) {
        bitField0_ |= 0x00000080;
        rollingMax_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 rollingMax = 8;</code>
       *
       * <pre>
       *&#47; Degrees SupportedBy: MXT162
       * </pre>
       */
      public Builder clearRollingMax() {
        bitField0_ = (bitField0_ & ~0x00000080);
        rollingMax_ = 0;
        onChanged();
        return this;
      }

      private maxpb.MaxpbTelemetry.GSensorAlarmConfig hardAcceleration_ = maxpb.MaxpbTelemetry.GSensorAlarmConfig.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.GSensorAlarmConfig, maxpb.MaxpbTelemetry.GSensorAlarmConfig.Builder, maxpb.MaxpbTelemetry.GSensorAlarmConfigOrBuilder> hardAccelerationBuilder_;
      /**
       * <code>optional .maxpb.GSensorAlarmConfig hardAcceleration = 9;</code>
       *
       * <pre>
       *&#47; Trigger: mG (Note: 1 mG = 0,0098 m/s2) Debounce: Miliseconds SupportedBy: MXT162
       * </pre>
       */
      public boolean hasHardAcceleration() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional .maxpb.GSensorAlarmConfig hardAcceleration = 9;</code>
       *
       * <pre>
       *&#47; Trigger: mG (Note: 1 mG = 0,0098 m/s2) Debounce: Miliseconds SupportedBy: MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.GSensorAlarmConfig getHardAcceleration() {
        if (hardAccelerationBuilder_ == null) {
          return hardAcceleration_;
        } else {
          return hardAccelerationBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .maxpb.GSensorAlarmConfig hardAcceleration = 9;</code>
       *
       * <pre>
       *&#47; Trigger: mG (Note: 1 mG = 0,0098 m/s2) Debounce: Miliseconds SupportedBy: MXT162
       * </pre>
       */
      public Builder setHardAcceleration(maxpb.MaxpbTelemetry.GSensorAlarmConfig value) {
        if (hardAccelerationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          hardAcceleration_ = value;
          onChanged();
        } else {
          hardAccelerationBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000100;
        return this;
      }
      /**
       * <code>optional .maxpb.GSensorAlarmConfig hardAcceleration = 9;</code>
       *
       * <pre>
       *&#47; Trigger: mG (Note: 1 mG = 0,0098 m/s2) Debounce: Miliseconds SupportedBy: MXT162
       * </pre>
       */
      public Builder setHardAcceleration(
          maxpb.MaxpbTelemetry.GSensorAlarmConfig.Builder builderForValue) {
        if (hardAccelerationBuilder_ == null) {
          hardAcceleration_ = builderForValue.build();
          onChanged();
        } else {
          hardAccelerationBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000100;
        return this;
      }
      /**
       * <code>optional .maxpb.GSensorAlarmConfig hardAcceleration = 9;</code>
       *
       * <pre>
       *&#47; Trigger: mG (Note: 1 mG = 0,0098 m/s2) Debounce: Miliseconds SupportedBy: MXT162
       * </pre>
       */
      public Builder mergeHardAcceleration(maxpb.MaxpbTelemetry.GSensorAlarmConfig value) {
        if (hardAccelerationBuilder_ == null) {
          if (((bitField0_ & 0x00000100) == 0x00000100) &&
              hardAcceleration_ != maxpb.MaxpbTelemetry.GSensorAlarmConfig.getDefaultInstance()) {
            hardAcceleration_ =
              maxpb.MaxpbTelemetry.GSensorAlarmConfig.newBuilder(hardAcceleration_).mergeFrom(value).buildPartial();
          } else {
            hardAcceleration_ = value;
          }
          onChanged();
        } else {
          hardAccelerationBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000100;
        return this;
      }
      /**
       * <code>optional .maxpb.GSensorAlarmConfig hardAcceleration = 9;</code>
       *
       * <pre>
       *&#47; Trigger: mG (Note: 1 mG = 0,0098 m/s2) Debounce: Miliseconds SupportedBy: MXT162
       * </pre>
       */
      public Builder clearHardAcceleration() {
        if (hardAccelerationBuilder_ == null) {
          hardAcceleration_ = maxpb.MaxpbTelemetry.GSensorAlarmConfig.getDefaultInstance();
          onChanged();
        } else {
          hardAccelerationBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000100);
        return this;
      }
      /**
       * <code>optional .maxpb.GSensorAlarmConfig hardAcceleration = 9;</code>
       *
       * <pre>
       *&#47; Trigger: mG (Note: 1 mG = 0,0098 m/s2) Debounce: Miliseconds SupportedBy: MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.GSensorAlarmConfig.Builder getHardAccelerationBuilder() {
        bitField0_ |= 0x00000100;
        onChanged();
        return getHardAccelerationFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .maxpb.GSensorAlarmConfig hardAcceleration = 9;</code>
       *
       * <pre>
       *&#47; Trigger: mG (Note: 1 mG = 0,0098 m/s2) Debounce: Miliseconds SupportedBy: MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.GSensorAlarmConfigOrBuilder getHardAccelerationOrBuilder() {
        if (hardAccelerationBuilder_ != null) {
          return hardAccelerationBuilder_.getMessageOrBuilder();
        } else {
          return hardAcceleration_;
        }
      }
      /**
       * <code>optional .maxpb.GSensorAlarmConfig hardAcceleration = 9;</code>
       *
       * <pre>
       *&#47; Trigger: mG (Note: 1 mG = 0,0098 m/s2) Debounce: Miliseconds SupportedBy: MXT162
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.GSensorAlarmConfig, maxpb.MaxpbTelemetry.GSensorAlarmConfig.Builder, maxpb.MaxpbTelemetry.GSensorAlarmConfigOrBuilder> 
          getHardAccelerationFieldBuilder() {
        if (hardAccelerationBuilder_ == null) {
          hardAccelerationBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              maxpb.MaxpbTelemetry.GSensorAlarmConfig, maxpb.MaxpbTelemetry.GSensorAlarmConfig.Builder, maxpb.MaxpbTelemetry.GSensorAlarmConfigOrBuilder>(
                  getHardAcceleration(),
                  getParentForChildren(),
                  isClean());
          hardAcceleration_ = null;
        }
        return hardAccelerationBuilder_;
      }

      private maxpb.MaxpbTelemetry.GSensorAlarmConfig hardBrake_ = maxpb.MaxpbTelemetry.GSensorAlarmConfig.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.GSensorAlarmConfig, maxpb.MaxpbTelemetry.GSensorAlarmConfig.Builder, maxpb.MaxpbTelemetry.GSensorAlarmConfigOrBuilder> hardBrakeBuilder_;
      /**
       * <code>optional .maxpb.GSensorAlarmConfig hardBrake = 10;</code>
       *
       * <pre>
       *&#47; Trigger: mG (Note: 1 mG = 0,0098 m/s2) Debounce: Miliseconds SupportedBy: MXT162
       * </pre>
       */
      public boolean hasHardBrake() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional .maxpb.GSensorAlarmConfig hardBrake = 10;</code>
       *
       * <pre>
       *&#47; Trigger: mG (Note: 1 mG = 0,0098 m/s2) Debounce: Miliseconds SupportedBy: MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.GSensorAlarmConfig getHardBrake() {
        if (hardBrakeBuilder_ == null) {
          return hardBrake_;
        } else {
          return hardBrakeBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .maxpb.GSensorAlarmConfig hardBrake = 10;</code>
       *
       * <pre>
       *&#47; Trigger: mG (Note: 1 mG = 0,0098 m/s2) Debounce: Miliseconds SupportedBy: MXT162
       * </pre>
       */
      public Builder setHardBrake(maxpb.MaxpbTelemetry.GSensorAlarmConfig value) {
        if (hardBrakeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          hardBrake_ = value;
          onChanged();
        } else {
          hardBrakeBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000200;
        return this;
      }
      /**
       * <code>optional .maxpb.GSensorAlarmConfig hardBrake = 10;</code>
       *
       * <pre>
       *&#47; Trigger: mG (Note: 1 mG = 0,0098 m/s2) Debounce: Miliseconds SupportedBy: MXT162
       * </pre>
       */
      public Builder setHardBrake(
          maxpb.MaxpbTelemetry.GSensorAlarmConfig.Builder builderForValue) {
        if (hardBrakeBuilder_ == null) {
          hardBrake_ = builderForValue.build();
          onChanged();
        } else {
          hardBrakeBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000200;
        return this;
      }
      /**
       * <code>optional .maxpb.GSensorAlarmConfig hardBrake = 10;</code>
       *
       * <pre>
       *&#47; Trigger: mG (Note: 1 mG = 0,0098 m/s2) Debounce: Miliseconds SupportedBy: MXT162
       * </pre>
       */
      public Builder mergeHardBrake(maxpb.MaxpbTelemetry.GSensorAlarmConfig value) {
        if (hardBrakeBuilder_ == null) {
          if (((bitField0_ & 0x00000200) == 0x00000200) &&
              hardBrake_ != maxpb.MaxpbTelemetry.GSensorAlarmConfig.getDefaultInstance()) {
            hardBrake_ =
              maxpb.MaxpbTelemetry.GSensorAlarmConfig.newBuilder(hardBrake_).mergeFrom(value).buildPartial();
          } else {
            hardBrake_ = value;
          }
          onChanged();
        } else {
          hardBrakeBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000200;
        return this;
      }
      /**
       * <code>optional .maxpb.GSensorAlarmConfig hardBrake = 10;</code>
       *
       * <pre>
       *&#47; Trigger: mG (Note: 1 mG = 0,0098 m/s2) Debounce: Miliseconds SupportedBy: MXT162
       * </pre>
       */
      public Builder clearHardBrake() {
        if (hardBrakeBuilder_ == null) {
          hardBrake_ = maxpb.MaxpbTelemetry.GSensorAlarmConfig.getDefaultInstance();
          onChanged();
        } else {
          hardBrakeBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000200);
        return this;
      }
      /**
       * <code>optional .maxpb.GSensorAlarmConfig hardBrake = 10;</code>
       *
       * <pre>
       *&#47; Trigger: mG (Note: 1 mG = 0,0098 m/s2) Debounce: Miliseconds SupportedBy: MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.GSensorAlarmConfig.Builder getHardBrakeBuilder() {
        bitField0_ |= 0x00000200;
        onChanged();
        return getHardBrakeFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .maxpb.GSensorAlarmConfig hardBrake = 10;</code>
       *
       * <pre>
       *&#47; Trigger: mG (Note: 1 mG = 0,0098 m/s2) Debounce: Miliseconds SupportedBy: MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.GSensorAlarmConfigOrBuilder getHardBrakeOrBuilder() {
        if (hardBrakeBuilder_ != null) {
          return hardBrakeBuilder_.getMessageOrBuilder();
        } else {
          return hardBrake_;
        }
      }
      /**
       * <code>optional .maxpb.GSensorAlarmConfig hardBrake = 10;</code>
       *
       * <pre>
       *&#47; Trigger: mG (Note: 1 mG = 0,0098 m/s2) Debounce: Miliseconds SupportedBy: MXT162
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.GSensorAlarmConfig, maxpb.MaxpbTelemetry.GSensorAlarmConfig.Builder, maxpb.MaxpbTelemetry.GSensorAlarmConfigOrBuilder> 
          getHardBrakeFieldBuilder() {
        if (hardBrakeBuilder_ == null) {
          hardBrakeBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              maxpb.MaxpbTelemetry.GSensorAlarmConfig, maxpb.MaxpbTelemetry.GSensorAlarmConfig.Builder, maxpb.MaxpbTelemetry.GSensorAlarmConfigOrBuilder>(
                  getHardBrake(),
                  getParentForChildren(),
                  isClean());
          hardBrake_ = null;
        }
        return hardBrakeBuilder_;
      }

      private maxpb.MaxpbTelemetry.GSensorAlarmConfig hardCurve_ = maxpb.MaxpbTelemetry.GSensorAlarmConfig.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.GSensorAlarmConfig, maxpb.MaxpbTelemetry.GSensorAlarmConfig.Builder, maxpb.MaxpbTelemetry.GSensorAlarmConfigOrBuilder> hardCurveBuilder_;
      /**
       * <code>optional .maxpb.GSensorAlarmConfig hardCurve = 11;</code>
       *
       * <pre>
       *&#47; Trigger: mG (Note: 1 mG = 0,0098 m/s2) Debounce: Miliseconds SupportedBy: MXT162
       * </pre>
       */
      public boolean hasHardCurve() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional .maxpb.GSensorAlarmConfig hardCurve = 11;</code>
       *
       * <pre>
       *&#47; Trigger: mG (Note: 1 mG = 0,0098 m/s2) Debounce: Miliseconds SupportedBy: MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.GSensorAlarmConfig getHardCurve() {
        if (hardCurveBuilder_ == null) {
          return hardCurve_;
        } else {
          return hardCurveBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .maxpb.GSensorAlarmConfig hardCurve = 11;</code>
       *
       * <pre>
       *&#47; Trigger: mG (Note: 1 mG = 0,0098 m/s2) Debounce: Miliseconds SupportedBy: MXT162
       * </pre>
       */
      public Builder setHardCurve(maxpb.MaxpbTelemetry.GSensorAlarmConfig value) {
        if (hardCurveBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          hardCurve_ = value;
          onChanged();
        } else {
          hardCurveBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000400;
        return this;
      }
      /**
       * <code>optional .maxpb.GSensorAlarmConfig hardCurve = 11;</code>
       *
       * <pre>
       *&#47; Trigger: mG (Note: 1 mG = 0,0098 m/s2) Debounce: Miliseconds SupportedBy: MXT162
       * </pre>
       */
      public Builder setHardCurve(
          maxpb.MaxpbTelemetry.GSensorAlarmConfig.Builder builderForValue) {
        if (hardCurveBuilder_ == null) {
          hardCurve_ = builderForValue.build();
          onChanged();
        } else {
          hardCurveBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000400;
        return this;
      }
      /**
       * <code>optional .maxpb.GSensorAlarmConfig hardCurve = 11;</code>
       *
       * <pre>
       *&#47; Trigger: mG (Note: 1 mG = 0,0098 m/s2) Debounce: Miliseconds SupportedBy: MXT162
       * </pre>
       */
      public Builder mergeHardCurve(maxpb.MaxpbTelemetry.GSensorAlarmConfig value) {
        if (hardCurveBuilder_ == null) {
          if (((bitField0_ & 0x00000400) == 0x00000400) &&
              hardCurve_ != maxpb.MaxpbTelemetry.GSensorAlarmConfig.getDefaultInstance()) {
            hardCurve_ =
              maxpb.MaxpbTelemetry.GSensorAlarmConfig.newBuilder(hardCurve_).mergeFrom(value).buildPartial();
          } else {
            hardCurve_ = value;
          }
          onChanged();
        } else {
          hardCurveBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000400;
        return this;
      }
      /**
       * <code>optional .maxpb.GSensorAlarmConfig hardCurve = 11;</code>
       *
       * <pre>
       *&#47; Trigger: mG (Note: 1 mG = 0,0098 m/s2) Debounce: Miliseconds SupportedBy: MXT162
       * </pre>
       */
      public Builder clearHardCurve() {
        if (hardCurveBuilder_ == null) {
          hardCurve_ = maxpb.MaxpbTelemetry.GSensorAlarmConfig.getDefaultInstance();
          onChanged();
        } else {
          hardCurveBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000400);
        return this;
      }
      /**
       * <code>optional .maxpb.GSensorAlarmConfig hardCurve = 11;</code>
       *
       * <pre>
       *&#47; Trigger: mG (Note: 1 mG = 0,0098 m/s2) Debounce: Miliseconds SupportedBy: MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.GSensorAlarmConfig.Builder getHardCurveBuilder() {
        bitField0_ |= 0x00000400;
        onChanged();
        return getHardCurveFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .maxpb.GSensorAlarmConfig hardCurve = 11;</code>
       *
       * <pre>
       *&#47; Trigger: mG (Note: 1 mG = 0,0098 m/s2) Debounce: Miliseconds SupportedBy: MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.GSensorAlarmConfigOrBuilder getHardCurveOrBuilder() {
        if (hardCurveBuilder_ != null) {
          return hardCurveBuilder_.getMessageOrBuilder();
        } else {
          return hardCurve_;
        }
      }
      /**
       * <code>optional .maxpb.GSensorAlarmConfig hardCurve = 11;</code>
       *
       * <pre>
       *&#47; Trigger: mG (Note: 1 mG = 0,0098 m/s2) Debounce: Miliseconds SupportedBy: MXT162
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.GSensorAlarmConfig, maxpb.MaxpbTelemetry.GSensorAlarmConfig.Builder, maxpb.MaxpbTelemetry.GSensorAlarmConfigOrBuilder> 
          getHardCurveFieldBuilder() {
        if (hardCurveBuilder_ == null) {
          hardCurveBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              maxpb.MaxpbTelemetry.GSensorAlarmConfig, maxpb.MaxpbTelemetry.GSensorAlarmConfig.Builder, maxpb.MaxpbTelemetry.GSensorAlarmConfigOrBuilder>(
                  getHardCurve(),
                  getParentForChildren(),
                  isClean());
          hardCurve_ = null;
        }
        return hardCurveBuilder_;
      }

      private maxpb.MaxpbTelemetry.GSensorAlarmConfig hardBump_ = maxpb.MaxpbTelemetry.GSensorAlarmConfig.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.GSensorAlarmConfig, maxpb.MaxpbTelemetry.GSensorAlarmConfig.Builder, maxpb.MaxpbTelemetry.GSensorAlarmConfigOrBuilder> hardBumpBuilder_;
      /**
       * <code>optional .maxpb.GSensorAlarmConfig hardBump = 12;</code>
       *
       * <pre>
       *&#47; Trigger: mG (Note: 1 mG = 0,0098 m/s2) Debounce: Miliseconds SupportedBy: MXT162
       * </pre>
       */
      public boolean hasHardBump() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional .maxpb.GSensorAlarmConfig hardBump = 12;</code>
       *
       * <pre>
       *&#47; Trigger: mG (Note: 1 mG = 0,0098 m/s2) Debounce: Miliseconds SupportedBy: MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.GSensorAlarmConfig getHardBump() {
        if (hardBumpBuilder_ == null) {
          return hardBump_;
        } else {
          return hardBumpBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .maxpb.GSensorAlarmConfig hardBump = 12;</code>
       *
       * <pre>
       *&#47; Trigger: mG (Note: 1 mG = 0,0098 m/s2) Debounce: Miliseconds SupportedBy: MXT162
       * </pre>
       */
      public Builder setHardBump(maxpb.MaxpbTelemetry.GSensorAlarmConfig value) {
        if (hardBumpBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          hardBump_ = value;
          onChanged();
        } else {
          hardBumpBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000800;
        return this;
      }
      /**
       * <code>optional .maxpb.GSensorAlarmConfig hardBump = 12;</code>
       *
       * <pre>
       *&#47; Trigger: mG (Note: 1 mG = 0,0098 m/s2) Debounce: Miliseconds SupportedBy: MXT162
       * </pre>
       */
      public Builder setHardBump(
          maxpb.MaxpbTelemetry.GSensorAlarmConfig.Builder builderForValue) {
        if (hardBumpBuilder_ == null) {
          hardBump_ = builderForValue.build();
          onChanged();
        } else {
          hardBumpBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000800;
        return this;
      }
      /**
       * <code>optional .maxpb.GSensorAlarmConfig hardBump = 12;</code>
       *
       * <pre>
       *&#47; Trigger: mG (Note: 1 mG = 0,0098 m/s2) Debounce: Miliseconds SupportedBy: MXT162
       * </pre>
       */
      public Builder mergeHardBump(maxpb.MaxpbTelemetry.GSensorAlarmConfig value) {
        if (hardBumpBuilder_ == null) {
          if (((bitField0_ & 0x00000800) == 0x00000800) &&
              hardBump_ != maxpb.MaxpbTelemetry.GSensorAlarmConfig.getDefaultInstance()) {
            hardBump_ =
              maxpb.MaxpbTelemetry.GSensorAlarmConfig.newBuilder(hardBump_).mergeFrom(value).buildPartial();
          } else {
            hardBump_ = value;
          }
          onChanged();
        } else {
          hardBumpBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000800;
        return this;
      }
      /**
       * <code>optional .maxpb.GSensorAlarmConfig hardBump = 12;</code>
       *
       * <pre>
       *&#47; Trigger: mG (Note: 1 mG = 0,0098 m/s2) Debounce: Miliseconds SupportedBy: MXT162
       * </pre>
       */
      public Builder clearHardBump() {
        if (hardBumpBuilder_ == null) {
          hardBump_ = maxpb.MaxpbTelemetry.GSensorAlarmConfig.getDefaultInstance();
          onChanged();
        } else {
          hardBumpBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000800);
        return this;
      }
      /**
       * <code>optional .maxpb.GSensorAlarmConfig hardBump = 12;</code>
       *
       * <pre>
       *&#47; Trigger: mG (Note: 1 mG = 0,0098 m/s2) Debounce: Miliseconds SupportedBy: MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.GSensorAlarmConfig.Builder getHardBumpBuilder() {
        bitField0_ |= 0x00000800;
        onChanged();
        return getHardBumpFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .maxpb.GSensorAlarmConfig hardBump = 12;</code>
       *
       * <pre>
       *&#47; Trigger: mG (Note: 1 mG = 0,0098 m/s2) Debounce: Miliseconds SupportedBy: MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.GSensorAlarmConfigOrBuilder getHardBumpOrBuilder() {
        if (hardBumpBuilder_ != null) {
          return hardBumpBuilder_.getMessageOrBuilder();
        } else {
          return hardBump_;
        }
      }
      /**
       * <code>optional .maxpb.GSensorAlarmConfig hardBump = 12;</code>
       *
       * <pre>
       *&#47; Trigger: mG (Note: 1 mG = 0,0098 m/s2) Debounce: Miliseconds SupportedBy: MXT162
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.GSensorAlarmConfig, maxpb.MaxpbTelemetry.GSensorAlarmConfig.Builder, maxpb.MaxpbTelemetry.GSensorAlarmConfigOrBuilder> 
          getHardBumpFieldBuilder() {
        if (hardBumpBuilder_ == null) {
          hardBumpBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              maxpb.MaxpbTelemetry.GSensorAlarmConfig, maxpb.MaxpbTelemetry.GSensorAlarmConfig.Builder, maxpb.MaxpbTelemetry.GSensorAlarmConfigOrBuilder>(
                  getHardBump(),
                  getParentForChildren(),
                  isClean());
          hardBump_ = null;
        }
        return hardBumpBuilder_;
      }

      private maxpb.MaxpbTelemetry.GSensorAlarmConfig hardCrash_ = maxpb.MaxpbTelemetry.GSensorAlarmConfig.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.GSensorAlarmConfig, maxpb.MaxpbTelemetry.GSensorAlarmConfig.Builder, maxpb.MaxpbTelemetry.GSensorAlarmConfigOrBuilder> hardCrashBuilder_;
      /**
       * <code>optional .maxpb.GSensorAlarmConfig hardCrash = 13;</code>
       *
       * <pre>
       *&#47; Trigger: mG (Note: 1 mG = 0,0098 m/s2) Debounce: Miliseconds SupportedBy: MXT162
       * </pre>
       */
      public boolean hasHardCrash() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional .maxpb.GSensorAlarmConfig hardCrash = 13;</code>
       *
       * <pre>
       *&#47; Trigger: mG (Note: 1 mG = 0,0098 m/s2) Debounce: Miliseconds SupportedBy: MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.GSensorAlarmConfig getHardCrash() {
        if (hardCrashBuilder_ == null) {
          return hardCrash_;
        } else {
          return hardCrashBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .maxpb.GSensorAlarmConfig hardCrash = 13;</code>
       *
       * <pre>
       *&#47; Trigger: mG (Note: 1 mG = 0,0098 m/s2) Debounce: Miliseconds SupportedBy: MXT162
       * </pre>
       */
      public Builder setHardCrash(maxpb.MaxpbTelemetry.GSensorAlarmConfig value) {
        if (hardCrashBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          hardCrash_ = value;
          onChanged();
        } else {
          hardCrashBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00001000;
        return this;
      }
      /**
       * <code>optional .maxpb.GSensorAlarmConfig hardCrash = 13;</code>
       *
       * <pre>
       *&#47; Trigger: mG (Note: 1 mG = 0,0098 m/s2) Debounce: Miliseconds SupportedBy: MXT162
       * </pre>
       */
      public Builder setHardCrash(
          maxpb.MaxpbTelemetry.GSensorAlarmConfig.Builder builderForValue) {
        if (hardCrashBuilder_ == null) {
          hardCrash_ = builderForValue.build();
          onChanged();
        } else {
          hardCrashBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00001000;
        return this;
      }
      /**
       * <code>optional .maxpb.GSensorAlarmConfig hardCrash = 13;</code>
       *
       * <pre>
       *&#47; Trigger: mG (Note: 1 mG = 0,0098 m/s2) Debounce: Miliseconds SupportedBy: MXT162
       * </pre>
       */
      public Builder mergeHardCrash(maxpb.MaxpbTelemetry.GSensorAlarmConfig value) {
        if (hardCrashBuilder_ == null) {
          if (((bitField0_ & 0x00001000) == 0x00001000) &&
              hardCrash_ != maxpb.MaxpbTelemetry.GSensorAlarmConfig.getDefaultInstance()) {
            hardCrash_ =
              maxpb.MaxpbTelemetry.GSensorAlarmConfig.newBuilder(hardCrash_).mergeFrom(value).buildPartial();
          } else {
            hardCrash_ = value;
          }
          onChanged();
        } else {
          hardCrashBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00001000;
        return this;
      }
      /**
       * <code>optional .maxpb.GSensorAlarmConfig hardCrash = 13;</code>
       *
       * <pre>
       *&#47; Trigger: mG (Note: 1 mG = 0,0098 m/s2) Debounce: Miliseconds SupportedBy: MXT162
       * </pre>
       */
      public Builder clearHardCrash() {
        if (hardCrashBuilder_ == null) {
          hardCrash_ = maxpb.MaxpbTelemetry.GSensorAlarmConfig.getDefaultInstance();
          onChanged();
        } else {
          hardCrashBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00001000);
        return this;
      }
      /**
       * <code>optional .maxpb.GSensorAlarmConfig hardCrash = 13;</code>
       *
       * <pre>
       *&#47; Trigger: mG (Note: 1 mG = 0,0098 m/s2) Debounce: Miliseconds SupportedBy: MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.GSensorAlarmConfig.Builder getHardCrashBuilder() {
        bitField0_ |= 0x00001000;
        onChanged();
        return getHardCrashFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .maxpb.GSensorAlarmConfig hardCrash = 13;</code>
       *
       * <pre>
       *&#47; Trigger: mG (Note: 1 mG = 0,0098 m/s2) Debounce: Miliseconds SupportedBy: MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.GSensorAlarmConfigOrBuilder getHardCrashOrBuilder() {
        if (hardCrashBuilder_ != null) {
          return hardCrashBuilder_.getMessageOrBuilder();
        } else {
          return hardCrash_;
        }
      }
      /**
       * <code>optional .maxpb.GSensorAlarmConfig hardCrash = 13;</code>
       *
       * <pre>
       *&#47; Trigger: mG (Note: 1 mG = 0,0098 m/s2) Debounce: Miliseconds SupportedBy: MXT162
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.GSensorAlarmConfig, maxpb.MaxpbTelemetry.GSensorAlarmConfig.Builder, maxpb.MaxpbTelemetry.GSensorAlarmConfigOrBuilder> 
          getHardCrashFieldBuilder() {
        if (hardCrashBuilder_ == null) {
          hardCrashBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              maxpb.MaxpbTelemetry.GSensorAlarmConfig, maxpb.MaxpbTelemetry.GSensorAlarmConfig.Builder, maxpb.MaxpbTelemetry.GSensorAlarmConfigOrBuilder>(
                  getHardCrash(),
                  getParentForChildren(),
                  isClean());
          hardCrash_ = null;
        }
        return hardCrashBuilder_;
      }

      private maxpb.MaxpbTelemetry.TelemetryEventsTransmissionMask eventsMask_ = maxpb.MaxpbTelemetry.TelemetryEventsTransmissionMask.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.TelemetryEventsTransmissionMask, maxpb.MaxpbTelemetry.TelemetryEventsTransmissionMask.Builder, maxpb.MaxpbTelemetry.TelemetryEventsTransmissionMaskOrBuilder> eventsMaskBuilder_;
      /**
       * <code>optional .maxpb.TelemetryEventsTransmissionMask eventsMask = 14;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public boolean hasEventsMask() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>optional .maxpb.TelemetryEventsTransmissionMask eventsMask = 14;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public maxpb.MaxpbTelemetry.TelemetryEventsTransmissionMask getEventsMask() {
        if (eventsMaskBuilder_ == null) {
          return eventsMask_;
        } else {
          return eventsMaskBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .maxpb.TelemetryEventsTransmissionMask eventsMask = 14;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public Builder setEventsMask(maxpb.MaxpbTelemetry.TelemetryEventsTransmissionMask value) {
        if (eventsMaskBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          eventsMask_ = value;
          onChanged();
        } else {
          eventsMaskBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00002000;
        return this;
      }
      /**
       * <code>optional .maxpb.TelemetryEventsTransmissionMask eventsMask = 14;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public Builder setEventsMask(
          maxpb.MaxpbTelemetry.TelemetryEventsTransmissionMask.Builder builderForValue) {
        if (eventsMaskBuilder_ == null) {
          eventsMask_ = builderForValue.build();
          onChanged();
        } else {
          eventsMaskBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00002000;
        return this;
      }
      /**
       * <code>optional .maxpb.TelemetryEventsTransmissionMask eventsMask = 14;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public Builder mergeEventsMask(maxpb.MaxpbTelemetry.TelemetryEventsTransmissionMask value) {
        if (eventsMaskBuilder_ == null) {
          if (((bitField0_ & 0x00002000) == 0x00002000) &&
              eventsMask_ != maxpb.MaxpbTelemetry.TelemetryEventsTransmissionMask.getDefaultInstance()) {
            eventsMask_ =
              maxpb.MaxpbTelemetry.TelemetryEventsTransmissionMask.newBuilder(eventsMask_).mergeFrom(value).buildPartial();
          } else {
            eventsMask_ = value;
          }
          onChanged();
        } else {
          eventsMaskBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00002000;
        return this;
      }
      /**
       * <code>optional .maxpb.TelemetryEventsTransmissionMask eventsMask = 14;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public Builder clearEventsMask() {
        if (eventsMaskBuilder_ == null) {
          eventsMask_ = maxpb.MaxpbTelemetry.TelemetryEventsTransmissionMask.getDefaultInstance();
          onChanged();
        } else {
          eventsMaskBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00002000);
        return this;
      }
      /**
       * <code>optional .maxpb.TelemetryEventsTransmissionMask eventsMask = 14;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public maxpb.MaxpbTelemetry.TelemetryEventsTransmissionMask.Builder getEventsMaskBuilder() {
        bitField0_ |= 0x00002000;
        onChanged();
        return getEventsMaskFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .maxpb.TelemetryEventsTransmissionMask eventsMask = 14;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public maxpb.MaxpbTelemetry.TelemetryEventsTransmissionMaskOrBuilder getEventsMaskOrBuilder() {
        if (eventsMaskBuilder_ != null) {
          return eventsMaskBuilder_.getMessageOrBuilder();
        } else {
          return eventsMask_;
        }
      }
      /**
       * <code>optional .maxpb.TelemetryEventsTransmissionMask eventsMask = 14;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.TelemetryEventsTransmissionMask, maxpb.MaxpbTelemetry.TelemetryEventsTransmissionMask.Builder, maxpb.MaxpbTelemetry.TelemetryEventsTransmissionMaskOrBuilder> 
          getEventsMaskFieldBuilder() {
        if (eventsMaskBuilder_ == null) {
          eventsMaskBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              maxpb.MaxpbTelemetry.TelemetryEventsTransmissionMask, maxpb.MaxpbTelemetry.TelemetryEventsTransmissionMask.Builder, maxpb.MaxpbTelemetry.TelemetryEventsTransmissionMaskOrBuilder>(
                  getEventsMask(),
                  getParentForChildren(),
                  isClean());
          eventsMask_ = null;
        }
        return eventsMaskBuilder_;
      }

      private maxpb.MaxpbTelemetry.RpmConfig rpm_ = maxpb.MaxpbTelemetry.RpmConfig.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.RpmConfig, maxpb.MaxpbTelemetry.RpmConfig.Builder, maxpb.MaxpbTelemetry.RpmConfigOrBuilder> rpmBuilder_;
      /**
       * <code>optional .maxpb.RpmConfig rpm = 15;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public boolean hasRpm() {
        return ((bitField0_ & 0x00004000) == 0x00004000);
      }
      /**
       * <code>optional .maxpb.RpmConfig rpm = 15;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public maxpb.MaxpbTelemetry.RpmConfig getRpm() {
        if (rpmBuilder_ == null) {
          return rpm_;
        } else {
          return rpmBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .maxpb.RpmConfig rpm = 15;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder setRpm(maxpb.MaxpbTelemetry.RpmConfig value) {
        if (rpmBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          rpm_ = value;
          onChanged();
        } else {
          rpmBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00004000;
        return this;
      }
      /**
       * <code>optional .maxpb.RpmConfig rpm = 15;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder setRpm(
          maxpb.MaxpbTelemetry.RpmConfig.Builder builderForValue) {
        if (rpmBuilder_ == null) {
          rpm_ = builderForValue.build();
          onChanged();
        } else {
          rpmBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00004000;
        return this;
      }
      /**
       * <code>optional .maxpb.RpmConfig rpm = 15;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder mergeRpm(maxpb.MaxpbTelemetry.RpmConfig value) {
        if (rpmBuilder_ == null) {
          if (((bitField0_ & 0x00004000) == 0x00004000) &&
              rpm_ != maxpb.MaxpbTelemetry.RpmConfig.getDefaultInstance()) {
            rpm_ =
              maxpb.MaxpbTelemetry.RpmConfig.newBuilder(rpm_).mergeFrom(value).buildPartial();
          } else {
            rpm_ = value;
          }
          onChanged();
        } else {
          rpmBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00004000;
        return this;
      }
      /**
       * <code>optional .maxpb.RpmConfig rpm = 15;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder clearRpm() {
        if (rpmBuilder_ == null) {
          rpm_ = maxpb.MaxpbTelemetry.RpmConfig.getDefaultInstance();
          onChanged();
        } else {
          rpmBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00004000);
        return this;
      }
      /**
       * <code>optional .maxpb.RpmConfig rpm = 15;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public maxpb.MaxpbTelemetry.RpmConfig.Builder getRpmBuilder() {
        bitField0_ |= 0x00004000;
        onChanged();
        return getRpmFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .maxpb.RpmConfig rpm = 15;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public maxpb.MaxpbTelemetry.RpmConfigOrBuilder getRpmOrBuilder() {
        if (rpmBuilder_ != null) {
          return rpmBuilder_.getMessageOrBuilder();
        } else {
          return rpm_;
        }
      }
      /**
       * <code>optional .maxpb.RpmConfig rpm = 15;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.RpmConfig, maxpb.MaxpbTelemetry.RpmConfig.Builder, maxpb.MaxpbTelemetry.RpmConfigOrBuilder> 
          getRpmFieldBuilder() {
        if (rpmBuilder_ == null) {
          rpmBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              maxpb.MaxpbTelemetry.RpmConfig, maxpb.MaxpbTelemetry.RpmConfig.Builder, maxpb.MaxpbTelemetry.RpmConfigOrBuilder>(
                  getRpm(),
                  getParentForChildren(),
                  isClean());
          rpm_ = null;
        }
        return rpmBuilder_;
      }

      private maxpb.MaxpbTelemetry.DeltaConfig delta_ = maxpb.MaxpbTelemetry.DeltaConfig.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.DeltaConfig, maxpb.MaxpbTelemetry.DeltaConfig.Builder, maxpb.MaxpbTelemetry.DeltaConfigOrBuilder> deltaBuilder_;
      /**
       * <code>optional .maxpb.DeltaConfig delta = 16;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasDelta() {
        return ((bitField0_ & 0x00008000) == 0x00008000);
      }
      /**
       * <code>optional .maxpb.DeltaConfig delta = 16;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.DeltaConfig getDelta() {
        if (deltaBuilder_ == null) {
          return delta_;
        } else {
          return deltaBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .maxpb.DeltaConfig delta = 16;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setDelta(maxpb.MaxpbTelemetry.DeltaConfig value) {
        if (deltaBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          delta_ = value;
          onChanged();
        } else {
          deltaBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00008000;
        return this;
      }
      /**
       * <code>optional .maxpb.DeltaConfig delta = 16;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setDelta(
          maxpb.MaxpbTelemetry.DeltaConfig.Builder builderForValue) {
        if (deltaBuilder_ == null) {
          delta_ = builderForValue.build();
          onChanged();
        } else {
          deltaBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00008000;
        return this;
      }
      /**
       * <code>optional .maxpb.DeltaConfig delta = 16;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder mergeDelta(maxpb.MaxpbTelemetry.DeltaConfig value) {
        if (deltaBuilder_ == null) {
          if (((bitField0_ & 0x00008000) == 0x00008000) &&
              delta_ != maxpb.MaxpbTelemetry.DeltaConfig.getDefaultInstance()) {
            delta_ =
              maxpb.MaxpbTelemetry.DeltaConfig.newBuilder(delta_).mergeFrom(value).buildPartial();
          } else {
            delta_ = value;
          }
          onChanged();
        } else {
          deltaBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00008000;
        return this;
      }
      /**
       * <code>optional .maxpb.DeltaConfig delta = 16;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearDelta() {
        if (deltaBuilder_ == null) {
          delta_ = maxpb.MaxpbTelemetry.DeltaConfig.getDefaultInstance();
          onChanged();
        } else {
          deltaBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00008000);
        return this;
      }
      /**
       * <code>optional .maxpb.DeltaConfig delta = 16;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.DeltaConfig.Builder getDeltaBuilder() {
        bitField0_ |= 0x00008000;
        onChanged();
        return getDeltaFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .maxpb.DeltaConfig delta = 16;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.DeltaConfigOrBuilder getDeltaOrBuilder() {
        if (deltaBuilder_ != null) {
          return deltaBuilder_.getMessageOrBuilder();
        } else {
          return delta_;
        }
      }
      /**
       * <code>optional .maxpb.DeltaConfig delta = 16;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.DeltaConfig, maxpb.MaxpbTelemetry.DeltaConfig.Builder, maxpb.MaxpbTelemetry.DeltaConfigOrBuilder> 
          getDeltaFieldBuilder() {
        if (deltaBuilder_ == null) {
          deltaBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              maxpb.MaxpbTelemetry.DeltaConfig, maxpb.MaxpbTelemetry.DeltaConfig.Builder, maxpb.MaxpbTelemetry.DeltaConfigOrBuilder>(
                  getDelta(),
                  getParentForChildren(),
                  isClean());
          delta_ = null;
        }
        return deltaBuilder_;
      }

      private maxpb.MaxpbTelemetry.AccelerometerHistorySamples historySamples_ = maxpb.MaxpbTelemetry.AccelerometerHistorySamples.AH_4HZ;
      /**
       * <code>optional .maxpb.AccelerometerHistorySamples historySamples = 17;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasHistorySamples() {
        return ((bitField0_ & 0x00010000) == 0x00010000);
      }
      /**
       * <code>optional .maxpb.AccelerometerHistorySamples historySamples = 17;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.AccelerometerHistorySamples getHistorySamples() {
        return historySamples_;
      }
      /**
       * <code>optional .maxpb.AccelerometerHistorySamples historySamples = 17;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setHistorySamples(maxpb.MaxpbTelemetry.AccelerometerHistorySamples value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00010000;
        historySamples_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .maxpb.AccelerometerHistorySamples historySamples = 17;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearHistorySamples() {
        bitField0_ = (bitField0_ & ~0x00010000);
        historySamples_ = maxpb.MaxpbTelemetry.AccelerometerHistorySamples.AH_4HZ;
        onChanged();
        return this;
      }

      private int historyEventMask_ ;
      /**
       * <code>optional uint32 historyEventMask = 18;</code>
       *
       * <pre>
       *&#47; Used HistoryEvents values as bitmask SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasHistoryEventMask() {
        return ((bitField0_ & 0x00020000) == 0x00020000);
      }
      /**
       * <code>optional uint32 historyEventMask = 18;</code>
       *
       * <pre>
       *&#47; Used HistoryEvents values as bitmask SupportedBy: MXT160, MXT162
       * </pre>
       */
      public int getHistoryEventMask() {
        return historyEventMask_;
      }
      /**
       * <code>optional uint32 historyEventMask = 18;</code>
       *
       * <pre>
       *&#47; Used HistoryEvents values as bitmask SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setHistoryEventMask(int value) {
        bitField0_ |= 0x00020000;
        historyEventMask_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 historyEventMask = 18;</code>
       *
       * <pre>
       *&#47; Used HistoryEvents values as bitmask SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearHistoryEventMask() {
        bitField0_ = (bitField0_ & ~0x00020000);
        historyEventMask_ = 0;
        onChanged();
        return this;
      }

      private int accOdometerSpeedLimit_ ;
      /**
       * <code>optional uint32 accOdometerSpeedLimit = 19;</code>
       *
       * <pre>
       *&#47; Km/h SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasAccOdometerSpeedLimit() {
        return ((bitField0_ & 0x00040000) == 0x00040000);
      }
      /**
       * <code>optional uint32 accOdometerSpeedLimit = 19;</code>
       *
       * <pre>
       *&#47; Km/h SupportedBy: MXT160, MXT162
       * </pre>
       */
      public int getAccOdometerSpeedLimit() {
        return accOdometerSpeedLimit_;
      }
      /**
       * <code>optional uint32 accOdometerSpeedLimit = 19;</code>
       *
       * <pre>
       *&#47; Km/h SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setAccOdometerSpeedLimit(int value) {
        bitField0_ |= 0x00040000;
        accOdometerSpeedLimit_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 accOdometerSpeedLimit = 19;</code>
       *
       * <pre>
       *&#47; Km/h SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearAccOdometerSpeedLimit() {
        bitField0_ = (bitField0_ & ~0x00040000);
        accOdometerSpeedLimit_ = 0;
        onChanged();
        return this;
      }

      private int minimalTimeBetweenCrashEvents_ ;
      /**
       * <code>optional uint32 minimalTimeBetweenCrashEvents = 20;</code>
       *
       * <pre>
       *&#47; Seconds SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasMinimalTimeBetweenCrashEvents() {
        return ((bitField0_ & 0x00080000) == 0x00080000);
      }
      /**
       * <code>optional uint32 minimalTimeBetweenCrashEvents = 20;</code>
       *
       * <pre>
       *&#47; Seconds SupportedBy: MXT160, MXT162
       * </pre>
       */
      public int getMinimalTimeBetweenCrashEvents() {
        return minimalTimeBetweenCrashEvents_;
      }
      /**
       * <code>optional uint32 minimalTimeBetweenCrashEvents = 20;</code>
       *
       * <pre>
       *&#47; Seconds SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setMinimalTimeBetweenCrashEvents(int value) {
        bitField0_ |= 0x00080000;
        minimalTimeBetweenCrashEvents_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 minimalTimeBetweenCrashEvents = 20;</code>
       *
       * <pre>
       *&#47; Seconds SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearMinimalTimeBetweenCrashEvents() {
        bitField0_ = (bitField0_ & ~0x00080000);
        minimalTimeBetweenCrashEvents_ = 0;
        onChanged();
        return this;
      }

      private boolean recalibAccelerometerNoExtPower_ ;
      /**
       * <code>optional bool recalibAccelerometerNoExtPower = 21;</code>
       *
       * <pre>
       *&#47; Starts accelerometer recalibration when external power is disconnected SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasRecalibAccelerometerNoExtPower() {
        return ((bitField0_ & 0x00100000) == 0x00100000);
      }
      /**
       * <code>optional bool recalibAccelerometerNoExtPower = 21;</code>
       *
       * <pre>
       *&#47; Starts accelerometer recalibration when external power is disconnected SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean getRecalibAccelerometerNoExtPower() {
        return recalibAccelerometerNoExtPower_;
      }
      /**
       * <code>optional bool recalibAccelerometerNoExtPower = 21;</code>
       *
       * <pre>
       *&#47; Starts accelerometer recalibration when external power is disconnected SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setRecalibAccelerometerNoExtPower(boolean value) {
        bitField0_ |= 0x00100000;
        recalibAccelerometerNoExtPower_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool recalibAccelerometerNoExtPower = 21;</code>
       *
       * <pre>
       *&#47; Starts accelerometer recalibration when external power is disconnected SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearRecalibAccelerometerNoExtPower() {
        bitField0_ = (bitField0_ & ~0x00100000);
        recalibAccelerometerNoExtPower_ = false;
        onChanged();
        return this;
      }

      private boolean fixedCanLibrary_ ;
      /**
       * <code>optional bool fixedCanLibrary = 22;</code>
       *
       * <pre>
       *&#47; True: Use embedded can library False: Try to discover library automatically SupportedBy: MXT162, MAXIO
       * </pre>
       */
      public boolean hasFixedCanLibrary() {
        return ((bitField0_ & 0x00200000) == 0x00200000);
      }
      /**
       * <code>optional bool fixedCanLibrary = 22;</code>
       *
       * <pre>
       *&#47; True: Use embedded can library False: Try to discover library automatically SupportedBy: MXT162, MAXIO
       * </pre>
       */
      public boolean getFixedCanLibrary() {
        return fixedCanLibrary_;
      }
      /**
       * <code>optional bool fixedCanLibrary = 22;</code>
       *
       * <pre>
       *&#47; True: Use embedded can library False: Try to discover library automatically SupportedBy: MXT162, MAXIO
       * </pre>
       */
      public Builder setFixedCanLibrary(boolean value) {
        bitField0_ |= 0x00200000;
        fixedCanLibrary_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool fixedCanLibrary = 22;</code>
       *
       * <pre>
       *&#47; True: Use embedded can library False: Try to discover library automatically SupportedBy: MXT162, MAXIO
       * </pre>
       */
      public Builder clearFixedCanLibrary() {
        bitField0_ = (bitField0_ & ~0x00200000);
        fixedCanLibrary_ = false;
        onChanged();
        return this;
      }

      private boolean blackBox_ ;
      /**
       * <code>optional bool blackBox = 23;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasBlackBox() {
        return ((bitField0_ & 0x00400000) == 0x00400000);
      }
      /**
       * <code>optional bool blackBox = 23;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean getBlackBox() {
        return blackBox_;
      }
      /**
       * <code>optional bool blackBox = 23;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setBlackBox(boolean value) {
        bitField0_ |= 0x00400000;
        blackBox_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool blackBox = 23;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearBlackBox() {
        bitField0_ = (bitField0_ & ~0x00400000);
        blackBox_ = false;
        onChanged();
        return this;
      }

      private int blackBoxReportTime_ ;
      /**
       * <code>optional uint32 blackBoxReportTime = 24;</code>
       *
       * <pre>
       *&#47; Minutes - Maximum value is 1440 (1 day) SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasBlackBoxReportTime() {
        return ((bitField0_ & 0x00800000) == 0x00800000);
      }
      /**
       * <code>optional uint32 blackBoxReportTime = 24;</code>
       *
       * <pre>
       *&#47; Minutes - Maximum value is 1440 (1 day) SupportedBy: MXT160, MXT162
       * </pre>
       */
      public int getBlackBoxReportTime() {
        return blackBoxReportTime_;
      }
      /**
       * <code>optional uint32 blackBoxReportTime = 24;</code>
       *
       * <pre>
       *&#47; Minutes - Maximum value is 1440 (1 day) SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setBlackBoxReportTime(int value) {
        bitField0_ |= 0x00800000;
        blackBoxReportTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 blackBoxReportTime = 24;</code>
       *
       * <pre>
       *&#47; Minutes - Maximum value is 1440 (1 day) SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearBlackBoxReportTime() {
        bitField0_ = (bitField0_ & ~0x00800000);
        blackBoxReportTime_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:maxpb.TelemetryConfig)
    }

    static {
      defaultInstance = new TelemetryConfig(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:maxpb.TelemetryConfig)
  }

  public interface BlackBoxDataOrBuilder extends
      // @@protoc_insertion_point(interface_extends:maxpb.BlackBoxData)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required uint64 deviceID = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasDeviceID();
    /**
     * <code>required uint64 deviceID = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    long getDeviceID();

    /**
     * <code>required uint64 packetID = 2;</code>
     *
     * <pre>
     *&#47; Random data generated by device to identify the Ack SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasPacketID();
    /**
     * <code>required uint64 packetID = 2;</code>
     *
     * <pre>
     *&#47; Random data generated by device to identify the Ack SupportedBy: MXT160, MXT162
     * </pre>
     */
    long getPacketID();

    /**
     * <code>required .maxpb.BlackBoxMinute minute = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasMinute();
    /**
     * <code>required .maxpb.BlackBoxMinute minute = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.BlackBoxMinute getMinute();
    /**
     * <code>required .maxpb.BlackBoxMinute minute = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.BlackBoxMinuteOrBuilder getMinuteOrBuilder();
  }
  /**
   * Protobuf type {@code maxpb.BlackBoxData}
   */
  public static final class BlackBoxData extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:maxpb.BlackBoxData)
      BlackBoxDataOrBuilder {
    // Use BlackBoxData.newBuilder() to construct.
    private BlackBoxData(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private BlackBoxData(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final BlackBoxData defaultInstance;
    public static BlackBoxData getDefaultInstance() {
      return defaultInstance;
    }

    public BlackBoxData getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private BlackBoxData(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              deviceID_ = input.readUInt64();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              packetID_ = input.readUInt64();
              break;
            }
            case 26: {
              maxpb.MaxpbTelemetry.BlackBoxMinute.Builder subBuilder = null;
              if (((bitField0_ & 0x00000004) == 0x00000004)) {
                subBuilder = minute_.toBuilder();
              }
              minute_ = input.readMessage(maxpb.MaxpbTelemetry.BlackBoxMinute.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(minute_);
                minute_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000004;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return maxpb.MaxpbTelemetry.internal_static_maxpb_BlackBoxData_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return maxpb.MaxpbTelemetry.internal_static_maxpb_BlackBoxData_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              maxpb.MaxpbTelemetry.BlackBoxData.class, maxpb.MaxpbTelemetry.BlackBoxData.Builder.class);
    }

    public static com.google.protobuf.Parser<BlackBoxData> PARSER =
        new com.google.protobuf.AbstractParser<BlackBoxData>() {
      public BlackBoxData parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new BlackBoxData(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<BlackBoxData> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int DEVICEID_FIELD_NUMBER = 1;
    private long deviceID_;
    /**
     * <code>required uint64 deviceID = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasDeviceID() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required uint64 deviceID = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public long getDeviceID() {
      return deviceID_;
    }

    public static final int PACKETID_FIELD_NUMBER = 2;
    private long packetID_;
    /**
     * <code>required uint64 packetID = 2;</code>
     *
     * <pre>
     *&#47; Random data generated by device to identify the Ack SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasPacketID() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required uint64 packetID = 2;</code>
     *
     * <pre>
     *&#47; Random data generated by device to identify the Ack SupportedBy: MXT160, MXT162
     * </pre>
     */
    public long getPacketID() {
      return packetID_;
    }

    public static final int MINUTE_FIELD_NUMBER = 3;
    private maxpb.MaxpbTelemetry.BlackBoxMinute minute_;
    /**
     * <code>required .maxpb.BlackBoxMinute minute = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasMinute() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required .maxpb.BlackBoxMinute minute = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.BlackBoxMinute getMinute() {
      return minute_;
    }
    /**
     * <code>required .maxpb.BlackBoxMinute minute = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.BlackBoxMinuteOrBuilder getMinuteOrBuilder() {
      return minute_;
    }

    private void initFields() {
      deviceID_ = 0L;
      packetID_ = 0L;
      minute_ = maxpb.MaxpbTelemetry.BlackBoxMinute.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasDeviceID()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasPacketID()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMinute()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getMinute().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt64(1, deviceID_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt64(2, packetID_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(3, minute_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(1, deviceID_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(2, packetID_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, minute_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static maxpb.MaxpbTelemetry.BlackBoxData parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static maxpb.MaxpbTelemetry.BlackBoxData parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetry.BlackBoxData parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static maxpb.MaxpbTelemetry.BlackBoxData parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetry.BlackBoxData parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static maxpb.MaxpbTelemetry.BlackBoxData parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetry.BlackBoxData parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static maxpb.MaxpbTelemetry.BlackBoxData parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetry.BlackBoxData parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static maxpb.MaxpbTelemetry.BlackBoxData parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(maxpb.MaxpbTelemetry.BlackBoxData prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code maxpb.BlackBoxData}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:maxpb.BlackBoxData)
        maxpb.MaxpbTelemetry.BlackBoxDataOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return maxpb.MaxpbTelemetry.internal_static_maxpb_BlackBoxData_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return maxpb.MaxpbTelemetry.internal_static_maxpb_BlackBoxData_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                maxpb.MaxpbTelemetry.BlackBoxData.class, maxpb.MaxpbTelemetry.BlackBoxData.Builder.class);
      }

      // Construct using maxpb.MaxpbTelemetry.BlackBoxData.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getMinuteFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        deviceID_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000001);
        packetID_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000002);
        if (minuteBuilder_ == null) {
          minute_ = maxpb.MaxpbTelemetry.BlackBoxMinute.getDefaultInstance();
        } else {
          minuteBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return maxpb.MaxpbTelemetry.internal_static_maxpb_BlackBoxData_descriptor;
      }

      public maxpb.MaxpbTelemetry.BlackBoxData getDefaultInstanceForType() {
        return maxpb.MaxpbTelemetry.BlackBoxData.getDefaultInstance();
      }

      public maxpb.MaxpbTelemetry.BlackBoxData build() {
        maxpb.MaxpbTelemetry.BlackBoxData result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public maxpb.MaxpbTelemetry.BlackBoxData buildPartial() {
        maxpb.MaxpbTelemetry.BlackBoxData result = new maxpb.MaxpbTelemetry.BlackBoxData(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.deviceID_ = deviceID_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.packetID_ = packetID_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        if (minuteBuilder_ == null) {
          result.minute_ = minute_;
        } else {
          result.minute_ = minuteBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof maxpb.MaxpbTelemetry.BlackBoxData) {
          return mergeFrom((maxpb.MaxpbTelemetry.BlackBoxData)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(maxpb.MaxpbTelemetry.BlackBoxData other) {
        if (other == maxpb.MaxpbTelemetry.BlackBoxData.getDefaultInstance()) return this;
        if (other.hasDeviceID()) {
          setDeviceID(other.getDeviceID());
        }
        if (other.hasPacketID()) {
          setPacketID(other.getPacketID());
        }
        if (other.hasMinute()) {
          mergeMinute(other.getMinute());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasDeviceID()) {
          
          return false;
        }
        if (!hasPacketID()) {
          
          return false;
        }
        if (!hasMinute()) {
          
          return false;
        }
        if (!getMinute().isInitialized()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        maxpb.MaxpbTelemetry.BlackBoxData parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (maxpb.MaxpbTelemetry.BlackBoxData) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private long deviceID_ ;
      /**
       * <code>required uint64 deviceID = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasDeviceID() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint64 deviceID = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public long getDeviceID() {
        return deviceID_;
      }
      /**
       * <code>required uint64 deviceID = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setDeviceID(long value) {
        bitField0_ |= 0x00000001;
        deviceID_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint64 deviceID = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearDeviceID() {
        bitField0_ = (bitField0_ & ~0x00000001);
        deviceID_ = 0L;
        onChanged();
        return this;
      }

      private long packetID_ ;
      /**
       * <code>required uint64 packetID = 2;</code>
       *
       * <pre>
       *&#47; Random data generated by device to identify the Ack SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasPacketID() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required uint64 packetID = 2;</code>
       *
       * <pre>
       *&#47; Random data generated by device to identify the Ack SupportedBy: MXT160, MXT162
       * </pre>
       */
      public long getPacketID() {
        return packetID_;
      }
      /**
       * <code>required uint64 packetID = 2;</code>
       *
       * <pre>
       *&#47; Random data generated by device to identify the Ack SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setPacketID(long value) {
        bitField0_ |= 0x00000002;
        packetID_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint64 packetID = 2;</code>
       *
       * <pre>
       *&#47; Random data generated by device to identify the Ack SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearPacketID() {
        bitField0_ = (bitField0_ & ~0x00000002);
        packetID_ = 0L;
        onChanged();
        return this;
      }

      private maxpb.MaxpbTelemetry.BlackBoxMinute minute_ = maxpb.MaxpbTelemetry.BlackBoxMinute.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.BlackBoxMinute, maxpb.MaxpbTelemetry.BlackBoxMinute.Builder, maxpb.MaxpbTelemetry.BlackBoxMinuteOrBuilder> minuteBuilder_;
      /**
       * <code>required .maxpb.BlackBoxMinute minute = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasMinute() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required .maxpb.BlackBoxMinute minute = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxMinute getMinute() {
        if (minuteBuilder_ == null) {
          return minute_;
        } else {
          return minuteBuilder_.getMessage();
        }
      }
      /**
       * <code>required .maxpb.BlackBoxMinute minute = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setMinute(maxpb.MaxpbTelemetry.BlackBoxMinute value) {
        if (minuteBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          minute_ = value;
          onChanged();
        } else {
          minuteBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>required .maxpb.BlackBoxMinute minute = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setMinute(
          maxpb.MaxpbTelemetry.BlackBoxMinute.Builder builderForValue) {
        if (minuteBuilder_ == null) {
          minute_ = builderForValue.build();
          onChanged();
        } else {
          minuteBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>required .maxpb.BlackBoxMinute minute = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder mergeMinute(maxpb.MaxpbTelemetry.BlackBoxMinute value) {
        if (minuteBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004) &&
              minute_ != maxpb.MaxpbTelemetry.BlackBoxMinute.getDefaultInstance()) {
            minute_ =
              maxpb.MaxpbTelemetry.BlackBoxMinute.newBuilder(minute_).mergeFrom(value).buildPartial();
          } else {
            minute_ = value;
          }
          onChanged();
        } else {
          minuteBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>required .maxpb.BlackBoxMinute minute = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearMinute() {
        if (minuteBuilder_ == null) {
          minute_ = maxpb.MaxpbTelemetry.BlackBoxMinute.getDefaultInstance();
          onChanged();
        } else {
          minuteBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }
      /**
       * <code>required .maxpb.BlackBoxMinute minute = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxMinute.Builder getMinuteBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getMinuteFieldBuilder().getBuilder();
      }
      /**
       * <code>required .maxpb.BlackBoxMinute minute = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxMinuteOrBuilder getMinuteOrBuilder() {
        if (minuteBuilder_ != null) {
          return minuteBuilder_.getMessageOrBuilder();
        } else {
          return minute_;
        }
      }
      /**
       * <code>required .maxpb.BlackBoxMinute minute = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.BlackBoxMinute, maxpb.MaxpbTelemetry.BlackBoxMinute.Builder, maxpb.MaxpbTelemetry.BlackBoxMinuteOrBuilder> 
          getMinuteFieldBuilder() {
        if (minuteBuilder_ == null) {
          minuteBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              maxpb.MaxpbTelemetry.BlackBoxMinute, maxpb.MaxpbTelemetry.BlackBoxMinute.Builder, maxpb.MaxpbTelemetry.BlackBoxMinuteOrBuilder>(
                  getMinute(),
                  getParentForChildren(),
                  isClean());
          minute_ = null;
        }
        return minuteBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:maxpb.BlackBoxData)
    }

    static {
      defaultInstance = new BlackBoxData(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:maxpb.BlackBoxData)
  }

  public interface BlackBoxMinuteOrBuilder extends
      // @@protoc_insertion_point(interface_extends:maxpb.BlackBoxMinute)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required uint32 dateTime = 1;</code>
     *
     * <pre>
     *&#47; Unix time, seconds since 01/01/1970 SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasDateTime();
    /**
     * <code>required uint32 dateTime = 1;</code>
     *
     * <pre>
     *&#47; Unix time, seconds since 01/01/1970 SupportedBy: MXT160, MXT162
     * </pre>
     */
    int getDateTime();

    /**
     * <code>required sfixed32 latitude = 2;</code>
     *
     * <pre>
     *&#47; Degrees.decimalsOfDegrees * 10,000,000 SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasLatitude();
    /**
     * <code>required sfixed32 latitude = 2;</code>
     *
     * <pre>
     *&#47; Degrees.decimalsOfDegrees * 10,000,000 SupportedBy: MXT160, MXT162
     * </pre>
     */
    int getLatitude();

    /**
     * <code>required sfixed32 longitude = 3;</code>
     *
     * <pre>
     *&#47; Degrees.decimalsOfDegrees * 10,000,000 SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasLongitude();
    /**
     * <code>required sfixed32 longitude = 3;</code>
     *
     * <pre>
     *&#47; Degrees.decimalsOfDegrees * 10,000,000 SupportedBy: MXT160, MXT162
     * </pre>
     */
    int getLongitude();

    /**
     * <code>required uint64 odometer = 4;</code>
     *
     * <pre>
     *&#47; Meters SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasOdometer();
    /**
     * <code>required uint64 odometer = 4;</code>
     *
     * <pre>
     *&#47; Meters SupportedBy: MXT160, MXT162
     * </pre>
     */
    long getOdometer();

    /**
     * <code>optional .maxpb.BlackBoxSecond second00 = 5;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasSecond00();
    /**
     * <code>optional .maxpb.BlackBoxSecond second00 = 5;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.BlackBoxSecond getSecond00();
    /**
     * <code>optional .maxpb.BlackBoxSecond second00 = 5;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond00OrBuilder();

    /**
     * <code>optional .maxpb.BlackBoxSecond second01 = 6;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasSecond01();
    /**
     * <code>optional .maxpb.BlackBoxSecond second01 = 6;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.BlackBoxSecond getSecond01();
    /**
     * <code>optional .maxpb.BlackBoxSecond second01 = 6;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond01OrBuilder();

    /**
     * <code>optional .maxpb.BlackBoxSecond second02 = 7;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasSecond02();
    /**
     * <code>optional .maxpb.BlackBoxSecond second02 = 7;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.BlackBoxSecond getSecond02();
    /**
     * <code>optional .maxpb.BlackBoxSecond second02 = 7;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond02OrBuilder();

    /**
     * <code>optional .maxpb.BlackBoxSecond second03 = 8;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasSecond03();
    /**
     * <code>optional .maxpb.BlackBoxSecond second03 = 8;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.BlackBoxSecond getSecond03();
    /**
     * <code>optional .maxpb.BlackBoxSecond second03 = 8;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond03OrBuilder();

    /**
     * <code>optional .maxpb.BlackBoxSecond second04 = 9;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasSecond04();
    /**
     * <code>optional .maxpb.BlackBoxSecond second04 = 9;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.BlackBoxSecond getSecond04();
    /**
     * <code>optional .maxpb.BlackBoxSecond second04 = 9;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond04OrBuilder();

    /**
     * <code>optional .maxpb.BlackBoxSecond second05 = 10;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasSecond05();
    /**
     * <code>optional .maxpb.BlackBoxSecond second05 = 10;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.BlackBoxSecond getSecond05();
    /**
     * <code>optional .maxpb.BlackBoxSecond second05 = 10;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond05OrBuilder();

    /**
     * <code>optional .maxpb.BlackBoxSecond second06 = 11;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasSecond06();
    /**
     * <code>optional .maxpb.BlackBoxSecond second06 = 11;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.BlackBoxSecond getSecond06();
    /**
     * <code>optional .maxpb.BlackBoxSecond second06 = 11;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond06OrBuilder();

    /**
     * <code>optional .maxpb.BlackBoxSecond second07 = 12;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasSecond07();
    /**
     * <code>optional .maxpb.BlackBoxSecond second07 = 12;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.BlackBoxSecond getSecond07();
    /**
     * <code>optional .maxpb.BlackBoxSecond second07 = 12;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond07OrBuilder();

    /**
     * <code>optional .maxpb.BlackBoxSecond second08 = 13;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasSecond08();
    /**
     * <code>optional .maxpb.BlackBoxSecond second08 = 13;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.BlackBoxSecond getSecond08();
    /**
     * <code>optional .maxpb.BlackBoxSecond second08 = 13;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond08OrBuilder();

    /**
     * <code>optional .maxpb.BlackBoxSecond second09 = 14;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasSecond09();
    /**
     * <code>optional .maxpb.BlackBoxSecond second09 = 14;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.BlackBoxSecond getSecond09();
    /**
     * <code>optional .maxpb.BlackBoxSecond second09 = 14;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond09OrBuilder();

    /**
     * <code>optional .maxpb.BlackBoxSecond second10 = 15;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasSecond10();
    /**
     * <code>optional .maxpb.BlackBoxSecond second10 = 15;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.BlackBoxSecond getSecond10();
    /**
     * <code>optional .maxpb.BlackBoxSecond second10 = 15;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond10OrBuilder();

    /**
     * <code>optional .maxpb.BlackBoxSecond second11 = 16;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasSecond11();
    /**
     * <code>optional .maxpb.BlackBoxSecond second11 = 16;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.BlackBoxSecond getSecond11();
    /**
     * <code>optional .maxpb.BlackBoxSecond second11 = 16;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond11OrBuilder();

    /**
     * <code>optional .maxpb.BlackBoxSecond second12 = 17;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasSecond12();
    /**
     * <code>optional .maxpb.BlackBoxSecond second12 = 17;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.BlackBoxSecond getSecond12();
    /**
     * <code>optional .maxpb.BlackBoxSecond second12 = 17;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond12OrBuilder();

    /**
     * <code>optional .maxpb.BlackBoxSecond second13 = 18;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasSecond13();
    /**
     * <code>optional .maxpb.BlackBoxSecond second13 = 18;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.BlackBoxSecond getSecond13();
    /**
     * <code>optional .maxpb.BlackBoxSecond second13 = 18;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond13OrBuilder();

    /**
     * <code>optional .maxpb.BlackBoxSecond second14 = 19;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasSecond14();
    /**
     * <code>optional .maxpb.BlackBoxSecond second14 = 19;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.BlackBoxSecond getSecond14();
    /**
     * <code>optional .maxpb.BlackBoxSecond second14 = 19;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond14OrBuilder();

    /**
     * <code>optional .maxpb.BlackBoxSecond second15 = 20;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasSecond15();
    /**
     * <code>optional .maxpb.BlackBoxSecond second15 = 20;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.BlackBoxSecond getSecond15();
    /**
     * <code>optional .maxpb.BlackBoxSecond second15 = 20;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond15OrBuilder();

    /**
     * <code>optional .maxpb.BlackBoxSecond second16 = 21;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasSecond16();
    /**
     * <code>optional .maxpb.BlackBoxSecond second16 = 21;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.BlackBoxSecond getSecond16();
    /**
     * <code>optional .maxpb.BlackBoxSecond second16 = 21;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond16OrBuilder();

    /**
     * <code>optional .maxpb.BlackBoxSecond second17 = 22;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasSecond17();
    /**
     * <code>optional .maxpb.BlackBoxSecond second17 = 22;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.BlackBoxSecond getSecond17();
    /**
     * <code>optional .maxpb.BlackBoxSecond second17 = 22;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond17OrBuilder();

    /**
     * <code>optional .maxpb.BlackBoxSecond second18 = 23;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasSecond18();
    /**
     * <code>optional .maxpb.BlackBoxSecond second18 = 23;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.BlackBoxSecond getSecond18();
    /**
     * <code>optional .maxpb.BlackBoxSecond second18 = 23;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond18OrBuilder();

    /**
     * <code>optional .maxpb.BlackBoxSecond second19 = 24;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasSecond19();
    /**
     * <code>optional .maxpb.BlackBoxSecond second19 = 24;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.BlackBoxSecond getSecond19();
    /**
     * <code>optional .maxpb.BlackBoxSecond second19 = 24;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond19OrBuilder();

    /**
     * <code>optional .maxpb.BlackBoxSecond second20 = 25;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasSecond20();
    /**
     * <code>optional .maxpb.BlackBoxSecond second20 = 25;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.BlackBoxSecond getSecond20();
    /**
     * <code>optional .maxpb.BlackBoxSecond second20 = 25;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond20OrBuilder();

    /**
     * <code>optional .maxpb.BlackBoxSecond second21 = 26;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasSecond21();
    /**
     * <code>optional .maxpb.BlackBoxSecond second21 = 26;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.BlackBoxSecond getSecond21();
    /**
     * <code>optional .maxpb.BlackBoxSecond second21 = 26;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond21OrBuilder();

    /**
     * <code>optional .maxpb.BlackBoxSecond second22 = 27;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasSecond22();
    /**
     * <code>optional .maxpb.BlackBoxSecond second22 = 27;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.BlackBoxSecond getSecond22();
    /**
     * <code>optional .maxpb.BlackBoxSecond second22 = 27;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond22OrBuilder();

    /**
     * <code>optional .maxpb.BlackBoxSecond second23 = 28;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasSecond23();
    /**
     * <code>optional .maxpb.BlackBoxSecond second23 = 28;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.BlackBoxSecond getSecond23();
    /**
     * <code>optional .maxpb.BlackBoxSecond second23 = 28;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond23OrBuilder();

    /**
     * <code>optional .maxpb.BlackBoxSecond second24 = 29;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasSecond24();
    /**
     * <code>optional .maxpb.BlackBoxSecond second24 = 29;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.BlackBoxSecond getSecond24();
    /**
     * <code>optional .maxpb.BlackBoxSecond second24 = 29;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond24OrBuilder();

    /**
     * <code>optional .maxpb.BlackBoxSecond second25 = 30;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasSecond25();
    /**
     * <code>optional .maxpb.BlackBoxSecond second25 = 30;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.BlackBoxSecond getSecond25();
    /**
     * <code>optional .maxpb.BlackBoxSecond second25 = 30;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond25OrBuilder();

    /**
     * <code>optional .maxpb.BlackBoxSecond second26 = 31;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasSecond26();
    /**
     * <code>optional .maxpb.BlackBoxSecond second26 = 31;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.BlackBoxSecond getSecond26();
    /**
     * <code>optional .maxpb.BlackBoxSecond second26 = 31;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond26OrBuilder();

    /**
     * <code>optional .maxpb.BlackBoxSecond second27 = 32;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasSecond27();
    /**
     * <code>optional .maxpb.BlackBoxSecond second27 = 32;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.BlackBoxSecond getSecond27();
    /**
     * <code>optional .maxpb.BlackBoxSecond second27 = 32;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond27OrBuilder();

    /**
     * <code>optional .maxpb.BlackBoxSecond second28 = 33;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasSecond28();
    /**
     * <code>optional .maxpb.BlackBoxSecond second28 = 33;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.BlackBoxSecond getSecond28();
    /**
     * <code>optional .maxpb.BlackBoxSecond second28 = 33;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond28OrBuilder();

    /**
     * <code>optional .maxpb.BlackBoxSecond second29 = 34;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasSecond29();
    /**
     * <code>optional .maxpb.BlackBoxSecond second29 = 34;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.BlackBoxSecond getSecond29();
    /**
     * <code>optional .maxpb.BlackBoxSecond second29 = 34;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond29OrBuilder();

    /**
     * <code>optional .maxpb.BlackBoxSecond second30 = 35;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasSecond30();
    /**
     * <code>optional .maxpb.BlackBoxSecond second30 = 35;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.BlackBoxSecond getSecond30();
    /**
     * <code>optional .maxpb.BlackBoxSecond second30 = 35;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond30OrBuilder();

    /**
     * <code>optional .maxpb.BlackBoxSecond second31 = 36;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasSecond31();
    /**
     * <code>optional .maxpb.BlackBoxSecond second31 = 36;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.BlackBoxSecond getSecond31();
    /**
     * <code>optional .maxpb.BlackBoxSecond second31 = 36;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond31OrBuilder();

    /**
     * <code>optional .maxpb.BlackBoxSecond second32 = 37;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasSecond32();
    /**
     * <code>optional .maxpb.BlackBoxSecond second32 = 37;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.BlackBoxSecond getSecond32();
    /**
     * <code>optional .maxpb.BlackBoxSecond second32 = 37;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond32OrBuilder();

    /**
     * <code>optional .maxpb.BlackBoxSecond second33 = 38;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasSecond33();
    /**
     * <code>optional .maxpb.BlackBoxSecond second33 = 38;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.BlackBoxSecond getSecond33();
    /**
     * <code>optional .maxpb.BlackBoxSecond second33 = 38;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond33OrBuilder();

    /**
     * <code>optional .maxpb.BlackBoxSecond second34 = 39;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasSecond34();
    /**
     * <code>optional .maxpb.BlackBoxSecond second34 = 39;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.BlackBoxSecond getSecond34();
    /**
     * <code>optional .maxpb.BlackBoxSecond second34 = 39;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond34OrBuilder();

    /**
     * <code>optional .maxpb.BlackBoxSecond second35 = 40;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasSecond35();
    /**
     * <code>optional .maxpb.BlackBoxSecond second35 = 40;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.BlackBoxSecond getSecond35();
    /**
     * <code>optional .maxpb.BlackBoxSecond second35 = 40;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond35OrBuilder();

    /**
     * <code>optional .maxpb.BlackBoxSecond second36 = 41;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasSecond36();
    /**
     * <code>optional .maxpb.BlackBoxSecond second36 = 41;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.BlackBoxSecond getSecond36();
    /**
     * <code>optional .maxpb.BlackBoxSecond second36 = 41;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond36OrBuilder();

    /**
     * <code>optional .maxpb.BlackBoxSecond second37 = 42;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasSecond37();
    /**
     * <code>optional .maxpb.BlackBoxSecond second37 = 42;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.BlackBoxSecond getSecond37();
    /**
     * <code>optional .maxpb.BlackBoxSecond second37 = 42;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond37OrBuilder();

    /**
     * <code>optional .maxpb.BlackBoxSecond second38 = 43;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasSecond38();
    /**
     * <code>optional .maxpb.BlackBoxSecond second38 = 43;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.BlackBoxSecond getSecond38();
    /**
     * <code>optional .maxpb.BlackBoxSecond second38 = 43;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond38OrBuilder();

    /**
     * <code>optional .maxpb.BlackBoxSecond second39 = 44;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasSecond39();
    /**
     * <code>optional .maxpb.BlackBoxSecond second39 = 44;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.BlackBoxSecond getSecond39();
    /**
     * <code>optional .maxpb.BlackBoxSecond second39 = 44;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond39OrBuilder();

    /**
     * <code>optional .maxpb.BlackBoxSecond second40 = 45;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasSecond40();
    /**
     * <code>optional .maxpb.BlackBoxSecond second40 = 45;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.BlackBoxSecond getSecond40();
    /**
     * <code>optional .maxpb.BlackBoxSecond second40 = 45;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond40OrBuilder();

    /**
     * <code>optional .maxpb.BlackBoxSecond second41 = 46;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasSecond41();
    /**
     * <code>optional .maxpb.BlackBoxSecond second41 = 46;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.BlackBoxSecond getSecond41();
    /**
     * <code>optional .maxpb.BlackBoxSecond second41 = 46;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond41OrBuilder();

    /**
     * <code>optional .maxpb.BlackBoxSecond second42 = 47;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasSecond42();
    /**
     * <code>optional .maxpb.BlackBoxSecond second42 = 47;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.BlackBoxSecond getSecond42();
    /**
     * <code>optional .maxpb.BlackBoxSecond second42 = 47;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond42OrBuilder();

    /**
     * <code>optional .maxpb.BlackBoxSecond second43 = 48;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasSecond43();
    /**
     * <code>optional .maxpb.BlackBoxSecond second43 = 48;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.BlackBoxSecond getSecond43();
    /**
     * <code>optional .maxpb.BlackBoxSecond second43 = 48;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond43OrBuilder();

    /**
     * <code>optional .maxpb.BlackBoxSecond second44 = 49;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasSecond44();
    /**
     * <code>optional .maxpb.BlackBoxSecond second44 = 49;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.BlackBoxSecond getSecond44();
    /**
     * <code>optional .maxpb.BlackBoxSecond second44 = 49;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond44OrBuilder();

    /**
     * <code>optional .maxpb.BlackBoxSecond second45 = 50;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasSecond45();
    /**
     * <code>optional .maxpb.BlackBoxSecond second45 = 50;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.BlackBoxSecond getSecond45();
    /**
     * <code>optional .maxpb.BlackBoxSecond second45 = 50;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond45OrBuilder();

    /**
     * <code>optional .maxpb.BlackBoxSecond second46 = 51;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasSecond46();
    /**
     * <code>optional .maxpb.BlackBoxSecond second46 = 51;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.BlackBoxSecond getSecond46();
    /**
     * <code>optional .maxpb.BlackBoxSecond second46 = 51;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond46OrBuilder();

    /**
     * <code>optional .maxpb.BlackBoxSecond second47 = 52;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasSecond47();
    /**
     * <code>optional .maxpb.BlackBoxSecond second47 = 52;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.BlackBoxSecond getSecond47();
    /**
     * <code>optional .maxpb.BlackBoxSecond second47 = 52;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond47OrBuilder();

    /**
     * <code>optional .maxpb.BlackBoxSecond second48 = 53;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasSecond48();
    /**
     * <code>optional .maxpb.BlackBoxSecond second48 = 53;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.BlackBoxSecond getSecond48();
    /**
     * <code>optional .maxpb.BlackBoxSecond second48 = 53;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond48OrBuilder();

    /**
     * <code>optional .maxpb.BlackBoxSecond second49 = 54;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasSecond49();
    /**
     * <code>optional .maxpb.BlackBoxSecond second49 = 54;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.BlackBoxSecond getSecond49();
    /**
     * <code>optional .maxpb.BlackBoxSecond second49 = 54;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond49OrBuilder();

    /**
     * <code>optional .maxpb.BlackBoxSecond second50 = 55;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasSecond50();
    /**
     * <code>optional .maxpb.BlackBoxSecond second50 = 55;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.BlackBoxSecond getSecond50();
    /**
     * <code>optional .maxpb.BlackBoxSecond second50 = 55;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond50OrBuilder();

    /**
     * <code>optional .maxpb.BlackBoxSecond second51 = 56;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasSecond51();
    /**
     * <code>optional .maxpb.BlackBoxSecond second51 = 56;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.BlackBoxSecond getSecond51();
    /**
     * <code>optional .maxpb.BlackBoxSecond second51 = 56;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond51OrBuilder();

    /**
     * <code>optional .maxpb.BlackBoxSecond second52 = 57;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasSecond52();
    /**
     * <code>optional .maxpb.BlackBoxSecond second52 = 57;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.BlackBoxSecond getSecond52();
    /**
     * <code>optional .maxpb.BlackBoxSecond second52 = 57;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond52OrBuilder();

    /**
     * <code>optional .maxpb.BlackBoxSecond second53 = 58;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasSecond53();
    /**
     * <code>optional .maxpb.BlackBoxSecond second53 = 58;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.BlackBoxSecond getSecond53();
    /**
     * <code>optional .maxpb.BlackBoxSecond second53 = 58;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond53OrBuilder();

    /**
     * <code>optional .maxpb.BlackBoxSecond second54 = 59;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasSecond54();
    /**
     * <code>optional .maxpb.BlackBoxSecond second54 = 59;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.BlackBoxSecond getSecond54();
    /**
     * <code>optional .maxpb.BlackBoxSecond second54 = 59;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond54OrBuilder();

    /**
     * <code>optional .maxpb.BlackBoxSecond second55 = 60;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasSecond55();
    /**
     * <code>optional .maxpb.BlackBoxSecond second55 = 60;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.BlackBoxSecond getSecond55();
    /**
     * <code>optional .maxpb.BlackBoxSecond second55 = 60;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond55OrBuilder();

    /**
     * <code>optional .maxpb.BlackBoxSecond second56 = 61;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasSecond56();
    /**
     * <code>optional .maxpb.BlackBoxSecond second56 = 61;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.BlackBoxSecond getSecond56();
    /**
     * <code>optional .maxpb.BlackBoxSecond second56 = 61;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond56OrBuilder();

    /**
     * <code>optional .maxpb.BlackBoxSecond second57 = 62;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasSecond57();
    /**
     * <code>optional .maxpb.BlackBoxSecond second57 = 62;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.BlackBoxSecond getSecond57();
    /**
     * <code>optional .maxpb.BlackBoxSecond second57 = 62;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond57OrBuilder();

    /**
     * <code>optional .maxpb.BlackBoxSecond second58 = 63;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasSecond58();
    /**
     * <code>optional .maxpb.BlackBoxSecond second58 = 63;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.BlackBoxSecond getSecond58();
    /**
     * <code>optional .maxpb.BlackBoxSecond second58 = 63;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond58OrBuilder();

    /**
     * <code>optional .maxpb.BlackBoxSecond second59 = 64;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasSecond59();
    /**
     * <code>optional .maxpb.BlackBoxSecond second59 = 64;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.BlackBoxSecond getSecond59();
    /**
     * <code>optional .maxpb.BlackBoxSecond second59 = 64;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond59OrBuilder();
  }
  /**
   * Protobuf type {@code maxpb.BlackBoxMinute}
   */
  public static final class BlackBoxMinute extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:maxpb.BlackBoxMinute)
      BlackBoxMinuteOrBuilder {
    // Use BlackBoxMinute.newBuilder() to construct.
    private BlackBoxMinute(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private BlackBoxMinute(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final BlackBoxMinute defaultInstance;
    public static BlackBoxMinute getDefaultInstance() {
      return defaultInstance;
    }

    public BlackBoxMinute getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private BlackBoxMinute(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      int mutable_bitField1_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              dateTime_ = input.readUInt32();
              break;
            }
            case 21: {
              bitField0_ |= 0x00000002;
              latitude_ = input.readSFixed32();
              break;
            }
            case 29: {
              bitField0_ |= 0x00000004;
              longitude_ = input.readSFixed32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              odometer_ = input.readUInt64();
              break;
            }
            case 42: {
              maxpb.MaxpbTelemetry.BlackBoxSecond.Builder subBuilder = null;
              if (((bitField0_ & 0x00000010) == 0x00000010)) {
                subBuilder = second00_.toBuilder();
              }
              second00_ = input.readMessage(maxpb.MaxpbTelemetry.BlackBoxSecond.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(second00_);
                second00_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000010;
              break;
            }
            case 50: {
              maxpb.MaxpbTelemetry.BlackBoxSecond.Builder subBuilder = null;
              if (((bitField0_ & 0x00000020) == 0x00000020)) {
                subBuilder = second01_.toBuilder();
              }
              second01_ = input.readMessage(maxpb.MaxpbTelemetry.BlackBoxSecond.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(second01_);
                second01_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000020;
              break;
            }
            case 58: {
              maxpb.MaxpbTelemetry.BlackBoxSecond.Builder subBuilder = null;
              if (((bitField0_ & 0x00000040) == 0x00000040)) {
                subBuilder = second02_.toBuilder();
              }
              second02_ = input.readMessage(maxpb.MaxpbTelemetry.BlackBoxSecond.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(second02_);
                second02_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000040;
              break;
            }
            case 66: {
              maxpb.MaxpbTelemetry.BlackBoxSecond.Builder subBuilder = null;
              if (((bitField0_ & 0x00000080) == 0x00000080)) {
                subBuilder = second03_.toBuilder();
              }
              second03_ = input.readMessage(maxpb.MaxpbTelemetry.BlackBoxSecond.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(second03_);
                second03_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000080;
              break;
            }
            case 74: {
              maxpb.MaxpbTelemetry.BlackBoxSecond.Builder subBuilder = null;
              if (((bitField0_ & 0x00000100) == 0x00000100)) {
                subBuilder = second04_.toBuilder();
              }
              second04_ = input.readMessage(maxpb.MaxpbTelemetry.BlackBoxSecond.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(second04_);
                second04_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000100;
              break;
            }
            case 82: {
              maxpb.MaxpbTelemetry.BlackBoxSecond.Builder subBuilder = null;
              if (((bitField0_ & 0x00000200) == 0x00000200)) {
                subBuilder = second05_.toBuilder();
              }
              second05_ = input.readMessage(maxpb.MaxpbTelemetry.BlackBoxSecond.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(second05_);
                second05_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000200;
              break;
            }
            case 90: {
              maxpb.MaxpbTelemetry.BlackBoxSecond.Builder subBuilder = null;
              if (((bitField0_ & 0x00000400) == 0x00000400)) {
                subBuilder = second06_.toBuilder();
              }
              second06_ = input.readMessage(maxpb.MaxpbTelemetry.BlackBoxSecond.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(second06_);
                second06_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000400;
              break;
            }
            case 98: {
              maxpb.MaxpbTelemetry.BlackBoxSecond.Builder subBuilder = null;
              if (((bitField0_ & 0x00000800) == 0x00000800)) {
                subBuilder = second07_.toBuilder();
              }
              second07_ = input.readMessage(maxpb.MaxpbTelemetry.BlackBoxSecond.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(second07_);
                second07_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000800;
              break;
            }
            case 106: {
              maxpb.MaxpbTelemetry.BlackBoxSecond.Builder subBuilder = null;
              if (((bitField0_ & 0x00001000) == 0x00001000)) {
                subBuilder = second08_.toBuilder();
              }
              second08_ = input.readMessage(maxpb.MaxpbTelemetry.BlackBoxSecond.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(second08_);
                second08_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00001000;
              break;
            }
            case 114: {
              maxpb.MaxpbTelemetry.BlackBoxSecond.Builder subBuilder = null;
              if (((bitField0_ & 0x00002000) == 0x00002000)) {
                subBuilder = second09_.toBuilder();
              }
              second09_ = input.readMessage(maxpb.MaxpbTelemetry.BlackBoxSecond.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(second09_);
                second09_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00002000;
              break;
            }
            case 122: {
              maxpb.MaxpbTelemetry.BlackBoxSecond.Builder subBuilder = null;
              if (((bitField0_ & 0x00004000) == 0x00004000)) {
                subBuilder = second10_.toBuilder();
              }
              second10_ = input.readMessage(maxpb.MaxpbTelemetry.BlackBoxSecond.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(second10_);
                second10_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00004000;
              break;
            }
            case 130: {
              maxpb.MaxpbTelemetry.BlackBoxSecond.Builder subBuilder = null;
              if (((bitField0_ & 0x00008000) == 0x00008000)) {
                subBuilder = second11_.toBuilder();
              }
              second11_ = input.readMessage(maxpb.MaxpbTelemetry.BlackBoxSecond.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(second11_);
                second11_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00008000;
              break;
            }
            case 138: {
              maxpb.MaxpbTelemetry.BlackBoxSecond.Builder subBuilder = null;
              if (((bitField0_ & 0x00010000) == 0x00010000)) {
                subBuilder = second12_.toBuilder();
              }
              second12_ = input.readMessage(maxpb.MaxpbTelemetry.BlackBoxSecond.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(second12_);
                second12_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00010000;
              break;
            }
            case 146: {
              maxpb.MaxpbTelemetry.BlackBoxSecond.Builder subBuilder = null;
              if (((bitField0_ & 0x00020000) == 0x00020000)) {
                subBuilder = second13_.toBuilder();
              }
              second13_ = input.readMessage(maxpb.MaxpbTelemetry.BlackBoxSecond.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(second13_);
                second13_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00020000;
              break;
            }
            case 154: {
              maxpb.MaxpbTelemetry.BlackBoxSecond.Builder subBuilder = null;
              if (((bitField0_ & 0x00040000) == 0x00040000)) {
                subBuilder = second14_.toBuilder();
              }
              second14_ = input.readMessage(maxpb.MaxpbTelemetry.BlackBoxSecond.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(second14_);
                second14_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00040000;
              break;
            }
            case 162: {
              maxpb.MaxpbTelemetry.BlackBoxSecond.Builder subBuilder = null;
              if (((bitField0_ & 0x00080000) == 0x00080000)) {
                subBuilder = second15_.toBuilder();
              }
              second15_ = input.readMessage(maxpb.MaxpbTelemetry.BlackBoxSecond.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(second15_);
                second15_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00080000;
              break;
            }
            case 170: {
              maxpb.MaxpbTelemetry.BlackBoxSecond.Builder subBuilder = null;
              if (((bitField0_ & 0x00100000) == 0x00100000)) {
                subBuilder = second16_.toBuilder();
              }
              second16_ = input.readMessage(maxpb.MaxpbTelemetry.BlackBoxSecond.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(second16_);
                second16_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00100000;
              break;
            }
            case 178: {
              maxpb.MaxpbTelemetry.BlackBoxSecond.Builder subBuilder = null;
              if (((bitField0_ & 0x00200000) == 0x00200000)) {
                subBuilder = second17_.toBuilder();
              }
              second17_ = input.readMessage(maxpb.MaxpbTelemetry.BlackBoxSecond.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(second17_);
                second17_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00200000;
              break;
            }
            case 186: {
              maxpb.MaxpbTelemetry.BlackBoxSecond.Builder subBuilder = null;
              if (((bitField0_ & 0x00400000) == 0x00400000)) {
                subBuilder = second18_.toBuilder();
              }
              second18_ = input.readMessage(maxpb.MaxpbTelemetry.BlackBoxSecond.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(second18_);
                second18_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00400000;
              break;
            }
            case 194: {
              maxpb.MaxpbTelemetry.BlackBoxSecond.Builder subBuilder = null;
              if (((bitField0_ & 0x00800000) == 0x00800000)) {
                subBuilder = second19_.toBuilder();
              }
              second19_ = input.readMessage(maxpb.MaxpbTelemetry.BlackBoxSecond.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(second19_);
                second19_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00800000;
              break;
            }
            case 202: {
              maxpb.MaxpbTelemetry.BlackBoxSecond.Builder subBuilder = null;
              if (((bitField0_ & 0x01000000) == 0x01000000)) {
                subBuilder = second20_.toBuilder();
              }
              second20_ = input.readMessage(maxpb.MaxpbTelemetry.BlackBoxSecond.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(second20_);
                second20_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x01000000;
              break;
            }
            case 210: {
              maxpb.MaxpbTelemetry.BlackBoxSecond.Builder subBuilder = null;
              if (((bitField0_ & 0x02000000) == 0x02000000)) {
                subBuilder = second21_.toBuilder();
              }
              second21_ = input.readMessage(maxpb.MaxpbTelemetry.BlackBoxSecond.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(second21_);
                second21_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x02000000;
              break;
            }
            case 218: {
              maxpb.MaxpbTelemetry.BlackBoxSecond.Builder subBuilder = null;
              if (((bitField0_ & 0x04000000) == 0x04000000)) {
                subBuilder = second22_.toBuilder();
              }
              second22_ = input.readMessage(maxpb.MaxpbTelemetry.BlackBoxSecond.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(second22_);
                second22_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x04000000;
              break;
            }
            case 226: {
              maxpb.MaxpbTelemetry.BlackBoxSecond.Builder subBuilder = null;
              if (((bitField0_ & 0x08000000) == 0x08000000)) {
                subBuilder = second23_.toBuilder();
              }
              second23_ = input.readMessage(maxpb.MaxpbTelemetry.BlackBoxSecond.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(second23_);
                second23_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x08000000;
              break;
            }
            case 234: {
              maxpb.MaxpbTelemetry.BlackBoxSecond.Builder subBuilder = null;
              if (((bitField0_ & 0x10000000) == 0x10000000)) {
                subBuilder = second24_.toBuilder();
              }
              second24_ = input.readMessage(maxpb.MaxpbTelemetry.BlackBoxSecond.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(second24_);
                second24_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x10000000;
              break;
            }
            case 242: {
              maxpb.MaxpbTelemetry.BlackBoxSecond.Builder subBuilder = null;
              if (((bitField0_ & 0x20000000) == 0x20000000)) {
                subBuilder = second25_.toBuilder();
              }
              second25_ = input.readMessage(maxpb.MaxpbTelemetry.BlackBoxSecond.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(second25_);
                second25_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x20000000;
              break;
            }
            case 250: {
              maxpb.MaxpbTelemetry.BlackBoxSecond.Builder subBuilder = null;
              if (((bitField0_ & 0x40000000) == 0x40000000)) {
                subBuilder = second26_.toBuilder();
              }
              second26_ = input.readMessage(maxpb.MaxpbTelemetry.BlackBoxSecond.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(second26_);
                second26_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x40000000;
              break;
            }
            case 258: {
              maxpb.MaxpbTelemetry.BlackBoxSecond.Builder subBuilder = null;
              if (((bitField0_ & 0x80000000) == 0x80000000)) {
                subBuilder = second27_.toBuilder();
              }
              second27_ = input.readMessage(maxpb.MaxpbTelemetry.BlackBoxSecond.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(second27_);
                second27_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x80000000;
              break;
            }
            case 266: {
              maxpb.MaxpbTelemetry.BlackBoxSecond.Builder subBuilder = null;
              if (((bitField1_ & 0x00000001) == 0x00000001)) {
                subBuilder = second28_.toBuilder();
              }
              second28_ = input.readMessage(maxpb.MaxpbTelemetry.BlackBoxSecond.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(second28_);
                second28_ = subBuilder.buildPartial();
              }
              bitField1_ |= 0x00000001;
              break;
            }
            case 274: {
              maxpb.MaxpbTelemetry.BlackBoxSecond.Builder subBuilder = null;
              if (((bitField1_ & 0x00000002) == 0x00000002)) {
                subBuilder = second29_.toBuilder();
              }
              second29_ = input.readMessage(maxpb.MaxpbTelemetry.BlackBoxSecond.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(second29_);
                second29_ = subBuilder.buildPartial();
              }
              bitField1_ |= 0x00000002;
              break;
            }
            case 282: {
              maxpb.MaxpbTelemetry.BlackBoxSecond.Builder subBuilder = null;
              if (((bitField1_ & 0x00000004) == 0x00000004)) {
                subBuilder = second30_.toBuilder();
              }
              second30_ = input.readMessage(maxpb.MaxpbTelemetry.BlackBoxSecond.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(second30_);
                second30_ = subBuilder.buildPartial();
              }
              bitField1_ |= 0x00000004;
              break;
            }
            case 290: {
              maxpb.MaxpbTelemetry.BlackBoxSecond.Builder subBuilder = null;
              if (((bitField1_ & 0x00000008) == 0x00000008)) {
                subBuilder = second31_.toBuilder();
              }
              second31_ = input.readMessage(maxpb.MaxpbTelemetry.BlackBoxSecond.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(second31_);
                second31_ = subBuilder.buildPartial();
              }
              bitField1_ |= 0x00000008;
              break;
            }
            case 298: {
              maxpb.MaxpbTelemetry.BlackBoxSecond.Builder subBuilder = null;
              if (((bitField1_ & 0x00000010) == 0x00000010)) {
                subBuilder = second32_.toBuilder();
              }
              second32_ = input.readMessage(maxpb.MaxpbTelemetry.BlackBoxSecond.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(second32_);
                second32_ = subBuilder.buildPartial();
              }
              bitField1_ |= 0x00000010;
              break;
            }
            case 306: {
              maxpb.MaxpbTelemetry.BlackBoxSecond.Builder subBuilder = null;
              if (((bitField1_ & 0x00000020) == 0x00000020)) {
                subBuilder = second33_.toBuilder();
              }
              second33_ = input.readMessage(maxpb.MaxpbTelemetry.BlackBoxSecond.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(second33_);
                second33_ = subBuilder.buildPartial();
              }
              bitField1_ |= 0x00000020;
              break;
            }
            case 314: {
              maxpb.MaxpbTelemetry.BlackBoxSecond.Builder subBuilder = null;
              if (((bitField1_ & 0x00000040) == 0x00000040)) {
                subBuilder = second34_.toBuilder();
              }
              second34_ = input.readMessage(maxpb.MaxpbTelemetry.BlackBoxSecond.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(second34_);
                second34_ = subBuilder.buildPartial();
              }
              bitField1_ |= 0x00000040;
              break;
            }
            case 322: {
              maxpb.MaxpbTelemetry.BlackBoxSecond.Builder subBuilder = null;
              if (((bitField1_ & 0x00000080) == 0x00000080)) {
                subBuilder = second35_.toBuilder();
              }
              second35_ = input.readMessage(maxpb.MaxpbTelemetry.BlackBoxSecond.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(second35_);
                second35_ = subBuilder.buildPartial();
              }
              bitField1_ |= 0x00000080;
              break;
            }
            case 330: {
              maxpb.MaxpbTelemetry.BlackBoxSecond.Builder subBuilder = null;
              if (((bitField1_ & 0x00000100) == 0x00000100)) {
                subBuilder = second36_.toBuilder();
              }
              second36_ = input.readMessage(maxpb.MaxpbTelemetry.BlackBoxSecond.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(second36_);
                second36_ = subBuilder.buildPartial();
              }
              bitField1_ |= 0x00000100;
              break;
            }
            case 338: {
              maxpb.MaxpbTelemetry.BlackBoxSecond.Builder subBuilder = null;
              if (((bitField1_ & 0x00000200) == 0x00000200)) {
                subBuilder = second37_.toBuilder();
              }
              second37_ = input.readMessage(maxpb.MaxpbTelemetry.BlackBoxSecond.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(second37_);
                second37_ = subBuilder.buildPartial();
              }
              bitField1_ |= 0x00000200;
              break;
            }
            case 346: {
              maxpb.MaxpbTelemetry.BlackBoxSecond.Builder subBuilder = null;
              if (((bitField1_ & 0x00000400) == 0x00000400)) {
                subBuilder = second38_.toBuilder();
              }
              second38_ = input.readMessage(maxpb.MaxpbTelemetry.BlackBoxSecond.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(second38_);
                second38_ = subBuilder.buildPartial();
              }
              bitField1_ |= 0x00000400;
              break;
            }
            case 354: {
              maxpb.MaxpbTelemetry.BlackBoxSecond.Builder subBuilder = null;
              if (((bitField1_ & 0x00000800) == 0x00000800)) {
                subBuilder = second39_.toBuilder();
              }
              second39_ = input.readMessage(maxpb.MaxpbTelemetry.BlackBoxSecond.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(second39_);
                second39_ = subBuilder.buildPartial();
              }
              bitField1_ |= 0x00000800;
              break;
            }
            case 362: {
              maxpb.MaxpbTelemetry.BlackBoxSecond.Builder subBuilder = null;
              if (((bitField1_ & 0x00001000) == 0x00001000)) {
                subBuilder = second40_.toBuilder();
              }
              second40_ = input.readMessage(maxpb.MaxpbTelemetry.BlackBoxSecond.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(second40_);
                second40_ = subBuilder.buildPartial();
              }
              bitField1_ |= 0x00001000;
              break;
            }
            case 370: {
              maxpb.MaxpbTelemetry.BlackBoxSecond.Builder subBuilder = null;
              if (((bitField1_ & 0x00002000) == 0x00002000)) {
                subBuilder = second41_.toBuilder();
              }
              second41_ = input.readMessage(maxpb.MaxpbTelemetry.BlackBoxSecond.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(second41_);
                second41_ = subBuilder.buildPartial();
              }
              bitField1_ |= 0x00002000;
              break;
            }
            case 378: {
              maxpb.MaxpbTelemetry.BlackBoxSecond.Builder subBuilder = null;
              if (((bitField1_ & 0x00004000) == 0x00004000)) {
                subBuilder = second42_.toBuilder();
              }
              second42_ = input.readMessage(maxpb.MaxpbTelemetry.BlackBoxSecond.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(second42_);
                second42_ = subBuilder.buildPartial();
              }
              bitField1_ |= 0x00004000;
              break;
            }
            case 386: {
              maxpb.MaxpbTelemetry.BlackBoxSecond.Builder subBuilder = null;
              if (((bitField1_ & 0x00008000) == 0x00008000)) {
                subBuilder = second43_.toBuilder();
              }
              second43_ = input.readMessage(maxpb.MaxpbTelemetry.BlackBoxSecond.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(second43_);
                second43_ = subBuilder.buildPartial();
              }
              bitField1_ |= 0x00008000;
              break;
            }
            case 394: {
              maxpb.MaxpbTelemetry.BlackBoxSecond.Builder subBuilder = null;
              if (((bitField1_ & 0x00010000) == 0x00010000)) {
                subBuilder = second44_.toBuilder();
              }
              second44_ = input.readMessage(maxpb.MaxpbTelemetry.BlackBoxSecond.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(second44_);
                second44_ = subBuilder.buildPartial();
              }
              bitField1_ |= 0x00010000;
              break;
            }
            case 402: {
              maxpb.MaxpbTelemetry.BlackBoxSecond.Builder subBuilder = null;
              if (((bitField1_ & 0x00020000) == 0x00020000)) {
                subBuilder = second45_.toBuilder();
              }
              second45_ = input.readMessage(maxpb.MaxpbTelemetry.BlackBoxSecond.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(second45_);
                second45_ = subBuilder.buildPartial();
              }
              bitField1_ |= 0x00020000;
              break;
            }
            case 410: {
              maxpb.MaxpbTelemetry.BlackBoxSecond.Builder subBuilder = null;
              if (((bitField1_ & 0x00040000) == 0x00040000)) {
                subBuilder = second46_.toBuilder();
              }
              second46_ = input.readMessage(maxpb.MaxpbTelemetry.BlackBoxSecond.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(second46_);
                second46_ = subBuilder.buildPartial();
              }
              bitField1_ |= 0x00040000;
              break;
            }
            case 418: {
              maxpb.MaxpbTelemetry.BlackBoxSecond.Builder subBuilder = null;
              if (((bitField1_ & 0x00080000) == 0x00080000)) {
                subBuilder = second47_.toBuilder();
              }
              second47_ = input.readMessage(maxpb.MaxpbTelemetry.BlackBoxSecond.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(second47_);
                second47_ = subBuilder.buildPartial();
              }
              bitField1_ |= 0x00080000;
              break;
            }
            case 426: {
              maxpb.MaxpbTelemetry.BlackBoxSecond.Builder subBuilder = null;
              if (((bitField1_ & 0x00100000) == 0x00100000)) {
                subBuilder = second48_.toBuilder();
              }
              second48_ = input.readMessage(maxpb.MaxpbTelemetry.BlackBoxSecond.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(second48_);
                second48_ = subBuilder.buildPartial();
              }
              bitField1_ |= 0x00100000;
              break;
            }
            case 434: {
              maxpb.MaxpbTelemetry.BlackBoxSecond.Builder subBuilder = null;
              if (((bitField1_ & 0x00200000) == 0x00200000)) {
                subBuilder = second49_.toBuilder();
              }
              second49_ = input.readMessage(maxpb.MaxpbTelemetry.BlackBoxSecond.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(second49_);
                second49_ = subBuilder.buildPartial();
              }
              bitField1_ |= 0x00200000;
              break;
            }
            case 442: {
              maxpb.MaxpbTelemetry.BlackBoxSecond.Builder subBuilder = null;
              if (((bitField1_ & 0x00400000) == 0x00400000)) {
                subBuilder = second50_.toBuilder();
              }
              second50_ = input.readMessage(maxpb.MaxpbTelemetry.BlackBoxSecond.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(second50_);
                second50_ = subBuilder.buildPartial();
              }
              bitField1_ |= 0x00400000;
              break;
            }
            case 450: {
              maxpb.MaxpbTelemetry.BlackBoxSecond.Builder subBuilder = null;
              if (((bitField1_ & 0x00800000) == 0x00800000)) {
                subBuilder = second51_.toBuilder();
              }
              second51_ = input.readMessage(maxpb.MaxpbTelemetry.BlackBoxSecond.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(second51_);
                second51_ = subBuilder.buildPartial();
              }
              bitField1_ |= 0x00800000;
              break;
            }
            case 458: {
              maxpb.MaxpbTelemetry.BlackBoxSecond.Builder subBuilder = null;
              if (((bitField1_ & 0x01000000) == 0x01000000)) {
                subBuilder = second52_.toBuilder();
              }
              second52_ = input.readMessage(maxpb.MaxpbTelemetry.BlackBoxSecond.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(second52_);
                second52_ = subBuilder.buildPartial();
              }
              bitField1_ |= 0x01000000;
              break;
            }
            case 466: {
              maxpb.MaxpbTelemetry.BlackBoxSecond.Builder subBuilder = null;
              if (((bitField1_ & 0x02000000) == 0x02000000)) {
                subBuilder = second53_.toBuilder();
              }
              second53_ = input.readMessage(maxpb.MaxpbTelemetry.BlackBoxSecond.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(second53_);
                second53_ = subBuilder.buildPartial();
              }
              bitField1_ |= 0x02000000;
              break;
            }
            case 474: {
              maxpb.MaxpbTelemetry.BlackBoxSecond.Builder subBuilder = null;
              if (((bitField1_ & 0x04000000) == 0x04000000)) {
                subBuilder = second54_.toBuilder();
              }
              second54_ = input.readMessage(maxpb.MaxpbTelemetry.BlackBoxSecond.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(second54_);
                second54_ = subBuilder.buildPartial();
              }
              bitField1_ |= 0x04000000;
              break;
            }
            case 482: {
              maxpb.MaxpbTelemetry.BlackBoxSecond.Builder subBuilder = null;
              if (((bitField1_ & 0x08000000) == 0x08000000)) {
                subBuilder = second55_.toBuilder();
              }
              second55_ = input.readMessage(maxpb.MaxpbTelemetry.BlackBoxSecond.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(second55_);
                second55_ = subBuilder.buildPartial();
              }
              bitField1_ |= 0x08000000;
              break;
            }
            case 490: {
              maxpb.MaxpbTelemetry.BlackBoxSecond.Builder subBuilder = null;
              if (((bitField1_ & 0x10000000) == 0x10000000)) {
                subBuilder = second56_.toBuilder();
              }
              second56_ = input.readMessage(maxpb.MaxpbTelemetry.BlackBoxSecond.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(second56_);
                second56_ = subBuilder.buildPartial();
              }
              bitField1_ |= 0x10000000;
              break;
            }
            case 498: {
              maxpb.MaxpbTelemetry.BlackBoxSecond.Builder subBuilder = null;
              if (((bitField1_ & 0x20000000) == 0x20000000)) {
                subBuilder = second57_.toBuilder();
              }
              second57_ = input.readMessage(maxpb.MaxpbTelemetry.BlackBoxSecond.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(second57_);
                second57_ = subBuilder.buildPartial();
              }
              bitField1_ |= 0x20000000;
              break;
            }
            case 506: {
              maxpb.MaxpbTelemetry.BlackBoxSecond.Builder subBuilder = null;
              if (((bitField1_ & 0x40000000) == 0x40000000)) {
                subBuilder = second58_.toBuilder();
              }
              second58_ = input.readMessage(maxpb.MaxpbTelemetry.BlackBoxSecond.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(second58_);
                second58_ = subBuilder.buildPartial();
              }
              bitField1_ |= 0x40000000;
              break;
            }
            case 514: {
              maxpb.MaxpbTelemetry.BlackBoxSecond.Builder subBuilder = null;
              if (((bitField1_ & 0x80000000) == 0x80000000)) {
                subBuilder = second59_.toBuilder();
              }
              second59_ = input.readMessage(maxpb.MaxpbTelemetry.BlackBoxSecond.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(second59_);
                second59_ = subBuilder.buildPartial();
              }
              bitField1_ |= 0x80000000;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return maxpb.MaxpbTelemetry.internal_static_maxpb_BlackBoxMinute_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return maxpb.MaxpbTelemetry.internal_static_maxpb_BlackBoxMinute_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              maxpb.MaxpbTelemetry.BlackBoxMinute.class, maxpb.MaxpbTelemetry.BlackBoxMinute.Builder.class);
    }

    public static com.google.protobuf.Parser<BlackBoxMinute> PARSER =
        new com.google.protobuf.AbstractParser<BlackBoxMinute>() {
      public BlackBoxMinute parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new BlackBoxMinute(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<BlackBoxMinute> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    private int bitField1_;
    public static final int DATETIME_FIELD_NUMBER = 1;
    private int dateTime_;
    /**
     * <code>required uint32 dateTime = 1;</code>
     *
     * <pre>
     *&#47; Unix time, seconds since 01/01/1970 SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasDateTime() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required uint32 dateTime = 1;</code>
     *
     * <pre>
     *&#47; Unix time, seconds since 01/01/1970 SupportedBy: MXT160, MXT162
     * </pre>
     */
    public int getDateTime() {
      return dateTime_;
    }

    public static final int LATITUDE_FIELD_NUMBER = 2;
    private int latitude_;
    /**
     * <code>required sfixed32 latitude = 2;</code>
     *
     * <pre>
     *&#47; Degrees.decimalsOfDegrees * 10,000,000 SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasLatitude() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required sfixed32 latitude = 2;</code>
     *
     * <pre>
     *&#47; Degrees.decimalsOfDegrees * 10,000,000 SupportedBy: MXT160, MXT162
     * </pre>
     */
    public int getLatitude() {
      return latitude_;
    }

    public static final int LONGITUDE_FIELD_NUMBER = 3;
    private int longitude_;
    /**
     * <code>required sfixed32 longitude = 3;</code>
     *
     * <pre>
     *&#47; Degrees.decimalsOfDegrees * 10,000,000 SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasLongitude() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required sfixed32 longitude = 3;</code>
     *
     * <pre>
     *&#47; Degrees.decimalsOfDegrees * 10,000,000 SupportedBy: MXT160, MXT162
     * </pre>
     */
    public int getLongitude() {
      return longitude_;
    }

    public static final int ODOMETER_FIELD_NUMBER = 4;
    private long odometer_;
    /**
     * <code>required uint64 odometer = 4;</code>
     *
     * <pre>
     *&#47; Meters SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasOdometer() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>required uint64 odometer = 4;</code>
     *
     * <pre>
     *&#47; Meters SupportedBy: MXT160, MXT162
     * </pre>
     */
    public long getOdometer() {
      return odometer_;
    }

    public static final int SECOND00_FIELD_NUMBER = 5;
    private maxpb.MaxpbTelemetry.BlackBoxSecond second00_;
    /**
     * <code>optional .maxpb.BlackBoxSecond second00 = 5;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasSecond00() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional .maxpb.BlackBoxSecond second00 = 5;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.BlackBoxSecond getSecond00() {
      return second00_;
    }
    /**
     * <code>optional .maxpb.BlackBoxSecond second00 = 5;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond00OrBuilder() {
      return second00_;
    }

    public static final int SECOND01_FIELD_NUMBER = 6;
    private maxpb.MaxpbTelemetry.BlackBoxSecond second01_;
    /**
     * <code>optional .maxpb.BlackBoxSecond second01 = 6;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasSecond01() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional .maxpb.BlackBoxSecond second01 = 6;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.BlackBoxSecond getSecond01() {
      return second01_;
    }
    /**
     * <code>optional .maxpb.BlackBoxSecond second01 = 6;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond01OrBuilder() {
      return second01_;
    }

    public static final int SECOND02_FIELD_NUMBER = 7;
    private maxpb.MaxpbTelemetry.BlackBoxSecond second02_;
    /**
     * <code>optional .maxpb.BlackBoxSecond second02 = 7;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasSecond02() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional .maxpb.BlackBoxSecond second02 = 7;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.BlackBoxSecond getSecond02() {
      return second02_;
    }
    /**
     * <code>optional .maxpb.BlackBoxSecond second02 = 7;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond02OrBuilder() {
      return second02_;
    }

    public static final int SECOND03_FIELD_NUMBER = 8;
    private maxpb.MaxpbTelemetry.BlackBoxSecond second03_;
    /**
     * <code>optional .maxpb.BlackBoxSecond second03 = 8;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasSecond03() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional .maxpb.BlackBoxSecond second03 = 8;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.BlackBoxSecond getSecond03() {
      return second03_;
    }
    /**
     * <code>optional .maxpb.BlackBoxSecond second03 = 8;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond03OrBuilder() {
      return second03_;
    }

    public static final int SECOND04_FIELD_NUMBER = 9;
    private maxpb.MaxpbTelemetry.BlackBoxSecond second04_;
    /**
     * <code>optional .maxpb.BlackBoxSecond second04 = 9;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasSecond04() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional .maxpb.BlackBoxSecond second04 = 9;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.BlackBoxSecond getSecond04() {
      return second04_;
    }
    /**
     * <code>optional .maxpb.BlackBoxSecond second04 = 9;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond04OrBuilder() {
      return second04_;
    }

    public static final int SECOND05_FIELD_NUMBER = 10;
    private maxpb.MaxpbTelemetry.BlackBoxSecond second05_;
    /**
     * <code>optional .maxpb.BlackBoxSecond second05 = 10;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasSecond05() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional .maxpb.BlackBoxSecond second05 = 10;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.BlackBoxSecond getSecond05() {
      return second05_;
    }
    /**
     * <code>optional .maxpb.BlackBoxSecond second05 = 10;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond05OrBuilder() {
      return second05_;
    }

    public static final int SECOND06_FIELD_NUMBER = 11;
    private maxpb.MaxpbTelemetry.BlackBoxSecond second06_;
    /**
     * <code>optional .maxpb.BlackBoxSecond second06 = 11;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasSecond06() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional .maxpb.BlackBoxSecond second06 = 11;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.BlackBoxSecond getSecond06() {
      return second06_;
    }
    /**
     * <code>optional .maxpb.BlackBoxSecond second06 = 11;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond06OrBuilder() {
      return second06_;
    }

    public static final int SECOND07_FIELD_NUMBER = 12;
    private maxpb.MaxpbTelemetry.BlackBoxSecond second07_;
    /**
     * <code>optional .maxpb.BlackBoxSecond second07 = 12;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasSecond07() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional .maxpb.BlackBoxSecond second07 = 12;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.BlackBoxSecond getSecond07() {
      return second07_;
    }
    /**
     * <code>optional .maxpb.BlackBoxSecond second07 = 12;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond07OrBuilder() {
      return second07_;
    }

    public static final int SECOND08_FIELD_NUMBER = 13;
    private maxpb.MaxpbTelemetry.BlackBoxSecond second08_;
    /**
     * <code>optional .maxpb.BlackBoxSecond second08 = 13;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasSecond08() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>optional .maxpb.BlackBoxSecond second08 = 13;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.BlackBoxSecond getSecond08() {
      return second08_;
    }
    /**
     * <code>optional .maxpb.BlackBoxSecond second08 = 13;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond08OrBuilder() {
      return second08_;
    }

    public static final int SECOND09_FIELD_NUMBER = 14;
    private maxpb.MaxpbTelemetry.BlackBoxSecond second09_;
    /**
     * <code>optional .maxpb.BlackBoxSecond second09 = 14;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasSecond09() {
      return ((bitField0_ & 0x00002000) == 0x00002000);
    }
    /**
     * <code>optional .maxpb.BlackBoxSecond second09 = 14;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.BlackBoxSecond getSecond09() {
      return second09_;
    }
    /**
     * <code>optional .maxpb.BlackBoxSecond second09 = 14;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond09OrBuilder() {
      return second09_;
    }

    public static final int SECOND10_FIELD_NUMBER = 15;
    private maxpb.MaxpbTelemetry.BlackBoxSecond second10_;
    /**
     * <code>optional .maxpb.BlackBoxSecond second10 = 15;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasSecond10() {
      return ((bitField0_ & 0x00004000) == 0x00004000);
    }
    /**
     * <code>optional .maxpb.BlackBoxSecond second10 = 15;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.BlackBoxSecond getSecond10() {
      return second10_;
    }
    /**
     * <code>optional .maxpb.BlackBoxSecond second10 = 15;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond10OrBuilder() {
      return second10_;
    }

    public static final int SECOND11_FIELD_NUMBER = 16;
    private maxpb.MaxpbTelemetry.BlackBoxSecond second11_;
    /**
     * <code>optional .maxpb.BlackBoxSecond second11 = 16;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasSecond11() {
      return ((bitField0_ & 0x00008000) == 0x00008000);
    }
    /**
     * <code>optional .maxpb.BlackBoxSecond second11 = 16;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.BlackBoxSecond getSecond11() {
      return second11_;
    }
    /**
     * <code>optional .maxpb.BlackBoxSecond second11 = 16;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond11OrBuilder() {
      return second11_;
    }

    public static final int SECOND12_FIELD_NUMBER = 17;
    private maxpb.MaxpbTelemetry.BlackBoxSecond second12_;
    /**
     * <code>optional .maxpb.BlackBoxSecond second12 = 17;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasSecond12() {
      return ((bitField0_ & 0x00010000) == 0x00010000);
    }
    /**
     * <code>optional .maxpb.BlackBoxSecond second12 = 17;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.BlackBoxSecond getSecond12() {
      return second12_;
    }
    /**
     * <code>optional .maxpb.BlackBoxSecond second12 = 17;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond12OrBuilder() {
      return second12_;
    }

    public static final int SECOND13_FIELD_NUMBER = 18;
    private maxpb.MaxpbTelemetry.BlackBoxSecond second13_;
    /**
     * <code>optional .maxpb.BlackBoxSecond second13 = 18;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasSecond13() {
      return ((bitField0_ & 0x00020000) == 0x00020000);
    }
    /**
     * <code>optional .maxpb.BlackBoxSecond second13 = 18;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.BlackBoxSecond getSecond13() {
      return second13_;
    }
    /**
     * <code>optional .maxpb.BlackBoxSecond second13 = 18;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond13OrBuilder() {
      return second13_;
    }

    public static final int SECOND14_FIELD_NUMBER = 19;
    private maxpb.MaxpbTelemetry.BlackBoxSecond second14_;
    /**
     * <code>optional .maxpb.BlackBoxSecond second14 = 19;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasSecond14() {
      return ((bitField0_ & 0x00040000) == 0x00040000);
    }
    /**
     * <code>optional .maxpb.BlackBoxSecond second14 = 19;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.BlackBoxSecond getSecond14() {
      return second14_;
    }
    /**
     * <code>optional .maxpb.BlackBoxSecond second14 = 19;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond14OrBuilder() {
      return second14_;
    }

    public static final int SECOND15_FIELD_NUMBER = 20;
    private maxpb.MaxpbTelemetry.BlackBoxSecond second15_;
    /**
     * <code>optional .maxpb.BlackBoxSecond second15 = 20;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasSecond15() {
      return ((bitField0_ & 0x00080000) == 0x00080000);
    }
    /**
     * <code>optional .maxpb.BlackBoxSecond second15 = 20;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.BlackBoxSecond getSecond15() {
      return second15_;
    }
    /**
     * <code>optional .maxpb.BlackBoxSecond second15 = 20;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond15OrBuilder() {
      return second15_;
    }

    public static final int SECOND16_FIELD_NUMBER = 21;
    private maxpb.MaxpbTelemetry.BlackBoxSecond second16_;
    /**
     * <code>optional .maxpb.BlackBoxSecond second16 = 21;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasSecond16() {
      return ((bitField0_ & 0x00100000) == 0x00100000);
    }
    /**
     * <code>optional .maxpb.BlackBoxSecond second16 = 21;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.BlackBoxSecond getSecond16() {
      return second16_;
    }
    /**
     * <code>optional .maxpb.BlackBoxSecond second16 = 21;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond16OrBuilder() {
      return second16_;
    }

    public static final int SECOND17_FIELD_NUMBER = 22;
    private maxpb.MaxpbTelemetry.BlackBoxSecond second17_;
    /**
     * <code>optional .maxpb.BlackBoxSecond second17 = 22;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasSecond17() {
      return ((bitField0_ & 0x00200000) == 0x00200000);
    }
    /**
     * <code>optional .maxpb.BlackBoxSecond second17 = 22;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.BlackBoxSecond getSecond17() {
      return second17_;
    }
    /**
     * <code>optional .maxpb.BlackBoxSecond second17 = 22;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond17OrBuilder() {
      return second17_;
    }

    public static final int SECOND18_FIELD_NUMBER = 23;
    private maxpb.MaxpbTelemetry.BlackBoxSecond second18_;
    /**
     * <code>optional .maxpb.BlackBoxSecond second18 = 23;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasSecond18() {
      return ((bitField0_ & 0x00400000) == 0x00400000);
    }
    /**
     * <code>optional .maxpb.BlackBoxSecond second18 = 23;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.BlackBoxSecond getSecond18() {
      return second18_;
    }
    /**
     * <code>optional .maxpb.BlackBoxSecond second18 = 23;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond18OrBuilder() {
      return second18_;
    }

    public static final int SECOND19_FIELD_NUMBER = 24;
    private maxpb.MaxpbTelemetry.BlackBoxSecond second19_;
    /**
     * <code>optional .maxpb.BlackBoxSecond second19 = 24;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasSecond19() {
      return ((bitField0_ & 0x00800000) == 0x00800000);
    }
    /**
     * <code>optional .maxpb.BlackBoxSecond second19 = 24;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.BlackBoxSecond getSecond19() {
      return second19_;
    }
    /**
     * <code>optional .maxpb.BlackBoxSecond second19 = 24;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond19OrBuilder() {
      return second19_;
    }

    public static final int SECOND20_FIELD_NUMBER = 25;
    private maxpb.MaxpbTelemetry.BlackBoxSecond second20_;
    /**
     * <code>optional .maxpb.BlackBoxSecond second20 = 25;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasSecond20() {
      return ((bitField0_ & 0x01000000) == 0x01000000);
    }
    /**
     * <code>optional .maxpb.BlackBoxSecond second20 = 25;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.BlackBoxSecond getSecond20() {
      return second20_;
    }
    /**
     * <code>optional .maxpb.BlackBoxSecond second20 = 25;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond20OrBuilder() {
      return second20_;
    }

    public static final int SECOND21_FIELD_NUMBER = 26;
    private maxpb.MaxpbTelemetry.BlackBoxSecond second21_;
    /**
     * <code>optional .maxpb.BlackBoxSecond second21 = 26;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasSecond21() {
      return ((bitField0_ & 0x02000000) == 0x02000000);
    }
    /**
     * <code>optional .maxpb.BlackBoxSecond second21 = 26;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.BlackBoxSecond getSecond21() {
      return second21_;
    }
    /**
     * <code>optional .maxpb.BlackBoxSecond second21 = 26;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond21OrBuilder() {
      return second21_;
    }

    public static final int SECOND22_FIELD_NUMBER = 27;
    private maxpb.MaxpbTelemetry.BlackBoxSecond second22_;
    /**
     * <code>optional .maxpb.BlackBoxSecond second22 = 27;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasSecond22() {
      return ((bitField0_ & 0x04000000) == 0x04000000);
    }
    /**
     * <code>optional .maxpb.BlackBoxSecond second22 = 27;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.BlackBoxSecond getSecond22() {
      return second22_;
    }
    /**
     * <code>optional .maxpb.BlackBoxSecond second22 = 27;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond22OrBuilder() {
      return second22_;
    }

    public static final int SECOND23_FIELD_NUMBER = 28;
    private maxpb.MaxpbTelemetry.BlackBoxSecond second23_;
    /**
     * <code>optional .maxpb.BlackBoxSecond second23 = 28;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasSecond23() {
      return ((bitField0_ & 0x08000000) == 0x08000000);
    }
    /**
     * <code>optional .maxpb.BlackBoxSecond second23 = 28;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.BlackBoxSecond getSecond23() {
      return second23_;
    }
    /**
     * <code>optional .maxpb.BlackBoxSecond second23 = 28;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond23OrBuilder() {
      return second23_;
    }

    public static final int SECOND24_FIELD_NUMBER = 29;
    private maxpb.MaxpbTelemetry.BlackBoxSecond second24_;
    /**
     * <code>optional .maxpb.BlackBoxSecond second24 = 29;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasSecond24() {
      return ((bitField0_ & 0x10000000) == 0x10000000);
    }
    /**
     * <code>optional .maxpb.BlackBoxSecond second24 = 29;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.BlackBoxSecond getSecond24() {
      return second24_;
    }
    /**
     * <code>optional .maxpb.BlackBoxSecond second24 = 29;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond24OrBuilder() {
      return second24_;
    }

    public static final int SECOND25_FIELD_NUMBER = 30;
    private maxpb.MaxpbTelemetry.BlackBoxSecond second25_;
    /**
     * <code>optional .maxpb.BlackBoxSecond second25 = 30;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasSecond25() {
      return ((bitField0_ & 0x20000000) == 0x20000000);
    }
    /**
     * <code>optional .maxpb.BlackBoxSecond second25 = 30;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.BlackBoxSecond getSecond25() {
      return second25_;
    }
    /**
     * <code>optional .maxpb.BlackBoxSecond second25 = 30;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond25OrBuilder() {
      return second25_;
    }

    public static final int SECOND26_FIELD_NUMBER = 31;
    private maxpb.MaxpbTelemetry.BlackBoxSecond second26_;
    /**
     * <code>optional .maxpb.BlackBoxSecond second26 = 31;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasSecond26() {
      return ((bitField0_ & 0x40000000) == 0x40000000);
    }
    /**
     * <code>optional .maxpb.BlackBoxSecond second26 = 31;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.BlackBoxSecond getSecond26() {
      return second26_;
    }
    /**
     * <code>optional .maxpb.BlackBoxSecond second26 = 31;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond26OrBuilder() {
      return second26_;
    }

    public static final int SECOND27_FIELD_NUMBER = 32;
    private maxpb.MaxpbTelemetry.BlackBoxSecond second27_;
    /**
     * <code>optional .maxpb.BlackBoxSecond second27 = 32;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasSecond27() {
      return ((bitField0_ & 0x80000000) == 0x80000000);
    }
    /**
     * <code>optional .maxpb.BlackBoxSecond second27 = 32;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.BlackBoxSecond getSecond27() {
      return second27_;
    }
    /**
     * <code>optional .maxpb.BlackBoxSecond second27 = 32;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond27OrBuilder() {
      return second27_;
    }

    public static final int SECOND28_FIELD_NUMBER = 33;
    private maxpb.MaxpbTelemetry.BlackBoxSecond second28_;
    /**
     * <code>optional .maxpb.BlackBoxSecond second28 = 33;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasSecond28() {
      return ((bitField1_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .maxpb.BlackBoxSecond second28 = 33;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.BlackBoxSecond getSecond28() {
      return second28_;
    }
    /**
     * <code>optional .maxpb.BlackBoxSecond second28 = 33;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond28OrBuilder() {
      return second28_;
    }

    public static final int SECOND29_FIELD_NUMBER = 34;
    private maxpb.MaxpbTelemetry.BlackBoxSecond second29_;
    /**
     * <code>optional .maxpb.BlackBoxSecond second29 = 34;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasSecond29() {
      return ((bitField1_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional .maxpb.BlackBoxSecond second29 = 34;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.BlackBoxSecond getSecond29() {
      return second29_;
    }
    /**
     * <code>optional .maxpb.BlackBoxSecond second29 = 34;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond29OrBuilder() {
      return second29_;
    }

    public static final int SECOND30_FIELD_NUMBER = 35;
    private maxpb.MaxpbTelemetry.BlackBoxSecond second30_;
    /**
     * <code>optional .maxpb.BlackBoxSecond second30 = 35;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasSecond30() {
      return ((bitField1_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional .maxpb.BlackBoxSecond second30 = 35;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.BlackBoxSecond getSecond30() {
      return second30_;
    }
    /**
     * <code>optional .maxpb.BlackBoxSecond second30 = 35;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond30OrBuilder() {
      return second30_;
    }

    public static final int SECOND31_FIELD_NUMBER = 36;
    private maxpb.MaxpbTelemetry.BlackBoxSecond second31_;
    /**
     * <code>optional .maxpb.BlackBoxSecond second31 = 36;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasSecond31() {
      return ((bitField1_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional .maxpb.BlackBoxSecond second31 = 36;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.BlackBoxSecond getSecond31() {
      return second31_;
    }
    /**
     * <code>optional .maxpb.BlackBoxSecond second31 = 36;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond31OrBuilder() {
      return second31_;
    }

    public static final int SECOND32_FIELD_NUMBER = 37;
    private maxpb.MaxpbTelemetry.BlackBoxSecond second32_;
    /**
     * <code>optional .maxpb.BlackBoxSecond second32 = 37;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasSecond32() {
      return ((bitField1_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional .maxpb.BlackBoxSecond second32 = 37;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.BlackBoxSecond getSecond32() {
      return second32_;
    }
    /**
     * <code>optional .maxpb.BlackBoxSecond second32 = 37;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond32OrBuilder() {
      return second32_;
    }

    public static final int SECOND33_FIELD_NUMBER = 38;
    private maxpb.MaxpbTelemetry.BlackBoxSecond second33_;
    /**
     * <code>optional .maxpb.BlackBoxSecond second33 = 38;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasSecond33() {
      return ((bitField1_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional .maxpb.BlackBoxSecond second33 = 38;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.BlackBoxSecond getSecond33() {
      return second33_;
    }
    /**
     * <code>optional .maxpb.BlackBoxSecond second33 = 38;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond33OrBuilder() {
      return second33_;
    }

    public static final int SECOND34_FIELD_NUMBER = 39;
    private maxpb.MaxpbTelemetry.BlackBoxSecond second34_;
    /**
     * <code>optional .maxpb.BlackBoxSecond second34 = 39;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasSecond34() {
      return ((bitField1_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional .maxpb.BlackBoxSecond second34 = 39;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.BlackBoxSecond getSecond34() {
      return second34_;
    }
    /**
     * <code>optional .maxpb.BlackBoxSecond second34 = 39;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond34OrBuilder() {
      return second34_;
    }

    public static final int SECOND35_FIELD_NUMBER = 40;
    private maxpb.MaxpbTelemetry.BlackBoxSecond second35_;
    /**
     * <code>optional .maxpb.BlackBoxSecond second35 = 40;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasSecond35() {
      return ((bitField1_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional .maxpb.BlackBoxSecond second35 = 40;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.BlackBoxSecond getSecond35() {
      return second35_;
    }
    /**
     * <code>optional .maxpb.BlackBoxSecond second35 = 40;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond35OrBuilder() {
      return second35_;
    }

    public static final int SECOND36_FIELD_NUMBER = 41;
    private maxpb.MaxpbTelemetry.BlackBoxSecond second36_;
    /**
     * <code>optional .maxpb.BlackBoxSecond second36 = 41;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasSecond36() {
      return ((bitField1_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional .maxpb.BlackBoxSecond second36 = 41;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.BlackBoxSecond getSecond36() {
      return second36_;
    }
    /**
     * <code>optional .maxpb.BlackBoxSecond second36 = 41;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond36OrBuilder() {
      return second36_;
    }

    public static final int SECOND37_FIELD_NUMBER = 42;
    private maxpb.MaxpbTelemetry.BlackBoxSecond second37_;
    /**
     * <code>optional .maxpb.BlackBoxSecond second37 = 42;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasSecond37() {
      return ((bitField1_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional .maxpb.BlackBoxSecond second37 = 42;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.BlackBoxSecond getSecond37() {
      return second37_;
    }
    /**
     * <code>optional .maxpb.BlackBoxSecond second37 = 42;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond37OrBuilder() {
      return second37_;
    }

    public static final int SECOND38_FIELD_NUMBER = 43;
    private maxpb.MaxpbTelemetry.BlackBoxSecond second38_;
    /**
     * <code>optional .maxpb.BlackBoxSecond second38 = 43;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasSecond38() {
      return ((bitField1_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional .maxpb.BlackBoxSecond second38 = 43;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.BlackBoxSecond getSecond38() {
      return second38_;
    }
    /**
     * <code>optional .maxpb.BlackBoxSecond second38 = 43;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond38OrBuilder() {
      return second38_;
    }

    public static final int SECOND39_FIELD_NUMBER = 44;
    private maxpb.MaxpbTelemetry.BlackBoxSecond second39_;
    /**
     * <code>optional .maxpb.BlackBoxSecond second39 = 44;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasSecond39() {
      return ((bitField1_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional .maxpb.BlackBoxSecond second39 = 44;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.BlackBoxSecond getSecond39() {
      return second39_;
    }
    /**
     * <code>optional .maxpb.BlackBoxSecond second39 = 44;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond39OrBuilder() {
      return second39_;
    }

    public static final int SECOND40_FIELD_NUMBER = 45;
    private maxpb.MaxpbTelemetry.BlackBoxSecond second40_;
    /**
     * <code>optional .maxpb.BlackBoxSecond second40 = 45;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasSecond40() {
      return ((bitField1_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>optional .maxpb.BlackBoxSecond second40 = 45;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.BlackBoxSecond getSecond40() {
      return second40_;
    }
    /**
     * <code>optional .maxpb.BlackBoxSecond second40 = 45;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond40OrBuilder() {
      return second40_;
    }

    public static final int SECOND41_FIELD_NUMBER = 46;
    private maxpb.MaxpbTelemetry.BlackBoxSecond second41_;
    /**
     * <code>optional .maxpb.BlackBoxSecond second41 = 46;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasSecond41() {
      return ((bitField1_ & 0x00002000) == 0x00002000);
    }
    /**
     * <code>optional .maxpb.BlackBoxSecond second41 = 46;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.BlackBoxSecond getSecond41() {
      return second41_;
    }
    /**
     * <code>optional .maxpb.BlackBoxSecond second41 = 46;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond41OrBuilder() {
      return second41_;
    }

    public static final int SECOND42_FIELD_NUMBER = 47;
    private maxpb.MaxpbTelemetry.BlackBoxSecond second42_;
    /**
     * <code>optional .maxpb.BlackBoxSecond second42 = 47;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasSecond42() {
      return ((bitField1_ & 0x00004000) == 0x00004000);
    }
    /**
     * <code>optional .maxpb.BlackBoxSecond second42 = 47;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.BlackBoxSecond getSecond42() {
      return second42_;
    }
    /**
     * <code>optional .maxpb.BlackBoxSecond second42 = 47;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond42OrBuilder() {
      return second42_;
    }

    public static final int SECOND43_FIELD_NUMBER = 48;
    private maxpb.MaxpbTelemetry.BlackBoxSecond second43_;
    /**
     * <code>optional .maxpb.BlackBoxSecond second43 = 48;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasSecond43() {
      return ((bitField1_ & 0x00008000) == 0x00008000);
    }
    /**
     * <code>optional .maxpb.BlackBoxSecond second43 = 48;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.BlackBoxSecond getSecond43() {
      return second43_;
    }
    /**
     * <code>optional .maxpb.BlackBoxSecond second43 = 48;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond43OrBuilder() {
      return second43_;
    }

    public static final int SECOND44_FIELD_NUMBER = 49;
    private maxpb.MaxpbTelemetry.BlackBoxSecond second44_;
    /**
     * <code>optional .maxpb.BlackBoxSecond second44 = 49;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasSecond44() {
      return ((bitField1_ & 0x00010000) == 0x00010000);
    }
    /**
     * <code>optional .maxpb.BlackBoxSecond second44 = 49;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.BlackBoxSecond getSecond44() {
      return second44_;
    }
    /**
     * <code>optional .maxpb.BlackBoxSecond second44 = 49;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond44OrBuilder() {
      return second44_;
    }

    public static final int SECOND45_FIELD_NUMBER = 50;
    private maxpb.MaxpbTelemetry.BlackBoxSecond second45_;
    /**
     * <code>optional .maxpb.BlackBoxSecond second45 = 50;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasSecond45() {
      return ((bitField1_ & 0x00020000) == 0x00020000);
    }
    /**
     * <code>optional .maxpb.BlackBoxSecond second45 = 50;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.BlackBoxSecond getSecond45() {
      return second45_;
    }
    /**
     * <code>optional .maxpb.BlackBoxSecond second45 = 50;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond45OrBuilder() {
      return second45_;
    }

    public static final int SECOND46_FIELD_NUMBER = 51;
    private maxpb.MaxpbTelemetry.BlackBoxSecond second46_;
    /**
     * <code>optional .maxpb.BlackBoxSecond second46 = 51;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasSecond46() {
      return ((bitField1_ & 0x00040000) == 0x00040000);
    }
    /**
     * <code>optional .maxpb.BlackBoxSecond second46 = 51;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.BlackBoxSecond getSecond46() {
      return second46_;
    }
    /**
     * <code>optional .maxpb.BlackBoxSecond second46 = 51;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond46OrBuilder() {
      return second46_;
    }

    public static final int SECOND47_FIELD_NUMBER = 52;
    private maxpb.MaxpbTelemetry.BlackBoxSecond second47_;
    /**
     * <code>optional .maxpb.BlackBoxSecond second47 = 52;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasSecond47() {
      return ((bitField1_ & 0x00080000) == 0x00080000);
    }
    /**
     * <code>optional .maxpb.BlackBoxSecond second47 = 52;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.BlackBoxSecond getSecond47() {
      return second47_;
    }
    /**
     * <code>optional .maxpb.BlackBoxSecond second47 = 52;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond47OrBuilder() {
      return second47_;
    }

    public static final int SECOND48_FIELD_NUMBER = 53;
    private maxpb.MaxpbTelemetry.BlackBoxSecond second48_;
    /**
     * <code>optional .maxpb.BlackBoxSecond second48 = 53;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasSecond48() {
      return ((bitField1_ & 0x00100000) == 0x00100000);
    }
    /**
     * <code>optional .maxpb.BlackBoxSecond second48 = 53;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.BlackBoxSecond getSecond48() {
      return second48_;
    }
    /**
     * <code>optional .maxpb.BlackBoxSecond second48 = 53;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond48OrBuilder() {
      return second48_;
    }

    public static final int SECOND49_FIELD_NUMBER = 54;
    private maxpb.MaxpbTelemetry.BlackBoxSecond second49_;
    /**
     * <code>optional .maxpb.BlackBoxSecond second49 = 54;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasSecond49() {
      return ((bitField1_ & 0x00200000) == 0x00200000);
    }
    /**
     * <code>optional .maxpb.BlackBoxSecond second49 = 54;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.BlackBoxSecond getSecond49() {
      return second49_;
    }
    /**
     * <code>optional .maxpb.BlackBoxSecond second49 = 54;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond49OrBuilder() {
      return second49_;
    }

    public static final int SECOND50_FIELD_NUMBER = 55;
    private maxpb.MaxpbTelemetry.BlackBoxSecond second50_;
    /**
     * <code>optional .maxpb.BlackBoxSecond second50 = 55;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasSecond50() {
      return ((bitField1_ & 0x00400000) == 0x00400000);
    }
    /**
     * <code>optional .maxpb.BlackBoxSecond second50 = 55;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.BlackBoxSecond getSecond50() {
      return second50_;
    }
    /**
     * <code>optional .maxpb.BlackBoxSecond second50 = 55;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond50OrBuilder() {
      return second50_;
    }

    public static final int SECOND51_FIELD_NUMBER = 56;
    private maxpb.MaxpbTelemetry.BlackBoxSecond second51_;
    /**
     * <code>optional .maxpb.BlackBoxSecond second51 = 56;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasSecond51() {
      return ((bitField1_ & 0x00800000) == 0x00800000);
    }
    /**
     * <code>optional .maxpb.BlackBoxSecond second51 = 56;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.BlackBoxSecond getSecond51() {
      return second51_;
    }
    /**
     * <code>optional .maxpb.BlackBoxSecond second51 = 56;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond51OrBuilder() {
      return second51_;
    }

    public static final int SECOND52_FIELD_NUMBER = 57;
    private maxpb.MaxpbTelemetry.BlackBoxSecond second52_;
    /**
     * <code>optional .maxpb.BlackBoxSecond second52 = 57;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasSecond52() {
      return ((bitField1_ & 0x01000000) == 0x01000000);
    }
    /**
     * <code>optional .maxpb.BlackBoxSecond second52 = 57;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.BlackBoxSecond getSecond52() {
      return second52_;
    }
    /**
     * <code>optional .maxpb.BlackBoxSecond second52 = 57;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond52OrBuilder() {
      return second52_;
    }

    public static final int SECOND53_FIELD_NUMBER = 58;
    private maxpb.MaxpbTelemetry.BlackBoxSecond second53_;
    /**
     * <code>optional .maxpb.BlackBoxSecond second53 = 58;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasSecond53() {
      return ((bitField1_ & 0x02000000) == 0x02000000);
    }
    /**
     * <code>optional .maxpb.BlackBoxSecond second53 = 58;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.BlackBoxSecond getSecond53() {
      return second53_;
    }
    /**
     * <code>optional .maxpb.BlackBoxSecond second53 = 58;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond53OrBuilder() {
      return second53_;
    }

    public static final int SECOND54_FIELD_NUMBER = 59;
    private maxpb.MaxpbTelemetry.BlackBoxSecond second54_;
    /**
     * <code>optional .maxpb.BlackBoxSecond second54 = 59;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasSecond54() {
      return ((bitField1_ & 0x04000000) == 0x04000000);
    }
    /**
     * <code>optional .maxpb.BlackBoxSecond second54 = 59;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.BlackBoxSecond getSecond54() {
      return second54_;
    }
    /**
     * <code>optional .maxpb.BlackBoxSecond second54 = 59;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond54OrBuilder() {
      return second54_;
    }

    public static final int SECOND55_FIELD_NUMBER = 60;
    private maxpb.MaxpbTelemetry.BlackBoxSecond second55_;
    /**
     * <code>optional .maxpb.BlackBoxSecond second55 = 60;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasSecond55() {
      return ((bitField1_ & 0x08000000) == 0x08000000);
    }
    /**
     * <code>optional .maxpb.BlackBoxSecond second55 = 60;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.BlackBoxSecond getSecond55() {
      return second55_;
    }
    /**
     * <code>optional .maxpb.BlackBoxSecond second55 = 60;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond55OrBuilder() {
      return second55_;
    }

    public static final int SECOND56_FIELD_NUMBER = 61;
    private maxpb.MaxpbTelemetry.BlackBoxSecond second56_;
    /**
     * <code>optional .maxpb.BlackBoxSecond second56 = 61;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasSecond56() {
      return ((bitField1_ & 0x10000000) == 0x10000000);
    }
    /**
     * <code>optional .maxpb.BlackBoxSecond second56 = 61;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.BlackBoxSecond getSecond56() {
      return second56_;
    }
    /**
     * <code>optional .maxpb.BlackBoxSecond second56 = 61;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond56OrBuilder() {
      return second56_;
    }

    public static final int SECOND57_FIELD_NUMBER = 62;
    private maxpb.MaxpbTelemetry.BlackBoxSecond second57_;
    /**
     * <code>optional .maxpb.BlackBoxSecond second57 = 62;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasSecond57() {
      return ((bitField1_ & 0x20000000) == 0x20000000);
    }
    /**
     * <code>optional .maxpb.BlackBoxSecond second57 = 62;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.BlackBoxSecond getSecond57() {
      return second57_;
    }
    /**
     * <code>optional .maxpb.BlackBoxSecond second57 = 62;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond57OrBuilder() {
      return second57_;
    }

    public static final int SECOND58_FIELD_NUMBER = 63;
    private maxpb.MaxpbTelemetry.BlackBoxSecond second58_;
    /**
     * <code>optional .maxpb.BlackBoxSecond second58 = 63;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasSecond58() {
      return ((bitField1_ & 0x40000000) == 0x40000000);
    }
    /**
     * <code>optional .maxpb.BlackBoxSecond second58 = 63;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.BlackBoxSecond getSecond58() {
      return second58_;
    }
    /**
     * <code>optional .maxpb.BlackBoxSecond second58 = 63;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond58OrBuilder() {
      return second58_;
    }

    public static final int SECOND59_FIELD_NUMBER = 64;
    private maxpb.MaxpbTelemetry.BlackBoxSecond second59_;
    /**
     * <code>optional .maxpb.BlackBoxSecond second59 = 64;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasSecond59() {
      return ((bitField1_ & 0x80000000) == 0x80000000);
    }
    /**
     * <code>optional .maxpb.BlackBoxSecond second59 = 64;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.BlackBoxSecond getSecond59() {
      return second59_;
    }
    /**
     * <code>optional .maxpb.BlackBoxSecond second59 = 64;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond59OrBuilder() {
      return second59_;
    }

    private void initFields() {
      dateTime_ = 0;
      latitude_ = 0;
      longitude_ = 0;
      odometer_ = 0L;
      second00_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
      second01_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
      second02_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
      second03_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
      second04_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
      second05_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
      second06_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
      second07_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
      second08_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
      second09_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
      second10_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
      second11_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
      second12_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
      second13_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
      second14_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
      second15_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
      second16_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
      second17_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
      second18_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
      second19_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
      second20_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
      second21_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
      second22_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
      second23_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
      second24_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
      second25_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
      second26_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
      second27_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
      second28_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
      second29_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
      second30_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
      second31_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
      second32_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
      second33_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
      second34_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
      second35_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
      second36_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
      second37_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
      second38_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
      second39_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
      second40_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
      second41_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
      second42_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
      second43_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
      second44_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
      second45_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
      second46_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
      second47_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
      second48_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
      second49_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
      second50_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
      second51_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
      second52_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
      second53_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
      second54_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
      second55_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
      second56_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
      second57_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
      second58_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
      second59_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasDateTime()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasLatitude()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasLongitude()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasOdometer()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, dateTime_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeSFixed32(2, latitude_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeSFixed32(3, longitude_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeUInt64(4, odometer_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeMessage(5, second00_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeMessage(6, second01_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeMessage(7, second02_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeMessage(8, second03_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeMessage(9, second04_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeMessage(10, second05_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeMessage(11, second06_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeMessage(12, second07_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeMessage(13, second08_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        output.writeMessage(14, second09_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        output.writeMessage(15, second10_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        output.writeMessage(16, second11_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        output.writeMessage(17, second12_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        output.writeMessage(18, second13_);
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        output.writeMessage(19, second14_);
      }
      if (((bitField0_ & 0x00080000) == 0x00080000)) {
        output.writeMessage(20, second15_);
      }
      if (((bitField0_ & 0x00100000) == 0x00100000)) {
        output.writeMessage(21, second16_);
      }
      if (((bitField0_ & 0x00200000) == 0x00200000)) {
        output.writeMessage(22, second17_);
      }
      if (((bitField0_ & 0x00400000) == 0x00400000)) {
        output.writeMessage(23, second18_);
      }
      if (((bitField0_ & 0x00800000) == 0x00800000)) {
        output.writeMessage(24, second19_);
      }
      if (((bitField0_ & 0x01000000) == 0x01000000)) {
        output.writeMessage(25, second20_);
      }
      if (((bitField0_ & 0x02000000) == 0x02000000)) {
        output.writeMessage(26, second21_);
      }
      if (((bitField0_ & 0x04000000) == 0x04000000)) {
        output.writeMessage(27, second22_);
      }
      if (((bitField0_ & 0x08000000) == 0x08000000)) {
        output.writeMessage(28, second23_);
      }
      if (((bitField0_ & 0x10000000) == 0x10000000)) {
        output.writeMessage(29, second24_);
      }
      if (((bitField0_ & 0x20000000) == 0x20000000)) {
        output.writeMessage(30, second25_);
      }
      if (((bitField0_ & 0x40000000) == 0x40000000)) {
        output.writeMessage(31, second26_);
      }
      if (((bitField0_ & 0x80000000) == 0x80000000)) {
        output.writeMessage(32, second27_);
      }
      if (((bitField1_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(33, second28_);
      }
      if (((bitField1_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(34, second29_);
      }
      if (((bitField1_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(35, second30_);
      }
      if (((bitField1_ & 0x00000008) == 0x00000008)) {
        output.writeMessage(36, second31_);
      }
      if (((bitField1_ & 0x00000010) == 0x00000010)) {
        output.writeMessage(37, second32_);
      }
      if (((bitField1_ & 0x00000020) == 0x00000020)) {
        output.writeMessage(38, second33_);
      }
      if (((bitField1_ & 0x00000040) == 0x00000040)) {
        output.writeMessage(39, second34_);
      }
      if (((bitField1_ & 0x00000080) == 0x00000080)) {
        output.writeMessage(40, second35_);
      }
      if (((bitField1_ & 0x00000100) == 0x00000100)) {
        output.writeMessage(41, second36_);
      }
      if (((bitField1_ & 0x00000200) == 0x00000200)) {
        output.writeMessage(42, second37_);
      }
      if (((bitField1_ & 0x00000400) == 0x00000400)) {
        output.writeMessage(43, second38_);
      }
      if (((bitField1_ & 0x00000800) == 0x00000800)) {
        output.writeMessage(44, second39_);
      }
      if (((bitField1_ & 0x00001000) == 0x00001000)) {
        output.writeMessage(45, second40_);
      }
      if (((bitField1_ & 0x00002000) == 0x00002000)) {
        output.writeMessage(46, second41_);
      }
      if (((bitField1_ & 0x00004000) == 0x00004000)) {
        output.writeMessage(47, second42_);
      }
      if (((bitField1_ & 0x00008000) == 0x00008000)) {
        output.writeMessage(48, second43_);
      }
      if (((bitField1_ & 0x00010000) == 0x00010000)) {
        output.writeMessage(49, second44_);
      }
      if (((bitField1_ & 0x00020000) == 0x00020000)) {
        output.writeMessage(50, second45_);
      }
      if (((bitField1_ & 0x00040000) == 0x00040000)) {
        output.writeMessage(51, second46_);
      }
      if (((bitField1_ & 0x00080000) == 0x00080000)) {
        output.writeMessage(52, second47_);
      }
      if (((bitField1_ & 0x00100000) == 0x00100000)) {
        output.writeMessage(53, second48_);
      }
      if (((bitField1_ & 0x00200000) == 0x00200000)) {
        output.writeMessage(54, second49_);
      }
      if (((bitField1_ & 0x00400000) == 0x00400000)) {
        output.writeMessage(55, second50_);
      }
      if (((bitField1_ & 0x00800000) == 0x00800000)) {
        output.writeMessage(56, second51_);
      }
      if (((bitField1_ & 0x01000000) == 0x01000000)) {
        output.writeMessage(57, second52_);
      }
      if (((bitField1_ & 0x02000000) == 0x02000000)) {
        output.writeMessage(58, second53_);
      }
      if (((bitField1_ & 0x04000000) == 0x04000000)) {
        output.writeMessage(59, second54_);
      }
      if (((bitField1_ & 0x08000000) == 0x08000000)) {
        output.writeMessage(60, second55_);
      }
      if (((bitField1_ & 0x10000000) == 0x10000000)) {
        output.writeMessage(61, second56_);
      }
      if (((bitField1_ & 0x20000000) == 0x20000000)) {
        output.writeMessage(62, second57_);
      }
      if (((bitField1_ & 0x40000000) == 0x40000000)) {
        output.writeMessage(63, second58_);
      }
      if (((bitField1_ & 0x80000000) == 0x80000000)) {
        output.writeMessage(64, second59_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, dateTime_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSFixed32Size(2, latitude_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSFixed32Size(3, longitude_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(4, odometer_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, second00_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, second01_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, second02_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, second03_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(9, second04_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(10, second05_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(11, second06_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(12, second07_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(13, second08_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(14, second09_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(15, second10_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(16, second11_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(17, second12_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(18, second13_);
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(19, second14_);
      }
      if (((bitField0_ & 0x00080000) == 0x00080000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(20, second15_);
      }
      if (((bitField0_ & 0x00100000) == 0x00100000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(21, second16_);
      }
      if (((bitField0_ & 0x00200000) == 0x00200000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(22, second17_);
      }
      if (((bitField0_ & 0x00400000) == 0x00400000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(23, second18_);
      }
      if (((bitField0_ & 0x00800000) == 0x00800000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(24, second19_);
      }
      if (((bitField0_ & 0x01000000) == 0x01000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(25, second20_);
      }
      if (((bitField0_ & 0x02000000) == 0x02000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(26, second21_);
      }
      if (((bitField0_ & 0x04000000) == 0x04000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(27, second22_);
      }
      if (((bitField0_ & 0x08000000) == 0x08000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(28, second23_);
      }
      if (((bitField0_ & 0x10000000) == 0x10000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(29, second24_);
      }
      if (((bitField0_ & 0x20000000) == 0x20000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(30, second25_);
      }
      if (((bitField0_ & 0x40000000) == 0x40000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(31, second26_);
      }
      if (((bitField0_ & 0x80000000) == 0x80000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(32, second27_);
      }
      if (((bitField1_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(33, second28_);
      }
      if (((bitField1_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(34, second29_);
      }
      if (((bitField1_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(35, second30_);
      }
      if (((bitField1_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(36, second31_);
      }
      if (((bitField1_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(37, second32_);
      }
      if (((bitField1_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(38, second33_);
      }
      if (((bitField1_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(39, second34_);
      }
      if (((bitField1_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(40, second35_);
      }
      if (((bitField1_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(41, second36_);
      }
      if (((bitField1_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(42, second37_);
      }
      if (((bitField1_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(43, second38_);
      }
      if (((bitField1_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(44, second39_);
      }
      if (((bitField1_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(45, second40_);
      }
      if (((bitField1_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(46, second41_);
      }
      if (((bitField1_ & 0x00004000) == 0x00004000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(47, second42_);
      }
      if (((bitField1_ & 0x00008000) == 0x00008000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(48, second43_);
      }
      if (((bitField1_ & 0x00010000) == 0x00010000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(49, second44_);
      }
      if (((bitField1_ & 0x00020000) == 0x00020000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(50, second45_);
      }
      if (((bitField1_ & 0x00040000) == 0x00040000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(51, second46_);
      }
      if (((bitField1_ & 0x00080000) == 0x00080000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(52, second47_);
      }
      if (((bitField1_ & 0x00100000) == 0x00100000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(53, second48_);
      }
      if (((bitField1_ & 0x00200000) == 0x00200000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(54, second49_);
      }
      if (((bitField1_ & 0x00400000) == 0x00400000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(55, second50_);
      }
      if (((bitField1_ & 0x00800000) == 0x00800000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(56, second51_);
      }
      if (((bitField1_ & 0x01000000) == 0x01000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(57, second52_);
      }
      if (((bitField1_ & 0x02000000) == 0x02000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(58, second53_);
      }
      if (((bitField1_ & 0x04000000) == 0x04000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(59, second54_);
      }
      if (((bitField1_ & 0x08000000) == 0x08000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(60, second55_);
      }
      if (((bitField1_ & 0x10000000) == 0x10000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(61, second56_);
      }
      if (((bitField1_ & 0x20000000) == 0x20000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(62, second57_);
      }
      if (((bitField1_ & 0x40000000) == 0x40000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(63, second58_);
      }
      if (((bitField1_ & 0x80000000) == 0x80000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(64, second59_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static maxpb.MaxpbTelemetry.BlackBoxMinute parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static maxpb.MaxpbTelemetry.BlackBoxMinute parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetry.BlackBoxMinute parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static maxpb.MaxpbTelemetry.BlackBoxMinute parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetry.BlackBoxMinute parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static maxpb.MaxpbTelemetry.BlackBoxMinute parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetry.BlackBoxMinute parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static maxpb.MaxpbTelemetry.BlackBoxMinute parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetry.BlackBoxMinute parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static maxpb.MaxpbTelemetry.BlackBoxMinute parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(maxpb.MaxpbTelemetry.BlackBoxMinute prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code maxpb.BlackBoxMinute}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:maxpb.BlackBoxMinute)
        maxpb.MaxpbTelemetry.BlackBoxMinuteOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return maxpb.MaxpbTelemetry.internal_static_maxpb_BlackBoxMinute_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return maxpb.MaxpbTelemetry.internal_static_maxpb_BlackBoxMinute_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                maxpb.MaxpbTelemetry.BlackBoxMinute.class, maxpb.MaxpbTelemetry.BlackBoxMinute.Builder.class);
      }

      // Construct using maxpb.MaxpbTelemetry.BlackBoxMinute.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getSecond00FieldBuilder();
          getSecond01FieldBuilder();
          getSecond02FieldBuilder();
          getSecond03FieldBuilder();
          getSecond04FieldBuilder();
          getSecond05FieldBuilder();
          getSecond06FieldBuilder();
          getSecond07FieldBuilder();
          getSecond08FieldBuilder();
          getSecond09FieldBuilder();
          getSecond10FieldBuilder();
          getSecond11FieldBuilder();
          getSecond12FieldBuilder();
          getSecond13FieldBuilder();
          getSecond14FieldBuilder();
          getSecond15FieldBuilder();
          getSecond16FieldBuilder();
          getSecond17FieldBuilder();
          getSecond18FieldBuilder();
          getSecond19FieldBuilder();
          getSecond20FieldBuilder();
          getSecond21FieldBuilder();
          getSecond22FieldBuilder();
          getSecond23FieldBuilder();
          getSecond24FieldBuilder();
          getSecond25FieldBuilder();
          getSecond26FieldBuilder();
          getSecond27FieldBuilder();
          getSecond28FieldBuilder();
          getSecond29FieldBuilder();
          getSecond30FieldBuilder();
          getSecond31FieldBuilder();
          getSecond32FieldBuilder();
          getSecond33FieldBuilder();
          getSecond34FieldBuilder();
          getSecond35FieldBuilder();
          getSecond36FieldBuilder();
          getSecond37FieldBuilder();
          getSecond38FieldBuilder();
          getSecond39FieldBuilder();
          getSecond40FieldBuilder();
          getSecond41FieldBuilder();
          getSecond42FieldBuilder();
          getSecond43FieldBuilder();
          getSecond44FieldBuilder();
          getSecond45FieldBuilder();
          getSecond46FieldBuilder();
          getSecond47FieldBuilder();
          getSecond48FieldBuilder();
          getSecond49FieldBuilder();
          getSecond50FieldBuilder();
          getSecond51FieldBuilder();
          getSecond52FieldBuilder();
          getSecond53FieldBuilder();
          getSecond54FieldBuilder();
          getSecond55FieldBuilder();
          getSecond56FieldBuilder();
          getSecond57FieldBuilder();
          getSecond58FieldBuilder();
          getSecond59FieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        dateTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        latitude_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        longitude_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        odometer_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000008);
        if (second00Builder_ == null) {
          second00_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
        } else {
          second00Builder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        if (second01Builder_ == null) {
          second01_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
        } else {
          second01Builder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000020);
        if (second02Builder_ == null) {
          second02_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
        } else {
          second02Builder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000040);
        if (second03Builder_ == null) {
          second03_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
        } else {
          second03Builder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000080);
        if (second04Builder_ == null) {
          second04_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
        } else {
          second04Builder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000100);
        if (second05Builder_ == null) {
          second05_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
        } else {
          second05Builder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000200);
        if (second06Builder_ == null) {
          second06_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
        } else {
          second06Builder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000400);
        if (second07Builder_ == null) {
          second07_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
        } else {
          second07Builder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000800);
        if (second08Builder_ == null) {
          second08_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
        } else {
          second08Builder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00001000);
        if (second09Builder_ == null) {
          second09_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
        } else {
          second09Builder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00002000);
        if (second10Builder_ == null) {
          second10_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
        } else {
          second10Builder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00004000);
        if (second11Builder_ == null) {
          second11_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
        } else {
          second11Builder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00008000);
        if (second12Builder_ == null) {
          second12_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
        } else {
          second12Builder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00010000);
        if (second13Builder_ == null) {
          second13_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
        } else {
          second13Builder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00020000);
        if (second14Builder_ == null) {
          second14_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
        } else {
          second14Builder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00040000);
        if (second15Builder_ == null) {
          second15_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
        } else {
          second15Builder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00080000);
        if (second16Builder_ == null) {
          second16_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
        } else {
          second16Builder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00100000);
        if (second17Builder_ == null) {
          second17_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
        } else {
          second17Builder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00200000);
        if (second18Builder_ == null) {
          second18_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
        } else {
          second18Builder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00400000);
        if (second19Builder_ == null) {
          second19_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
        } else {
          second19Builder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00800000);
        if (second20Builder_ == null) {
          second20_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
        } else {
          second20Builder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x01000000);
        if (second21Builder_ == null) {
          second21_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
        } else {
          second21Builder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x02000000);
        if (second22Builder_ == null) {
          second22_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
        } else {
          second22Builder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x04000000);
        if (second23Builder_ == null) {
          second23_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
        } else {
          second23Builder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x08000000);
        if (second24Builder_ == null) {
          second24_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
        } else {
          second24Builder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x10000000);
        if (second25Builder_ == null) {
          second25_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
        } else {
          second25Builder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x20000000);
        if (second26Builder_ == null) {
          second26_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
        } else {
          second26Builder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x40000000);
        if (second27Builder_ == null) {
          second27_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
        } else {
          second27Builder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x80000000);
        if (second28Builder_ == null) {
          second28_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
        } else {
          second28Builder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00000001);
        if (second29Builder_ == null) {
          second29_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
        } else {
          second29Builder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00000002);
        if (second30Builder_ == null) {
          second30_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
        } else {
          second30Builder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00000004);
        if (second31Builder_ == null) {
          second31_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
        } else {
          second31Builder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00000008);
        if (second32Builder_ == null) {
          second32_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
        } else {
          second32Builder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00000010);
        if (second33Builder_ == null) {
          second33_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
        } else {
          second33Builder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00000020);
        if (second34Builder_ == null) {
          second34_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
        } else {
          second34Builder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00000040);
        if (second35Builder_ == null) {
          second35_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
        } else {
          second35Builder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00000080);
        if (second36Builder_ == null) {
          second36_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
        } else {
          second36Builder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00000100);
        if (second37Builder_ == null) {
          second37_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
        } else {
          second37Builder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00000200);
        if (second38Builder_ == null) {
          second38_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
        } else {
          second38Builder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00000400);
        if (second39Builder_ == null) {
          second39_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
        } else {
          second39Builder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00000800);
        if (second40Builder_ == null) {
          second40_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
        } else {
          second40Builder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00001000);
        if (second41Builder_ == null) {
          second41_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
        } else {
          second41Builder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00002000);
        if (second42Builder_ == null) {
          second42_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
        } else {
          second42Builder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00004000);
        if (second43Builder_ == null) {
          second43_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
        } else {
          second43Builder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00008000);
        if (second44Builder_ == null) {
          second44_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
        } else {
          second44Builder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00010000);
        if (second45Builder_ == null) {
          second45_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
        } else {
          second45Builder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00020000);
        if (second46Builder_ == null) {
          second46_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
        } else {
          second46Builder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00040000);
        if (second47Builder_ == null) {
          second47_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
        } else {
          second47Builder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00080000);
        if (second48Builder_ == null) {
          second48_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
        } else {
          second48Builder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00100000);
        if (second49Builder_ == null) {
          second49_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
        } else {
          second49Builder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00200000);
        if (second50Builder_ == null) {
          second50_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
        } else {
          second50Builder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00400000);
        if (second51Builder_ == null) {
          second51_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
        } else {
          second51Builder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00800000);
        if (second52Builder_ == null) {
          second52_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
        } else {
          second52Builder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x01000000);
        if (second53Builder_ == null) {
          second53_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
        } else {
          second53Builder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x02000000);
        if (second54Builder_ == null) {
          second54_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
        } else {
          second54Builder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x04000000);
        if (second55Builder_ == null) {
          second55_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
        } else {
          second55Builder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x08000000);
        if (second56Builder_ == null) {
          second56_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
        } else {
          second56Builder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x10000000);
        if (second57Builder_ == null) {
          second57_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
        } else {
          second57Builder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x20000000);
        if (second58Builder_ == null) {
          second58_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
        } else {
          second58Builder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x40000000);
        if (second59Builder_ == null) {
          second59_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
        } else {
          second59Builder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x80000000);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return maxpb.MaxpbTelemetry.internal_static_maxpb_BlackBoxMinute_descriptor;
      }

      public maxpb.MaxpbTelemetry.BlackBoxMinute getDefaultInstanceForType() {
        return maxpb.MaxpbTelemetry.BlackBoxMinute.getDefaultInstance();
      }

      public maxpb.MaxpbTelemetry.BlackBoxMinute build() {
        maxpb.MaxpbTelemetry.BlackBoxMinute result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public maxpb.MaxpbTelemetry.BlackBoxMinute buildPartial() {
        maxpb.MaxpbTelemetry.BlackBoxMinute result = new maxpb.MaxpbTelemetry.BlackBoxMinute(this);
        int from_bitField0_ = bitField0_;
        int from_bitField1_ = bitField1_;
        int to_bitField0_ = 0;
        int to_bitField1_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.dateTime_ = dateTime_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.latitude_ = latitude_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.longitude_ = longitude_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.odometer_ = odometer_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        if (second00Builder_ == null) {
          result.second00_ = second00_;
        } else {
          result.second00_ = second00Builder_.build();
        }
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        if (second01Builder_ == null) {
          result.second01_ = second01_;
        } else {
          result.second01_ = second01Builder_.build();
        }
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        if (second02Builder_ == null) {
          result.second02_ = second02_;
        } else {
          result.second02_ = second02Builder_.build();
        }
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        if (second03Builder_ == null) {
          result.second03_ = second03_;
        } else {
          result.second03_ = second03Builder_.build();
        }
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        if (second04Builder_ == null) {
          result.second04_ = second04_;
        } else {
          result.second04_ = second04Builder_.build();
        }
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        if (second05Builder_ == null) {
          result.second05_ = second05_;
        } else {
          result.second05_ = second05Builder_.build();
        }
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        if (second06Builder_ == null) {
          result.second06_ = second06_;
        } else {
          result.second06_ = second06Builder_.build();
        }
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000800;
        }
        if (second07Builder_ == null) {
          result.second07_ = second07_;
        } else {
          result.second07_ = second07Builder_.build();
        }
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00001000;
        }
        if (second08Builder_ == null) {
          result.second08_ = second08_;
        } else {
          result.second08_ = second08Builder_.build();
        }
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00002000;
        }
        if (second09Builder_ == null) {
          result.second09_ = second09_;
        } else {
          result.second09_ = second09Builder_.build();
        }
        if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
          to_bitField0_ |= 0x00004000;
        }
        if (second10Builder_ == null) {
          result.second10_ = second10_;
        } else {
          result.second10_ = second10Builder_.build();
        }
        if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
          to_bitField0_ |= 0x00008000;
        }
        if (second11Builder_ == null) {
          result.second11_ = second11_;
        } else {
          result.second11_ = second11Builder_.build();
        }
        if (((from_bitField0_ & 0x00010000) == 0x00010000)) {
          to_bitField0_ |= 0x00010000;
        }
        if (second12Builder_ == null) {
          result.second12_ = second12_;
        } else {
          result.second12_ = second12Builder_.build();
        }
        if (((from_bitField0_ & 0x00020000) == 0x00020000)) {
          to_bitField0_ |= 0x00020000;
        }
        if (second13Builder_ == null) {
          result.second13_ = second13_;
        } else {
          result.second13_ = second13Builder_.build();
        }
        if (((from_bitField0_ & 0x00040000) == 0x00040000)) {
          to_bitField0_ |= 0x00040000;
        }
        if (second14Builder_ == null) {
          result.second14_ = second14_;
        } else {
          result.second14_ = second14Builder_.build();
        }
        if (((from_bitField0_ & 0x00080000) == 0x00080000)) {
          to_bitField0_ |= 0x00080000;
        }
        if (second15Builder_ == null) {
          result.second15_ = second15_;
        } else {
          result.second15_ = second15Builder_.build();
        }
        if (((from_bitField0_ & 0x00100000) == 0x00100000)) {
          to_bitField0_ |= 0x00100000;
        }
        if (second16Builder_ == null) {
          result.second16_ = second16_;
        } else {
          result.second16_ = second16Builder_.build();
        }
        if (((from_bitField0_ & 0x00200000) == 0x00200000)) {
          to_bitField0_ |= 0x00200000;
        }
        if (second17Builder_ == null) {
          result.second17_ = second17_;
        } else {
          result.second17_ = second17Builder_.build();
        }
        if (((from_bitField0_ & 0x00400000) == 0x00400000)) {
          to_bitField0_ |= 0x00400000;
        }
        if (second18Builder_ == null) {
          result.second18_ = second18_;
        } else {
          result.second18_ = second18Builder_.build();
        }
        if (((from_bitField0_ & 0x00800000) == 0x00800000)) {
          to_bitField0_ |= 0x00800000;
        }
        if (second19Builder_ == null) {
          result.second19_ = second19_;
        } else {
          result.second19_ = second19Builder_.build();
        }
        if (((from_bitField0_ & 0x01000000) == 0x01000000)) {
          to_bitField0_ |= 0x01000000;
        }
        if (second20Builder_ == null) {
          result.second20_ = second20_;
        } else {
          result.second20_ = second20Builder_.build();
        }
        if (((from_bitField0_ & 0x02000000) == 0x02000000)) {
          to_bitField0_ |= 0x02000000;
        }
        if (second21Builder_ == null) {
          result.second21_ = second21_;
        } else {
          result.second21_ = second21Builder_.build();
        }
        if (((from_bitField0_ & 0x04000000) == 0x04000000)) {
          to_bitField0_ |= 0x04000000;
        }
        if (second22Builder_ == null) {
          result.second22_ = second22_;
        } else {
          result.second22_ = second22Builder_.build();
        }
        if (((from_bitField0_ & 0x08000000) == 0x08000000)) {
          to_bitField0_ |= 0x08000000;
        }
        if (second23Builder_ == null) {
          result.second23_ = second23_;
        } else {
          result.second23_ = second23Builder_.build();
        }
        if (((from_bitField0_ & 0x10000000) == 0x10000000)) {
          to_bitField0_ |= 0x10000000;
        }
        if (second24Builder_ == null) {
          result.second24_ = second24_;
        } else {
          result.second24_ = second24Builder_.build();
        }
        if (((from_bitField0_ & 0x20000000) == 0x20000000)) {
          to_bitField0_ |= 0x20000000;
        }
        if (second25Builder_ == null) {
          result.second25_ = second25_;
        } else {
          result.second25_ = second25Builder_.build();
        }
        if (((from_bitField0_ & 0x40000000) == 0x40000000)) {
          to_bitField0_ |= 0x40000000;
        }
        if (second26Builder_ == null) {
          result.second26_ = second26_;
        } else {
          result.second26_ = second26Builder_.build();
        }
        if (((from_bitField0_ & 0x80000000) == 0x80000000)) {
          to_bitField0_ |= 0x80000000;
        }
        if (second27Builder_ == null) {
          result.second27_ = second27_;
        } else {
          result.second27_ = second27Builder_.build();
        }
        if (((from_bitField1_ & 0x00000001) == 0x00000001)) {
          to_bitField1_ |= 0x00000001;
        }
        if (second28Builder_ == null) {
          result.second28_ = second28_;
        } else {
          result.second28_ = second28Builder_.build();
        }
        if (((from_bitField1_ & 0x00000002) == 0x00000002)) {
          to_bitField1_ |= 0x00000002;
        }
        if (second29Builder_ == null) {
          result.second29_ = second29_;
        } else {
          result.second29_ = second29Builder_.build();
        }
        if (((from_bitField1_ & 0x00000004) == 0x00000004)) {
          to_bitField1_ |= 0x00000004;
        }
        if (second30Builder_ == null) {
          result.second30_ = second30_;
        } else {
          result.second30_ = second30Builder_.build();
        }
        if (((from_bitField1_ & 0x00000008) == 0x00000008)) {
          to_bitField1_ |= 0x00000008;
        }
        if (second31Builder_ == null) {
          result.second31_ = second31_;
        } else {
          result.second31_ = second31Builder_.build();
        }
        if (((from_bitField1_ & 0x00000010) == 0x00000010)) {
          to_bitField1_ |= 0x00000010;
        }
        if (second32Builder_ == null) {
          result.second32_ = second32_;
        } else {
          result.second32_ = second32Builder_.build();
        }
        if (((from_bitField1_ & 0x00000020) == 0x00000020)) {
          to_bitField1_ |= 0x00000020;
        }
        if (second33Builder_ == null) {
          result.second33_ = second33_;
        } else {
          result.second33_ = second33Builder_.build();
        }
        if (((from_bitField1_ & 0x00000040) == 0x00000040)) {
          to_bitField1_ |= 0x00000040;
        }
        if (second34Builder_ == null) {
          result.second34_ = second34_;
        } else {
          result.second34_ = second34Builder_.build();
        }
        if (((from_bitField1_ & 0x00000080) == 0x00000080)) {
          to_bitField1_ |= 0x00000080;
        }
        if (second35Builder_ == null) {
          result.second35_ = second35_;
        } else {
          result.second35_ = second35Builder_.build();
        }
        if (((from_bitField1_ & 0x00000100) == 0x00000100)) {
          to_bitField1_ |= 0x00000100;
        }
        if (second36Builder_ == null) {
          result.second36_ = second36_;
        } else {
          result.second36_ = second36Builder_.build();
        }
        if (((from_bitField1_ & 0x00000200) == 0x00000200)) {
          to_bitField1_ |= 0x00000200;
        }
        if (second37Builder_ == null) {
          result.second37_ = second37_;
        } else {
          result.second37_ = second37Builder_.build();
        }
        if (((from_bitField1_ & 0x00000400) == 0x00000400)) {
          to_bitField1_ |= 0x00000400;
        }
        if (second38Builder_ == null) {
          result.second38_ = second38_;
        } else {
          result.second38_ = second38Builder_.build();
        }
        if (((from_bitField1_ & 0x00000800) == 0x00000800)) {
          to_bitField1_ |= 0x00000800;
        }
        if (second39Builder_ == null) {
          result.second39_ = second39_;
        } else {
          result.second39_ = second39Builder_.build();
        }
        if (((from_bitField1_ & 0x00001000) == 0x00001000)) {
          to_bitField1_ |= 0x00001000;
        }
        if (second40Builder_ == null) {
          result.second40_ = second40_;
        } else {
          result.second40_ = second40Builder_.build();
        }
        if (((from_bitField1_ & 0x00002000) == 0x00002000)) {
          to_bitField1_ |= 0x00002000;
        }
        if (second41Builder_ == null) {
          result.second41_ = second41_;
        } else {
          result.second41_ = second41Builder_.build();
        }
        if (((from_bitField1_ & 0x00004000) == 0x00004000)) {
          to_bitField1_ |= 0x00004000;
        }
        if (second42Builder_ == null) {
          result.second42_ = second42_;
        } else {
          result.second42_ = second42Builder_.build();
        }
        if (((from_bitField1_ & 0x00008000) == 0x00008000)) {
          to_bitField1_ |= 0x00008000;
        }
        if (second43Builder_ == null) {
          result.second43_ = second43_;
        } else {
          result.second43_ = second43Builder_.build();
        }
        if (((from_bitField1_ & 0x00010000) == 0x00010000)) {
          to_bitField1_ |= 0x00010000;
        }
        if (second44Builder_ == null) {
          result.second44_ = second44_;
        } else {
          result.second44_ = second44Builder_.build();
        }
        if (((from_bitField1_ & 0x00020000) == 0x00020000)) {
          to_bitField1_ |= 0x00020000;
        }
        if (second45Builder_ == null) {
          result.second45_ = second45_;
        } else {
          result.second45_ = second45Builder_.build();
        }
        if (((from_bitField1_ & 0x00040000) == 0x00040000)) {
          to_bitField1_ |= 0x00040000;
        }
        if (second46Builder_ == null) {
          result.second46_ = second46_;
        } else {
          result.second46_ = second46Builder_.build();
        }
        if (((from_bitField1_ & 0x00080000) == 0x00080000)) {
          to_bitField1_ |= 0x00080000;
        }
        if (second47Builder_ == null) {
          result.second47_ = second47_;
        } else {
          result.second47_ = second47Builder_.build();
        }
        if (((from_bitField1_ & 0x00100000) == 0x00100000)) {
          to_bitField1_ |= 0x00100000;
        }
        if (second48Builder_ == null) {
          result.second48_ = second48_;
        } else {
          result.second48_ = second48Builder_.build();
        }
        if (((from_bitField1_ & 0x00200000) == 0x00200000)) {
          to_bitField1_ |= 0x00200000;
        }
        if (second49Builder_ == null) {
          result.second49_ = second49_;
        } else {
          result.second49_ = second49Builder_.build();
        }
        if (((from_bitField1_ & 0x00400000) == 0x00400000)) {
          to_bitField1_ |= 0x00400000;
        }
        if (second50Builder_ == null) {
          result.second50_ = second50_;
        } else {
          result.second50_ = second50Builder_.build();
        }
        if (((from_bitField1_ & 0x00800000) == 0x00800000)) {
          to_bitField1_ |= 0x00800000;
        }
        if (second51Builder_ == null) {
          result.second51_ = second51_;
        } else {
          result.second51_ = second51Builder_.build();
        }
        if (((from_bitField1_ & 0x01000000) == 0x01000000)) {
          to_bitField1_ |= 0x01000000;
        }
        if (second52Builder_ == null) {
          result.second52_ = second52_;
        } else {
          result.second52_ = second52Builder_.build();
        }
        if (((from_bitField1_ & 0x02000000) == 0x02000000)) {
          to_bitField1_ |= 0x02000000;
        }
        if (second53Builder_ == null) {
          result.second53_ = second53_;
        } else {
          result.second53_ = second53Builder_.build();
        }
        if (((from_bitField1_ & 0x04000000) == 0x04000000)) {
          to_bitField1_ |= 0x04000000;
        }
        if (second54Builder_ == null) {
          result.second54_ = second54_;
        } else {
          result.second54_ = second54Builder_.build();
        }
        if (((from_bitField1_ & 0x08000000) == 0x08000000)) {
          to_bitField1_ |= 0x08000000;
        }
        if (second55Builder_ == null) {
          result.second55_ = second55_;
        } else {
          result.second55_ = second55Builder_.build();
        }
        if (((from_bitField1_ & 0x10000000) == 0x10000000)) {
          to_bitField1_ |= 0x10000000;
        }
        if (second56Builder_ == null) {
          result.second56_ = second56_;
        } else {
          result.second56_ = second56Builder_.build();
        }
        if (((from_bitField1_ & 0x20000000) == 0x20000000)) {
          to_bitField1_ |= 0x20000000;
        }
        if (second57Builder_ == null) {
          result.second57_ = second57_;
        } else {
          result.second57_ = second57Builder_.build();
        }
        if (((from_bitField1_ & 0x40000000) == 0x40000000)) {
          to_bitField1_ |= 0x40000000;
        }
        if (second58Builder_ == null) {
          result.second58_ = second58_;
        } else {
          result.second58_ = second58Builder_.build();
        }
        if (((from_bitField1_ & 0x80000000) == 0x80000000)) {
          to_bitField1_ |= 0x80000000;
        }
        if (second59Builder_ == null) {
          result.second59_ = second59_;
        } else {
          result.second59_ = second59Builder_.build();
        }
        result.bitField0_ = to_bitField0_;
        result.bitField1_ = to_bitField1_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof maxpb.MaxpbTelemetry.BlackBoxMinute) {
          return mergeFrom((maxpb.MaxpbTelemetry.BlackBoxMinute)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(maxpb.MaxpbTelemetry.BlackBoxMinute other) {
        if (other == maxpb.MaxpbTelemetry.BlackBoxMinute.getDefaultInstance()) return this;
        if (other.hasDateTime()) {
          setDateTime(other.getDateTime());
        }
        if (other.hasLatitude()) {
          setLatitude(other.getLatitude());
        }
        if (other.hasLongitude()) {
          setLongitude(other.getLongitude());
        }
        if (other.hasOdometer()) {
          setOdometer(other.getOdometer());
        }
        if (other.hasSecond00()) {
          mergeSecond00(other.getSecond00());
        }
        if (other.hasSecond01()) {
          mergeSecond01(other.getSecond01());
        }
        if (other.hasSecond02()) {
          mergeSecond02(other.getSecond02());
        }
        if (other.hasSecond03()) {
          mergeSecond03(other.getSecond03());
        }
        if (other.hasSecond04()) {
          mergeSecond04(other.getSecond04());
        }
        if (other.hasSecond05()) {
          mergeSecond05(other.getSecond05());
        }
        if (other.hasSecond06()) {
          mergeSecond06(other.getSecond06());
        }
        if (other.hasSecond07()) {
          mergeSecond07(other.getSecond07());
        }
        if (other.hasSecond08()) {
          mergeSecond08(other.getSecond08());
        }
        if (other.hasSecond09()) {
          mergeSecond09(other.getSecond09());
        }
        if (other.hasSecond10()) {
          mergeSecond10(other.getSecond10());
        }
        if (other.hasSecond11()) {
          mergeSecond11(other.getSecond11());
        }
        if (other.hasSecond12()) {
          mergeSecond12(other.getSecond12());
        }
        if (other.hasSecond13()) {
          mergeSecond13(other.getSecond13());
        }
        if (other.hasSecond14()) {
          mergeSecond14(other.getSecond14());
        }
        if (other.hasSecond15()) {
          mergeSecond15(other.getSecond15());
        }
        if (other.hasSecond16()) {
          mergeSecond16(other.getSecond16());
        }
        if (other.hasSecond17()) {
          mergeSecond17(other.getSecond17());
        }
        if (other.hasSecond18()) {
          mergeSecond18(other.getSecond18());
        }
        if (other.hasSecond19()) {
          mergeSecond19(other.getSecond19());
        }
        if (other.hasSecond20()) {
          mergeSecond20(other.getSecond20());
        }
        if (other.hasSecond21()) {
          mergeSecond21(other.getSecond21());
        }
        if (other.hasSecond22()) {
          mergeSecond22(other.getSecond22());
        }
        if (other.hasSecond23()) {
          mergeSecond23(other.getSecond23());
        }
        if (other.hasSecond24()) {
          mergeSecond24(other.getSecond24());
        }
        if (other.hasSecond25()) {
          mergeSecond25(other.getSecond25());
        }
        if (other.hasSecond26()) {
          mergeSecond26(other.getSecond26());
        }
        if (other.hasSecond27()) {
          mergeSecond27(other.getSecond27());
        }
        if (other.hasSecond28()) {
          mergeSecond28(other.getSecond28());
        }
        if (other.hasSecond29()) {
          mergeSecond29(other.getSecond29());
        }
        if (other.hasSecond30()) {
          mergeSecond30(other.getSecond30());
        }
        if (other.hasSecond31()) {
          mergeSecond31(other.getSecond31());
        }
        if (other.hasSecond32()) {
          mergeSecond32(other.getSecond32());
        }
        if (other.hasSecond33()) {
          mergeSecond33(other.getSecond33());
        }
        if (other.hasSecond34()) {
          mergeSecond34(other.getSecond34());
        }
        if (other.hasSecond35()) {
          mergeSecond35(other.getSecond35());
        }
        if (other.hasSecond36()) {
          mergeSecond36(other.getSecond36());
        }
        if (other.hasSecond37()) {
          mergeSecond37(other.getSecond37());
        }
        if (other.hasSecond38()) {
          mergeSecond38(other.getSecond38());
        }
        if (other.hasSecond39()) {
          mergeSecond39(other.getSecond39());
        }
        if (other.hasSecond40()) {
          mergeSecond40(other.getSecond40());
        }
        if (other.hasSecond41()) {
          mergeSecond41(other.getSecond41());
        }
        if (other.hasSecond42()) {
          mergeSecond42(other.getSecond42());
        }
        if (other.hasSecond43()) {
          mergeSecond43(other.getSecond43());
        }
        if (other.hasSecond44()) {
          mergeSecond44(other.getSecond44());
        }
        if (other.hasSecond45()) {
          mergeSecond45(other.getSecond45());
        }
        if (other.hasSecond46()) {
          mergeSecond46(other.getSecond46());
        }
        if (other.hasSecond47()) {
          mergeSecond47(other.getSecond47());
        }
        if (other.hasSecond48()) {
          mergeSecond48(other.getSecond48());
        }
        if (other.hasSecond49()) {
          mergeSecond49(other.getSecond49());
        }
        if (other.hasSecond50()) {
          mergeSecond50(other.getSecond50());
        }
        if (other.hasSecond51()) {
          mergeSecond51(other.getSecond51());
        }
        if (other.hasSecond52()) {
          mergeSecond52(other.getSecond52());
        }
        if (other.hasSecond53()) {
          mergeSecond53(other.getSecond53());
        }
        if (other.hasSecond54()) {
          mergeSecond54(other.getSecond54());
        }
        if (other.hasSecond55()) {
          mergeSecond55(other.getSecond55());
        }
        if (other.hasSecond56()) {
          mergeSecond56(other.getSecond56());
        }
        if (other.hasSecond57()) {
          mergeSecond57(other.getSecond57());
        }
        if (other.hasSecond58()) {
          mergeSecond58(other.getSecond58());
        }
        if (other.hasSecond59()) {
          mergeSecond59(other.getSecond59());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasDateTime()) {
          
          return false;
        }
        if (!hasLatitude()) {
          
          return false;
        }
        if (!hasLongitude()) {
          
          return false;
        }
        if (!hasOdometer()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        maxpb.MaxpbTelemetry.BlackBoxMinute parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (maxpb.MaxpbTelemetry.BlackBoxMinute) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;
      private int bitField1_;

      private int dateTime_ ;
      /**
       * <code>required uint32 dateTime = 1;</code>
       *
       * <pre>
       *&#47; Unix time, seconds since 01/01/1970 SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasDateTime() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint32 dateTime = 1;</code>
       *
       * <pre>
       *&#47; Unix time, seconds since 01/01/1970 SupportedBy: MXT160, MXT162
       * </pre>
       */
      public int getDateTime() {
        return dateTime_;
      }
      /**
       * <code>required uint32 dateTime = 1;</code>
       *
       * <pre>
       *&#47; Unix time, seconds since 01/01/1970 SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setDateTime(int value) {
        bitField0_ |= 0x00000001;
        dateTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint32 dateTime = 1;</code>
       *
       * <pre>
       *&#47; Unix time, seconds since 01/01/1970 SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearDateTime() {
        bitField0_ = (bitField0_ & ~0x00000001);
        dateTime_ = 0;
        onChanged();
        return this;
      }

      private int latitude_ ;
      /**
       * <code>required sfixed32 latitude = 2;</code>
       *
       * <pre>
       *&#47; Degrees.decimalsOfDegrees * 10,000,000 SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasLatitude() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required sfixed32 latitude = 2;</code>
       *
       * <pre>
       *&#47; Degrees.decimalsOfDegrees * 10,000,000 SupportedBy: MXT160, MXT162
       * </pre>
       */
      public int getLatitude() {
        return latitude_;
      }
      /**
       * <code>required sfixed32 latitude = 2;</code>
       *
       * <pre>
       *&#47; Degrees.decimalsOfDegrees * 10,000,000 SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setLatitude(int value) {
        bitField0_ |= 0x00000002;
        latitude_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required sfixed32 latitude = 2;</code>
       *
       * <pre>
       *&#47; Degrees.decimalsOfDegrees * 10,000,000 SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearLatitude() {
        bitField0_ = (bitField0_ & ~0x00000002);
        latitude_ = 0;
        onChanged();
        return this;
      }

      private int longitude_ ;
      /**
       * <code>required sfixed32 longitude = 3;</code>
       *
       * <pre>
       *&#47; Degrees.decimalsOfDegrees * 10,000,000 SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasLongitude() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required sfixed32 longitude = 3;</code>
       *
       * <pre>
       *&#47; Degrees.decimalsOfDegrees * 10,000,000 SupportedBy: MXT160, MXT162
       * </pre>
       */
      public int getLongitude() {
        return longitude_;
      }
      /**
       * <code>required sfixed32 longitude = 3;</code>
       *
       * <pre>
       *&#47; Degrees.decimalsOfDegrees * 10,000,000 SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setLongitude(int value) {
        bitField0_ |= 0x00000004;
        longitude_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required sfixed32 longitude = 3;</code>
       *
       * <pre>
       *&#47; Degrees.decimalsOfDegrees * 10,000,000 SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearLongitude() {
        bitField0_ = (bitField0_ & ~0x00000004);
        longitude_ = 0;
        onChanged();
        return this;
      }

      private long odometer_ ;
      /**
       * <code>required uint64 odometer = 4;</code>
       *
       * <pre>
       *&#47; Meters SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasOdometer() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>required uint64 odometer = 4;</code>
       *
       * <pre>
       *&#47; Meters SupportedBy: MXT160, MXT162
       * </pre>
       */
      public long getOdometer() {
        return odometer_;
      }
      /**
       * <code>required uint64 odometer = 4;</code>
       *
       * <pre>
       *&#47; Meters SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setOdometer(long value) {
        bitField0_ |= 0x00000008;
        odometer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint64 odometer = 4;</code>
       *
       * <pre>
       *&#47; Meters SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearOdometer() {
        bitField0_ = (bitField0_ & ~0x00000008);
        odometer_ = 0L;
        onChanged();
        return this;
      }

      private maxpb.MaxpbTelemetry.BlackBoxSecond second00_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder> second00Builder_;
      /**
       * <code>optional .maxpb.BlackBoxSecond second00 = 5;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasSecond00() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second00 = 5;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecond getSecond00() {
        if (second00Builder_ == null) {
          return second00_;
        } else {
          return second00Builder_.getMessage();
        }
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second00 = 5;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setSecond00(maxpb.MaxpbTelemetry.BlackBoxSecond value) {
        if (second00Builder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          second00_ = value;
          onChanged();
        } else {
          second00Builder_.setMessage(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second00 = 5;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setSecond00(
          maxpb.MaxpbTelemetry.BlackBoxSecond.Builder builderForValue) {
        if (second00Builder_ == null) {
          second00_ = builderForValue.build();
          onChanged();
        } else {
          second00Builder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second00 = 5;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder mergeSecond00(maxpb.MaxpbTelemetry.BlackBoxSecond value) {
        if (second00Builder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010) &&
              second00_ != maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance()) {
            second00_ =
              maxpb.MaxpbTelemetry.BlackBoxSecond.newBuilder(second00_).mergeFrom(value).buildPartial();
          } else {
            second00_ = value;
          }
          onChanged();
        } else {
          second00Builder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second00 = 5;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearSecond00() {
        if (second00Builder_ == null) {
          second00_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
          onChanged();
        } else {
          second00Builder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second00 = 5;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecond.Builder getSecond00Builder() {
        bitField0_ |= 0x00000010;
        onChanged();
        return getSecond00FieldBuilder().getBuilder();
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second00 = 5;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond00OrBuilder() {
        if (second00Builder_ != null) {
          return second00Builder_.getMessageOrBuilder();
        } else {
          return second00_;
        }
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second00 = 5;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder> 
          getSecond00FieldBuilder() {
        if (second00Builder_ == null) {
          second00Builder_ = new com.google.protobuf.SingleFieldBuilder<
              maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder>(
                  getSecond00(),
                  getParentForChildren(),
                  isClean());
          second00_ = null;
        }
        return second00Builder_;
      }

      private maxpb.MaxpbTelemetry.BlackBoxSecond second01_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder> second01Builder_;
      /**
       * <code>optional .maxpb.BlackBoxSecond second01 = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasSecond01() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second01 = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecond getSecond01() {
        if (second01Builder_ == null) {
          return second01_;
        } else {
          return second01Builder_.getMessage();
        }
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second01 = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setSecond01(maxpb.MaxpbTelemetry.BlackBoxSecond value) {
        if (second01Builder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          second01_ = value;
          onChanged();
        } else {
          second01Builder_.setMessage(value);
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second01 = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setSecond01(
          maxpb.MaxpbTelemetry.BlackBoxSecond.Builder builderForValue) {
        if (second01Builder_ == null) {
          second01_ = builderForValue.build();
          onChanged();
        } else {
          second01Builder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second01 = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder mergeSecond01(maxpb.MaxpbTelemetry.BlackBoxSecond value) {
        if (second01Builder_ == null) {
          if (((bitField0_ & 0x00000020) == 0x00000020) &&
              second01_ != maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance()) {
            second01_ =
              maxpb.MaxpbTelemetry.BlackBoxSecond.newBuilder(second01_).mergeFrom(value).buildPartial();
          } else {
            second01_ = value;
          }
          onChanged();
        } else {
          second01Builder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second01 = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearSecond01() {
        if (second01Builder_ == null) {
          second01_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
          onChanged();
        } else {
          second01Builder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second01 = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecond.Builder getSecond01Builder() {
        bitField0_ |= 0x00000020;
        onChanged();
        return getSecond01FieldBuilder().getBuilder();
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second01 = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond01OrBuilder() {
        if (second01Builder_ != null) {
          return second01Builder_.getMessageOrBuilder();
        } else {
          return second01_;
        }
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second01 = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder> 
          getSecond01FieldBuilder() {
        if (second01Builder_ == null) {
          second01Builder_ = new com.google.protobuf.SingleFieldBuilder<
              maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder>(
                  getSecond01(),
                  getParentForChildren(),
                  isClean());
          second01_ = null;
        }
        return second01Builder_;
      }

      private maxpb.MaxpbTelemetry.BlackBoxSecond second02_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder> second02Builder_;
      /**
       * <code>optional .maxpb.BlackBoxSecond second02 = 7;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasSecond02() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second02 = 7;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecond getSecond02() {
        if (second02Builder_ == null) {
          return second02_;
        } else {
          return second02Builder_.getMessage();
        }
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second02 = 7;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setSecond02(maxpb.MaxpbTelemetry.BlackBoxSecond value) {
        if (second02Builder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          second02_ = value;
          onChanged();
        } else {
          second02Builder_.setMessage(value);
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second02 = 7;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setSecond02(
          maxpb.MaxpbTelemetry.BlackBoxSecond.Builder builderForValue) {
        if (second02Builder_ == null) {
          second02_ = builderForValue.build();
          onChanged();
        } else {
          second02Builder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second02 = 7;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder mergeSecond02(maxpb.MaxpbTelemetry.BlackBoxSecond value) {
        if (second02Builder_ == null) {
          if (((bitField0_ & 0x00000040) == 0x00000040) &&
              second02_ != maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance()) {
            second02_ =
              maxpb.MaxpbTelemetry.BlackBoxSecond.newBuilder(second02_).mergeFrom(value).buildPartial();
          } else {
            second02_ = value;
          }
          onChanged();
        } else {
          second02Builder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second02 = 7;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearSecond02() {
        if (second02Builder_ == null) {
          second02_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
          onChanged();
        } else {
          second02Builder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second02 = 7;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecond.Builder getSecond02Builder() {
        bitField0_ |= 0x00000040;
        onChanged();
        return getSecond02FieldBuilder().getBuilder();
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second02 = 7;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond02OrBuilder() {
        if (second02Builder_ != null) {
          return second02Builder_.getMessageOrBuilder();
        } else {
          return second02_;
        }
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second02 = 7;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder> 
          getSecond02FieldBuilder() {
        if (second02Builder_ == null) {
          second02Builder_ = new com.google.protobuf.SingleFieldBuilder<
              maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder>(
                  getSecond02(),
                  getParentForChildren(),
                  isClean());
          second02_ = null;
        }
        return second02Builder_;
      }

      private maxpb.MaxpbTelemetry.BlackBoxSecond second03_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder> second03Builder_;
      /**
       * <code>optional .maxpb.BlackBoxSecond second03 = 8;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasSecond03() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second03 = 8;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecond getSecond03() {
        if (second03Builder_ == null) {
          return second03_;
        } else {
          return second03Builder_.getMessage();
        }
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second03 = 8;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setSecond03(maxpb.MaxpbTelemetry.BlackBoxSecond value) {
        if (second03Builder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          second03_ = value;
          onChanged();
        } else {
          second03Builder_.setMessage(value);
        }
        bitField0_ |= 0x00000080;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second03 = 8;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setSecond03(
          maxpb.MaxpbTelemetry.BlackBoxSecond.Builder builderForValue) {
        if (second03Builder_ == null) {
          second03_ = builderForValue.build();
          onChanged();
        } else {
          second03Builder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000080;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second03 = 8;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder mergeSecond03(maxpb.MaxpbTelemetry.BlackBoxSecond value) {
        if (second03Builder_ == null) {
          if (((bitField0_ & 0x00000080) == 0x00000080) &&
              second03_ != maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance()) {
            second03_ =
              maxpb.MaxpbTelemetry.BlackBoxSecond.newBuilder(second03_).mergeFrom(value).buildPartial();
          } else {
            second03_ = value;
          }
          onChanged();
        } else {
          second03Builder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000080;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second03 = 8;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearSecond03() {
        if (second03Builder_ == null) {
          second03_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
          onChanged();
        } else {
          second03Builder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000080);
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second03 = 8;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecond.Builder getSecond03Builder() {
        bitField0_ |= 0x00000080;
        onChanged();
        return getSecond03FieldBuilder().getBuilder();
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second03 = 8;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond03OrBuilder() {
        if (second03Builder_ != null) {
          return second03Builder_.getMessageOrBuilder();
        } else {
          return second03_;
        }
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second03 = 8;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder> 
          getSecond03FieldBuilder() {
        if (second03Builder_ == null) {
          second03Builder_ = new com.google.protobuf.SingleFieldBuilder<
              maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder>(
                  getSecond03(),
                  getParentForChildren(),
                  isClean());
          second03_ = null;
        }
        return second03Builder_;
      }

      private maxpb.MaxpbTelemetry.BlackBoxSecond second04_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder> second04Builder_;
      /**
       * <code>optional .maxpb.BlackBoxSecond second04 = 9;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasSecond04() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second04 = 9;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecond getSecond04() {
        if (second04Builder_ == null) {
          return second04_;
        } else {
          return second04Builder_.getMessage();
        }
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second04 = 9;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setSecond04(maxpb.MaxpbTelemetry.BlackBoxSecond value) {
        if (second04Builder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          second04_ = value;
          onChanged();
        } else {
          second04Builder_.setMessage(value);
        }
        bitField0_ |= 0x00000100;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second04 = 9;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setSecond04(
          maxpb.MaxpbTelemetry.BlackBoxSecond.Builder builderForValue) {
        if (second04Builder_ == null) {
          second04_ = builderForValue.build();
          onChanged();
        } else {
          second04Builder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000100;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second04 = 9;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder mergeSecond04(maxpb.MaxpbTelemetry.BlackBoxSecond value) {
        if (second04Builder_ == null) {
          if (((bitField0_ & 0x00000100) == 0x00000100) &&
              second04_ != maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance()) {
            second04_ =
              maxpb.MaxpbTelemetry.BlackBoxSecond.newBuilder(second04_).mergeFrom(value).buildPartial();
          } else {
            second04_ = value;
          }
          onChanged();
        } else {
          second04Builder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000100;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second04 = 9;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearSecond04() {
        if (second04Builder_ == null) {
          second04_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
          onChanged();
        } else {
          second04Builder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000100);
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second04 = 9;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecond.Builder getSecond04Builder() {
        bitField0_ |= 0x00000100;
        onChanged();
        return getSecond04FieldBuilder().getBuilder();
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second04 = 9;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond04OrBuilder() {
        if (second04Builder_ != null) {
          return second04Builder_.getMessageOrBuilder();
        } else {
          return second04_;
        }
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second04 = 9;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder> 
          getSecond04FieldBuilder() {
        if (second04Builder_ == null) {
          second04Builder_ = new com.google.protobuf.SingleFieldBuilder<
              maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder>(
                  getSecond04(),
                  getParentForChildren(),
                  isClean());
          second04_ = null;
        }
        return second04Builder_;
      }

      private maxpb.MaxpbTelemetry.BlackBoxSecond second05_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder> second05Builder_;
      /**
       * <code>optional .maxpb.BlackBoxSecond second05 = 10;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasSecond05() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second05 = 10;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecond getSecond05() {
        if (second05Builder_ == null) {
          return second05_;
        } else {
          return second05Builder_.getMessage();
        }
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second05 = 10;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setSecond05(maxpb.MaxpbTelemetry.BlackBoxSecond value) {
        if (second05Builder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          second05_ = value;
          onChanged();
        } else {
          second05Builder_.setMessage(value);
        }
        bitField0_ |= 0x00000200;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second05 = 10;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setSecond05(
          maxpb.MaxpbTelemetry.BlackBoxSecond.Builder builderForValue) {
        if (second05Builder_ == null) {
          second05_ = builderForValue.build();
          onChanged();
        } else {
          second05Builder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000200;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second05 = 10;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder mergeSecond05(maxpb.MaxpbTelemetry.BlackBoxSecond value) {
        if (second05Builder_ == null) {
          if (((bitField0_ & 0x00000200) == 0x00000200) &&
              second05_ != maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance()) {
            second05_ =
              maxpb.MaxpbTelemetry.BlackBoxSecond.newBuilder(second05_).mergeFrom(value).buildPartial();
          } else {
            second05_ = value;
          }
          onChanged();
        } else {
          second05Builder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000200;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second05 = 10;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearSecond05() {
        if (second05Builder_ == null) {
          second05_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
          onChanged();
        } else {
          second05Builder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000200);
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second05 = 10;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecond.Builder getSecond05Builder() {
        bitField0_ |= 0x00000200;
        onChanged();
        return getSecond05FieldBuilder().getBuilder();
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second05 = 10;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond05OrBuilder() {
        if (second05Builder_ != null) {
          return second05Builder_.getMessageOrBuilder();
        } else {
          return second05_;
        }
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second05 = 10;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder> 
          getSecond05FieldBuilder() {
        if (second05Builder_ == null) {
          second05Builder_ = new com.google.protobuf.SingleFieldBuilder<
              maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder>(
                  getSecond05(),
                  getParentForChildren(),
                  isClean());
          second05_ = null;
        }
        return second05Builder_;
      }

      private maxpb.MaxpbTelemetry.BlackBoxSecond second06_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder> second06Builder_;
      /**
       * <code>optional .maxpb.BlackBoxSecond second06 = 11;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasSecond06() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second06 = 11;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecond getSecond06() {
        if (second06Builder_ == null) {
          return second06_;
        } else {
          return second06Builder_.getMessage();
        }
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second06 = 11;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setSecond06(maxpb.MaxpbTelemetry.BlackBoxSecond value) {
        if (second06Builder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          second06_ = value;
          onChanged();
        } else {
          second06Builder_.setMessage(value);
        }
        bitField0_ |= 0x00000400;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second06 = 11;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setSecond06(
          maxpb.MaxpbTelemetry.BlackBoxSecond.Builder builderForValue) {
        if (second06Builder_ == null) {
          second06_ = builderForValue.build();
          onChanged();
        } else {
          second06Builder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000400;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second06 = 11;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder mergeSecond06(maxpb.MaxpbTelemetry.BlackBoxSecond value) {
        if (second06Builder_ == null) {
          if (((bitField0_ & 0x00000400) == 0x00000400) &&
              second06_ != maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance()) {
            second06_ =
              maxpb.MaxpbTelemetry.BlackBoxSecond.newBuilder(second06_).mergeFrom(value).buildPartial();
          } else {
            second06_ = value;
          }
          onChanged();
        } else {
          second06Builder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000400;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second06 = 11;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearSecond06() {
        if (second06Builder_ == null) {
          second06_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
          onChanged();
        } else {
          second06Builder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000400);
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second06 = 11;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecond.Builder getSecond06Builder() {
        bitField0_ |= 0x00000400;
        onChanged();
        return getSecond06FieldBuilder().getBuilder();
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second06 = 11;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond06OrBuilder() {
        if (second06Builder_ != null) {
          return second06Builder_.getMessageOrBuilder();
        } else {
          return second06_;
        }
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second06 = 11;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder> 
          getSecond06FieldBuilder() {
        if (second06Builder_ == null) {
          second06Builder_ = new com.google.protobuf.SingleFieldBuilder<
              maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder>(
                  getSecond06(),
                  getParentForChildren(),
                  isClean());
          second06_ = null;
        }
        return second06Builder_;
      }

      private maxpb.MaxpbTelemetry.BlackBoxSecond second07_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder> second07Builder_;
      /**
       * <code>optional .maxpb.BlackBoxSecond second07 = 12;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasSecond07() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second07 = 12;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecond getSecond07() {
        if (second07Builder_ == null) {
          return second07_;
        } else {
          return second07Builder_.getMessage();
        }
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second07 = 12;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setSecond07(maxpb.MaxpbTelemetry.BlackBoxSecond value) {
        if (second07Builder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          second07_ = value;
          onChanged();
        } else {
          second07Builder_.setMessage(value);
        }
        bitField0_ |= 0x00000800;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second07 = 12;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setSecond07(
          maxpb.MaxpbTelemetry.BlackBoxSecond.Builder builderForValue) {
        if (second07Builder_ == null) {
          second07_ = builderForValue.build();
          onChanged();
        } else {
          second07Builder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000800;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second07 = 12;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder mergeSecond07(maxpb.MaxpbTelemetry.BlackBoxSecond value) {
        if (second07Builder_ == null) {
          if (((bitField0_ & 0x00000800) == 0x00000800) &&
              second07_ != maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance()) {
            second07_ =
              maxpb.MaxpbTelemetry.BlackBoxSecond.newBuilder(second07_).mergeFrom(value).buildPartial();
          } else {
            second07_ = value;
          }
          onChanged();
        } else {
          second07Builder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000800;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second07 = 12;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearSecond07() {
        if (second07Builder_ == null) {
          second07_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
          onChanged();
        } else {
          second07Builder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000800);
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second07 = 12;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecond.Builder getSecond07Builder() {
        bitField0_ |= 0x00000800;
        onChanged();
        return getSecond07FieldBuilder().getBuilder();
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second07 = 12;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond07OrBuilder() {
        if (second07Builder_ != null) {
          return second07Builder_.getMessageOrBuilder();
        } else {
          return second07_;
        }
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second07 = 12;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder> 
          getSecond07FieldBuilder() {
        if (second07Builder_ == null) {
          second07Builder_ = new com.google.protobuf.SingleFieldBuilder<
              maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder>(
                  getSecond07(),
                  getParentForChildren(),
                  isClean());
          second07_ = null;
        }
        return second07Builder_;
      }

      private maxpb.MaxpbTelemetry.BlackBoxSecond second08_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder> second08Builder_;
      /**
       * <code>optional .maxpb.BlackBoxSecond second08 = 13;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasSecond08() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second08 = 13;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecond getSecond08() {
        if (second08Builder_ == null) {
          return second08_;
        } else {
          return second08Builder_.getMessage();
        }
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second08 = 13;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setSecond08(maxpb.MaxpbTelemetry.BlackBoxSecond value) {
        if (second08Builder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          second08_ = value;
          onChanged();
        } else {
          second08Builder_.setMessage(value);
        }
        bitField0_ |= 0x00001000;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second08 = 13;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setSecond08(
          maxpb.MaxpbTelemetry.BlackBoxSecond.Builder builderForValue) {
        if (second08Builder_ == null) {
          second08_ = builderForValue.build();
          onChanged();
        } else {
          second08Builder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00001000;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second08 = 13;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder mergeSecond08(maxpb.MaxpbTelemetry.BlackBoxSecond value) {
        if (second08Builder_ == null) {
          if (((bitField0_ & 0x00001000) == 0x00001000) &&
              second08_ != maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance()) {
            second08_ =
              maxpb.MaxpbTelemetry.BlackBoxSecond.newBuilder(second08_).mergeFrom(value).buildPartial();
          } else {
            second08_ = value;
          }
          onChanged();
        } else {
          second08Builder_.mergeFrom(value);
        }
        bitField0_ |= 0x00001000;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second08 = 13;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearSecond08() {
        if (second08Builder_ == null) {
          second08_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
          onChanged();
        } else {
          second08Builder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00001000);
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second08 = 13;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecond.Builder getSecond08Builder() {
        bitField0_ |= 0x00001000;
        onChanged();
        return getSecond08FieldBuilder().getBuilder();
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second08 = 13;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond08OrBuilder() {
        if (second08Builder_ != null) {
          return second08Builder_.getMessageOrBuilder();
        } else {
          return second08_;
        }
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second08 = 13;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder> 
          getSecond08FieldBuilder() {
        if (second08Builder_ == null) {
          second08Builder_ = new com.google.protobuf.SingleFieldBuilder<
              maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder>(
                  getSecond08(),
                  getParentForChildren(),
                  isClean());
          second08_ = null;
        }
        return second08Builder_;
      }

      private maxpb.MaxpbTelemetry.BlackBoxSecond second09_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder> second09Builder_;
      /**
       * <code>optional .maxpb.BlackBoxSecond second09 = 14;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasSecond09() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second09 = 14;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecond getSecond09() {
        if (second09Builder_ == null) {
          return second09_;
        } else {
          return second09Builder_.getMessage();
        }
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second09 = 14;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setSecond09(maxpb.MaxpbTelemetry.BlackBoxSecond value) {
        if (second09Builder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          second09_ = value;
          onChanged();
        } else {
          second09Builder_.setMessage(value);
        }
        bitField0_ |= 0x00002000;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second09 = 14;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setSecond09(
          maxpb.MaxpbTelemetry.BlackBoxSecond.Builder builderForValue) {
        if (second09Builder_ == null) {
          second09_ = builderForValue.build();
          onChanged();
        } else {
          second09Builder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00002000;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second09 = 14;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder mergeSecond09(maxpb.MaxpbTelemetry.BlackBoxSecond value) {
        if (second09Builder_ == null) {
          if (((bitField0_ & 0x00002000) == 0x00002000) &&
              second09_ != maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance()) {
            second09_ =
              maxpb.MaxpbTelemetry.BlackBoxSecond.newBuilder(second09_).mergeFrom(value).buildPartial();
          } else {
            second09_ = value;
          }
          onChanged();
        } else {
          second09Builder_.mergeFrom(value);
        }
        bitField0_ |= 0x00002000;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second09 = 14;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearSecond09() {
        if (second09Builder_ == null) {
          second09_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
          onChanged();
        } else {
          second09Builder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00002000);
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second09 = 14;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecond.Builder getSecond09Builder() {
        bitField0_ |= 0x00002000;
        onChanged();
        return getSecond09FieldBuilder().getBuilder();
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second09 = 14;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond09OrBuilder() {
        if (second09Builder_ != null) {
          return second09Builder_.getMessageOrBuilder();
        } else {
          return second09_;
        }
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second09 = 14;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder> 
          getSecond09FieldBuilder() {
        if (second09Builder_ == null) {
          second09Builder_ = new com.google.protobuf.SingleFieldBuilder<
              maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder>(
                  getSecond09(),
                  getParentForChildren(),
                  isClean());
          second09_ = null;
        }
        return second09Builder_;
      }

      private maxpb.MaxpbTelemetry.BlackBoxSecond second10_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder> second10Builder_;
      /**
       * <code>optional .maxpb.BlackBoxSecond second10 = 15;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasSecond10() {
        return ((bitField0_ & 0x00004000) == 0x00004000);
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second10 = 15;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecond getSecond10() {
        if (second10Builder_ == null) {
          return second10_;
        } else {
          return second10Builder_.getMessage();
        }
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second10 = 15;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setSecond10(maxpb.MaxpbTelemetry.BlackBoxSecond value) {
        if (second10Builder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          second10_ = value;
          onChanged();
        } else {
          second10Builder_.setMessage(value);
        }
        bitField0_ |= 0x00004000;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second10 = 15;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setSecond10(
          maxpb.MaxpbTelemetry.BlackBoxSecond.Builder builderForValue) {
        if (second10Builder_ == null) {
          second10_ = builderForValue.build();
          onChanged();
        } else {
          second10Builder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00004000;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second10 = 15;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder mergeSecond10(maxpb.MaxpbTelemetry.BlackBoxSecond value) {
        if (second10Builder_ == null) {
          if (((bitField0_ & 0x00004000) == 0x00004000) &&
              second10_ != maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance()) {
            second10_ =
              maxpb.MaxpbTelemetry.BlackBoxSecond.newBuilder(second10_).mergeFrom(value).buildPartial();
          } else {
            second10_ = value;
          }
          onChanged();
        } else {
          second10Builder_.mergeFrom(value);
        }
        bitField0_ |= 0x00004000;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second10 = 15;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearSecond10() {
        if (second10Builder_ == null) {
          second10_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
          onChanged();
        } else {
          second10Builder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00004000);
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second10 = 15;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecond.Builder getSecond10Builder() {
        bitField0_ |= 0x00004000;
        onChanged();
        return getSecond10FieldBuilder().getBuilder();
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second10 = 15;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond10OrBuilder() {
        if (second10Builder_ != null) {
          return second10Builder_.getMessageOrBuilder();
        } else {
          return second10_;
        }
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second10 = 15;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder> 
          getSecond10FieldBuilder() {
        if (second10Builder_ == null) {
          second10Builder_ = new com.google.protobuf.SingleFieldBuilder<
              maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder>(
                  getSecond10(),
                  getParentForChildren(),
                  isClean());
          second10_ = null;
        }
        return second10Builder_;
      }

      private maxpb.MaxpbTelemetry.BlackBoxSecond second11_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder> second11Builder_;
      /**
       * <code>optional .maxpb.BlackBoxSecond second11 = 16;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasSecond11() {
        return ((bitField0_ & 0x00008000) == 0x00008000);
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second11 = 16;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecond getSecond11() {
        if (second11Builder_ == null) {
          return second11_;
        } else {
          return second11Builder_.getMessage();
        }
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second11 = 16;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setSecond11(maxpb.MaxpbTelemetry.BlackBoxSecond value) {
        if (second11Builder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          second11_ = value;
          onChanged();
        } else {
          second11Builder_.setMessage(value);
        }
        bitField0_ |= 0x00008000;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second11 = 16;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setSecond11(
          maxpb.MaxpbTelemetry.BlackBoxSecond.Builder builderForValue) {
        if (second11Builder_ == null) {
          second11_ = builderForValue.build();
          onChanged();
        } else {
          second11Builder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00008000;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second11 = 16;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder mergeSecond11(maxpb.MaxpbTelemetry.BlackBoxSecond value) {
        if (second11Builder_ == null) {
          if (((bitField0_ & 0x00008000) == 0x00008000) &&
              second11_ != maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance()) {
            second11_ =
              maxpb.MaxpbTelemetry.BlackBoxSecond.newBuilder(second11_).mergeFrom(value).buildPartial();
          } else {
            second11_ = value;
          }
          onChanged();
        } else {
          second11Builder_.mergeFrom(value);
        }
        bitField0_ |= 0x00008000;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second11 = 16;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearSecond11() {
        if (second11Builder_ == null) {
          second11_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
          onChanged();
        } else {
          second11Builder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00008000);
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second11 = 16;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecond.Builder getSecond11Builder() {
        bitField0_ |= 0x00008000;
        onChanged();
        return getSecond11FieldBuilder().getBuilder();
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second11 = 16;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond11OrBuilder() {
        if (second11Builder_ != null) {
          return second11Builder_.getMessageOrBuilder();
        } else {
          return second11_;
        }
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second11 = 16;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder> 
          getSecond11FieldBuilder() {
        if (second11Builder_ == null) {
          second11Builder_ = new com.google.protobuf.SingleFieldBuilder<
              maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder>(
                  getSecond11(),
                  getParentForChildren(),
                  isClean());
          second11_ = null;
        }
        return second11Builder_;
      }

      private maxpb.MaxpbTelemetry.BlackBoxSecond second12_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder> second12Builder_;
      /**
       * <code>optional .maxpb.BlackBoxSecond second12 = 17;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasSecond12() {
        return ((bitField0_ & 0x00010000) == 0x00010000);
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second12 = 17;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecond getSecond12() {
        if (second12Builder_ == null) {
          return second12_;
        } else {
          return second12Builder_.getMessage();
        }
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second12 = 17;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setSecond12(maxpb.MaxpbTelemetry.BlackBoxSecond value) {
        if (second12Builder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          second12_ = value;
          onChanged();
        } else {
          second12Builder_.setMessage(value);
        }
        bitField0_ |= 0x00010000;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second12 = 17;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setSecond12(
          maxpb.MaxpbTelemetry.BlackBoxSecond.Builder builderForValue) {
        if (second12Builder_ == null) {
          second12_ = builderForValue.build();
          onChanged();
        } else {
          second12Builder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00010000;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second12 = 17;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder mergeSecond12(maxpb.MaxpbTelemetry.BlackBoxSecond value) {
        if (second12Builder_ == null) {
          if (((bitField0_ & 0x00010000) == 0x00010000) &&
              second12_ != maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance()) {
            second12_ =
              maxpb.MaxpbTelemetry.BlackBoxSecond.newBuilder(second12_).mergeFrom(value).buildPartial();
          } else {
            second12_ = value;
          }
          onChanged();
        } else {
          second12Builder_.mergeFrom(value);
        }
        bitField0_ |= 0x00010000;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second12 = 17;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearSecond12() {
        if (second12Builder_ == null) {
          second12_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
          onChanged();
        } else {
          second12Builder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00010000);
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second12 = 17;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecond.Builder getSecond12Builder() {
        bitField0_ |= 0x00010000;
        onChanged();
        return getSecond12FieldBuilder().getBuilder();
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second12 = 17;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond12OrBuilder() {
        if (second12Builder_ != null) {
          return second12Builder_.getMessageOrBuilder();
        } else {
          return second12_;
        }
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second12 = 17;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder> 
          getSecond12FieldBuilder() {
        if (second12Builder_ == null) {
          second12Builder_ = new com.google.protobuf.SingleFieldBuilder<
              maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder>(
                  getSecond12(),
                  getParentForChildren(),
                  isClean());
          second12_ = null;
        }
        return second12Builder_;
      }

      private maxpb.MaxpbTelemetry.BlackBoxSecond second13_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder> second13Builder_;
      /**
       * <code>optional .maxpb.BlackBoxSecond second13 = 18;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasSecond13() {
        return ((bitField0_ & 0x00020000) == 0x00020000);
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second13 = 18;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecond getSecond13() {
        if (second13Builder_ == null) {
          return second13_;
        } else {
          return second13Builder_.getMessage();
        }
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second13 = 18;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setSecond13(maxpb.MaxpbTelemetry.BlackBoxSecond value) {
        if (second13Builder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          second13_ = value;
          onChanged();
        } else {
          second13Builder_.setMessage(value);
        }
        bitField0_ |= 0x00020000;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second13 = 18;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setSecond13(
          maxpb.MaxpbTelemetry.BlackBoxSecond.Builder builderForValue) {
        if (second13Builder_ == null) {
          second13_ = builderForValue.build();
          onChanged();
        } else {
          second13Builder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00020000;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second13 = 18;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder mergeSecond13(maxpb.MaxpbTelemetry.BlackBoxSecond value) {
        if (second13Builder_ == null) {
          if (((bitField0_ & 0x00020000) == 0x00020000) &&
              second13_ != maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance()) {
            second13_ =
              maxpb.MaxpbTelemetry.BlackBoxSecond.newBuilder(second13_).mergeFrom(value).buildPartial();
          } else {
            second13_ = value;
          }
          onChanged();
        } else {
          second13Builder_.mergeFrom(value);
        }
        bitField0_ |= 0x00020000;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second13 = 18;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearSecond13() {
        if (second13Builder_ == null) {
          second13_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
          onChanged();
        } else {
          second13Builder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00020000);
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second13 = 18;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecond.Builder getSecond13Builder() {
        bitField0_ |= 0x00020000;
        onChanged();
        return getSecond13FieldBuilder().getBuilder();
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second13 = 18;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond13OrBuilder() {
        if (second13Builder_ != null) {
          return second13Builder_.getMessageOrBuilder();
        } else {
          return second13_;
        }
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second13 = 18;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder> 
          getSecond13FieldBuilder() {
        if (second13Builder_ == null) {
          second13Builder_ = new com.google.protobuf.SingleFieldBuilder<
              maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder>(
                  getSecond13(),
                  getParentForChildren(),
                  isClean());
          second13_ = null;
        }
        return second13Builder_;
      }

      private maxpb.MaxpbTelemetry.BlackBoxSecond second14_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder> second14Builder_;
      /**
       * <code>optional .maxpb.BlackBoxSecond second14 = 19;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasSecond14() {
        return ((bitField0_ & 0x00040000) == 0x00040000);
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second14 = 19;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecond getSecond14() {
        if (second14Builder_ == null) {
          return second14_;
        } else {
          return second14Builder_.getMessage();
        }
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second14 = 19;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setSecond14(maxpb.MaxpbTelemetry.BlackBoxSecond value) {
        if (second14Builder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          second14_ = value;
          onChanged();
        } else {
          second14Builder_.setMessage(value);
        }
        bitField0_ |= 0x00040000;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second14 = 19;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setSecond14(
          maxpb.MaxpbTelemetry.BlackBoxSecond.Builder builderForValue) {
        if (second14Builder_ == null) {
          second14_ = builderForValue.build();
          onChanged();
        } else {
          second14Builder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00040000;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second14 = 19;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder mergeSecond14(maxpb.MaxpbTelemetry.BlackBoxSecond value) {
        if (second14Builder_ == null) {
          if (((bitField0_ & 0x00040000) == 0x00040000) &&
              second14_ != maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance()) {
            second14_ =
              maxpb.MaxpbTelemetry.BlackBoxSecond.newBuilder(second14_).mergeFrom(value).buildPartial();
          } else {
            second14_ = value;
          }
          onChanged();
        } else {
          second14Builder_.mergeFrom(value);
        }
        bitField0_ |= 0x00040000;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second14 = 19;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearSecond14() {
        if (second14Builder_ == null) {
          second14_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
          onChanged();
        } else {
          second14Builder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00040000);
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second14 = 19;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecond.Builder getSecond14Builder() {
        bitField0_ |= 0x00040000;
        onChanged();
        return getSecond14FieldBuilder().getBuilder();
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second14 = 19;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond14OrBuilder() {
        if (second14Builder_ != null) {
          return second14Builder_.getMessageOrBuilder();
        } else {
          return second14_;
        }
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second14 = 19;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder> 
          getSecond14FieldBuilder() {
        if (second14Builder_ == null) {
          second14Builder_ = new com.google.protobuf.SingleFieldBuilder<
              maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder>(
                  getSecond14(),
                  getParentForChildren(),
                  isClean());
          second14_ = null;
        }
        return second14Builder_;
      }

      private maxpb.MaxpbTelemetry.BlackBoxSecond second15_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder> second15Builder_;
      /**
       * <code>optional .maxpb.BlackBoxSecond second15 = 20;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasSecond15() {
        return ((bitField0_ & 0x00080000) == 0x00080000);
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second15 = 20;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecond getSecond15() {
        if (second15Builder_ == null) {
          return second15_;
        } else {
          return second15Builder_.getMessage();
        }
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second15 = 20;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setSecond15(maxpb.MaxpbTelemetry.BlackBoxSecond value) {
        if (second15Builder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          second15_ = value;
          onChanged();
        } else {
          second15Builder_.setMessage(value);
        }
        bitField0_ |= 0x00080000;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second15 = 20;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setSecond15(
          maxpb.MaxpbTelemetry.BlackBoxSecond.Builder builderForValue) {
        if (second15Builder_ == null) {
          second15_ = builderForValue.build();
          onChanged();
        } else {
          second15Builder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00080000;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second15 = 20;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder mergeSecond15(maxpb.MaxpbTelemetry.BlackBoxSecond value) {
        if (second15Builder_ == null) {
          if (((bitField0_ & 0x00080000) == 0x00080000) &&
              second15_ != maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance()) {
            second15_ =
              maxpb.MaxpbTelemetry.BlackBoxSecond.newBuilder(second15_).mergeFrom(value).buildPartial();
          } else {
            second15_ = value;
          }
          onChanged();
        } else {
          second15Builder_.mergeFrom(value);
        }
        bitField0_ |= 0x00080000;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second15 = 20;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearSecond15() {
        if (second15Builder_ == null) {
          second15_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
          onChanged();
        } else {
          second15Builder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00080000);
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second15 = 20;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecond.Builder getSecond15Builder() {
        bitField0_ |= 0x00080000;
        onChanged();
        return getSecond15FieldBuilder().getBuilder();
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second15 = 20;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond15OrBuilder() {
        if (second15Builder_ != null) {
          return second15Builder_.getMessageOrBuilder();
        } else {
          return second15_;
        }
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second15 = 20;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder> 
          getSecond15FieldBuilder() {
        if (second15Builder_ == null) {
          second15Builder_ = new com.google.protobuf.SingleFieldBuilder<
              maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder>(
                  getSecond15(),
                  getParentForChildren(),
                  isClean());
          second15_ = null;
        }
        return second15Builder_;
      }

      private maxpb.MaxpbTelemetry.BlackBoxSecond second16_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder> second16Builder_;
      /**
       * <code>optional .maxpb.BlackBoxSecond second16 = 21;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasSecond16() {
        return ((bitField0_ & 0x00100000) == 0x00100000);
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second16 = 21;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecond getSecond16() {
        if (second16Builder_ == null) {
          return second16_;
        } else {
          return second16Builder_.getMessage();
        }
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second16 = 21;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setSecond16(maxpb.MaxpbTelemetry.BlackBoxSecond value) {
        if (second16Builder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          second16_ = value;
          onChanged();
        } else {
          second16Builder_.setMessage(value);
        }
        bitField0_ |= 0x00100000;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second16 = 21;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setSecond16(
          maxpb.MaxpbTelemetry.BlackBoxSecond.Builder builderForValue) {
        if (second16Builder_ == null) {
          second16_ = builderForValue.build();
          onChanged();
        } else {
          second16Builder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00100000;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second16 = 21;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder mergeSecond16(maxpb.MaxpbTelemetry.BlackBoxSecond value) {
        if (second16Builder_ == null) {
          if (((bitField0_ & 0x00100000) == 0x00100000) &&
              second16_ != maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance()) {
            second16_ =
              maxpb.MaxpbTelemetry.BlackBoxSecond.newBuilder(second16_).mergeFrom(value).buildPartial();
          } else {
            second16_ = value;
          }
          onChanged();
        } else {
          second16Builder_.mergeFrom(value);
        }
        bitField0_ |= 0x00100000;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second16 = 21;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearSecond16() {
        if (second16Builder_ == null) {
          second16_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
          onChanged();
        } else {
          second16Builder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00100000);
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second16 = 21;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecond.Builder getSecond16Builder() {
        bitField0_ |= 0x00100000;
        onChanged();
        return getSecond16FieldBuilder().getBuilder();
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second16 = 21;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond16OrBuilder() {
        if (second16Builder_ != null) {
          return second16Builder_.getMessageOrBuilder();
        } else {
          return second16_;
        }
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second16 = 21;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder> 
          getSecond16FieldBuilder() {
        if (second16Builder_ == null) {
          second16Builder_ = new com.google.protobuf.SingleFieldBuilder<
              maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder>(
                  getSecond16(),
                  getParentForChildren(),
                  isClean());
          second16_ = null;
        }
        return second16Builder_;
      }

      private maxpb.MaxpbTelemetry.BlackBoxSecond second17_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder> second17Builder_;
      /**
       * <code>optional .maxpb.BlackBoxSecond second17 = 22;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasSecond17() {
        return ((bitField0_ & 0x00200000) == 0x00200000);
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second17 = 22;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecond getSecond17() {
        if (second17Builder_ == null) {
          return second17_;
        } else {
          return second17Builder_.getMessage();
        }
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second17 = 22;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setSecond17(maxpb.MaxpbTelemetry.BlackBoxSecond value) {
        if (second17Builder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          second17_ = value;
          onChanged();
        } else {
          second17Builder_.setMessage(value);
        }
        bitField0_ |= 0x00200000;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second17 = 22;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setSecond17(
          maxpb.MaxpbTelemetry.BlackBoxSecond.Builder builderForValue) {
        if (second17Builder_ == null) {
          second17_ = builderForValue.build();
          onChanged();
        } else {
          second17Builder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00200000;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second17 = 22;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder mergeSecond17(maxpb.MaxpbTelemetry.BlackBoxSecond value) {
        if (second17Builder_ == null) {
          if (((bitField0_ & 0x00200000) == 0x00200000) &&
              second17_ != maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance()) {
            second17_ =
              maxpb.MaxpbTelemetry.BlackBoxSecond.newBuilder(second17_).mergeFrom(value).buildPartial();
          } else {
            second17_ = value;
          }
          onChanged();
        } else {
          second17Builder_.mergeFrom(value);
        }
        bitField0_ |= 0x00200000;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second17 = 22;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearSecond17() {
        if (second17Builder_ == null) {
          second17_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
          onChanged();
        } else {
          second17Builder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00200000);
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second17 = 22;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecond.Builder getSecond17Builder() {
        bitField0_ |= 0x00200000;
        onChanged();
        return getSecond17FieldBuilder().getBuilder();
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second17 = 22;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond17OrBuilder() {
        if (second17Builder_ != null) {
          return second17Builder_.getMessageOrBuilder();
        } else {
          return second17_;
        }
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second17 = 22;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder> 
          getSecond17FieldBuilder() {
        if (second17Builder_ == null) {
          second17Builder_ = new com.google.protobuf.SingleFieldBuilder<
              maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder>(
                  getSecond17(),
                  getParentForChildren(),
                  isClean());
          second17_ = null;
        }
        return second17Builder_;
      }

      private maxpb.MaxpbTelemetry.BlackBoxSecond second18_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder> second18Builder_;
      /**
       * <code>optional .maxpb.BlackBoxSecond second18 = 23;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasSecond18() {
        return ((bitField0_ & 0x00400000) == 0x00400000);
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second18 = 23;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecond getSecond18() {
        if (second18Builder_ == null) {
          return second18_;
        } else {
          return second18Builder_.getMessage();
        }
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second18 = 23;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setSecond18(maxpb.MaxpbTelemetry.BlackBoxSecond value) {
        if (second18Builder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          second18_ = value;
          onChanged();
        } else {
          second18Builder_.setMessage(value);
        }
        bitField0_ |= 0x00400000;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second18 = 23;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setSecond18(
          maxpb.MaxpbTelemetry.BlackBoxSecond.Builder builderForValue) {
        if (second18Builder_ == null) {
          second18_ = builderForValue.build();
          onChanged();
        } else {
          second18Builder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00400000;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second18 = 23;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder mergeSecond18(maxpb.MaxpbTelemetry.BlackBoxSecond value) {
        if (second18Builder_ == null) {
          if (((bitField0_ & 0x00400000) == 0x00400000) &&
              second18_ != maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance()) {
            second18_ =
              maxpb.MaxpbTelemetry.BlackBoxSecond.newBuilder(second18_).mergeFrom(value).buildPartial();
          } else {
            second18_ = value;
          }
          onChanged();
        } else {
          second18Builder_.mergeFrom(value);
        }
        bitField0_ |= 0x00400000;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second18 = 23;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearSecond18() {
        if (second18Builder_ == null) {
          second18_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
          onChanged();
        } else {
          second18Builder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00400000);
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second18 = 23;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecond.Builder getSecond18Builder() {
        bitField0_ |= 0x00400000;
        onChanged();
        return getSecond18FieldBuilder().getBuilder();
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second18 = 23;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond18OrBuilder() {
        if (second18Builder_ != null) {
          return second18Builder_.getMessageOrBuilder();
        } else {
          return second18_;
        }
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second18 = 23;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder> 
          getSecond18FieldBuilder() {
        if (second18Builder_ == null) {
          second18Builder_ = new com.google.protobuf.SingleFieldBuilder<
              maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder>(
                  getSecond18(),
                  getParentForChildren(),
                  isClean());
          second18_ = null;
        }
        return second18Builder_;
      }

      private maxpb.MaxpbTelemetry.BlackBoxSecond second19_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder> second19Builder_;
      /**
       * <code>optional .maxpb.BlackBoxSecond second19 = 24;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasSecond19() {
        return ((bitField0_ & 0x00800000) == 0x00800000);
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second19 = 24;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecond getSecond19() {
        if (second19Builder_ == null) {
          return second19_;
        } else {
          return second19Builder_.getMessage();
        }
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second19 = 24;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setSecond19(maxpb.MaxpbTelemetry.BlackBoxSecond value) {
        if (second19Builder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          second19_ = value;
          onChanged();
        } else {
          second19Builder_.setMessage(value);
        }
        bitField0_ |= 0x00800000;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second19 = 24;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setSecond19(
          maxpb.MaxpbTelemetry.BlackBoxSecond.Builder builderForValue) {
        if (second19Builder_ == null) {
          second19_ = builderForValue.build();
          onChanged();
        } else {
          second19Builder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00800000;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second19 = 24;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder mergeSecond19(maxpb.MaxpbTelemetry.BlackBoxSecond value) {
        if (second19Builder_ == null) {
          if (((bitField0_ & 0x00800000) == 0x00800000) &&
              second19_ != maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance()) {
            second19_ =
              maxpb.MaxpbTelemetry.BlackBoxSecond.newBuilder(second19_).mergeFrom(value).buildPartial();
          } else {
            second19_ = value;
          }
          onChanged();
        } else {
          second19Builder_.mergeFrom(value);
        }
        bitField0_ |= 0x00800000;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second19 = 24;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearSecond19() {
        if (second19Builder_ == null) {
          second19_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
          onChanged();
        } else {
          second19Builder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00800000);
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second19 = 24;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecond.Builder getSecond19Builder() {
        bitField0_ |= 0x00800000;
        onChanged();
        return getSecond19FieldBuilder().getBuilder();
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second19 = 24;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond19OrBuilder() {
        if (second19Builder_ != null) {
          return second19Builder_.getMessageOrBuilder();
        } else {
          return second19_;
        }
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second19 = 24;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder> 
          getSecond19FieldBuilder() {
        if (second19Builder_ == null) {
          second19Builder_ = new com.google.protobuf.SingleFieldBuilder<
              maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder>(
                  getSecond19(),
                  getParentForChildren(),
                  isClean());
          second19_ = null;
        }
        return second19Builder_;
      }

      private maxpb.MaxpbTelemetry.BlackBoxSecond second20_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder> second20Builder_;
      /**
       * <code>optional .maxpb.BlackBoxSecond second20 = 25;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasSecond20() {
        return ((bitField0_ & 0x01000000) == 0x01000000);
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second20 = 25;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecond getSecond20() {
        if (second20Builder_ == null) {
          return second20_;
        } else {
          return second20Builder_.getMessage();
        }
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second20 = 25;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setSecond20(maxpb.MaxpbTelemetry.BlackBoxSecond value) {
        if (second20Builder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          second20_ = value;
          onChanged();
        } else {
          second20Builder_.setMessage(value);
        }
        bitField0_ |= 0x01000000;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second20 = 25;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setSecond20(
          maxpb.MaxpbTelemetry.BlackBoxSecond.Builder builderForValue) {
        if (second20Builder_ == null) {
          second20_ = builderForValue.build();
          onChanged();
        } else {
          second20Builder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x01000000;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second20 = 25;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder mergeSecond20(maxpb.MaxpbTelemetry.BlackBoxSecond value) {
        if (second20Builder_ == null) {
          if (((bitField0_ & 0x01000000) == 0x01000000) &&
              second20_ != maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance()) {
            second20_ =
              maxpb.MaxpbTelemetry.BlackBoxSecond.newBuilder(second20_).mergeFrom(value).buildPartial();
          } else {
            second20_ = value;
          }
          onChanged();
        } else {
          second20Builder_.mergeFrom(value);
        }
        bitField0_ |= 0x01000000;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second20 = 25;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearSecond20() {
        if (second20Builder_ == null) {
          second20_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
          onChanged();
        } else {
          second20Builder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x01000000);
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second20 = 25;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecond.Builder getSecond20Builder() {
        bitField0_ |= 0x01000000;
        onChanged();
        return getSecond20FieldBuilder().getBuilder();
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second20 = 25;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond20OrBuilder() {
        if (second20Builder_ != null) {
          return second20Builder_.getMessageOrBuilder();
        } else {
          return second20_;
        }
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second20 = 25;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder> 
          getSecond20FieldBuilder() {
        if (second20Builder_ == null) {
          second20Builder_ = new com.google.protobuf.SingleFieldBuilder<
              maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder>(
                  getSecond20(),
                  getParentForChildren(),
                  isClean());
          second20_ = null;
        }
        return second20Builder_;
      }

      private maxpb.MaxpbTelemetry.BlackBoxSecond second21_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder> second21Builder_;
      /**
       * <code>optional .maxpb.BlackBoxSecond second21 = 26;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasSecond21() {
        return ((bitField0_ & 0x02000000) == 0x02000000);
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second21 = 26;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecond getSecond21() {
        if (second21Builder_ == null) {
          return second21_;
        } else {
          return second21Builder_.getMessage();
        }
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second21 = 26;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setSecond21(maxpb.MaxpbTelemetry.BlackBoxSecond value) {
        if (second21Builder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          second21_ = value;
          onChanged();
        } else {
          second21Builder_.setMessage(value);
        }
        bitField0_ |= 0x02000000;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second21 = 26;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setSecond21(
          maxpb.MaxpbTelemetry.BlackBoxSecond.Builder builderForValue) {
        if (second21Builder_ == null) {
          second21_ = builderForValue.build();
          onChanged();
        } else {
          second21Builder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x02000000;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second21 = 26;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder mergeSecond21(maxpb.MaxpbTelemetry.BlackBoxSecond value) {
        if (second21Builder_ == null) {
          if (((bitField0_ & 0x02000000) == 0x02000000) &&
              second21_ != maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance()) {
            second21_ =
              maxpb.MaxpbTelemetry.BlackBoxSecond.newBuilder(second21_).mergeFrom(value).buildPartial();
          } else {
            second21_ = value;
          }
          onChanged();
        } else {
          second21Builder_.mergeFrom(value);
        }
        bitField0_ |= 0x02000000;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second21 = 26;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearSecond21() {
        if (second21Builder_ == null) {
          second21_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
          onChanged();
        } else {
          second21Builder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x02000000);
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second21 = 26;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecond.Builder getSecond21Builder() {
        bitField0_ |= 0x02000000;
        onChanged();
        return getSecond21FieldBuilder().getBuilder();
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second21 = 26;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond21OrBuilder() {
        if (second21Builder_ != null) {
          return second21Builder_.getMessageOrBuilder();
        } else {
          return second21_;
        }
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second21 = 26;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder> 
          getSecond21FieldBuilder() {
        if (second21Builder_ == null) {
          second21Builder_ = new com.google.protobuf.SingleFieldBuilder<
              maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder>(
                  getSecond21(),
                  getParentForChildren(),
                  isClean());
          second21_ = null;
        }
        return second21Builder_;
      }

      private maxpb.MaxpbTelemetry.BlackBoxSecond second22_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder> second22Builder_;
      /**
       * <code>optional .maxpb.BlackBoxSecond second22 = 27;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasSecond22() {
        return ((bitField0_ & 0x04000000) == 0x04000000);
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second22 = 27;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecond getSecond22() {
        if (second22Builder_ == null) {
          return second22_;
        } else {
          return second22Builder_.getMessage();
        }
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second22 = 27;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setSecond22(maxpb.MaxpbTelemetry.BlackBoxSecond value) {
        if (second22Builder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          second22_ = value;
          onChanged();
        } else {
          second22Builder_.setMessage(value);
        }
        bitField0_ |= 0x04000000;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second22 = 27;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setSecond22(
          maxpb.MaxpbTelemetry.BlackBoxSecond.Builder builderForValue) {
        if (second22Builder_ == null) {
          second22_ = builderForValue.build();
          onChanged();
        } else {
          second22Builder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x04000000;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second22 = 27;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder mergeSecond22(maxpb.MaxpbTelemetry.BlackBoxSecond value) {
        if (second22Builder_ == null) {
          if (((bitField0_ & 0x04000000) == 0x04000000) &&
              second22_ != maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance()) {
            second22_ =
              maxpb.MaxpbTelemetry.BlackBoxSecond.newBuilder(second22_).mergeFrom(value).buildPartial();
          } else {
            second22_ = value;
          }
          onChanged();
        } else {
          second22Builder_.mergeFrom(value);
        }
        bitField0_ |= 0x04000000;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second22 = 27;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearSecond22() {
        if (second22Builder_ == null) {
          second22_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
          onChanged();
        } else {
          second22Builder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x04000000);
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second22 = 27;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecond.Builder getSecond22Builder() {
        bitField0_ |= 0x04000000;
        onChanged();
        return getSecond22FieldBuilder().getBuilder();
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second22 = 27;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond22OrBuilder() {
        if (second22Builder_ != null) {
          return second22Builder_.getMessageOrBuilder();
        } else {
          return second22_;
        }
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second22 = 27;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder> 
          getSecond22FieldBuilder() {
        if (second22Builder_ == null) {
          second22Builder_ = new com.google.protobuf.SingleFieldBuilder<
              maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder>(
                  getSecond22(),
                  getParentForChildren(),
                  isClean());
          second22_ = null;
        }
        return second22Builder_;
      }

      private maxpb.MaxpbTelemetry.BlackBoxSecond second23_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder> second23Builder_;
      /**
       * <code>optional .maxpb.BlackBoxSecond second23 = 28;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasSecond23() {
        return ((bitField0_ & 0x08000000) == 0x08000000);
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second23 = 28;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecond getSecond23() {
        if (second23Builder_ == null) {
          return second23_;
        } else {
          return second23Builder_.getMessage();
        }
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second23 = 28;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setSecond23(maxpb.MaxpbTelemetry.BlackBoxSecond value) {
        if (second23Builder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          second23_ = value;
          onChanged();
        } else {
          second23Builder_.setMessage(value);
        }
        bitField0_ |= 0x08000000;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second23 = 28;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setSecond23(
          maxpb.MaxpbTelemetry.BlackBoxSecond.Builder builderForValue) {
        if (second23Builder_ == null) {
          second23_ = builderForValue.build();
          onChanged();
        } else {
          second23Builder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x08000000;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second23 = 28;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder mergeSecond23(maxpb.MaxpbTelemetry.BlackBoxSecond value) {
        if (second23Builder_ == null) {
          if (((bitField0_ & 0x08000000) == 0x08000000) &&
              second23_ != maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance()) {
            second23_ =
              maxpb.MaxpbTelemetry.BlackBoxSecond.newBuilder(second23_).mergeFrom(value).buildPartial();
          } else {
            second23_ = value;
          }
          onChanged();
        } else {
          second23Builder_.mergeFrom(value);
        }
        bitField0_ |= 0x08000000;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second23 = 28;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearSecond23() {
        if (second23Builder_ == null) {
          second23_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
          onChanged();
        } else {
          second23Builder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x08000000);
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second23 = 28;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecond.Builder getSecond23Builder() {
        bitField0_ |= 0x08000000;
        onChanged();
        return getSecond23FieldBuilder().getBuilder();
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second23 = 28;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond23OrBuilder() {
        if (second23Builder_ != null) {
          return second23Builder_.getMessageOrBuilder();
        } else {
          return second23_;
        }
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second23 = 28;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder> 
          getSecond23FieldBuilder() {
        if (second23Builder_ == null) {
          second23Builder_ = new com.google.protobuf.SingleFieldBuilder<
              maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder>(
                  getSecond23(),
                  getParentForChildren(),
                  isClean());
          second23_ = null;
        }
        return second23Builder_;
      }

      private maxpb.MaxpbTelemetry.BlackBoxSecond second24_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder> second24Builder_;
      /**
       * <code>optional .maxpb.BlackBoxSecond second24 = 29;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasSecond24() {
        return ((bitField0_ & 0x10000000) == 0x10000000);
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second24 = 29;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecond getSecond24() {
        if (second24Builder_ == null) {
          return second24_;
        } else {
          return second24Builder_.getMessage();
        }
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second24 = 29;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setSecond24(maxpb.MaxpbTelemetry.BlackBoxSecond value) {
        if (second24Builder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          second24_ = value;
          onChanged();
        } else {
          second24Builder_.setMessage(value);
        }
        bitField0_ |= 0x10000000;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second24 = 29;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setSecond24(
          maxpb.MaxpbTelemetry.BlackBoxSecond.Builder builderForValue) {
        if (second24Builder_ == null) {
          second24_ = builderForValue.build();
          onChanged();
        } else {
          second24Builder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x10000000;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second24 = 29;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder mergeSecond24(maxpb.MaxpbTelemetry.BlackBoxSecond value) {
        if (second24Builder_ == null) {
          if (((bitField0_ & 0x10000000) == 0x10000000) &&
              second24_ != maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance()) {
            second24_ =
              maxpb.MaxpbTelemetry.BlackBoxSecond.newBuilder(second24_).mergeFrom(value).buildPartial();
          } else {
            second24_ = value;
          }
          onChanged();
        } else {
          second24Builder_.mergeFrom(value);
        }
        bitField0_ |= 0x10000000;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second24 = 29;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearSecond24() {
        if (second24Builder_ == null) {
          second24_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
          onChanged();
        } else {
          second24Builder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x10000000);
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second24 = 29;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecond.Builder getSecond24Builder() {
        bitField0_ |= 0x10000000;
        onChanged();
        return getSecond24FieldBuilder().getBuilder();
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second24 = 29;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond24OrBuilder() {
        if (second24Builder_ != null) {
          return second24Builder_.getMessageOrBuilder();
        } else {
          return second24_;
        }
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second24 = 29;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder> 
          getSecond24FieldBuilder() {
        if (second24Builder_ == null) {
          second24Builder_ = new com.google.protobuf.SingleFieldBuilder<
              maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder>(
                  getSecond24(),
                  getParentForChildren(),
                  isClean());
          second24_ = null;
        }
        return second24Builder_;
      }

      private maxpb.MaxpbTelemetry.BlackBoxSecond second25_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder> second25Builder_;
      /**
       * <code>optional .maxpb.BlackBoxSecond second25 = 30;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasSecond25() {
        return ((bitField0_ & 0x20000000) == 0x20000000);
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second25 = 30;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecond getSecond25() {
        if (second25Builder_ == null) {
          return second25_;
        } else {
          return second25Builder_.getMessage();
        }
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second25 = 30;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setSecond25(maxpb.MaxpbTelemetry.BlackBoxSecond value) {
        if (second25Builder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          second25_ = value;
          onChanged();
        } else {
          second25Builder_.setMessage(value);
        }
        bitField0_ |= 0x20000000;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second25 = 30;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setSecond25(
          maxpb.MaxpbTelemetry.BlackBoxSecond.Builder builderForValue) {
        if (second25Builder_ == null) {
          second25_ = builderForValue.build();
          onChanged();
        } else {
          second25Builder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x20000000;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second25 = 30;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder mergeSecond25(maxpb.MaxpbTelemetry.BlackBoxSecond value) {
        if (second25Builder_ == null) {
          if (((bitField0_ & 0x20000000) == 0x20000000) &&
              second25_ != maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance()) {
            second25_ =
              maxpb.MaxpbTelemetry.BlackBoxSecond.newBuilder(second25_).mergeFrom(value).buildPartial();
          } else {
            second25_ = value;
          }
          onChanged();
        } else {
          second25Builder_.mergeFrom(value);
        }
        bitField0_ |= 0x20000000;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second25 = 30;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearSecond25() {
        if (second25Builder_ == null) {
          second25_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
          onChanged();
        } else {
          second25Builder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x20000000);
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second25 = 30;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecond.Builder getSecond25Builder() {
        bitField0_ |= 0x20000000;
        onChanged();
        return getSecond25FieldBuilder().getBuilder();
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second25 = 30;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond25OrBuilder() {
        if (second25Builder_ != null) {
          return second25Builder_.getMessageOrBuilder();
        } else {
          return second25_;
        }
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second25 = 30;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder> 
          getSecond25FieldBuilder() {
        if (second25Builder_ == null) {
          second25Builder_ = new com.google.protobuf.SingleFieldBuilder<
              maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder>(
                  getSecond25(),
                  getParentForChildren(),
                  isClean());
          second25_ = null;
        }
        return second25Builder_;
      }

      private maxpb.MaxpbTelemetry.BlackBoxSecond second26_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder> second26Builder_;
      /**
       * <code>optional .maxpb.BlackBoxSecond second26 = 31;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasSecond26() {
        return ((bitField0_ & 0x40000000) == 0x40000000);
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second26 = 31;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecond getSecond26() {
        if (second26Builder_ == null) {
          return second26_;
        } else {
          return second26Builder_.getMessage();
        }
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second26 = 31;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setSecond26(maxpb.MaxpbTelemetry.BlackBoxSecond value) {
        if (second26Builder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          second26_ = value;
          onChanged();
        } else {
          second26Builder_.setMessage(value);
        }
        bitField0_ |= 0x40000000;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second26 = 31;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setSecond26(
          maxpb.MaxpbTelemetry.BlackBoxSecond.Builder builderForValue) {
        if (second26Builder_ == null) {
          second26_ = builderForValue.build();
          onChanged();
        } else {
          second26Builder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x40000000;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second26 = 31;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder mergeSecond26(maxpb.MaxpbTelemetry.BlackBoxSecond value) {
        if (second26Builder_ == null) {
          if (((bitField0_ & 0x40000000) == 0x40000000) &&
              second26_ != maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance()) {
            second26_ =
              maxpb.MaxpbTelemetry.BlackBoxSecond.newBuilder(second26_).mergeFrom(value).buildPartial();
          } else {
            second26_ = value;
          }
          onChanged();
        } else {
          second26Builder_.mergeFrom(value);
        }
        bitField0_ |= 0x40000000;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second26 = 31;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearSecond26() {
        if (second26Builder_ == null) {
          second26_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
          onChanged();
        } else {
          second26Builder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x40000000);
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second26 = 31;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecond.Builder getSecond26Builder() {
        bitField0_ |= 0x40000000;
        onChanged();
        return getSecond26FieldBuilder().getBuilder();
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second26 = 31;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond26OrBuilder() {
        if (second26Builder_ != null) {
          return second26Builder_.getMessageOrBuilder();
        } else {
          return second26_;
        }
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second26 = 31;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder> 
          getSecond26FieldBuilder() {
        if (second26Builder_ == null) {
          second26Builder_ = new com.google.protobuf.SingleFieldBuilder<
              maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder>(
                  getSecond26(),
                  getParentForChildren(),
                  isClean());
          second26_ = null;
        }
        return second26Builder_;
      }

      private maxpb.MaxpbTelemetry.BlackBoxSecond second27_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder> second27Builder_;
      /**
       * <code>optional .maxpb.BlackBoxSecond second27 = 32;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasSecond27() {
        return ((bitField0_ & 0x80000000) == 0x80000000);
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second27 = 32;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecond getSecond27() {
        if (second27Builder_ == null) {
          return second27_;
        } else {
          return second27Builder_.getMessage();
        }
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second27 = 32;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setSecond27(maxpb.MaxpbTelemetry.BlackBoxSecond value) {
        if (second27Builder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          second27_ = value;
          onChanged();
        } else {
          second27Builder_.setMessage(value);
        }
        bitField0_ |= 0x80000000;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second27 = 32;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setSecond27(
          maxpb.MaxpbTelemetry.BlackBoxSecond.Builder builderForValue) {
        if (second27Builder_ == null) {
          second27_ = builderForValue.build();
          onChanged();
        } else {
          second27Builder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x80000000;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second27 = 32;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder mergeSecond27(maxpb.MaxpbTelemetry.BlackBoxSecond value) {
        if (second27Builder_ == null) {
          if (((bitField0_ & 0x80000000) == 0x80000000) &&
              second27_ != maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance()) {
            second27_ =
              maxpb.MaxpbTelemetry.BlackBoxSecond.newBuilder(second27_).mergeFrom(value).buildPartial();
          } else {
            second27_ = value;
          }
          onChanged();
        } else {
          second27Builder_.mergeFrom(value);
        }
        bitField0_ |= 0x80000000;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second27 = 32;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearSecond27() {
        if (second27Builder_ == null) {
          second27_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
          onChanged();
        } else {
          second27Builder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x80000000);
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second27 = 32;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecond.Builder getSecond27Builder() {
        bitField0_ |= 0x80000000;
        onChanged();
        return getSecond27FieldBuilder().getBuilder();
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second27 = 32;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond27OrBuilder() {
        if (second27Builder_ != null) {
          return second27Builder_.getMessageOrBuilder();
        } else {
          return second27_;
        }
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second27 = 32;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder> 
          getSecond27FieldBuilder() {
        if (second27Builder_ == null) {
          second27Builder_ = new com.google.protobuf.SingleFieldBuilder<
              maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder>(
                  getSecond27(),
                  getParentForChildren(),
                  isClean());
          second27_ = null;
        }
        return second27Builder_;
      }

      private maxpb.MaxpbTelemetry.BlackBoxSecond second28_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder> second28Builder_;
      /**
       * <code>optional .maxpb.BlackBoxSecond second28 = 33;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasSecond28() {
        return ((bitField1_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second28 = 33;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecond getSecond28() {
        if (second28Builder_ == null) {
          return second28_;
        } else {
          return second28Builder_.getMessage();
        }
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second28 = 33;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setSecond28(maxpb.MaxpbTelemetry.BlackBoxSecond value) {
        if (second28Builder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          second28_ = value;
          onChanged();
        } else {
          second28Builder_.setMessage(value);
        }
        bitField1_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second28 = 33;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setSecond28(
          maxpb.MaxpbTelemetry.BlackBoxSecond.Builder builderForValue) {
        if (second28Builder_ == null) {
          second28_ = builderForValue.build();
          onChanged();
        } else {
          second28Builder_.setMessage(builderForValue.build());
        }
        bitField1_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second28 = 33;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder mergeSecond28(maxpb.MaxpbTelemetry.BlackBoxSecond value) {
        if (second28Builder_ == null) {
          if (((bitField1_ & 0x00000001) == 0x00000001) &&
              second28_ != maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance()) {
            second28_ =
              maxpb.MaxpbTelemetry.BlackBoxSecond.newBuilder(second28_).mergeFrom(value).buildPartial();
          } else {
            second28_ = value;
          }
          onChanged();
        } else {
          second28Builder_.mergeFrom(value);
        }
        bitField1_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second28 = 33;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearSecond28() {
        if (second28Builder_ == null) {
          second28_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
          onChanged();
        } else {
          second28Builder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00000001);
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second28 = 33;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecond.Builder getSecond28Builder() {
        bitField1_ |= 0x00000001;
        onChanged();
        return getSecond28FieldBuilder().getBuilder();
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second28 = 33;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond28OrBuilder() {
        if (second28Builder_ != null) {
          return second28Builder_.getMessageOrBuilder();
        } else {
          return second28_;
        }
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second28 = 33;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder> 
          getSecond28FieldBuilder() {
        if (second28Builder_ == null) {
          second28Builder_ = new com.google.protobuf.SingleFieldBuilder<
              maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder>(
                  getSecond28(),
                  getParentForChildren(),
                  isClean());
          second28_ = null;
        }
        return second28Builder_;
      }

      private maxpb.MaxpbTelemetry.BlackBoxSecond second29_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder> second29Builder_;
      /**
       * <code>optional .maxpb.BlackBoxSecond second29 = 34;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasSecond29() {
        return ((bitField1_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second29 = 34;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecond getSecond29() {
        if (second29Builder_ == null) {
          return second29_;
        } else {
          return second29Builder_.getMessage();
        }
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second29 = 34;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setSecond29(maxpb.MaxpbTelemetry.BlackBoxSecond value) {
        if (second29Builder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          second29_ = value;
          onChanged();
        } else {
          second29Builder_.setMessage(value);
        }
        bitField1_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second29 = 34;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setSecond29(
          maxpb.MaxpbTelemetry.BlackBoxSecond.Builder builderForValue) {
        if (second29Builder_ == null) {
          second29_ = builderForValue.build();
          onChanged();
        } else {
          second29Builder_.setMessage(builderForValue.build());
        }
        bitField1_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second29 = 34;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder mergeSecond29(maxpb.MaxpbTelemetry.BlackBoxSecond value) {
        if (second29Builder_ == null) {
          if (((bitField1_ & 0x00000002) == 0x00000002) &&
              second29_ != maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance()) {
            second29_ =
              maxpb.MaxpbTelemetry.BlackBoxSecond.newBuilder(second29_).mergeFrom(value).buildPartial();
          } else {
            second29_ = value;
          }
          onChanged();
        } else {
          second29Builder_.mergeFrom(value);
        }
        bitField1_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second29 = 34;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearSecond29() {
        if (second29Builder_ == null) {
          second29_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
          onChanged();
        } else {
          second29Builder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00000002);
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second29 = 34;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecond.Builder getSecond29Builder() {
        bitField1_ |= 0x00000002;
        onChanged();
        return getSecond29FieldBuilder().getBuilder();
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second29 = 34;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond29OrBuilder() {
        if (second29Builder_ != null) {
          return second29Builder_.getMessageOrBuilder();
        } else {
          return second29_;
        }
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second29 = 34;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder> 
          getSecond29FieldBuilder() {
        if (second29Builder_ == null) {
          second29Builder_ = new com.google.protobuf.SingleFieldBuilder<
              maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder>(
                  getSecond29(),
                  getParentForChildren(),
                  isClean());
          second29_ = null;
        }
        return second29Builder_;
      }

      private maxpb.MaxpbTelemetry.BlackBoxSecond second30_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder> second30Builder_;
      /**
       * <code>optional .maxpb.BlackBoxSecond second30 = 35;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasSecond30() {
        return ((bitField1_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second30 = 35;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecond getSecond30() {
        if (second30Builder_ == null) {
          return second30_;
        } else {
          return second30Builder_.getMessage();
        }
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second30 = 35;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setSecond30(maxpb.MaxpbTelemetry.BlackBoxSecond value) {
        if (second30Builder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          second30_ = value;
          onChanged();
        } else {
          second30Builder_.setMessage(value);
        }
        bitField1_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second30 = 35;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setSecond30(
          maxpb.MaxpbTelemetry.BlackBoxSecond.Builder builderForValue) {
        if (second30Builder_ == null) {
          second30_ = builderForValue.build();
          onChanged();
        } else {
          second30Builder_.setMessage(builderForValue.build());
        }
        bitField1_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second30 = 35;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder mergeSecond30(maxpb.MaxpbTelemetry.BlackBoxSecond value) {
        if (second30Builder_ == null) {
          if (((bitField1_ & 0x00000004) == 0x00000004) &&
              second30_ != maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance()) {
            second30_ =
              maxpb.MaxpbTelemetry.BlackBoxSecond.newBuilder(second30_).mergeFrom(value).buildPartial();
          } else {
            second30_ = value;
          }
          onChanged();
        } else {
          second30Builder_.mergeFrom(value);
        }
        bitField1_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second30 = 35;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearSecond30() {
        if (second30Builder_ == null) {
          second30_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
          onChanged();
        } else {
          second30Builder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00000004);
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second30 = 35;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecond.Builder getSecond30Builder() {
        bitField1_ |= 0x00000004;
        onChanged();
        return getSecond30FieldBuilder().getBuilder();
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second30 = 35;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond30OrBuilder() {
        if (second30Builder_ != null) {
          return second30Builder_.getMessageOrBuilder();
        } else {
          return second30_;
        }
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second30 = 35;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder> 
          getSecond30FieldBuilder() {
        if (second30Builder_ == null) {
          second30Builder_ = new com.google.protobuf.SingleFieldBuilder<
              maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder>(
                  getSecond30(),
                  getParentForChildren(),
                  isClean());
          second30_ = null;
        }
        return second30Builder_;
      }

      private maxpb.MaxpbTelemetry.BlackBoxSecond second31_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder> second31Builder_;
      /**
       * <code>optional .maxpb.BlackBoxSecond second31 = 36;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasSecond31() {
        return ((bitField1_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second31 = 36;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecond getSecond31() {
        if (second31Builder_ == null) {
          return second31_;
        } else {
          return second31Builder_.getMessage();
        }
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second31 = 36;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setSecond31(maxpb.MaxpbTelemetry.BlackBoxSecond value) {
        if (second31Builder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          second31_ = value;
          onChanged();
        } else {
          second31Builder_.setMessage(value);
        }
        bitField1_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second31 = 36;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setSecond31(
          maxpb.MaxpbTelemetry.BlackBoxSecond.Builder builderForValue) {
        if (second31Builder_ == null) {
          second31_ = builderForValue.build();
          onChanged();
        } else {
          second31Builder_.setMessage(builderForValue.build());
        }
        bitField1_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second31 = 36;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder mergeSecond31(maxpb.MaxpbTelemetry.BlackBoxSecond value) {
        if (second31Builder_ == null) {
          if (((bitField1_ & 0x00000008) == 0x00000008) &&
              second31_ != maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance()) {
            second31_ =
              maxpb.MaxpbTelemetry.BlackBoxSecond.newBuilder(second31_).mergeFrom(value).buildPartial();
          } else {
            second31_ = value;
          }
          onChanged();
        } else {
          second31Builder_.mergeFrom(value);
        }
        bitField1_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second31 = 36;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearSecond31() {
        if (second31Builder_ == null) {
          second31_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
          onChanged();
        } else {
          second31Builder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00000008);
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second31 = 36;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecond.Builder getSecond31Builder() {
        bitField1_ |= 0x00000008;
        onChanged();
        return getSecond31FieldBuilder().getBuilder();
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second31 = 36;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond31OrBuilder() {
        if (second31Builder_ != null) {
          return second31Builder_.getMessageOrBuilder();
        } else {
          return second31_;
        }
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second31 = 36;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder> 
          getSecond31FieldBuilder() {
        if (second31Builder_ == null) {
          second31Builder_ = new com.google.protobuf.SingleFieldBuilder<
              maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder>(
                  getSecond31(),
                  getParentForChildren(),
                  isClean());
          second31_ = null;
        }
        return second31Builder_;
      }

      private maxpb.MaxpbTelemetry.BlackBoxSecond second32_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder> second32Builder_;
      /**
       * <code>optional .maxpb.BlackBoxSecond second32 = 37;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasSecond32() {
        return ((bitField1_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second32 = 37;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecond getSecond32() {
        if (second32Builder_ == null) {
          return second32_;
        } else {
          return second32Builder_.getMessage();
        }
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second32 = 37;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setSecond32(maxpb.MaxpbTelemetry.BlackBoxSecond value) {
        if (second32Builder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          second32_ = value;
          onChanged();
        } else {
          second32Builder_.setMessage(value);
        }
        bitField1_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second32 = 37;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setSecond32(
          maxpb.MaxpbTelemetry.BlackBoxSecond.Builder builderForValue) {
        if (second32Builder_ == null) {
          second32_ = builderForValue.build();
          onChanged();
        } else {
          second32Builder_.setMessage(builderForValue.build());
        }
        bitField1_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second32 = 37;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder mergeSecond32(maxpb.MaxpbTelemetry.BlackBoxSecond value) {
        if (second32Builder_ == null) {
          if (((bitField1_ & 0x00000010) == 0x00000010) &&
              second32_ != maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance()) {
            second32_ =
              maxpb.MaxpbTelemetry.BlackBoxSecond.newBuilder(second32_).mergeFrom(value).buildPartial();
          } else {
            second32_ = value;
          }
          onChanged();
        } else {
          second32Builder_.mergeFrom(value);
        }
        bitField1_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second32 = 37;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearSecond32() {
        if (second32Builder_ == null) {
          second32_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
          onChanged();
        } else {
          second32Builder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00000010);
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second32 = 37;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecond.Builder getSecond32Builder() {
        bitField1_ |= 0x00000010;
        onChanged();
        return getSecond32FieldBuilder().getBuilder();
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second32 = 37;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond32OrBuilder() {
        if (second32Builder_ != null) {
          return second32Builder_.getMessageOrBuilder();
        } else {
          return second32_;
        }
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second32 = 37;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder> 
          getSecond32FieldBuilder() {
        if (second32Builder_ == null) {
          second32Builder_ = new com.google.protobuf.SingleFieldBuilder<
              maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder>(
                  getSecond32(),
                  getParentForChildren(),
                  isClean());
          second32_ = null;
        }
        return second32Builder_;
      }

      private maxpb.MaxpbTelemetry.BlackBoxSecond second33_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder> second33Builder_;
      /**
       * <code>optional .maxpb.BlackBoxSecond second33 = 38;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasSecond33() {
        return ((bitField1_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second33 = 38;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecond getSecond33() {
        if (second33Builder_ == null) {
          return second33_;
        } else {
          return second33Builder_.getMessage();
        }
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second33 = 38;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setSecond33(maxpb.MaxpbTelemetry.BlackBoxSecond value) {
        if (second33Builder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          second33_ = value;
          onChanged();
        } else {
          second33Builder_.setMessage(value);
        }
        bitField1_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second33 = 38;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setSecond33(
          maxpb.MaxpbTelemetry.BlackBoxSecond.Builder builderForValue) {
        if (second33Builder_ == null) {
          second33_ = builderForValue.build();
          onChanged();
        } else {
          second33Builder_.setMessage(builderForValue.build());
        }
        bitField1_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second33 = 38;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder mergeSecond33(maxpb.MaxpbTelemetry.BlackBoxSecond value) {
        if (second33Builder_ == null) {
          if (((bitField1_ & 0x00000020) == 0x00000020) &&
              second33_ != maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance()) {
            second33_ =
              maxpb.MaxpbTelemetry.BlackBoxSecond.newBuilder(second33_).mergeFrom(value).buildPartial();
          } else {
            second33_ = value;
          }
          onChanged();
        } else {
          second33Builder_.mergeFrom(value);
        }
        bitField1_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second33 = 38;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearSecond33() {
        if (second33Builder_ == null) {
          second33_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
          onChanged();
        } else {
          second33Builder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00000020);
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second33 = 38;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecond.Builder getSecond33Builder() {
        bitField1_ |= 0x00000020;
        onChanged();
        return getSecond33FieldBuilder().getBuilder();
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second33 = 38;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond33OrBuilder() {
        if (second33Builder_ != null) {
          return second33Builder_.getMessageOrBuilder();
        } else {
          return second33_;
        }
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second33 = 38;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder> 
          getSecond33FieldBuilder() {
        if (second33Builder_ == null) {
          second33Builder_ = new com.google.protobuf.SingleFieldBuilder<
              maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder>(
                  getSecond33(),
                  getParentForChildren(),
                  isClean());
          second33_ = null;
        }
        return second33Builder_;
      }

      private maxpb.MaxpbTelemetry.BlackBoxSecond second34_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder> second34Builder_;
      /**
       * <code>optional .maxpb.BlackBoxSecond second34 = 39;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasSecond34() {
        return ((bitField1_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second34 = 39;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecond getSecond34() {
        if (second34Builder_ == null) {
          return second34_;
        } else {
          return second34Builder_.getMessage();
        }
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second34 = 39;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setSecond34(maxpb.MaxpbTelemetry.BlackBoxSecond value) {
        if (second34Builder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          second34_ = value;
          onChanged();
        } else {
          second34Builder_.setMessage(value);
        }
        bitField1_ |= 0x00000040;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second34 = 39;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setSecond34(
          maxpb.MaxpbTelemetry.BlackBoxSecond.Builder builderForValue) {
        if (second34Builder_ == null) {
          second34_ = builderForValue.build();
          onChanged();
        } else {
          second34Builder_.setMessage(builderForValue.build());
        }
        bitField1_ |= 0x00000040;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second34 = 39;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder mergeSecond34(maxpb.MaxpbTelemetry.BlackBoxSecond value) {
        if (second34Builder_ == null) {
          if (((bitField1_ & 0x00000040) == 0x00000040) &&
              second34_ != maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance()) {
            second34_ =
              maxpb.MaxpbTelemetry.BlackBoxSecond.newBuilder(second34_).mergeFrom(value).buildPartial();
          } else {
            second34_ = value;
          }
          onChanged();
        } else {
          second34Builder_.mergeFrom(value);
        }
        bitField1_ |= 0x00000040;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second34 = 39;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearSecond34() {
        if (second34Builder_ == null) {
          second34_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
          onChanged();
        } else {
          second34Builder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00000040);
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second34 = 39;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecond.Builder getSecond34Builder() {
        bitField1_ |= 0x00000040;
        onChanged();
        return getSecond34FieldBuilder().getBuilder();
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second34 = 39;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond34OrBuilder() {
        if (second34Builder_ != null) {
          return second34Builder_.getMessageOrBuilder();
        } else {
          return second34_;
        }
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second34 = 39;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder> 
          getSecond34FieldBuilder() {
        if (second34Builder_ == null) {
          second34Builder_ = new com.google.protobuf.SingleFieldBuilder<
              maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder>(
                  getSecond34(),
                  getParentForChildren(),
                  isClean());
          second34_ = null;
        }
        return second34Builder_;
      }

      private maxpb.MaxpbTelemetry.BlackBoxSecond second35_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder> second35Builder_;
      /**
       * <code>optional .maxpb.BlackBoxSecond second35 = 40;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasSecond35() {
        return ((bitField1_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second35 = 40;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecond getSecond35() {
        if (second35Builder_ == null) {
          return second35_;
        } else {
          return second35Builder_.getMessage();
        }
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second35 = 40;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setSecond35(maxpb.MaxpbTelemetry.BlackBoxSecond value) {
        if (second35Builder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          second35_ = value;
          onChanged();
        } else {
          second35Builder_.setMessage(value);
        }
        bitField1_ |= 0x00000080;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second35 = 40;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setSecond35(
          maxpb.MaxpbTelemetry.BlackBoxSecond.Builder builderForValue) {
        if (second35Builder_ == null) {
          second35_ = builderForValue.build();
          onChanged();
        } else {
          second35Builder_.setMessage(builderForValue.build());
        }
        bitField1_ |= 0x00000080;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second35 = 40;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder mergeSecond35(maxpb.MaxpbTelemetry.BlackBoxSecond value) {
        if (second35Builder_ == null) {
          if (((bitField1_ & 0x00000080) == 0x00000080) &&
              second35_ != maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance()) {
            second35_ =
              maxpb.MaxpbTelemetry.BlackBoxSecond.newBuilder(second35_).mergeFrom(value).buildPartial();
          } else {
            second35_ = value;
          }
          onChanged();
        } else {
          second35Builder_.mergeFrom(value);
        }
        bitField1_ |= 0x00000080;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second35 = 40;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearSecond35() {
        if (second35Builder_ == null) {
          second35_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
          onChanged();
        } else {
          second35Builder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00000080);
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second35 = 40;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecond.Builder getSecond35Builder() {
        bitField1_ |= 0x00000080;
        onChanged();
        return getSecond35FieldBuilder().getBuilder();
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second35 = 40;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond35OrBuilder() {
        if (second35Builder_ != null) {
          return second35Builder_.getMessageOrBuilder();
        } else {
          return second35_;
        }
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second35 = 40;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder> 
          getSecond35FieldBuilder() {
        if (second35Builder_ == null) {
          second35Builder_ = new com.google.protobuf.SingleFieldBuilder<
              maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder>(
                  getSecond35(),
                  getParentForChildren(),
                  isClean());
          second35_ = null;
        }
        return second35Builder_;
      }

      private maxpb.MaxpbTelemetry.BlackBoxSecond second36_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder> second36Builder_;
      /**
       * <code>optional .maxpb.BlackBoxSecond second36 = 41;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasSecond36() {
        return ((bitField1_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second36 = 41;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecond getSecond36() {
        if (second36Builder_ == null) {
          return second36_;
        } else {
          return second36Builder_.getMessage();
        }
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second36 = 41;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setSecond36(maxpb.MaxpbTelemetry.BlackBoxSecond value) {
        if (second36Builder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          second36_ = value;
          onChanged();
        } else {
          second36Builder_.setMessage(value);
        }
        bitField1_ |= 0x00000100;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second36 = 41;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setSecond36(
          maxpb.MaxpbTelemetry.BlackBoxSecond.Builder builderForValue) {
        if (second36Builder_ == null) {
          second36_ = builderForValue.build();
          onChanged();
        } else {
          second36Builder_.setMessage(builderForValue.build());
        }
        bitField1_ |= 0x00000100;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second36 = 41;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder mergeSecond36(maxpb.MaxpbTelemetry.BlackBoxSecond value) {
        if (second36Builder_ == null) {
          if (((bitField1_ & 0x00000100) == 0x00000100) &&
              second36_ != maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance()) {
            second36_ =
              maxpb.MaxpbTelemetry.BlackBoxSecond.newBuilder(second36_).mergeFrom(value).buildPartial();
          } else {
            second36_ = value;
          }
          onChanged();
        } else {
          second36Builder_.mergeFrom(value);
        }
        bitField1_ |= 0x00000100;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second36 = 41;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearSecond36() {
        if (second36Builder_ == null) {
          second36_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
          onChanged();
        } else {
          second36Builder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00000100);
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second36 = 41;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecond.Builder getSecond36Builder() {
        bitField1_ |= 0x00000100;
        onChanged();
        return getSecond36FieldBuilder().getBuilder();
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second36 = 41;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond36OrBuilder() {
        if (second36Builder_ != null) {
          return second36Builder_.getMessageOrBuilder();
        } else {
          return second36_;
        }
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second36 = 41;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder> 
          getSecond36FieldBuilder() {
        if (second36Builder_ == null) {
          second36Builder_ = new com.google.protobuf.SingleFieldBuilder<
              maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder>(
                  getSecond36(),
                  getParentForChildren(),
                  isClean());
          second36_ = null;
        }
        return second36Builder_;
      }

      private maxpb.MaxpbTelemetry.BlackBoxSecond second37_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder> second37Builder_;
      /**
       * <code>optional .maxpb.BlackBoxSecond second37 = 42;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasSecond37() {
        return ((bitField1_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second37 = 42;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecond getSecond37() {
        if (second37Builder_ == null) {
          return second37_;
        } else {
          return second37Builder_.getMessage();
        }
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second37 = 42;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setSecond37(maxpb.MaxpbTelemetry.BlackBoxSecond value) {
        if (second37Builder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          second37_ = value;
          onChanged();
        } else {
          second37Builder_.setMessage(value);
        }
        bitField1_ |= 0x00000200;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second37 = 42;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setSecond37(
          maxpb.MaxpbTelemetry.BlackBoxSecond.Builder builderForValue) {
        if (second37Builder_ == null) {
          second37_ = builderForValue.build();
          onChanged();
        } else {
          second37Builder_.setMessage(builderForValue.build());
        }
        bitField1_ |= 0x00000200;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second37 = 42;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder mergeSecond37(maxpb.MaxpbTelemetry.BlackBoxSecond value) {
        if (second37Builder_ == null) {
          if (((bitField1_ & 0x00000200) == 0x00000200) &&
              second37_ != maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance()) {
            second37_ =
              maxpb.MaxpbTelemetry.BlackBoxSecond.newBuilder(second37_).mergeFrom(value).buildPartial();
          } else {
            second37_ = value;
          }
          onChanged();
        } else {
          second37Builder_.mergeFrom(value);
        }
        bitField1_ |= 0x00000200;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second37 = 42;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearSecond37() {
        if (second37Builder_ == null) {
          second37_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
          onChanged();
        } else {
          second37Builder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00000200);
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second37 = 42;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecond.Builder getSecond37Builder() {
        bitField1_ |= 0x00000200;
        onChanged();
        return getSecond37FieldBuilder().getBuilder();
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second37 = 42;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond37OrBuilder() {
        if (second37Builder_ != null) {
          return second37Builder_.getMessageOrBuilder();
        } else {
          return second37_;
        }
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second37 = 42;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder> 
          getSecond37FieldBuilder() {
        if (second37Builder_ == null) {
          second37Builder_ = new com.google.protobuf.SingleFieldBuilder<
              maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder>(
                  getSecond37(),
                  getParentForChildren(),
                  isClean());
          second37_ = null;
        }
        return second37Builder_;
      }

      private maxpb.MaxpbTelemetry.BlackBoxSecond second38_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder> second38Builder_;
      /**
       * <code>optional .maxpb.BlackBoxSecond second38 = 43;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasSecond38() {
        return ((bitField1_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second38 = 43;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecond getSecond38() {
        if (second38Builder_ == null) {
          return second38_;
        } else {
          return second38Builder_.getMessage();
        }
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second38 = 43;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setSecond38(maxpb.MaxpbTelemetry.BlackBoxSecond value) {
        if (second38Builder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          second38_ = value;
          onChanged();
        } else {
          second38Builder_.setMessage(value);
        }
        bitField1_ |= 0x00000400;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second38 = 43;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setSecond38(
          maxpb.MaxpbTelemetry.BlackBoxSecond.Builder builderForValue) {
        if (second38Builder_ == null) {
          second38_ = builderForValue.build();
          onChanged();
        } else {
          second38Builder_.setMessage(builderForValue.build());
        }
        bitField1_ |= 0x00000400;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second38 = 43;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder mergeSecond38(maxpb.MaxpbTelemetry.BlackBoxSecond value) {
        if (second38Builder_ == null) {
          if (((bitField1_ & 0x00000400) == 0x00000400) &&
              second38_ != maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance()) {
            second38_ =
              maxpb.MaxpbTelemetry.BlackBoxSecond.newBuilder(second38_).mergeFrom(value).buildPartial();
          } else {
            second38_ = value;
          }
          onChanged();
        } else {
          second38Builder_.mergeFrom(value);
        }
        bitField1_ |= 0x00000400;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second38 = 43;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearSecond38() {
        if (second38Builder_ == null) {
          second38_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
          onChanged();
        } else {
          second38Builder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00000400);
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second38 = 43;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecond.Builder getSecond38Builder() {
        bitField1_ |= 0x00000400;
        onChanged();
        return getSecond38FieldBuilder().getBuilder();
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second38 = 43;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond38OrBuilder() {
        if (second38Builder_ != null) {
          return second38Builder_.getMessageOrBuilder();
        } else {
          return second38_;
        }
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second38 = 43;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder> 
          getSecond38FieldBuilder() {
        if (second38Builder_ == null) {
          second38Builder_ = new com.google.protobuf.SingleFieldBuilder<
              maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder>(
                  getSecond38(),
                  getParentForChildren(),
                  isClean());
          second38_ = null;
        }
        return second38Builder_;
      }

      private maxpb.MaxpbTelemetry.BlackBoxSecond second39_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder> second39Builder_;
      /**
       * <code>optional .maxpb.BlackBoxSecond second39 = 44;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasSecond39() {
        return ((bitField1_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second39 = 44;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecond getSecond39() {
        if (second39Builder_ == null) {
          return second39_;
        } else {
          return second39Builder_.getMessage();
        }
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second39 = 44;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setSecond39(maxpb.MaxpbTelemetry.BlackBoxSecond value) {
        if (second39Builder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          second39_ = value;
          onChanged();
        } else {
          second39Builder_.setMessage(value);
        }
        bitField1_ |= 0x00000800;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second39 = 44;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setSecond39(
          maxpb.MaxpbTelemetry.BlackBoxSecond.Builder builderForValue) {
        if (second39Builder_ == null) {
          second39_ = builderForValue.build();
          onChanged();
        } else {
          second39Builder_.setMessage(builderForValue.build());
        }
        bitField1_ |= 0x00000800;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second39 = 44;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder mergeSecond39(maxpb.MaxpbTelemetry.BlackBoxSecond value) {
        if (second39Builder_ == null) {
          if (((bitField1_ & 0x00000800) == 0x00000800) &&
              second39_ != maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance()) {
            second39_ =
              maxpb.MaxpbTelemetry.BlackBoxSecond.newBuilder(second39_).mergeFrom(value).buildPartial();
          } else {
            second39_ = value;
          }
          onChanged();
        } else {
          second39Builder_.mergeFrom(value);
        }
        bitField1_ |= 0x00000800;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second39 = 44;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearSecond39() {
        if (second39Builder_ == null) {
          second39_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
          onChanged();
        } else {
          second39Builder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00000800);
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second39 = 44;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecond.Builder getSecond39Builder() {
        bitField1_ |= 0x00000800;
        onChanged();
        return getSecond39FieldBuilder().getBuilder();
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second39 = 44;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond39OrBuilder() {
        if (second39Builder_ != null) {
          return second39Builder_.getMessageOrBuilder();
        } else {
          return second39_;
        }
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second39 = 44;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder> 
          getSecond39FieldBuilder() {
        if (second39Builder_ == null) {
          second39Builder_ = new com.google.protobuf.SingleFieldBuilder<
              maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder>(
                  getSecond39(),
                  getParentForChildren(),
                  isClean());
          second39_ = null;
        }
        return second39Builder_;
      }

      private maxpb.MaxpbTelemetry.BlackBoxSecond second40_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder> second40Builder_;
      /**
       * <code>optional .maxpb.BlackBoxSecond second40 = 45;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasSecond40() {
        return ((bitField1_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second40 = 45;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecond getSecond40() {
        if (second40Builder_ == null) {
          return second40_;
        } else {
          return second40Builder_.getMessage();
        }
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second40 = 45;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setSecond40(maxpb.MaxpbTelemetry.BlackBoxSecond value) {
        if (second40Builder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          second40_ = value;
          onChanged();
        } else {
          second40Builder_.setMessage(value);
        }
        bitField1_ |= 0x00001000;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second40 = 45;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setSecond40(
          maxpb.MaxpbTelemetry.BlackBoxSecond.Builder builderForValue) {
        if (second40Builder_ == null) {
          second40_ = builderForValue.build();
          onChanged();
        } else {
          second40Builder_.setMessage(builderForValue.build());
        }
        bitField1_ |= 0x00001000;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second40 = 45;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder mergeSecond40(maxpb.MaxpbTelemetry.BlackBoxSecond value) {
        if (second40Builder_ == null) {
          if (((bitField1_ & 0x00001000) == 0x00001000) &&
              second40_ != maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance()) {
            second40_ =
              maxpb.MaxpbTelemetry.BlackBoxSecond.newBuilder(second40_).mergeFrom(value).buildPartial();
          } else {
            second40_ = value;
          }
          onChanged();
        } else {
          second40Builder_.mergeFrom(value);
        }
        bitField1_ |= 0x00001000;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second40 = 45;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearSecond40() {
        if (second40Builder_ == null) {
          second40_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
          onChanged();
        } else {
          second40Builder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00001000);
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second40 = 45;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecond.Builder getSecond40Builder() {
        bitField1_ |= 0x00001000;
        onChanged();
        return getSecond40FieldBuilder().getBuilder();
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second40 = 45;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond40OrBuilder() {
        if (second40Builder_ != null) {
          return second40Builder_.getMessageOrBuilder();
        } else {
          return second40_;
        }
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second40 = 45;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder> 
          getSecond40FieldBuilder() {
        if (second40Builder_ == null) {
          second40Builder_ = new com.google.protobuf.SingleFieldBuilder<
              maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder>(
                  getSecond40(),
                  getParentForChildren(),
                  isClean());
          second40_ = null;
        }
        return second40Builder_;
      }

      private maxpb.MaxpbTelemetry.BlackBoxSecond second41_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder> second41Builder_;
      /**
       * <code>optional .maxpb.BlackBoxSecond second41 = 46;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasSecond41() {
        return ((bitField1_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second41 = 46;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecond getSecond41() {
        if (second41Builder_ == null) {
          return second41_;
        } else {
          return second41Builder_.getMessage();
        }
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second41 = 46;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setSecond41(maxpb.MaxpbTelemetry.BlackBoxSecond value) {
        if (second41Builder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          second41_ = value;
          onChanged();
        } else {
          second41Builder_.setMessage(value);
        }
        bitField1_ |= 0x00002000;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second41 = 46;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setSecond41(
          maxpb.MaxpbTelemetry.BlackBoxSecond.Builder builderForValue) {
        if (second41Builder_ == null) {
          second41_ = builderForValue.build();
          onChanged();
        } else {
          second41Builder_.setMessage(builderForValue.build());
        }
        bitField1_ |= 0x00002000;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second41 = 46;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder mergeSecond41(maxpb.MaxpbTelemetry.BlackBoxSecond value) {
        if (second41Builder_ == null) {
          if (((bitField1_ & 0x00002000) == 0x00002000) &&
              second41_ != maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance()) {
            second41_ =
              maxpb.MaxpbTelemetry.BlackBoxSecond.newBuilder(second41_).mergeFrom(value).buildPartial();
          } else {
            second41_ = value;
          }
          onChanged();
        } else {
          second41Builder_.mergeFrom(value);
        }
        bitField1_ |= 0x00002000;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second41 = 46;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearSecond41() {
        if (second41Builder_ == null) {
          second41_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
          onChanged();
        } else {
          second41Builder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00002000);
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second41 = 46;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecond.Builder getSecond41Builder() {
        bitField1_ |= 0x00002000;
        onChanged();
        return getSecond41FieldBuilder().getBuilder();
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second41 = 46;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond41OrBuilder() {
        if (second41Builder_ != null) {
          return second41Builder_.getMessageOrBuilder();
        } else {
          return second41_;
        }
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second41 = 46;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder> 
          getSecond41FieldBuilder() {
        if (second41Builder_ == null) {
          second41Builder_ = new com.google.protobuf.SingleFieldBuilder<
              maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder>(
                  getSecond41(),
                  getParentForChildren(),
                  isClean());
          second41_ = null;
        }
        return second41Builder_;
      }

      private maxpb.MaxpbTelemetry.BlackBoxSecond second42_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder> second42Builder_;
      /**
       * <code>optional .maxpb.BlackBoxSecond second42 = 47;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasSecond42() {
        return ((bitField1_ & 0x00004000) == 0x00004000);
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second42 = 47;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecond getSecond42() {
        if (second42Builder_ == null) {
          return second42_;
        } else {
          return second42Builder_.getMessage();
        }
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second42 = 47;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setSecond42(maxpb.MaxpbTelemetry.BlackBoxSecond value) {
        if (second42Builder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          second42_ = value;
          onChanged();
        } else {
          second42Builder_.setMessage(value);
        }
        bitField1_ |= 0x00004000;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second42 = 47;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setSecond42(
          maxpb.MaxpbTelemetry.BlackBoxSecond.Builder builderForValue) {
        if (second42Builder_ == null) {
          second42_ = builderForValue.build();
          onChanged();
        } else {
          second42Builder_.setMessage(builderForValue.build());
        }
        bitField1_ |= 0x00004000;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second42 = 47;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder mergeSecond42(maxpb.MaxpbTelemetry.BlackBoxSecond value) {
        if (second42Builder_ == null) {
          if (((bitField1_ & 0x00004000) == 0x00004000) &&
              second42_ != maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance()) {
            second42_ =
              maxpb.MaxpbTelemetry.BlackBoxSecond.newBuilder(second42_).mergeFrom(value).buildPartial();
          } else {
            second42_ = value;
          }
          onChanged();
        } else {
          second42Builder_.mergeFrom(value);
        }
        bitField1_ |= 0x00004000;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second42 = 47;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearSecond42() {
        if (second42Builder_ == null) {
          second42_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
          onChanged();
        } else {
          second42Builder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00004000);
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second42 = 47;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecond.Builder getSecond42Builder() {
        bitField1_ |= 0x00004000;
        onChanged();
        return getSecond42FieldBuilder().getBuilder();
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second42 = 47;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond42OrBuilder() {
        if (second42Builder_ != null) {
          return second42Builder_.getMessageOrBuilder();
        } else {
          return second42_;
        }
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second42 = 47;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder> 
          getSecond42FieldBuilder() {
        if (second42Builder_ == null) {
          second42Builder_ = new com.google.protobuf.SingleFieldBuilder<
              maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder>(
                  getSecond42(),
                  getParentForChildren(),
                  isClean());
          second42_ = null;
        }
        return second42Builder_;
      }

      private maxpb.MaxpbTelemetry.BlackBoxSecond second43_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder> second43Builder_;
      /**
       * <code>optional .maxpb.BlackBoxSecond second43 = 48;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasSecond43() {
        return ((bitField1_ & 0x00008000) == 0x00008000);
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second43 = 48;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecond getSecond43() {
        if (second43Builder_ == null) {
          return second43_;
        } else {
          return second43Builder_.getMessage();
        }
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second43 = 48;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setSecond43(maxpb.MaxpbTelemetry.BlackBoxSecond value) {
        if (second43Builder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          second43_ = value;
          onChanged();
        } else {
          second43Builder_.setMessage(value);
        }
        bitField1_ |= 0x00008000;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second43 = 48;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setSecond43(
          maxpb.MaxpbTelemetry.BlackBoxSecond.Builder builderForValue) {
        if (second43Builder_ == null) {
          second43_ = builderForValue.build();
          onChanged();
        } else {
          second43Builder_.setMessage(builderForValue.build());
        }
        bitField1_ |= 0x00008000;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second43 = 48;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder mergeSecond43(maxpb.MaxpbTelemetry.BlackBoxSecond value) {
        if (second43Builder_ == null) {
          if (((bitField1_ & 0x00008000) == 0x00008000) &&
              second43_ != maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance()) {
            second43_ =
              maxpb.MaxpbTelemetry.BlackBoxSecond.newBuilder(second43_).mergeFrom(value).buildPartial();
          } else {
            second43_ = value;
          }
          onChanged();
        } else {
          second43Builder_.mergeFrom(value);
        }
        bitField1_ |= 0x00008000;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second43 = 48;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearSecond43() {
        if (second43Builder_ == null) {
          second43_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
          onChanged();
        } else {
          second43Builder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00008000);
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second43 = 48;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecond.Builder getSecond43Builder() {
        bitField1_ |= 0x00008000;
        onChanged();
        return getSecond43FieldBuilder().getBuilder();
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second43 = 48;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond43OrBuilder() {
        if (second43Builder_ != null) {
          return second43Builder_.getMessageOrBuilder();
        } else {
          return second43_;
        }
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second43 = 48;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder> 
          getSecond43FieldBuilder() {
        if (second43Builder_ == null) {
          second43Builder_ = new com.google.protobuf.SingleFieldBuilder<
              maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder>(
                  getSecond43(),
                  getParentForChildren(),
                  isClean());
          second43_ = null;
        }
        return second43Builder_;
      }

      private maxpb.MaxpbTelemetry.BlackBoxSecond second44_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder> second44Builder_;
      /**
       * <code>optional .maxpb.BlackBoxSecond second44 = 49;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasSecond44() {
        return ((bitField1_ & 0x00010000) == 0x00010000);
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second44 = 49;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecond getSecond44() {
        if (second44Builder_ == null) {
          return second44_;
        } else {
          return second44Builder_.getMessage();
        }
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second44 = 49;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setSecond44(maxpb.MaxpbTelemetry.BlackBoxSecond value) {
        if (second44Builder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          second44_ = value;
          onChanged();
        } else {
          second44Builder_.setMessage(value);
        }
        bitField1_ |= 0x00010000;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second44 = 49;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setSecond44(
          maxpb.MaxpbTelemetry.BlackBoxSecond.Builder builderForValue) {
        if (second44Builder_ == null) {
          second44_ = builderForValue.build();
          onChanged();
        } else {
          second44Builder_.setMessage(builderForValue.build());
        }
        bitField1_ |= 0x00010000;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second44 = 49;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder mergeSecond44(maxpb.MaxpbTelemetry.BlackBoxSecond value) {
        if (second44Builder_ == null) {
          if (((bitField1_ & 0x00010000) == 0x00010000) &&
              second44_ != maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance()) {
            second44_ =
              maxpb.MaxpbTelemetry.BlackBoxSecond.newBuilder(second44_).mergeFrom(value).buildPartial();
          } else {
            second44_ = value;
          }
          onChanged();
        } else {
          second44Builder_.mergeFrom(value);
        }
        bitField1_ |= 0x00010000;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second44 = 49;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearSecond44() {
        if (second44Builder_ == null) {
          second44_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
          onChanged();
        } else {
          second44Builder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00010000);
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second44 = 49;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecond.Builder getSecond44Builder() {
        bitField1_ |= 0x00010000;
        onChanged();
        return getSecond44FieldBuilder().getBuilder();
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second44 = 49;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond44OrBuilder() {
        if (second44Builder_ != null) {
          return second44Builder_.getMessageOrBuilder();
        } else {
          return second44_;
        }
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second44 = 49;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder> 
          getSecond44FieldBuilder() {
        if (second44Builder_ == null) {
          second44Builder_ = new com.google.protobuf.SingleFieldBuilder<
              maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder>(
                  getSecond44(),
                  getParentForChildren(),
                  isClean());
          second44_ = null;
        }
        return second44Builder_;
      }

      private maxpb.MaxpbTelemetry.BlackBoxSecond second45_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder> second45Builder_;
      /**
       * <code>optional .maxpb.BlackBoxSecond second45 = 50;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasSecond45() {
        return ((bitField1_ & 0x00020000) == 0x00020000);
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second45 = 50;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecond getSecond45() {
        if (second45Builder_ == null) {
          return second45_;
        } else {
          return second45Builder_.getMessage();
        }
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second45 = 50;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setSecond45(maxpb.MaxpbTelemetry.BlackBoxSecond value) {
        if (second45Builder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          second45_ = value;
          onChanged();
        } else {
          second45Builder_.setMessage(value);
        }
        bitField1_ |= 0x00020000;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second45 = 50;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setSecond45(
          maxpb.MaxpbTelemetry.BlackBoxSecond.Builder builderForValue) {
        if (second45Builder_ == null) {
          second45_ = builderForValue.build();
          onChanged();
        } else {
          second45Builder_.setMessage(builderForValue.build());
        }
        bitField1_ |= 0x00020000;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second45 = 50;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder mergeSecond45(maxpb.MaxpbTelemetry.BlackBoxSecond value) {
        if (second45Builder_ == null) {
          if (((bitField1_ & 0x00020000) == 0x00020000) &&
              second45_ != maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance()) {
            second45_ =
              maxpb.MaxpbTelemetry.BlackBoxSecond.newBuilder(second45_).mergeFrom(value).buildPartial();
          } else {
            second45_ = value;
          }
          onChanged();
        } else {
          second45Builder_.mergeFrom(value);
        }
        bitField1_ |= 0x00020000;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second45 = 50;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearSecond45() {
        if (second45Builder_ == null) {
          second45_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
          onChanged();
        } else {
          second45Builder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00020000);
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second45 = 50;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecond.Builder getSecond45Builder() {
        bitField1_ |= 0x00020000;
        onChanged();
        return getSecond45FieldBuilder().getBuilder();
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second45 = 50;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond45OrBuilder() {
        if (second45Builder_ != null) {
          return second45Builder_.getMessageOrBuilder();
        } else {
          return second45_;
        }
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second45 = 50;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder> 
          getSecond45FieldBuilder() {
        if (second45Builder_ == null) {
          second45Builder_ = new com.google.protobuf.SingleFieldBuilder<
              maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder>(
                  getSecond45(),
                  getParentForChildren(),
                  isClean());
          second45_ = null;
        }
        return second45Builder_;
      }

      private maxpb.MaxpbTelemetry.BlackBoxSecond second46_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder> second46Builder_;
      /**
       * <code>optional .maxpb.BlackBoxSecond second46 = 51;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasSecond46() {
        return ((bitField1_ & 0x00040000) == 0x00040000);
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second46 = 51;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecond getSecond46() {
        if (second46Builder_ == null) {
          return second46_;
        } else {
          return second46Builder_.getMessage();
        }
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second46 = 51;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setSecond46(maxpb.MaxpbTelemetry.BlackBoxSecond value) {
        if (second46Builder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          second46_ = value;
          onChanged();
        } else {
          second46Builder_.setMessage(value);
        }
        bitField1_ |= 0x00040000;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second46 = 51;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setSecond46(
          maxpb.MaxpbTelemetry.BlackBoxSecond.Builder builderForValue) {
        if (second46Builder_ == null) {
          second46_ = builderForValue.build();
          onChanged();
        } else {
          second46Builder_.setMessage(builderForValue.build());
        }
        bitField1_ |= 0x00040000;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second46 = 51;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder mergeSecond46(maxpb.MaxpbTelemetry.BlackBoxSecond value) {
        if (second46Builder_ == null) {
          if (((bitField1_ & 0x00040000) == 0x00040000) &&
              second46_ != maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance()) {
            second46_ =
              maxpb.MaxpbTelemetry.BlackBoxSecond.newBuilder(second46_).mergeFrom(value).buildPartial();
          } else {
            second46_ = value;
          }
          onChanged();
        } else {
          second46Builder_.mergeFrom(value);
        }
        bitField1_ |= 0x00040000;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second46 = 51;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearSecond46() {
        if (second46Builder_ == null) {
          second46_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
          onChanged();
        } else {
          second46Builder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00040000);
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second46 = 51;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecond.Builder getSecond46Builder() {
        bitField1_ |= 0x00040000;
        onChanged();
        return getSecond46FieldBuilder().getBuilder();
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second46 = 51;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond46OrBuilder() {
        if (second46Builder_ != null) {
          return second46Builder_.getMessageOrBuilder();
        } else {
          return second46_;
        }
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second46 = 51;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder> 
          getSecond46FieldBuilder() {
        if (second46Builder_ == null) {
          second46Builder_ = new com.google.protobuf.SingleFieldBuilder<
              maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder>(
                  getSecond46(),
                  getParentForChildren(),
                  isClean());
          second46_ = null;
        }
        return second46Builder_;
      }

      private maxpb.MaxpbTelemetry.BlackBoxSecond second47_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder> second47Builder_;
      /**
       * <code>optional .maxpb.BlackBoxSecond second47 = 52;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasSecond47() {
        return ((bitField1_ & 0x00080000) == 0x00080000);
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second47 = 52;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecond getSecond47() {
        if (second47Builder_ == null) {
          return second47_;
        } else {
          return second47Builder_.getMessage();
        }
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second47 = 52;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setSecond47(maxpb.MaxpbTelemetry.BlackBoxSecond value) {
        if (second47Builder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          second47_ = value;
          onChanged();
        } else {
          second47Builder_.setMessage(value);
        }
        bitField1_ |= 0x00080000;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second47 = 52;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setSecond47(
          maxpb.MaxpbTelemetry.BlackBoxSecond.Builder builderForValue) {
        if (second47Builder_ == null) {
          second47_ = builderForValue.build();
          onChanged();
        } else {
          second47Builder_.setMessage(builderForValue.build());
        }
        bitField1_ |= 0x00080000;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second47 = 52;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder mergeSecond47(maxpb.MaxpbTelemetry.BlackBoxSecond value) {
        if (second47Builder_ == null) {
          if (((bitField1_ & 0x00080000) == 0x00080000) &&
              second47_ != maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance()) {
            second47_ =
              maxpb.MaxpbTelemetry.BlackBoxSecond.newBuilder(second47_).mergeFrom(value).buildPartial();
          } else {
            second47_ = value;
          }
          onChanged();
        } else {
          second47Builder_.mergeFrom(value);
        }
        bitField1_ |= 0x00080000;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second47 = 52;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearSecond47() {
        if (second47Builder_ == null) {
          second47_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
          onChanged();
        } else {
          second47Builder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00080000);
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second47 = 52;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecond.Builder getSecond47Builder() {
        bitField1_ |= 0x00080000;
        onChanged();
        return getSecond47FieldBuilder().getBuilder();
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second47 = 52;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond47OrBuilder() {
        if (second47Builder_ != null) {
          return second47Builder_.getMessageOrBuilder();
        } else {
          return second47_;
        }
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second47 = 52;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder> 
          getSecond47FieldBuilder() {
        if (second47Builder_ == null) {
          second47Builder_ = new com.google.protobuf.SingleFieldBuilder<
              maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder>(
                  getSecond47(),
                  getParentForChildren(),
                  isClean());
          second47_ = null;
        }
        return second47Builder_;
      }

      private maxpb.MaxpbTelemetry.BlackBoxSecond second48_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder> second48Builder_;
      /**
       * <code>optional .maxpb.BlackBoxSecond second48 = 53;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasSecond48() {
        return ((bitField1_ & 0x00100000) == 0x00100000);
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second48 = 53;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecond getSecond48() {
        if (second48Builder_ == null) {
          return second48_;
        } else {
          return second48Builder_.getMessage();
        }
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second48 = 53;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setSecond48(maxpb.MaxpbTelemetry.BlackBoxSecond value) {
        if (second48Builder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          second48_ = value;
          onChanged();
        } else {
          second48Builder_.setMessage(value);
        }
        bitField1_ |= 0x00100000;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second48 = 53;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setSecond48(
          maxpb.MaxpbTelemetry.BlackBoxSecond.Builder builderForValue) {
        if (second48Builder_ == null) {
          second48_ = builderForValue.build();
          onChanged();
        } else {
          second48Builder_.setMessage(builderForValue.build());
        }
        bitField1_ |= 0x00100000;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second48 = 53;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder mergeSecond48(maxpb.MaxpbTelemetry.BlackBoxSecond value) {
        if (second48Builder_ == null) {
          if (((bitField1_ & 0x00100000) == 0x00100000) &&
              second48_ != maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance()) {
            second48_ =
              maxpb.MaxpbTelemetry.BlackBoxSecond.newBuilder(second48_).mergeFrom(value).buildPartial();
          } else {
            second48_ = value;
          }
          onChanged();
        } else {
          second48Builder_.mergeFrom(value);
        }
        bitField1_ |= 0x00100000;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second48 = 53;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearSecond48() {
        if (second48Builder_ == null) {
          second48_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
          onChanged();
        } else {
          second48Builder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00100000);
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second48 = 53;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecond.Builder getSecond48Builder() {
        bitField1_ |= 0x00100000;
        onChanged();
        return getSecond48FieldBuilder().getBuilder();
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second48 = 53;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond48OrBuilder() {
        if (second48Builder_ != null) {
          return second48Builder_.getMessageOrBuilder();
        } else {
          return second48_;
        }
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second48 = 53;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder> 
          getSecond48FieldBuilder() {
        if (second48Builder_ == null) {
          second48Builder_ = new com.google.protobuf.SingleFieldBuilder<
              maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder>(
                  getSecond48(),
                  getParentForChildren(),
                  isClean());
          second48_ = null;
        }
        return second48Builder_;
      }

      private maxpb.MaxpbTelemetry.BlackBoxSecond second49_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder> second49Builder_;
      /**
       * <code>optional .maxpb.BlackBoxSecond second49 = 54;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasSecond49() {
        return ((bitField1_ & 0x00200000) == 0x00200000);
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second49 = 54;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecond getSecond49() {
        if (second49Builder_ == null) {
          return second49_;
        } else {
          return second49Builder_.getMessage();
        }
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second49 = 54;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setSecond49(maxpb.MaxpbTelemetry.BlackBoxSecond value) {
        if (second49Builder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          second49_ = value;
          onChanged();
        } else {
          second49Builder_.setMessage(value);
        }
        bitField1_ |= 0x00200000;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second49 = 54;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setSecond49(
          maxpb.MaxpbTelemetry.BlackBoxSecond.Builder builderForValue) {
        if (second49Builder_ == null) {
          second49_ = builderForValue.build();
          onChanged();
        } else {
          second49Builder_.setMessage(builderForValue.build());
        }
        bitField1_ |= 0x00200000;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second49 = 54;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder mergeSecond49(maxpb.MaxpbTelemetry.BlackBoxSecond value) {
        if (second49Builder_ == null) {
          if (((bitField1_ & 0x00200000) == 0x00200000) &&
              second49_ != maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance()) {
            second49_ =
              maxpb.MaxpbTelemetry.BlackBoxSecond.newBuilder(second49_).mergeFrom(value).buildPartial();
          } else {
            second49_ = value;
          }
          onChanged();
        } else {
          second49Builder_.mergeFrom(value);
        }
        bitField1_ |= 0x00200000;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second49 = 54;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearSecond49() {
        if (second49Builder_ == null) {
          second49_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
          onChanged();
        } else {
          second49Builder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00200000);
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second49 = 54;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecond.Builder getSecond49Builder() {
        bitField1_ |= 0x00200000;
        onChanged();
        return getSecond49FieldBuilder().getBuilder();
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second49 = 54;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond49OrBuilder() {
        if (second49Builder_ != null) {
          return second49Builder_.getMessageOrBuilder();
        } else {
          return second49_;
        }
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second49 = 54;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder> 
          getSecond49FieldBuilder() {
        if (second49Builder_ == null) {
          second49Builder_ = new com.google.protobuf.SingleFieldBuilder<
              maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder>(
                  getSecond49(),
                  getParentForChildren(),
                  isClean());
          second49_ = null;
        }
        return second49Builder_;
      }

      private maxpb.MaxpbTelemetry.BlackBoxSecond second50_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder> second50Builder_;
      /**
       * <code>optional .maxpb.BlackBoxSecond second50 = 55;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasSecond50() {
        return ((bitField1_ & 0x00400000) == 0x00400000);
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second50 = 55;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecond getSecond50() {
        if (second50Builder_ == null) {
          return second50_;
        } else {
          return second50Builder_.getMessage();
        }
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second50 = 55;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setSecond50(maxpb.MaxpbTelemetry.BlackBoxSecond value) {
        if (second50Builder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          second50_ = value;
          onChanged();
        } else {
          second50Builder_.setMessage(value);
        }
        bitField1_ |= 0x00400000;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second50 = 55;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setSecond50(
          maxpb.MaxpbTelemetry.BlackBoxSecond.Builder builderForValue) {
        if (second50Builder_ == null) {
          second50_ = builderForValue.build();
          onChanged();
        } else {
          second50Builder_.setMessage(builderForValue.build());
        }
        bitField1_ |= 0x00400000;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second50 = 55;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder mergeSecond50(maxpb.MaxpbTelemetry.BlackBoxSecond value) {
        if (second50Builder_ == null) {
          if (((bitField1_ & 0x00400000) == 0x00400000) &&
              second50_ != maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance()) {
            second50_ =
              maxpb.MaxpbTelemetry.BlackBoxSecond.newBuilder(second50_).mergeFrom(value).buildPartial();
          } else {
            second50_ = value;
          }
          onChanged();
        } else {
          second50Builder_.mergeFrom(value);
        }
        bitField1_ |= 0x00400000;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second50 = 55;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearSecond50() {
        if (second50Builder_ == null) {
          second50_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
          onChanged();
        } else {
          second50Builder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00400000);
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second50 = 55;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecond.Builder getSecond50Builder() {
        bitField1_ |= 0x00400000;
        onChanged();
        return getSecond50FieldBuilder().getBuilder();
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second50 = 55;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond50OrBuilder() {
        if (second50Builder_ != null) {
          return second50Builder_.getMessageOrBuilder();
        } else {
          return second50_;
        }
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second50 = 55;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder> 
          getSecond50FieldBuilder() {
        if (second50Builder_ == null) {
          second50Builder_ = new com.google.protobuf.SingleFieldBuilder<
              maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder>(
                  getSecond50(),
                  getParentForChildren(),
                  isClean());
          second50_ = null;
        }
        return second50Builder_;
      }

      private maxpb.MaxpbTelemetry.BlackBoxSecond second51_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder> second51Builder_;
      /**
       * <code>optional .maxpb.BlackBoxSecond second51 = 56;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasSecond51() {
        return ((bitField1_ & 0x00800000) == 0x00800000);
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second51 = 56;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecond getSecond51() {
        if (second51Builder_ == null) {
          return second51_;
        } else {
          return second51Builder_.getMessage();
        }
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second51 = 56;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setSecond51(maxpb.MaxpbTelemetry.BlackBoxSecond value) {
        if (second51Builder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          second51_ = value;
          onChanged();
        } else {
          second51Builder_.setMessage(value);
        }
        bitField1_ |= 0x00800000;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second51 = 56;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setSecond51(
          maxpb.MaxpbTelemetry.BlackBoxSecond.Builder builderForValue) {
        if (second51Builder_ == null) {
          second51_ = builderForValue.build();
          onChanged();
        } else {
          second51Builder_.setMessage(builderForValue.build());
        }
        bitField1_ |= 0x00800000;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second51 = 56;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder mergeSecond51(maxpb.MaxpbTelemetry.BlackBoxSecond value) {
        if (second51Builder_ == null) {
          if (((bitField1_ & 0x00800000) == 0x00800000) &&
              second51_ != maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance()) {
            second51_ =
              maxpb.MaxpbTelemetry.BlackBoxSecond.newBuilder(second51_).mergeFrom(value).buildPartial();
          } else {
            second51_ = value;
          }
          onChanged();
        } else {
          second51Builder_.mergeFrom(value);
        }
        bitField1_ |= 0x00800000;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second51 = 56;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearSecond51() {
        if (second51Builder_ == null) {
          second51_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
          onChanged();
        } else {
          second51Builder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x00800000);
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second51 = 56;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecond.Builder getSecond51Builder() {
        bitField1_ |= 0x00800000;
        onChanged();
        return getSecond51FieldBuilder().getBuilder();
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second51 = 56;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond51OrBuilder() {
        if (second51Builder_ != null) {
          return second51Builder_.getMessageOrBuilder();
        } else {
          return second51_;
        }
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second51 = 56;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder> 
          getSecond51FieldBuilder() {
        if (second51Builder_ == null) {
          second51Builder_ = new com.google.protobuf.SingleFieldBuilder<
              maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder>(
                  getSecond51(),
                  getParentForChildren(),
                  isClean());
          second51_ = null;
        }
        return second51Builder_;
      }

      private maxpb.MaxpbTelemetry.BlackBoxSecond second52_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder> second52Builder_;
      /**
       * <code>optional .maxpb.BlackBoxSecond second52 = 57;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasSecond52() {
        return ((bitField1_ & 0x01000000) == 0x01000000);
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second52 = 57;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecond getSecond52() {
        if (second52Builder_ == null) {
          return second52_;
        } else {
          return second52Builder_.getMessage();
        }
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second52 = 57;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setSecond52(maxpb.MaxpbTelemetry.BlackBoxSecond value) {
        if (second52Builder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          second52_ = value;
          onChanged();
        } else {
          second52Builder_.setMessage(value);
        }
        bitField1_ |= 0x01000000;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second52 = 57;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setSecond52(
          maxpb.MaxpbTelemetry.BlackBoxSecond.Builder builderForValue) {
        if (second52Builder_ == null) {
          second52_ = builderForValue.build();
          onChanged();
        } else {
          second52Builder_.setMessage(builderForValue.build());
        }
        bitField1_ |= 0x01000000;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second52 = 57;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder mergeSecond52(maxpb.MaxpbTelemetry.BlackBoxSecond value) {
        if (second52Builder_ == null) {
          if (((bitField1_ & 0x01000000) == 0x01000000) &&
              second52_ != maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance()) {
            second52_ =
              maxpb.MaxpbTelemetry.BlackBoxSecond.newBuilder(second52_).mergeFrom(value).buildPartial();
          } else {
            second52_ = value;
          }
          onChanged();
        } else {
          second52Builder_.mergeFrom(value);
        }
        bitField1_ |= 0x01000000;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second52 = 57;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearSecond52() {
        if (second52Builder_ == null) {
          second52_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
          onChanged();
        } else {
          second52Builder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x01000000);
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second52 = 57;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecond.Builder getSecond52Builder() {
        bitField1_ |= 0x01000000;
        onChanged();
        return getSecond52FieldBuilder().getBuilder();
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second52 = 57;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond52OrBuilder() {
        if (second52Builder_ != null) {
          return second52Builder_.getMessageOrBuilder();
        } else {
          return second52_;
        }
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second52 = 57;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder> 
          getSecond52FieldBuilder() {
        if (second52Builder_ == null) {
          second52Builder_ = new com.google.protobuf.SingleFieldBuilder<
              maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder>(
                  getSecond52(),
                  getParentForChildren(),
                  isClean());
          second52_ = null;
        }
        return second52Builder_;
      }

      private maxpb.MaxpbTelemetry.BlackBoxSecond second53_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder> second53Builder_;
      /**
       * <code>optional .maxpb.BlackBoxSecond second53 = 58;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasSecond53() {
        return ((bitField1_ & 0x02000000) == 0x02000000);
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second53 = 58;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecond getSecond53() {
        if (second53Builder_ == null) {
          return second53_;
        } else {
          return second53Builder_.getMessage();
        }
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second53 = 58;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setSecond53(maxpb.MaxpbTelemetry.BlackBoxSecond value) {
        if (second53Builder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          second53_ = value;
          onChanged();
        } else {
          second53Builder_.setMessage(value);
        }
        bitField1_ |= 0x02000000;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second53 = 58;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setSecond53(
          maxpb.MaxpbTelemetry.BlackBoxSecond.Builder builderForValue) {
        if (second53Builder_ == null) {
          second53_ = builderForValue.build();
          onChanged();
        } else {
          second53Builder_.setMessage(builderForValue.build());
        }
        bitField1_ |= 0x02000000;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second53 = 58;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder mergeSecond53(maxpb.MaxpbTelemetry.BlackBoxSecond value) {
        if (second53Builder_ == null) {
          if (((bitField1_ & 0x02000000) == 0x02000000) &&
              second53_ != maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance()) {
            second53_ =
              maxpb.MaxpbTelemetry.BlackBoxSecond.newBuilder(second53_).mergeFrom(value).buildPartial();
          } else {
            second53_ = value;
          }
          onChanged();
        } else {
          second53Builder_.mergeFrom(value);
        }
        bitField1_ |= 0x02000000;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second53 = 58;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearSecond53() {
        if (second53Builder_ == null) {
          second53_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
          onChanged();
        } else {
          second53Builder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x02000000);
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second53 = 58;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecond.Builder getSecond53Builder() {
        bitField1_ |= 0x02000000;
        onChanged();
        return getSecond53FieldBuilder().getBuilder();
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second53 = 58;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond53OrBuilder() {
        if (second53Builder_ != null) {
          return second53Builder_.getMessageOrBuilder();
        } else {
          return second53_;
        }
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second53 = 58;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder> 
          getSecond53FieldBuilder() {
        if (second53Builder_ == null) {
          second53Builder_ = new com.google.protobuf.SingleFieldBuilder<
              maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder>(
                  getSecond53(),
                  getParentForChildren(),
                  isClean());
          second53_ = null;
        }
        return second53Builder_;
      }

      private maxpb.MaxpbTelemetry.BlackBoxSecond second54_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder> second54Builder_;
      /**
       * <code>optional .maxpb.BlackBoxSecond second54 = 59;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasSecond54() {
        return ((bitField1_ & 0x04000000) == 0x04000000);
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second54 = 59;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecond getSecond54() {
        if (second54Builder_ == null) {
          return second54_;
        } else {
          return second54Builder_.getMessage();
        }
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second54 = 59;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setSecond54(maxpb.MaxpbTelemetry.BlackBoxSecond value) {
        if (second54Builder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          second54_ = value;
          onChanged();
        } else {
          second54Builder_.setMessage(value);
        }
        bitField1_ |= 0x04000000;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second54 = 59;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setSecond54(
          maxpb.MaxpbTelemetry.BlackBoxSecond.Builder builderForValue) {
        if (second54Builder_ == null) {
          second54_ = builderForValue.build();
          onChanged();
        } else {
          second54Builder_.setMessage(builderForValue.build());
        }
        bitField1_ |= 0x04000000;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second54 = 59;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder mergeSecond54(maxpb.MaxpbTelemetry.BlackBoxSecond value) {
        if (second54Builder_ == null) {
          if (((bitField1_ & 0x04000000) == 0x04000000) &&
              second54_ != maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance()) {
            second54_ =
              maxpb.MaxpbTelemetry.BlackBoxSecond.newBuilder(second54_).mergeFrom(value).buildPartial();
          } else {
            second54_ = value;
          }
          onChanged();
        } else {
          second54Builder_.mergeFrom(value);
        }
        bitField1_ |= 0x04000000;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second54 = 59;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearSecond54() {
        if (second54Builder_ == null) {
          second54_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
          onChanged();
        } else {
          second54Builder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x04000000);
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second54 = 59;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecond.Builder getSecond54Builder() {
        bitField1_ |= 0x04000000;
        onChanged();
        return getSecond54FieldBuilder().getBuilder();
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second54 = 59;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond54OrBuilder() {
        if (second54Builder_ != null) {
          return second54Builder_.getMessageOrBuilder();
        } else {
          return second54_;
        }
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second54 = 59;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder> 
          getSecond54FieldBuilder() {
        if (second54Builder_ == null) {
          second54Builder_ = new com.google.protobuf.SingleFieldBuilder<
              maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder>(
                  getSecond54(),
                  getParentForChildren(),
                  isClean());
          second54_ = null;
        }
        return second54Builder_;
      }

      private maxpb.MaxpbTelemetry.BlackBoxSecond second55_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder> second55Builder_;
      /**
       * <code>optional .maxpb.BlackBoxSecond second55 = 60;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasSecond55() {
        return ((bitField1_ & 0x08000000) == 0x08000000);
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second55 = 60;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecond getSecond55() {
        if (second55Builder_ == null) {
          return second55_;
        } else {
          return second55Builder_.getMessage();
        }
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second55 = 60;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setSecond55(maxpb.MaxpbTelemetry.BlackBoxSecond value) {
        if (second55Builder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          second55_ = value;
          onChanged();
        } else {
          second55Builder_.setMessage(value);
        }
        bitField1_ |= 0x08000000;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second55 = 60;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setSecond55(
          maxpb.MaxpbTelemetry.BlackBoxSecond.Builder builderForValue) {
        if (second55Builder_ == null) {
          second55_ = builderForValue.build();
          onChanged();
        } else {
          second55Builder_.setMessage(builderForValue.build());
        }
        bitField1_ |= 0x08000000;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second55 = 60;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder mergeSecond55(maxpb.MaxpbTelemetry.BlackBoxSecond value) {
        if (second55Builder_ == null) {
          if (((bitField1_ & 0x08000000) == 0x08000000) &&
              second55_ != maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance()) {
            second55_ =
              maxpb.MaxpbTelemetry.BlackBoxSecond.newBuilder(second55_).mergeFrom(value).buildPartial();
          } else {
            second55_ = value;
          }
          onChanged();
        } else {
          second55Builder_.mergeFrom(value);
        }
        bitField1_ |= 0x08000000;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second55 = 60;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearSecond55() {
        if (second55Builder_ == null) {
          second55_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
          onChanged();
        } else {
          second55Builder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x08000000);
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second55 = 60;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecond.Builder getSecond55Builder() {
        bitField1_ |= 0x08000000;
        onChanged();
        return getSecond55FieldBuilder().getBuilder();
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second55 = 60;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond55OrBuilder() {
        if (second55Builder_ != null) {
          return second55Builder_.getMessageOrBuilder();
        } else {
          return second55_;
        }
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second55 = 60;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder> 
          getSecond55FieldBuilder() {
        if (second55Builder_ == null) {
          second55Builder_ = new com.google.protobuf.SingleFieldBuilder<
              maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder>(
                  getSecond55(),
                  getParentForChildren(),
                  isClean());
          second55_ = null;
        }
        return second55Builder_;
      }

      private maxpb.MaxpbTelemetry.BlackBoxSecond second56_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder> second56Builder_;
      /**
       * <code>optional .maxpb.BlackBoxSecond second56 = 61;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasSecond56() {
        return ((bitField1_ & 0x10000000) == 0x10000000);
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second56 = 61;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecond getSecond56() {
        if (second56Builder_ == null) {
          return second56_;
        } else {
          return second56Builder_.getMessage();
        }
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second56 = 61;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setSecond56(maxpb.MaxpbTelemetry.BlackBoxSecond value) {
        if (second56Builder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          second56_ = value;
          onChanged();
        } else {
          second56Builder_.setMessage(value);
        }
        bitField1_ |= 0x10000000;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second56 = 61;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setSecond56(
          maxpb.MaxpbTelemetry.BlackBoxSecond.Builder builderForValue) {
        if (second56Builder_ == null) {
          second56_ = builderForValue.build();
          onChanged();
        } else {
          second56Builder_.setMessage(builderForValue.build());
        }
        bitField1_ |= 0x10000000;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second56 = 61;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder mergeSecond56(maxpb.MaxpbTelemetry.BlackBoxSecond value) {
        if (second56Builder_ == null) {
          if (((bitField1_ & 0x10000000) == 0x10000000) &&
              second56_ != maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance()) {
            second56_ =
              maxpb.MaxpbTelemetry.BlackBoxSecond.newBuilder(second56_).mergeFrom(value).buildPartial();
          } else {
            second56_ = value;
          }
          onChanged();
        } else {
          second56Builder_.mergeFrom(value);
        }
        bitField1_ |= 0x10000000;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second56 = 61;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearSecond56() {
        if (second56Builder_ == null) {
          second56_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
          onChanged();
        } else {
          second56Builder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x10000000);
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second56 = 61;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecond.Builder getSecond56Builder() {
        bitField1_ |= 0x10000000;
        onChanged();
        return getSecond56FieldBuilder().getBuilder();
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second56 = 61;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond56OrBuilder() {
        if (second56Builder_ != null) {
          return second56Builder_.getMessageOrBuilder();
        } else {
          return second56_;
        }
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second56 = 61;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder> 
          getSecond56FieldBuilder() {
        if (second56Builder_ == null) {
          second56Builder_ = new com.google.protobuf.SingleFieldBuilder<
              maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder>(
                  getSecond56(),
                  getParentForChildren(),
                  isClean());
          second56_ = null;
        }
        return second56Builder_;
      }

      private maxpb.MaxpbTelemetry.BlackBoxSecond second57_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder> second57Builder_;
      /**
       * <code>optional .maxpb.BlackBoxSecond second57 = 62;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasSecond57() {
        return ((bitField1_ & 0x20000000) == 0x20000000);
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second57 = 62;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecond getSecond57() {
        if (second57Builder_ == null) {
          return second57_;
        } else {
          return second57Builder_.getMessage();
        }
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second57 = 62;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setSecond57(maxpb.MaxpbTelemetry.BlackBoxSecond value) {
        if (second57Builder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          second57_ = value;
          onChanged();
        } else {
          second57Builder_.setMessage(value);
        }
        bitField1_ |= 0x20000000;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second57 = 62;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setSecond57(
          maxpb.MaxpbTelemetry.BlackBoxSecond.Builder builderForValue) {
        if (second57Builder_ == null) {
          second57_ = builderForValue.build();
          onChanged();
        } else {
          second57Builder_.setMessage(builderForValue.build());
        }
        bitField1_ |= 0x20000000;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second57 = 62;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder mergeSecond57(maxpb.MaxpbTelemetry.BlackBoxSecond value) {
        if (second57Builder_ == null) {
          if (((bitField1_ & 0x20000000) == 0x20000000) &&
              second57_ != maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance()) {
            second57_ =
              maxpb.MaxpbTelemetry.BlackBoxSecond.newBuilder(second57_).mergeFrom(value).buildPartial();
          } else {
            second57_ = value;
          }
          onChanged();
        } else {
          second57Builder_.mergeFrom(value);
        }
        bitField1_ |= 0x20000000;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second57 = 62;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearSecond57() {
        if (second57Builder_ == null) {
          second57_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
          onChanged();
        } else {
          second57Builder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x20000000);
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second57 = 62;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecond.Builder getSecond57Builder() {
        bitField1_ |= 0x20000000;
        onChanged();
        return getSecond57FieldBuilder().getBuilder();
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second57 = 62;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond57OrBuilder() {
        if (second57Builder_ != null) {
          return second57Builder_.getMessageOrBuilder();
        } else {
          return second57_;
        }
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second57 = 62;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder> 
          getSecond57FieldBuilder() {
        if (second57Builder_ == null) {
          second57Builder_ = new com.google.protobuf.SingleFieldBuilder<
              maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder>(
                  getSecond57(),
                  getParentForChildren(),
                  isClean());
          second57_ = null;
        }
        return second57Builder_;
      }

      private maxpb.MaxpbTelemetry.BlackBoxSecond second58_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder> second58Builder_;
      /**
       * <code>optional .maxpb.BlackBoxSecond second58 = 63;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasSecond58() {
        return ((bitField1_ & 0x40000000) == 0x40000000);
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second58 = 63;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecond getSecond58() {
        if (second58Builder_ == null) {
          return second58_;
        } else {
          return second58Builder_.getMessage();
        }
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second58 = 63;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setSecond58(maxpb.MaxpbTelemetry.BlackBoxSecond value) {
        if (second58Builder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          second58_ = value;
          onChanged();
        } else {
          second58Builder_.setMessage(value);
        }
        bitField1_ |= 0x40000000;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second58 = 63;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setSecond58(
          maxpb.MaxpbTelemetry.BlackBoxSecond.Builder builderForValue) {
        if (second58Builder_ == null) {
          second58_ = builderForValue.build();
          onChanged();
        } else {
          second58Builder_.setMessage(builderForValue.build());
        }
        bitField1_ |= 0x40000000;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second58 = 63;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder mergeSecond58(maxpb.MaxpbTelemetry.BlackBoxSecond value) {
        if (second58Builder_ == null) {
          if (((bitField1_ & 0x40000000) == 0x40000000) &&
              second58_ != maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance()) {
            second58_ =
              maxpb.MaxpbTelemetry.BlackBoxSecond.newBuilder(second58_).mergeFrom(value).buildPartial();
          } else {
            second58_ = value;
          }
          onChanged();
        } else {
          second58Builder_.mergeFrom(value);
        }
        bitField1_ |= 0x40000000;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second58 = 63;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearSecond58() {
        if (second58Builder_ == null) {
          second58_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
          onChanged();
        } else {
          second58Builder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x40000000);
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second58 = 63;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecond.Builder getSecond58Builder() {
        bitField1_ |= 0x40000000;
        onChanged();
        return getSecond58FieldBuilder().getBuilder();
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second58 = 63;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond58OrBuilder() {
        if (second58Builder_ != null) {
          return second58Builder_.getMessageOrBuilder();
        } else {
          return second58_;
        }
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second58 = 63;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder> 
          getSecond58FieldBuilder() {
        if (second58Builder_ == null) {
          second58Builder_ = new com.google.protobuf.SingleFieldBuilder<
              maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder>(
                  getSecond58(),
                  getParentForChildren(),
                  isClean());
          second58_ = null;
        }
        return second58Builder_;
      }

      private maxpb.MaxpbTelemetry.BlackBoxSecond second59_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder> second59Builder_;
      /**
       * <code>optional .maxpb.BlackBoxSecond second59 = 64;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasSecond59() {
        return ((bitField1_ & 0x80000000) == 0x80000000);
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second59 = 64;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecond getSecond59() {
        if (second59Builder_ == null) {
          return second59_;
        } else {
          return second59Builder_.getMessage();
        }
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second59 = 64;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setSecond59(maxpb.MaxpbTelemetry.BlackBoxSecond value) {
        if (second59Builder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          second59_ = value;
          onChanged();
        } else {
          second59Builder_.setMessage(value);
        }
        bitField1_ |= 0x80000000;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second59 = 64;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setSecond59(
          maxpb.MaxpbTelemetry.BlackBoxSecond.Builder builderForValue) {
        if (second59Builder_ == null) {
          second59_ = builderForValue.build();
          onChanged();
        } else {
          second59Builder_.setMessage(builderForValue.build());
        }
        bitField1_ |= 0x80000000;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second59 = 64;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder mergeSecond59(maxpb.MaxpbTelemetry.BlackBoxSecond value) {
        if (second59Builder_ == null) {
          if (((bitField1_ & 0x80000000) == 0x80000000) &&
              second59_ != maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance()) {
            second59_ =
              maxpb.MaxpbTelemetry.BlackBoxSecond.newBuilder(second59_).mergeFrom(value).buildPartial();
          } else {
            second59_ = value;
          }
          onChanged();
        } else {
          second59Builder_.mergeFrom(value);
        }
        bitField1_ |= 0x80000000;
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second59 = 64;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearSecond59() {
        if (second59Builder_ == null) {
          second59_ = maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
          onChanged();
        } else {
          second59Builder_.clear();
        }
        bitField1_ = (bitField1_ & ~0x80000000);
        return this;
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second59 = 64;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecond.Builder getSecond59Builder() {
        bitField1_ |= 0x80000000;
        onChanged();
        return getSecond59FieldBuilder().getBuilder();
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second59 = 64;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder getSecond59OrBuilder() {
        if (second59Builder_ != null) {
          return second59Builder_.getMessageOrBuilder();
        } else {
          return second59_;
        }
      }
      /**
       * <code>optional .maxpb.BlackBoxSecond second59 = 64;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder> 
          getSecond59FieldBuilder() {
        if (second59Builder_ == null) {
          second59Builder_ = new com.google.protobuf.SingleFieldBuilder<
              maxpb.MaxpbTelemetry.BlackBoxSecond, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder, maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder>(
                  getSecond59(),
                  getParentForChildren(),
                  isClean());
          second59_ = null;
        }
        return second59Builder_;
      }

      // @@protoc_insertion_point(builder_scope:maxpb.BlackBoxMinute)
    }

    static {
      defaultInstance = new BlackBoxMinute(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:maxpb.BlackBoxMinute)
  }

  public interface BlackBoxSecondOrBuilder extends
      // @@protoc_insertion_point(interface_extends:maxpb.BlackBoxSecond)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional uint32 p_latitude = 1;</code>
     *
     * <pre>
     *&#47; Diff - Degrees.decimalsOfDegrees * 10,000,000 SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasPLatitude();
    /**
     * <code>optional uint32 p_latitude = 1;</code>
     *
     * <pre>
     *&#47; Diff - Degrees.decimalsOfDegrees * 10,000,000 SupportedBy: MXT160, MXT162
     * </pre>
     */
    int getPLatitude();

    /**
     * <code>optional uint32 n_latitude = 2;</code>
     *
     * <pre>
     *&#47; Diff - Degrees.decimalsOfDegrees * 10,000,000 SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasNLatitude();
    /**
     * <code>optional uint32 n_latitude = 2;</code>
     *
     * <pre>
     *&#47; Diff - Degrees.decimalsOfDegrees * 10,000,000 SupportedBy: MXT160, MXT162
     * </pre>
     */
    int getNLatitude();

    /**
     * <code>optional uint32 p_longitude = 3;</code>
     *
     * <pre>
     *&#47; Diff - Degrees.decimalsOfDegrees * 10,000,000 SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasPLongitude();
    /**
     * <code>optional uint32 p_longitude = 3;</code>
     *
     * <pre>
     *&#47; Diff - Degrees.decimalsOfDegrees * 10,000,000 SupportedBy: MXT160, MXT162
     * </pre>
     */
    int getPLongitude();

    /**
     * <code>optional uint32 n_longitude = 4;</code>
     *
     * <pre>
     *&#47; Diff - Degrees.decimalsOfDegrees * 10,000,000 SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasNLongitude();
    /**
     * <code>optional uint32 n_longitude = 4;</code>
     *
     * <pre>
     *&#47; Diff - Degrees.decimalsOfDegrees * 10,000,000 SupportedBy: MXT160, MXT162
     * </pre>
     */
    int getNLongitude();

    /**
     * <code>optional uint32 speed = 5;</code>
     *
     * <pre>
     *&#47; Km/h SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasSpeed();
    /**
     * <code>optional uint32 speed = 5;</code>
     *
     * <pre>
     *&#47; Km/h SupportedBy: MXT160, MXT162
     * </pre>
     */
    int getSpeed();

    /**
     * <code>optional uint32 direction = 6;</code>
     *
     * <pre>
     *&#47; Degrees SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasDirection();
    /**
     * <code>optional uint32 direction = 6;</code>
     *
     * <pre>
     *&#47; Degrees SupportedBy: MXT160, MXT162
     * </pre>
     */
    int getDirection();

    /**
     * <code>optional uint32 rpm = 7;</code>
     *
     * <pre>
     *&#47; Multiple of 100 SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasRpm();
    /**
     * <code>optional uint32 rpm = 7;</code>
     *
     * <pre>
     *&#47; Multiple of 100 SupportedBy: MXT160, MXT162
     * </pre>
     */
    int getRpm();

    /**
     * <code>optional uint32 odometer = 8;</code>
     *
     * <pre>
     *&#47; Diff - Meters SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasOdometer();
    /**
     * <code>optional uint32 odometer = 8;</code>
     *
     * <pre>
     *&#47; Diff - Meters SupportedBy: MXT160, MXT162
     * </pre>
     */
    int getOdometer();

    /**
     * <code>repeated .maxpb.AxisSample axisSamples = 9;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    java.util.List<maxpb.MaxpbTelemetry.AxisSample> 
        getAxisSamplesList();
    /**
     * <code>repeated .maxpb.AxisSample axisSamples = 9;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.AxisSample getAxisSamples(int index);
    /**
     * <code>repeated .maxpb.AxisSample axisSamples = 9;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    int getAxisSamplesCount();
    /**
     * <code>repeated .maxpb.AxisSample axisSamples = 9;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    java.util.List<? extends maxpb.MaxpbTelemetry.AxisSampleOrBuilder> 
        getAxisSamplesOrBuilderList();
    /**
     * <code>repeated .maxpb.AxisSample axisSamples = 9;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    maxpb.MaxpbTelemetry.AxisSampleOrBuilder getAxisSamplesOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code maxpb.BlackBoxSecond}
   */
  public static final class BlackBoxSecond extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:maxpb.BlackBoxSecond)
      BlackBoxSecondOrBuilder {
    // Use BlackBoxSecond.newBuilder() to construct.
    private BlackBoxSecond(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private BlackBoxSecond(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final BlackBoxSecond defaultInstance;
    public static BlackBoxSecond getDefaultInstance() {
      return defaultInstance;
    }

    public BlackBoxSecond getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private BlackBoxSecond(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              pLatitude_ = input.readUInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              nLatitude_ = input.readUInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              pLongitude_ = input.readUInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              nLongitude_ = input.readUInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              speed_ = input.readUInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              direction_ = input.readUInt32();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              rpm_ = input.readUInt32();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000080;
              odometer_ = input.readUInt32();
              break;
            }
            case 74: {
              if (!((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
                axisSamples_ = new java.util.ArrayList<maxpb.MaxpbTelemetry.AxisSample>();
                mutable_bitField0_ |= 0x00000100;
              }
              axisSamples_.add(input.readMessage(maxpb.MaxpbTelemetry.AxisSample.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
          axisSamples_ = java.util.Collections.unmodifiableList(axisSamples_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return maxpb.MaxpbTelemetry.internal_static_maxpb_BlackBoxSecond_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return maxpb.MaxpbTelemetry.internal_static_maxpb_BlackBoxSecond_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              maxpb.MaxpbTelemetry.BlackBoxSecond.class, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder.class);
    }

    public static com.google.protobuf.Parser<BlackBoxSecond> PARSER =
        new com.google.protobuf.AbstractParser<BlackBoxSecond>() {
      public BlackBoxSecond parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new BlackBoxSecond(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<BlackBoxSecond> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int P_LATITUDE_FIELD_NUMBER = 1;
    private int pLatitude_;
    /**
     * <code>optional uint32 p_latitude = 1;</code>
     *
     * <pre>
     *&#47; Diff - Degrees.decimalsOfDegrees * 10,000,000 SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasPLatitude() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional uint32 p_latitude = 1;</code>
     *
     * <pre>
     *&#47; Diff - Degrees.decimalsOfDegrees * 10,000,000 SupportedBy: MXT160, MXT162
     * </pre>
     */
    public int getPLatitude() {
      return pLatitude_;
    }

    public static final int N_LATITUDE_FIELD_NUMBER = 2;
    private int nLatitude_;
    /**
     * <code>optional uint32 n_latitude = 2;</code>
     *
     * <pre>
     *&#47; Diff - Degrees.decimalsOfDegrees * 10,000,000 SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasNLatitude() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional uint32 n_latitude = 2;</code>
     *
     * <pre>
     *&#47; Diff - Degrees.decimalsOfDegrees * 10,000,000 SupportedBy: MXT160, MXT162
     * </pre>
     */
    public int getNLatitude() {
      return nLatitude_;
    }

    public static final int P_LONGITUDE_FIELD_NUMBER = 3;
    private int pLongitude_;
    /**
     * <code>optional uint32 p_longitude = 3;</code>
     *
     * <pre>
     *&#47; Diff - Degrees.decimalsOfDegrees * 10,000,000 SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasPLongitude() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional uint32 p_longitude = 3;</code>
     *
     * <pre>
     *&#47; Diff - Degrees.decimalsOfDegrees * 10,000,000 SupportedBy: MXT160, MXT162
     * </pre>
     */
    public int getPLongitude() {
      return pLongitude_;
    }

    public static final int N_LONGITUDE_FIELD_NUMBER = 4;
    private int nLongitude_;
    /**
     * <code>optional uint32 n_longitude = 4;</code>
     *
     * <pre>
     *&#47; Diff - Degrees.decimalsOfDegrees * 10,000,000 SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasNLongitude() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional uint32 n_longitude = 4;</code>
     *
     * <pre>
     *&#47; Diff - Degrees.decimalsOfDegrees * 10,000,000 SupportedBy: MXT160, MXT162
     * </pre>
     */
    public int getNLongitude() {
      return nLongitude_;
    }

    public static final int SPEED_FIELD_NUMBER = 5;
    private int speed_;
    /**
     * <code>optional uint32 speed = 5;</code>
     *
     * <pre>
     *&#47; Km/h SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasSpeed() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional uint32 speed = 5;</code>
     *
     * <pre>
     *&#47; Km/h SupportedBy: MXT160, MXT162
     * </pre>
     */
    public int getSpeed() {
      return speed_;
    }

    public static final int DIRECTION_FIELD_NUMBER = 6;
    private int direction_;
    /**
     * <code>optional uint32 direction = 6;</code>
     *
     * <pre>
     *&#47; Degrees SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasDirection() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional uint32 direction = 6;</code>
     *
     * <pre>
     *&#47; Degrees SupportedBy: MXT160, MXT162
     * </pre>
     */
    public int getDirection() {
      return direction_;
    }

    public static final int RPM_FIELD_NUMBER = 7;
    private int rpm_;
    /**
     * <code>optional uint32 rpm = 7;</code>
     *
     * <pre>
     *&#47; Multiple of 100 SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasRpm() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional uint32 rpm = 7;</code>
     *
     * <pre>
     *&#47; Multiple of 100 SupportedBy: MXT160, MXT162
     * </pre>
     */
    public int getRpm() {
      return rpm_;
    }

    public static final int ODOMETER_FIELD_NUMBER = 8;
    private int odometer_;
    /**
     * <code>optional uint32 odometer = 8;</code>
     *
     * <pre>
     *&#47; Diff - Meters SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasOdometer() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional uint32 odometer = 8;</code>
     *
     * <pre>
     *&#47; Diff - Meters SupportedBy: MXT160, MXT162
     * </pre>
     */
    public int getOdometer() {
      return odometer_;
    }

    public static final int AXISSAMPLES_FIELD_NUMBER = 9;
    private java.util.List<maxpb.MaxpbTelemetry.AxisSample> axisSamples_;
    /**
     * <code>repeated .maxpb.AxisSample axisSamples = 9;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public java.util.List<maxpb.MaxpbTelemetry.AxisSample> getAxisSamplesList() {
      return axisSamples_;
    }
    /**
     * <code>repeated .maxpb.AxisSample axisSamples = 9;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public java.util.List<? extends maxpb.MaxpbTelemetry.AxisSampleOrBuilder> 
        getAxisSamplesOrBuilderList() {
      return axisSamples_;
    }
    /**
     * <code>repeated .maxpb.AxisSample axisSamples = 9;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public int getAxisSamplesCount() {
      return axisSamples_.size();
    }
    /**
     * <code>repeated .maxpb.AxisSample axisSamples = 9;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.AxisSample getAxisSamples(int index) {
      return axisSamples_.get(index);
    }
    /**
     * <code>repeated .maxpb.AxisSample axisSamples = 9;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public maxpb.MaxpbTelemetry.AxisSampleOrBuilder getAxisSamplesOrBuilder(
        int index) {
      return axisSamples_.get(index);
    }

    private void initFields() {
      pLatitude_ = 0;
      nLatitude_ = 0;
      pLongitude_ = 0;
      nLongitude_ = 0;
      speed_ = 0;
      direction_ = 0;
      rpm_ = 0;
      odometer_ = 0;
      axisSamples_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, pLatitude_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, nLatitude_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(3, pLongitude_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeUInt32(4, nLongitude_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeUInt32(5, speed_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeUInt32(6, direction_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeUInt32(7, rpm_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeUInt32(8, odometer_);
      }
      for (int i = 0; i < axisSamples_.size(); i++) {
        output.writeMessage(9, axisSamples_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, pLatitude_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, nLatitude_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, pLongitude_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, nLongitude_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(5, speed_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(6, direction_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(7, rpm_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(8, odometer_);
      }
      for (int i = 0; i < axisSamples_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(9, axisSamples_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static maxpb.MaxpbTelemetry.BlackBoxSecond parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static maxpb.MaxpbTelemetry.BlackBoxSecond parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetry.BlackBoxSecond parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static maxpb.MaxpbTelemetry.BlackBoxSecond parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetry.BlackBoxSecond parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static maxpb.MaxpbTelemetry.BlackBoxSecond parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetry.BlackBoxSecond parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static maxpb.MaxpbTelemetry.BlackBoxSecond parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetry.BlackBoxSecond parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static maxpb.MaxpbTelemetry.BlackBoxSecond parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(maxpb.MaxpbTelemetry.BlackBoxSecond prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code maxpb.BlackBoxSecond}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:maxpb.BlackBoxSecond)
        maxpb.MaxpbTelemetry.BlackBoxSecondOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return maxpb.MaxpbTelemetry.internal_static_maxpb_BlackBoxSecond_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return maxpb.MaxpbTelemetry.internal_static_maxpb_BlackBoxSecond_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                maxpb.MaxpbTelemetry.BlackBoxSecond.class, maxpb.MaxpbTelemetry.BlackBoxSecond.Builder.class);
      }

      // Construct using maxpb.MaxpbTelemetry.BlackBoxSecond.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getAxisSamplesFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        pLatitude_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        nLatitude_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        pLongitude_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        nLongitude_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        speed_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        direction_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        rpm_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        odometer_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        if (axisSamplesBuilder_ == null) {
          axisSamples_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000100);
        } else {
          axisSamplesBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return maxpb.MaxpbTelemetry.internal_static_maxpb_BlackBoxSecond_descriptor;
      }

      public maxpb.MaxpbTelemetry.BlackBoxSecond getDefaultInstanceForType() {
        return maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance();
      }

      public maxpb.MaxpbTelemetry.BlackBoxSecond build() {
        maxpb.MaxpbTelemetry.BlackBoxSecond result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public maxpb.MaxpbTelemetry.BlackBoxSecond buildPartial() {
        maxpb.MaxpbTelemetry.BlackBoxSecond result = new maxpb.MaxpbTelemetry.BlackBoxSecond(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.pLatitude_ = pLatitude_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.nLatitude_ = nLatitude_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.pLongitude_ = pLongitude_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.nLongitude_ = nLongitude_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.speed_ = speed_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.direction_ = direction_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.rpm_ = rpm_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.odometer_ = odometer_;
        if (axisSamplesBuilder_ == null) {
          if (((bitField0_ & 0x00000100) == 0x00000100)) {
            axisSamples_ = java.util.Collections.unmodifiableList(axisSamples_);
            bitField0_ = (bitField0_ & ~0x00000100);
          }
          result.axisSamples_ = axisSamples_;
        } else {
          result.axisSamples_ = axisSamplesBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof maxpb.MaxpbTelemetry.BlackBoxSecond) {
          return mergeFrom((maxpb.MaxpbTelemetry.BlackBoxSecond)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(maxpb.MaxpbTelemetry.BlackBoxSecond other) {
        if (other == maxpb.MaxpbTelemetry.BlackBoxSecond.getDefaultInstance()) return this;
        if (other.hasPLatitude()) {
          setPLatitude(other.getPLatitude());
        }
        if (other.hasNLatitude()) {
          setNLatitude(other.getNLatitude());
        }
        if (other.hasPLongitude()) {
          setPLongitude(other.getPLongitude());
        }
        if (other.hasNLongitude()) {
          setNLongitude(other.getNLongitude());
        }
        if (other.hasSpeed()) {
          setSpeed(other.getSpeed());
        }
        if (other.hasDirection()) {
          setDirection(other.getDirection());
        }
        if (other.hasRpm()) {
          setRpm(other.getRpm());
        }
        if (other.hasOdometer()) {
          setOdometer(other.getOdometer());
        }
        if (axisSamplesBuilder_ == null) {
          if (!other.axisSamples_.isEmpty()) {
            if (axisSamples_.isEmpty()) {
              axisSamples_ = other.axisSamples_;
              bitField0_ = (bitField0_ & ~0x00000100);
            } else {
              ensureAxisSamplesIsMutable();
              axisSamples_.addAll(other.axisSamples_);
            }
            onChanged();
          }
        } else {
          if (!other.axisSamples_.isEmpty()) {
            if (axisSamplesBuilder_.isEmpty()) {
              axisSamplesBuilder_.dispose();
              axisSamplesBuilder_ = null;
              axisSamples_ = other.axisSamples_;
              bitField0_ = (bitField0_ & ~0x00000100);
              axisSamplesBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getAxisSamplesFieldBuilder() : null;
            } else {
              axisSamplesBuilder_.addAllMessages(other.axisSamples_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        maxpb.MaxpbTelemetry.BlackBoxSecond parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (maxpb.MaxpbTelemetry.BlackBoxSecond) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int pLatitude_ ;
      /**
       * <code>optional uint32 p_latitude = 1;</code>
       *
       * <pre>
       *&#47; Diff - Degrees.decimalsOfDegrees * 10,000,000 SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasPLatitude() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint32 p_latitude = 1;</code>
       *
       * <pre>
       *&#47; Diff - Degrees.decimalsOfDegrees * 10,000,000 SupportedBy: MXT160, MXT162
       * </pre>
       */
      public int getPLatitude() {
        return pLatitude_;
      }
      /**
       * <code>optional uint32 p_latitude = 1;</code>
       *
       * <pre>
       *&#47; Diff - Degrees.decimalsOfDegrees * 10,000,000 SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setPLatitude(int value) {
        bitField0_ |= 0x00000001;
        pLatitude_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 p_latitude = 1;</code>
       *
       * <pre>
       *&#47; Diff - Degrees.decimalsOfDegrees * 10,000,000 SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearPLatitude() {
        bitField0_ = (bitField0_ & ~0x00000001);
        pLatitude_ = 0;
        onChanged();
        return this;
      }

      private int nLatitude_ ;
      /**
       * <code>optional uint32 n_latitude = 2;</code>
       *
       * <pre>
       *&#47; Diff - Degrees.decimalsOfDegrees * 10,000,000 SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasNLatitude() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional uint32 n_latitude = 2;</code>
       *
       * <pre>
       *&#47; Diff - Degrees.decimalsOfDegrees * 10,000,000 SupportedBy: MXT160, MXT162
       * </pre>
       */
      public int getNLatitude() {
        return nLatitude_;
      }
      /**
       * <code>optional uint32 n_latitude = 2;</code>
       *
       * <pre>
       *&#47; Diff - Degrees.decimalsOfDegrees * 10,000,000 SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setNLatitude(int value) {
        bitField0_ |= 0x00000002;
        nLatitude_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 n_latitude = 2;</code>
       *
       * <pre>
       *&#47; Diff - Degrees.decimalsOfDegrees * 10,000,000 SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearNLatitude() {
        bitField0_ = (bitField0_ & ~0x00000002);
        nLatitude_ = 0;
        onChanged();
        return this;
      }

      private int pLongitude_ ;
      /**
       * <code>optional uint32 p_longitude = 3;</code>
       *
       * <pre>
       *&#47; Diff - Degrees.decimalsOfDegrees * 10,000,000 SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasPLongitude() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional uint32 p_longitude = 3;</code>
       *
       * <pre>
       *&#47; Diff - Degrees.decimalsOfDegrees * 10,000,000 SupportedBy: MXT160, MXT162
       * </pre>
       */
      public int getPLongitude() {
        return pLongitude_;
      }
      /**
       * <code>optional uint32 p_longitude = 3;</code>
       *
       * <pre>
       *&#47; Diff - Degrees.decimalsOfDegrees * 10,000,000 SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setPLongitude(int value) {
        bitField0_ |= 0x00000004;
        pLongitude_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 p_longitude = 3;</code>
       *
       * <pre>
       *&#47; Diff - Degrees.decimalsOfDegrees * 10,000,000 SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearPLongitude() {
        bitField0_ = (bitField0_ & ~0x00000004);
        pLongitude_ = 0;
        onChanged();
        return this;
      }

      private int nLongitude_ ;
      /**
       * <code>optional uint32 n_longitude = 4;</code>
       *
       * <pre>
       *&#47; Diff - Degrees.decimalsOfDegrees * 10,000,000 SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasNLongitude() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional uint32 n_longitude = 4;</code>
       *
       * <pre>
       *&#47; Diff - Degrees.decimalsOfDegrees * 10,000,000 SupportedBy: MXT160, MXT162
       * </pre>
       */
      public int getNLongitude() {
        return nLongitude_;
      }
      /**
       * <code>optional uint32 n_longitude = 4;</code>
       *
       * <pre>
       *&#47; Diff - Degrees.decimalsOfDegrees * 10,000,000 SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setNLongitude(int value) {
        bitField0_ |= 0x00000008;
        nLongitude_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 n_longitude = 4;</code>
       *
       * <pre>
       *&#47; Diff - Degrees.decimalsOfDegrees * 10,000,000 SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearNLongitude() {
        bitField0_ = (bitField0_ & ~0x00000008);
        nLongitude_ = 0;
        onChanged();
        return this;
      }

      private int speed_ ;
      /**
       * <code>optional uint32 speed = 5;</code>
       *
       * <pre>
       *&#47; Km/h SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasSpeed() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional uint32 speed = 5;</code>
       *
       * <pre>
       *&#47; Km/h SupportedBy: MXT160, MXT162
       * </pre>
       */
      public int getSpeed() {
        return speed_;
      }
      /**
       * <code>optional uint32 speed = 5;</code>
       *
       * <pre>
       *&#47; Km/h SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setSpeed(int value) {
        bitField0_ |= 0x00000010;
        speed_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 speed = 5;</code>
       *
       * <pre>
       *&#47; Km/h SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearSpeed() {
        bitField0_ = (bitField0_ & ~0x00000010);
        speed_ = 0;
        onChanged();
        return this;
      }

      private int direction_ ;
      /**
       * <code>optional uint32 direction = 6;</code>
       *
       * <pre>
       *&#47; Degrees SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasDirection() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional uint32 direction = 6;</code>
       *
       * <pre>
       *&#47; Degrees SupportedBy: MXT160, MXT162
       * </pre>
       */
      public int getDirection() {
        return direction_;
      }
      /**
       * <code>optional uint32 direction = 6;</code>
       *
       * <pre>
       *&#47; Degrees SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setDirection(int value) {
        bitField0_ |= 0x00000020;
        direction_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 direction = 6;</code>
       *
       * <pre>
       *&#47; Degrees SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearDirection() {
        bitField0_ = (bitField0_ & ~0x00000020);
        direction_ = 0;
        onChanged();
        return this;
      }

      private int rpm_ ;
      /**
       * <code>optional uint32 rpm = 7;</code>
       *
       * <pre>
       *&#47; Multiple of 100 SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasRpm() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional uint32 rpm = 7;</code>
       *
       * <pre>
       *&#47; Multiple of 100 SupportedBy: MXT160, MXT162
       * </pre>
       */
      public int getRpm() {
        return rpm_;
      }
      /**
       * <code>optional uint32 rpm = 7;</code>
       *
       * <pre>
       *&#47; Multiple of 100 SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setRpm(int value) {
        bitField0_ |= 0x00000040;
        rpm_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 rpm = 7;</code>
       *
       * <pre>
       *&#47; Multiple of 100 SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearRpm() {
        bitField0_ = (bitField0_ & ~0x00000040);
        rpm_ = 0;
        onChanged();
        return this;
      }

      private int odometer_ ;
      /**
       * <code>optional uint32 odometer = 8;</code>
       *
       * <pre>
       *&#47; Diff - Meters SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasOdometer() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional uint32 odometer = 8;</code>
       *
       * <pre>
       *&#47; Diff - Meters SupportedBy: MXT160, MXT162
       * </pre>
       */
      public int getOdometer() {
        return odometer_;
      }
      /**
       * <code>optional uint32 odometer = 8;</code>
       *
       * <pre>
       *&#47; Diff - Meters SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setOdometer(int value) {
        bitField0_ |= 0x00000080;
        odometer_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 odometer = 8;</code>
       *
       * <pre>
       *&#47; Diff - Meters SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearOdometer() {
        bitField0_ = (bitField0_ & ~0x00000080);
        odometer_ = 0;
        onChanged();
        return this;
      }

      private java.util.List<maxpb.MaxpbTelemetry.AxisSample> axisSamples_ =
        java.util.Collections.emptyList();
      private void ensureAxisSamplesIsMutable() {
        if (!((bitField0_ & 0x00000100) == 0x00000100)) {
          axisSamples_ = new java.util.ArrayList<maxpb.MaxpbTelemetry.AxisSample>(axisSamples_);
          bitField0_ |= 0x00000100;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          maxpb.MaxpbTelemetry.AxisSample, maxpb.MaxpbTelemetry.AxisSample.Builder, maxpb.MaxpbTelemetry.AxisSampleOrBuilder> axisSamplesBuilder_;

      /**
       * <code>repeated .maxpb.AxisSample axisSamples = 9;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public java.util.List<maxpb.MaxpbTelemetry.AxisSample> getAxisSamplesList() {
        if (axisSamplesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(axisSamples_);
        } else {
          return axisSamplesBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .maxpb.AxisSample axisSamples = 9;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public int getAxisSamplesCount() {
        if (axisSamplesBuilder_ == null) {
          return axisSamples_.size();
        } else {
          return axisSamplesBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .maxpb.AxisSample axisSamples = 9;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.AxisSample getAxisSamples(int index) {
        if (axisSamplesBuilder_ == null) {
          return axisSamples_.get(index);
        } else {
          return axisSamplesBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .maxpb.AxisSample axisSamples = 9;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setAxisSamples(
          int index, maxpb.MaxpbTelemetry.AxisSample value) {
        if (axisSamplesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAxisSamplesIsMutable();
          axisSamples_.set(index, value);
          onChanged();
        } else {
          axisSamplesBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .maxpb.AxisSample axisSamples = 9;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setAxisSamples(
          int index, maxpb.MaxpbTelemetry.AxisSample.Builder builderForValue) {
        if (axisSamplesBuilder_ == null) {
          ensureAxisSamplesIsMutable();
          axisSamples_.set(index, builderForValue.build());
          onChanged();
        } else {
          axisSamplesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .maxpb.AxisSample axisSamples = 9;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder addAxisSamples(maxpb.MaxpbTelemetry.AxisSample value) {
        if (axisSamplesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAxisSamplesIsMutable();
          axisSamples_.add(value);
          onChanged();
        } else {
          axisSamplesBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .maxpb.AxisSample axisSamples = 9;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder addAxisSamples(
          int index, maxpb.MaxpbTelemetry.AxisSample value) {
        if (axisSamplesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAxisSamplesIsMutable();
          axisSamples_.add(index, value);
          onChanged();
        } else {
          axisSamplesBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .maxpb.AxisSample axisSamples = 9;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder addAxisSamples(
          maxpb.MaxpbTelemetry.AxisSample.Builder builderForValue) {
        if (axisSamplesBuilder_ == null) {
          ensureAxisSamplesIsMutable();
          axisSamples_.add(builderForValue.build());
          onChanged();
        } else {
          axisSamplesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .maxpb.AxisSample axisSamples = 9;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder addAxisSamples(
          int index, maxpb.MaxpbTelemetry.AxisSample.Builder builderForValue) {
        if (axisSamplesBuilder_ == null) {
          ensureAxisSamplesIsMutable();
          axisSamples_.add(index, builderForValue.build());
          onChanged();
        } else {
          axisSamplesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .maxpb.AxisSample axisSamples = 9;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder addAllAxisSamples(
          java.lang.Iterable<? extends maxpb.MaxpbTelemetry.AxisSample> values) {
        if (axisSamplesBuilder_ == null) {
          ensureAxisSamplesIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, axisSamples_);
          onChanged();
        } else {
          axisSamplesBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .maxpb.AxisSample axisSamples = 9;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearAxisSamples() {
        if (axisSamplesBuilder_ == null) {
          axisSamples_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000100);
          onChanged();
        } else {
          axisSamplesBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .maxpb.AxisSample axisSamples = 9;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder removeAxisSamples(int index) {
        if (axisSamplesBuilder_ == null) {
          ensureAxisSamplesIsMutable();
          axisSamples_.remove(index);
          onChanged();
        } else {
          axisSamplesBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .maxpb.AxisSample axisSamples = 9;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.AxisSample.Builder getAxisSamplesBuilder(
          int index) {
        return getAxisSamplesFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .maxpb.AxisSample axisSamples = 9;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.AxisSampleOrBuilder getAxisSamplesOrBuilder(
          int index) {
        if (axisSamplesBuilder_ == null) {
          return axisSamples_.get(index);  } else {
          return axisSamplesBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .maxpb.AxisSample axisSamples = 9;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public java.util.List<? extends maxpb.MaxpbTelemetry.AxisSampleOrBuilder> 
           getAxisSamplesOrBuilderList() {
        if (axisSamplesBuilder_ != null) {
          return axisSamplesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(axisSamples_);
        }
      }
      /**
       * <code>repeated .maxpb.AxisSample axisSamples = 9;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.AxisSample.Builder addAxisSamplesBuilder() {
        return getAxisSamplesFieldBuilder().addBuilder(
            maxpb.MaxpbTelemetry.AxisSample.getDefaultInstance());
      }
      /**
       * <code>repeated .maxpb.AxisSample axisSamples = 9;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public maxpb.MaxpbTelemetry.AxisSample.Builder addAxisSamplesBuilder(
          int index) {
        return getAxisSamplesFieldBuilder().addBuilder(
            index, maxpb.MaxpbTelemetry.AxisSample.getDefaultInstance());
      }
      /**
       * <code>repeated .maxpb.AxisSample axisSamples = 9;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public java.util.List<maxpb.MaxpbTelemetry.AxisSample.Builder> 
           getAxisSamplesBuilderList() {
        return getAxisSamplesFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          maxpb.MaxpbTelemetry.AxisSample, maxpb.MaxpbTelemetry.AxisSample.Builder, maxpb.MaxpbTelemetry.AxisSampleOrBuilder> 
          getAxisSamplesFieldBuilder() {
        if (axisSamplesBuilder_ == null) {
          axisSamplesBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              maxpb.MaxpbTelemetry.AxisSample, maxpb.MaxpbTelemetry.AxisSample.Builder, maxpb.MaxpbTelemetry.AxisSampleOrBuilder>(
                  axisSamples_,
                  ((bitField0_ & 0x00000100) == 0x00000100),
                  getParentForChildren(),
                  isClean());
          axisSamples_ = null;
        }
        return axisSamplesBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:maxpb.BlackBoxSecond)
    }

    static {
      defaultInstance = new BlackBoxSecond(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:maxpb.BlackBoxSecond)
  }

  public interface AxisSampleOrBuilder extends
      // @@protoc_insertion_point(interface_extends:maxpb.AxisSample)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional uint32 p_xAxis = 1;</code>
     *
     * <pre>
     *&#47; Multiple of 20 mG SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasPXAxis();
    /**
     * <code>optional uint32 p_xAxis = 1;</code>
     *
     * <pre>
     *&#47; Multiple of 20 mG SupportedBy: MXT160, MXT162
     * </pre>
     */
    int getPXAxis();

    /**
     * <code>optional uint32 n_xAxis = 2;</code>
     *
     * <pre>
     *&#47; Multiple of 20 mG SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasNXAxis();
    /**
     * <code>optional uint32 n_xAxis = 2;</code>
     *
     * <pre>
     *&#47; Multiple of 20 mG SupportedBy: MXT160, MXT162
     * </pre>
     */
    int getNXAxis();

    /**
     * <code>optional uint32 p_yAxis = 3;</code>
     *
     * <pre>
     *&#47; Multiple of 20 mG SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasPYAxis();
    /**
     * <code>optional uint32 p_yAxis = 3;</code>
     *
     * <pre>
     *&#47; Multiple of 20 mG SupportedBy: MXT160, MXT162
     * </pre>
     */
    int getPYAxis();

    /**
     * <code>optional uint32 n_yAxis = 4;</code>
     *
     * <pre>
     *&#47; Multiple of 20 mG SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasNYAxis();
    /**
     * <code>optional uint32 n_yAxis = 4;</code>
     *
     * <pre>
     *&#47; Multiple of 20 mG SupportedBy: MXT160, MXT162
     * </pre>
     */
    int getNYAxis();

    /**
     * <code>optional uint32 p_zAxis = 5;</code>
     *
     * <pre>
     *&#47; Multiple of 20 mG SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasPZAxis();
    /**
     * <code>optional uint32 p_zAxis = 5;</code>
     *
     * <pre>
     *&#47; Multiple of 20 mG SupportedBy: MXT160, MXT162
     * </pre>
     */
    int getPZAxis();

    /**
     * <code>optional uint32 n_zAxis = 6;</code>
     *
     * <pre>
     *&#47; Multiple of 20 mG SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasNZAxis();
    /**
     * <code>optional uint32 n_zAxis = 6;</code>
     *
     * <pre>
     *&#47; Multiple of 20 mG SupportedBy: MXT160, MXT162
     * </pre>
     */
    int getNZAxis();
  }
  /**
   * Protobuf type {@code maxpb.AxisSample}
   */
  public static final class AxisSample extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:maxpb.AxisSample)
      AxisSampleOrBuilder {
    // Use AxisSample.newBuilder() to construct.
    private AxisSample(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private AxisSample(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final AxisSample defaultInstance;
    public static AxisSample getDefaultInstance() {
      return defaultInstance;
    }

    public AxisSample getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private AxisSample(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              pXAxis_ = input.readUInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              nXAxis_ = input.readUInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              pYAxis_ = input.readUInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              nYAxis_ = input.readUInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              pZAxis_ = input.readUInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              nZAxis_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return maxpb.MaxpbTelemetry.internal_static_maxpb_AxisSample_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return maxpb.MaxpbTelemetry.internal_static_maxpb_AxisSample_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              maxpb.MaxpbTelemetry.AxisSample.class, maxpb.MaxpbTelemetry.AxisSample.Builder.class);
    }

    public static com.google.protobuf.Parser<AxisSample> PARSER =
        new com.google.protobuf.AbstractParser<AxisSample>() {
      public AxisSample parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new AxisSample(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<AxisSample> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int P_XAXIS_FIELD_NUMBER = 1;
    private int pXAxis_;
    /**
     * <code>optional uint32 p_xAxis = 1;</code>
     *
     * <pre>
     *&#47; Multiple of 20 mG SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasPXAxis() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional uint32 p_xAxis = 1;</code>
     *
     * <pre>
     *&#47; Multiple of 20 mG SupportedBy: MXT160, MXT162
     * </pre>
     */
    public int getPXAxis() {
      return pXAxis_;
    }

    public static final int N_XAXIS_FIELD_NUMBER = 2;
    private int nXAxis_;
    /**
     * <code>optional uint32 n_xAxis = 2;</code>
     *
     * <pre>
     *&#47; Multiple of 20 mG SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasNXAxis() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional uint32 n_xAxis = 2;</code>
     *
     * <pre>
     *&#47; Multiple of 20 mG SupportedBy: MXT160, MXT162
     * </pre>
     */
    public int getNXAxis() {
      return nXAxis_;
    }

    public static final int P_YAXIS_FIELD_NUMBER = 3;
    private int pYAxis_;
    /**
     * <code>optional uint32 p_yAxis = 3;</code>
     *
     * <pre>
     *&#47; Multiple of 20 mG SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasPYAxis() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional uint32 p_yAxis = 3;</code>
     *
     * <pre>
     *&#47; Multiple of 20 mG SupportedBy: MXT160, MXT162
     * </pre>
     */
    public int getPYAxis() {
      return pYAxis_;
    }

    public static final int N_YAXIS_FIELD_NUMBER = 4;
    private int nYAxis_;
    /**
     * <code>optional uint32 n_yAxis = 4;</code>
     *
     * <pre>
     *&#47; Multiple of 20 mG SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasNYAxis() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional uint32 n_yAxis = 4;</code>
     *
     * <pre>
     *&#47; Multiple of 20 mG SupportedBy: MXT160, MXT162
     * </pre>
     */
    public int getNYAxis() {
      return nYAxis_;
    }

    public static final int P_ZAXIS_FIELD_NUMBER = 5;
    private int pZAxis_;
    /**
     * <code>optional uint32 p_zAxis = 5;</code>
     *
     * <pre>
     *&#47; Multiple of 20 mG SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasPZAxis() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional uint32 p_zAxis = 5;</code>
     *
     * <pre>
     *&#47; Multiple of 20 mG SupportedBy: MXT160, MXT162
     * </pre>
     */
    public int getPZAxis() {
      return pZAxis_;
    }

    public static final int N_ZAXIS_FIELD_NUMBER = 6;
    private int nZAxis_;
    /**
     * <code>optional uint32 n_zAxis = 6;</code>
     *
     * <pre>
     *&#47; Multiple of 20 mG SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasNZAxis() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional uint32 n_zAxis = 6;</code>
     *
     * <pre>
     *&#47; Multiple of 20 mG SupportedBy: MXT160, MXT162
     * </pre>
     */
    public int getNZAxis() {
      return nZAxis_;
    }

    private void initFields() {
      pXAxis_ = 0;
      nXAxis_ = 0;
      pYAxis_ = 0;
      nYAxis_ = 0;
      pZAxis_ = 0;
      nZAxis_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, pXAxis_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, nXAxis_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(3, pYAxis_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeUInt32(4, nYAxis_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeUInt32(5, pZAxis_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeUInt32(6, nZAxis_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, pXAxis_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, nXAxis_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, pYAxis_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, nYAxis_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(5, pZAxis_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(6, nZAxis_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static maxpb.MaxpbTelemetry.AxisSample parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static maxpb.MaxpbTelemetry.AxisSample parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetry.AxisSample parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static maxpb.MaxpbTelemetry.AxisSample parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetry.AxisSample parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static maxpb.MaxpbTelemetry.AxisSample parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetry.AxisSample parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static maxpb.MaxpbTelemetry.AxisSample parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static maxpb.MaxpbTelemetry.AxisSample parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static maxpb.MaxpbTelemetry.AxisSample parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(maxpb.MaxpbTelemetry.AxisSample prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code maxpb.AxisSample}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:maxpb.AxisSample)
        maxpb.MaxpbTelemetry.AxisSampleOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return maxpb.MaxpbTelemetry.internal_static_maxpb_AxisSample_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return maxpb.MaxpbTelemetry.internal_static_maxpb_AxisSample_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                maxpb.MaxpbTelemetry.AxisSample.class, maxpb.MaxpbTelemetry.AxisSample.Builder.class);
      }

      // Construct using maxpb.MaxpbTelemetry.AxisSample.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        pXAxis_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        nXAxis_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        pYAxis_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        nYAxis_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        pZAxis_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        nZAxis_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return maxpb.MaxpbTelemetry.internal_static_maxpb_AxisSample_descriptor;
      }

      public maxpb.MaxpbTelemetry.AxisSample getDefaultInstanceForType() {
        return maxpb.MaxpbTelemetry.AxisSample.getDefaultInstance();
      }

      public maxpb.MaxpbTelemetry.AxisSample build() {
        maxpb.MaxpbTelemetry.AxisSample result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public maxpb.MaxpbTelemetry.AxisSample buildPartial() {
        maxpb.MaxpbTelemetry.AxisSample result = new maxpb.MaxpbTelemetry.AxisSample(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.pXAxis_ = pXAxis_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.nXAxis_ = nXAxis_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.pYAxis_ = pYAxis_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.nYAxis_ = nYAxis_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.pZAxis_ = pZAxis_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.nZAxis_ = nZAxis_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof maxpb.MaxpbTelemetry.AxisSample) {
          return mergeFrom((maxpb.MaxpbTelemetry.AxisSample)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(maxpb.MaxpbTelemetry.AxisSample other) {
        if (other == maxpb.MaxpbTelemetry.AxisSample.getDefaultInstance()) return this;
        if (other.hasPXAxis()) {
          setPXAxis(other.getPXAxis());
        }
        if (other.hasNXAxis()) {
          setNXAxis(other.getNXAxis());
        }
        if (other.hasPYAxis()) {
          setPYAxis(other.getPYAxis());
        }
        if (other.hasNYAxis()) {
          setNYAxis(other.getNYAxis());
        }
        if (other.hasPZAxis()) {
          setPZAxis(other.getPZAxis());
        }
        if (other.hasNZAxis()) {
          setNZAxis(other.getNZAxis());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        maxpb.MaxpbTelemetry.AxisSample parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (maxpb.MaxpbTelemetry.AxisSample) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int pXAxis_ ;
      /**
       * <code>optional uint32 p_xAxis = 1;</code>
       *
       * <pre>
       *&#47; Multiple of 20 mG SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasPXAxis() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint32 p_xAxis = 1;</code>
       *
       * <pre>
       *&#47; Multiple of 20 mG SupportedBy: MXT160, MXT162
       * </pre>
       */
      public int getPXAxis() {
        return pXAxis_;
      }
      /**
       * <code>optional uint32 p_xAxis = 1;</code>
       *
       * <pre>
       *&#47; Multiple of 20 mG SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setPXAxis(int value) {
        bitField0_ |= 0x00000001;
        pXAxis_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 p_xAxis = 1;</code>
       *
       * <pre>
       *&#47; Multiple of 20 mG SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearPXAxis() {
        bitField0_ = (bitField0_ & ~0x00000001);
        pXAxis_ = 0;
        onChanged();
        return this;
      }

      private int nXAxis_ ;
      /**
       * <code>optional uint32 n_xAxis = 2;</code>
       *
       * <pre>
       *&#47; Multiple of 20 mG SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasNXAxis() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional uint32 n_xAxis = 2;</code>
       *
       * <pre>
       *&#47; Multiple of 20 mG SupportedBy: MXT160, MXT162
       * </pre>
       */
      public int getNXAxis() {
        return nXAxis_;
      }
      /**
       * <code>optional uint32 n_xAxis = 2;</code>
       *
       * <pre>
       *&#47; Multiple of 20 mG SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setNXAxis(int value) {
        bitField0_ |= 0x00000002;
        nXAxis_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 n_xAxis = 2;</code>
       *
       * <pre>
       *&#47; Multiple of 20 mG SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearNXAxis() {
        bitField0_ = (bitField0_ & ~0x00000002);
        nXAxis_ = 0;
        onChanged();
        return this;
      }

      private int pYAxis_ ;
      /**
       * <code>optional uint32 p_yAxis = 3;</code>
       *
       * <pre>
       *&#47; Multiple of 20 mG SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasPYAxis() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional uint32 p_yAxis = 3;</code>
       *
       * <pre>
       *&#47; Multiple of 20 mG SupportedBy: MXT160, MXT162
       * </pre>
       */
      public int getPYAxis() {
        return pYAxis_;
      }
      /**
       * <code>optional uint32 p_yAxis = 3;</code>
       *
       * <pre>
       *&#47; Multiple of 20 mG SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setPYAxis(int value) {
        bitField0_ |= 0x00000004;
        pYAxis_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 p_yAxis = 3;</code>
       *
       * <pre>
       *&#47; Multiple of 20 mG SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearPYAxis() {
        bitField0_ = (bitField0_ & ~0x00000004);
        pYAxis_ = 0;
        onChanged();
        return this;
      }

      private int nYAxis_ ;
      /**
       * <code>optional uint32 n_yAxis = 4;</code>
       *
       * <pre>
       *&#47; Multiple of 20 mG SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasNYAxis() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional uint32 n_yAxis = 4;</code>
       *
       * <pre>
       *&#47; Multiple of 20 mG SupportedBy: MXT160, MXT162
       * </pre>
       */
      public int getNYAxis() {
        return nYAxis_;
      }
      /**
       * <code>optional uint32 n_yAxis = 4;</code>
       *
       * <pre>
       *&#47; Multiple of 20 mG SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setNYAxis(int value) {
        bitField0_ |= 0x00000008;
        nYAxis_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 n_yAxis = 4;</code>
       *
       * <pre>
       *&#47; Multiple of 20 mG SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearNYAxis() {
        bitField0_ = (bitField0_ & ~0x00000008);
        nYAxis_ = 0;
        onChanged();
        return this;
      }

      private int pZAxis_ ;
      /**
       * <code>optional uint32 p_zAxis = 5;</code>
       *
       * <pre>
       *&#47; Multiple of 20 mG SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasPZAxis() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional uint32 p_zAxis = 5;</code>
       *
       * <pre>
       *&#47; Multiple of 20 mG SupportedBy: MXT160, MXT162
       * </pre>
       */
      public int getPZAxis() {
        return pZAxis_;
      }
      /**
       * <code>optional uint32 p_zAxis = 5;</code>
       *
       * <pre>
       *&#47; Multiple of 20 mG SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setPZAxis(int value) {
        bitField0_ |= 0x00000010;
        pZAxis_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 p_zAxis = 5;</code>
       *
       * <pre>
       *&#47; Multiple of 20 mG SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearPZAxis() {
        bitField0_ = (bitField0_ & ~0x00000010);
        pZAxis_ = 0;
        onChanged();
        return this;
      }

      private int nZAxis_ ;
      /**
       * <code>optional uint32 n_zAxis = 6;</code>
       *
       * <pre>
       *&#47; Multiple of 20 mG SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasNZAxis() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional uint32 n_zAxis = 6;</code>
       *
       * <pre>
       *&#47; Multiple of 20 mG SupportedBy: MXT160, MXT162
       * </pre>
       */
      public int getNZAxis() {
        return nZAxis_;
      }
      /**
       * <code>optional uint32 n_zAxis = 6;</code>
       *
       * <pre>
       *&#47; Multiple of 20 mG SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setNZAxis(int value) {
        bitField0_ |= 0x00000020;
        nZAxis_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 n_zAxis = 6;</code>
       *
       * <pre>
       *&#47; Multiple of 20 mG SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearNZAxis() {
        bitField0_ = (bitField0_ & ~0x00000020);
        nZAxis_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:maxpb.AxisSample)
    }

    static {
      defaultInstance = new AxisSample(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:maxpb.AxisSample)
  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_maxpb_AccelerometerData_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_maxpb_AccelerometerData_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_maxpb_TelemetryEventsTransmissionMask_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_maxpb_TelemetryEventsTransmissionMask_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_maxpb_TelemetryEvents_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_maxpb_TelemetryEvents_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_maxpb_TelemetryFlags_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_maxpb_TelemetryFlags_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_maxpb_OdometerInfo_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_maxpb_OdometerInfo_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_maxpb_SpeedInfo_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_maxpb_SpeedInfo_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_maxpb_RpmInfo_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_maxpb_RpmInfo_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_maxpb_AngleInfo_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_maxpb_AngleInfo_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_maxpb_FuelInfo_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_maxpb_FuelInfo_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_maxpb_EngineInfo_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_maxpb_EngineInfo_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_maxpb_EnvironmentInfo_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_maxpb_EnvironmentInfo_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_maxpb_ECUInfo_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_maxpb_ECUInfo_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_maxpb_AccelerometerEventHistory_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_maxpb_AccelerometerEventHistory_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_maxpb_AccelerometerHistory_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_maxpb_AccelerometerHistory_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_maxpb_TelemetryInfo_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_maxpb_TelemetryInfo_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_maxpb_SpeedsConfig_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_maxpb_SpeedsConfig_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_maxpb_TimersConfig_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_maxpb_TimersConfig_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_maxpb_GSensorAlarmConfig_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_maxpb_GSensorAlarmConfig_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_maxpb_RpmConfig_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_maxpb_RpmConfig_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_maxpb_DeltaConfig_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_maxpb_DeltaConfig_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_maxpb_TelemetryConfig_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_maxpb_TelemetryConfig_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_maxpb_BlackBoxData_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_maxpb_BlackBoxData_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_maxpb_BlackBoxMinute_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_maxpb_BlackBoxMinute_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_maxpb_BlackBoxSecond_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_maxpb_BlackBoxSecond_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_maxpb_AxisSample_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_maxpb_AxisSample_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\025maxpb_telemetry.proto\022\005maxpb\032\026maxpb_in" +
      "terfaces.proto\032\033maxpb_telemetry_delta.pr" +
      "oto\"\272\001\n\021AccelerometerData\022\033\n\023maxRollingA" +
      "xisFront\030\001 \001(\r\022\032\n\022maxRollingAxisBack\030\002 \001" +
      "(\r\022\027\n\017maxPitchingAxis\030\003 \001(\r\022\034\n\024meanRolli" +
      "ngAxisFront\030\004 \001(\r\022\033\n\023meanRollingAxisBack" +
      "\030\005 \001(\r\022\030\n\020meanPitchingAxis\030\006 \001(\r\"\202\002\n\037Tel" +
      "emetryEventsTransmissionMask\022\024\n\014accelera" +
      "tion\030\001 \001(\r\022\r\n\005brake\030\002 \001(\r\022\014\n\004bump\030\003 \001(\r\022" +
      "\r\n\005curve\030\004 \001(\r\022\r\n\005crash\030\005 \001(\r\022\023\n\013calibra",
      "tion\030\006 \001(\r\022\025\n\rstoppedExcess\030\007 \001(\r\022\030\n\020mov" +
      "ingAndStopped\030\010 \001(\r\022\020\n\010maxSpeed\030\t \001(\r\022\025\n" +
      "\rmaxRainySpeed\030\n \001(\r\022\016\n\006angles\030\013 \001(\r\022\017\n\007" +
      "history\030\014 \001(\r\"\200\003\n\017TelemetryEvents\022&\n\007eve" +
      "ntID\030\001 \002(\0162\025.maxpb.TelemetryEvent\022\020\n\010dur" +
      "ation\030\002 \001(\r\022\024\n\014maximumValue\030\003 \001(\005\022\021\n\tmea" +
      "nValue\030\004 \001(\005\022\024\n\014minimumValue\030\005 \001(\005\022\033\n\023pa" +
      "rameterConfigured\030\006 \001(\005\0228\n\017parameterSour" +
      "ce\030\007 \001(\0162\037.maxpb.TelemetryParameterSourc" +
      "e\022/\n\013valueSource\030\010 \001(\0162\032.maxpb.Telemetry",
      "DataSource\022\024\n\014initialSpeed\030\t \001(\005\022\022\n\nfina" +
      "lSpeed\030\n \001(\005\022\021\n\ttimeToMax\030\013 \001(\r\022/\n\raccel" +
      "erometer\030\r \001(\0132\030.maxpb.AccelerometerData" +
      "\"\245\003\n\016TelemetryFlags\022\021\n\toverSpeed\030\001 \001(\010\022\025" +
      "\n\rstoppedExcess\030\002 \001(\010\022\016\n\006moving\030\003 \001(\010\0225\n" +
      "\022accelerometerState\030\004 \001(\0162\031.maxpb.Accele" +
      "rometerState\022\034\n\024vehicleOperationTime\030\005 \001" +
      "(\r\022\016\n\006clutch\030\006 \001(\010\022\r\n\005brake\030\007 \001(\010\022\024\n\014par" +
      "kingBrake\030\010 \001(\010\022\022\n\nmotorBrake\030\t \001(\010\022\032\n\022w" +
      "indowShieldWipers\030\n \001(\010\022\022\n\ndoorClosed\030\013 ",
      "\001(\010\022\022\n\ndoorLocked\030\014 \001(\010\022\r\n\005trunk\030\r \001(\010\022\020" +
      "\n\010seatBelt\030\016 \001(\010\022\022\n\nheadlights\030\017 \001(\010\022+\n\r" +
      "tractionState\030\020 \001(\0162\024.maxpb.TractionStat" +
      "e\022\025\n\rmoduleRemoved\030\021 \001(\010\"a\n\014OdometerInfo" +
      "\022(\n\004main\030\001 \002(\0162\032.maxpb.TelemetryDataSour" +
      "ce\022\013\n\003gps\030\002 \001(\004\022\r\n\005pulse\030\003 \001(\004\022\013\n\003can\030\004 " +
      "\001(\004\"^\n\tSpeedInfo\022(\n\004main\030\001 \002(\0162\032.maxpb.T" +
      "elemetryDataSource\022\013\n\003gps\030\002 \001(\r\022\r\n\005pulse" +
      "\030\003 \001(\r\022\013\n\003can\030\004 \001(\r\"O\n\007RpmInfo\022(\n\004main\030\001" +
      " \002(\0162\032.maxpb.TelemetryDataSource\022\r\n\005puls",
      "e\030\002 \001(\r\022\013\n\003can\030\003 \001(\r\"8\n\tAngleInfo\022\025\n\rpit" +
      "chingAngle\030\001 \001(\005\022\024\n\014rollingAngle\030\002 \001(\005\"\244" +
      "\001\n\010FuelInfo\022\026\n\016fuelLevelTank1\030\001 \001(\r\022\026\n\016f" +
      "uelLevelTank2\030\002 \001(\r\022\027\n\017fuelConsumption\030\003" +
      " \001(\r\022!\n\010fuelType\030\004 \001(\0162\017.maxpb.FuelType\022" +
      "\024\n\014ethanolRatio\030\005 \001(\r\022\026\n\016engineFuelRate\030" +
      "\006 \001(\r\"\274\001\n\nEngineInfo\022\034\n\024intakeAirTempera" +
      "ture\030\001 \001(\005\022\025\n\rintakeAirFlow\030\002 \001(\r\022\026\n\016oil" +
      "Temperature\030\003 \001(\005\022\027\n\017engineRefTorque\030\004 \001" +
      "(\r\022\031\n\021engineTemperature\030\005 \001(\005\022\023\n\013current",
      "Gear\030\006 \001(\005\022\030\n\020throttlePosition\030\007 \001(\r\"E\n\017" +
      "EnvironmentInfo\022\032\n\022barometricPressure\030\001 " +
      "\001(\r\022\026\n\016airTemperature\030\002 \001(\005\"\276\001\n\007ECUInfo\022" +
      "\034\n\024controlModuleVoltage\030\001 \001(\r\022\013\n\003VIN\030\002 \001" +
      "(\t\022\032\n\022malFunctionIndLamp\030\003 \001(\010\022\020\n\010dtcCod" +
      "es\030\004 \003(\r\022%\n\ncanBitRate\030\005 \001(\0162\021.maxpb.Can" +
      "BitRate\022\025\n\risCanExtended\030\006 \001(\010\022\034\n\024avaiab" +
      "leObdInfoReady\030\007 \001(\010\"\357\001\n\031AccelerometerEv" +
      "entHistory\022\020\n\010latitude\030\001 \001(\017\022\021\n\tlongitud" +
      "e\030\002 \001(\017\022\r\n\005speed\030\003 \001(\r\022\013\n\003rpm\030\004 \001(\r\022\021\n\ta",
      "xisFront\030\005 \001(\r\022\020\n\010axisBack\030\006 \001(\r\022\021\n\taxis" +
      "Right\030\007 \001(\r\022\020\n\010axisLeft\030\010 \001(\r\022\023\n\013axisAbs" +
      "Side\030\t \001(\r\022\016\n\006axisUp\030\n \001(\r\022\020\n\010axisDown\030\013" +
      " \001(\r\022\020\n\010dateTime\030\014 \001(\004\"\227\001\n\024Accelerometer" +
      "History\022\020\n\010dateTime\030\001 \002(\004\022:\n\016historySamp" +
      "les\030\002 \002(\0162\".maxpb.AccelerometerHistorySa" +
      "mples\0221\n\007history\030\003 \003(\0132 .maxpb.Accelerom" +
      "eterEventHistory\"\356\002\n\rTelemetryInfo\022$\n\005fl" +
      "ags\030\001 \001(\0132\025.maxpb.TelemetryFlags\022%\n\010odom" +
      "eter\030\002 \001(\0132\023.maxpb.OdometerInfo\022\037\n\005speed",
      "\030\003 \001(\0132\020.maxpb.SpeedInfo\022\033\n\003rpm\030\004 \001(\0132\016." +
      "maxpb.RpmInfo\022 \n\006angles\030\005 \001(\0132\020.maxpb.An" +
      "gleInfo\022\035\n\004fuel\030\006 \001(\0132\017.maxpb.FuelInfo\022!" +
      "\n\006engine\030\007 \001(\0132\021.maxpb.EngineInfo\022+\n\013env" +
      "ironment\030\010 \001(\0132\026.maxpb.EnvironmentInfo\022\033" +
      "\n\003ecu\030\t \001(\0132\016.maxpb.ECUInfo\022$\n\005delta\030\n \003" +
      "(\0132\025.maxpb.TelemetryDelta\"\202\001\n\014SpeedsConf" +
      "ig\022\020\n\010maxSpeed\030\001 \001(\r\022\025\n\rmaxRainySpeed\030\002 " +
      "\001(\r\022\022\n\ndebounceOn\030\003 \001(\r\022\031\n\021histogramSlot" +
      "sQty\030\004 \001(\r\022\032\n\022histogramSlotsSize\030\005 \001(\r\"%",
      "\n\014TimersConfig\022\025\n\rstoppedExcess\030\001 \001(\r\"7\n" +
      "\022GSensorAlarmConfig\022\017\n\007trigger\030\001 \001(\r\022\020\n\010" +
      "debounce\030\002 \001(\r\"\247\001\n\tRpmConfig\022\022\n\nminBlueR" +
      "pm\030\001 \001(\r\022\022\n\nmaxBlueRpm\030\002 \001(\r\022\023\n\013minGreen" +
      "Rpm\030\003 \001(\r\022\023\n\013maxGreenRpm\030\004 \001(\r\022\021\n\tminRed" +
      "Rpm\030\005 \001(\r\022\031\n\021histogramSlotsQty\030\006 \001(\r\022\032\n\022" +
      "histogramSlotsSize\030\007 \001(\r\"\213\001\n\013DeltaConfig" +
      "\022\022\n\nignitionOn\030\001 \001(\010\022\023\n\013ignitionOff\030\002 \001(" +
      "\010\022\017\n\007stopped\030\003 \001(\010\022\016\n\006moving\030\004 \001(\010\022\020\n\010in" +
      "terval\030\005 \001(\r\022\016\n\006hourly\030\006 \001(\010\022\020\n\010position",
      "\030\007 \001(\010\"\323\006\n\017TelemetryConfig\022#\n\006speeds\030\001 \001" +
      "(\0132\023.maxpb.SpeedsConfig\022#\n\006timers\030\002 \001(\0132" +
      "\023.maxpb.TimersConfig\022\026\n\016debounceMoving\030\003" +
      " \001(\r\022\027\n\017debounceStopped\030\004 \001(\r\022\023\n\013pitchin" +
      "gMin\030\005 \001(\005\022\023\n\013pitchingMax\030\006 \001(\005\022\022\n\nrolli" +
      "ngMin\030\007 \001(\005\022\022\n\nrollingMax\030\010 \001(\005\0223\n\020hardA" +
      "cceleration\030\t \001(\0132\031.maxpb.GSensorAlarmCo" +
      "nfig\022,\n\thardBrake\030\n \001(\0132\031.maxpb.GSensorA" +
      "larmConfig\022,\n\thardCurve\030\013 \001(\0132\031.maxpb.GS" +
      "ensorAlarmConfig\022+\n\010hardBump\030\014 \001(\0132\031.max",
      "pb.GSensorAlarmConfig\022,\n\thardCrash\030\r \001(\013" +
      "2\031.maxpb.GSensorAlarmConfig\022:\n\neventsMas" +
      "k\030\016 \001(\0132&.maxpb.TelemetryEventsTransmiss" +
      "ionMask\022\035\n\003rpm\030\017 \001(\0132\020.maxpb.RpmConfig\022!" +
      "\n\005delta\030\020 \001(\0132\022.maxpb.DeltaConfig\022:\n\016his" +
      "torySamples\030\021 \001(\0162\".maxpb.AccelerometerH" +
      "istorySamples\022\030\n\020historyEventMask\030\022 \001(\r\022" +
      "\035\n\025accOdometerSpeedLimit\030\023 \001(\r\022%\n\035minima" +
      "lTimeBetweenCrashEvents\030\024 \001(\r\022&\n\036recalib" +
      "AccelerometerNoExtPower\030\025 \001(\010\022\027\n\017fixedCa",
      "nLibrary\030\026 \001(\010\022\020\n\010blackBox\030\027 \001(\010\022\032\n\022blac" +
      "kBoxReportTime\030\030 \001(\r\"Y\n\014BlackBoxData\022\020\n\010" +
      "deviceID\030\001 \002(\004\022\020\n\010packetID\030\002 \002(\004\022%\n\006minu" +
      "te\030\003 \002(\0132\025.maxpb.BlackBoxMinute\"\365\023\n\016Blac" +
      "kBoxMinute\022\020\n\010dateTime\030\001 \002(\r\022\020\n\010latitude" +
      "\030\002 \002(\017\022\021\n\tlongitude\030\003 \002(\017\022\020\n\010odometer\030\004 " +
      "\002(\004\022\'\n\010second00\030\005 \001(\0132\025.maxpb.BlackBoxSe" +
      "cond\022\'\n\010second01\030\006 \001(\0132\025.maxpb.BlackBoxS" +
      "econd\022\'\n\010second02\030\007 \001(\0132\025.maxpb.BlackBox" +
      "Second\022\'\n\010second03\030\010 \001(\0132\025.maxpb.BlackBo",
      "xSecond\022\'\n\010second04\030\t \001(\0132\025.maxpb.BlackB" +
      "oxSecond\022\'\n\010second05\030\n \001(\0132\025.maxpb.Black" +
      "BoxSecond\022\'\n\010second06\030\013 \001(\0132\025.maxpb.Blac" +
      "kBoxSecond\022\'\n\010second07\030\014 \001(\0132\025.maxpb.Bla" +
      "ckBoxSecond\022\'\n\010second08\030\r \001(\0132\025.maxpb.Bl" +
      "ackBoxSecond\022\'\n\010second09\030\016 \001(\0132\025.maxpb.B" +
      "lackBoxSecond\022\'\n\010second10\030\017 \001(\0132\025.maxpb." +
      "BlackBoxSecond\022\'\n\010second11\030\020 \001(\0132\025.maxpb" +
      ".BlackBoxSecond\022\'\n\010second12\030\021 \001(\0132\025.maxp" +
      "b.BlackBoxSecond\022\'\n\010second13\030\022 \001(\0132\025.max",
      "pb.BlackBoxSecond\022\'\n\010second14\030\023 \001(\0132\025.ma" +
      "xpb.BlackBoxSecond\022\'\n\010second15\030\024 \001(\0132\025.m" +
      "axpb.BlackBoxSecond\022\'\n\010second16\030\025 \001(\0132\025." +
      "maxpb.BlackBoxSecond\022\'\n\010second17\030\026 \001(\0132\025" +
      ".maxpb.BlackBoxSecond\022\'\n\010second18\030\027 \001(\0132" +
      "\025.maxpb.BlackBoxSecond\022\'\n\010second19\030\030 \001(\013" +
      "2\025.maxpb.BlackBoxSecond\022\'\n\010second20\030\031 \001(" +
      "\0132\025.maxpb.BlackBoxSecond\022\'\n\010second21\030\032 \001" +
      "(\0132\025.maxpb.BlackBoxSecond\022\'\n\010second22\030\033 " +
      "\001(\0132\025.maxpb.BlackBoxSecond\022\'\n\010second23\030\034",
      " \001(\0132\025.maxpb.BlackBoxSecond\022\'\n\010second24\030" +
      "\035 \001(\0132\025.maxpb.BlackBoxSecond\022\'\n\010second25" +
      "\030\036 \001(\0132\025.maxpb.BlackBoxSecond\022\'\n\010second2" +
      "6\030\037 \001(\0132\025.maxpb.BlackBoxSecond\022\'\n\010second" +
      "27\030  \001(\0132\025.maxpb.BlackBoxSecond\022\'\n\010secon" +
      "d28\030! \001(\0132\025.maxpb.BlackBoxSecond\022\'\n\010seco" +
      "nd29\030\" \001(\0132\025.maxpb.BlackBoxSecond\022\'\n\010sec" +
      "ond30\030# \001(\0132\025.maxpb.BlackBoxSecond\022\'\n\010se" +
      "cond31\030$ \001(\0132\025.maxpb.BlackBoxSecond\022\'\n\010s" +
      "econd32\030% \001(\0132\025.maxpb.BlackBoxSecond\022\'\n\010",
      "second33\030& \001(\0132\025.maxpb.BlackBoxSecond\022\'\n" +
      "\010second34\030\' \001(\0132\025.maxpb.BlackBoxSecond\022\'" +
      "\n\010second35\030( \001(\0132\025.maxpb.BlackBoxSecond\022" +
      "\'\n\010second36\030) \001(\0132\025.maxpb.BlackBoxSecond" +
      "\022\'\n\010second37\030* \001(\0132\025.maxpb.BlackBoxSecon" +
      "d\022\'\n\010second38\030+ \001(\0132\025.maxpb.BlackBoxSeco" +
      "nd\022\'\n\010second39\030, \001(\0132\025.maxpb.BlackBoxSec" +
      "ond\022\'\n\010second40\030- \001(\0132\025.maxpb.BlackBoxSe" +
      "cond\022\'\n\010second41\030. \001(\0132\025.maxpb.BlackBoxS" +
      "econd\022\'\n\010second42\030/ \001(\0132\025.maxpb.BlackBox",
      "Second\022\'\n\010second43\0300 \001(\0132\025.maxpb.BlackBo" +
      "xSecond\022\'\n\010second44\0301 \001(\0132\025.maxpb.BlackB" +
      "oxSecond\022\'\n\010second45\0302 \001(\0132\025.maxpb.Black" +
      "BoxSecond\022\'\n\010second46\0303 \001(\0132\025.maxpb.Blac" +
      "kBoxSecond\022\'\n\010second47\0304 \001(\0132\025.maxpb.Bla" +
      "ckBoxSecond\022\'\n\010second48\0305 \001(\0132\025.maxpb.Bl" +
      "ackBoxSecond\022\'\n\010second49\0306 \001(\0132\025.maxpb.B" +
      "lackBoxSecond\022\'\n\010second50\0307 \001(\0132\025.maxpb." +
      "BlackBoxSecond\022\'\n\010second51\0308 \001(\0132\025.maxpb" +
      ".BlackBoxSecond\022\'\n\010second52\0309 \001(\0132\025.maxp",
      "b.BlackBoxSecond\022\'\n\010second53\030: \001(\0132\025.max" +
      "pb.BlackBoxSecond\022\'\n\010second54\030; \001(\0132\025.ma" +
      "xpb.BlackBoxSecond\022\'\n\010second55\030< \001(\0132\025.m" +
      "axpb.BlackBoxSecond\022\'\n\010second56\030= \001(\0132\025." +
      "maxpb.BlackBoxSecond\022\'\n\010second57\030> \001(\0132\025" +
      ".maxpb.BlackBoxSecond\022\'\n\010second58\030? \001(\0132" +
      "\025.maxpb.BlackBoxSecond\022\'\n\010second59\030@ \001(\013" +
      "2\025.maxpb.BlackBoxSecond\"\313\001\n\016BlackBoxSeco" +
      "nd\022\022\n\np_latitude\030\001 \001(\r\022\022\n\nn_latitude\030\002 \001" +
      "(\r\022\023\n\013p_longitude\030\003 \001(\r\022\023\n\013n_longitude\030\004",
      " \001(\r\022\r\n\005speed\030\005 \001(\r\022\021\n\tdirection\030\006 \001(\r\022\013" +
      "\n\003rpm\030\007 \001(\r\022\020\n\010odometer\030\010 \001(\r\022&\n\013axisSam" +
      "ples\030\t \003(\0132\021.maxpb.AxisSample\"r\n\nAxisSam" +
      "ple\022\017\n\007p_xAxis\030\001 \001(\r\022\017\n\007n_xAxis\030\002 \001(\r\022\017\n" +
      "\007p_yAxis\030\003 \001(\r\022\017\n\007n_yAxis\030\004 \001(\r\022\017\n\007p_zAx" +
      "is\030\005 \001(\r\022\017\n\007n_zAxis\030\006 \001(\r*\251\004\n\016TelemetryE" +
      "vent\022\013\n\007TE_NONE\020\000\022\023\n\017TE_ACCELERATION\020\001\022\014" +
      "\n\010TE_BRAKE\020\002\022\013\n\007TE_BUMP\020\003\022\014\n\010TE_CURVE\020\004\022" +
      "\014\n\010TE_CRASH\020\005\022\027\n\023TE_CALIBRATION_DONE\020\006\022\032" +
      "\n\026TE_CALIBRATION_RESETED\020\007\022\025\n\021TE_STOPPED",
      "_EXCESS\020\010\022\025\n\021TE_STOP_TO_MOVING\020\t\022\025\n\021TE_M" +
      "OVING_TO_STOP\020\n\022\026\n\022TE_MAX_SPEED_START\020\013\022" +
      "\024\n\020TE_MAX_SPEED_END\020\014\022\031\n\025TE_MAX_SPEED_CA" +
      "NCELED\020\r\022\034\n\030TE_MAX_RAINY_SPEED_START\020\016\022\032" +
      "\n\026TE_MAX_RAINY_SPEED_END\020\017\022\037\n\033TE_MAX_RAI" +
      "NY_SPEED_CANCELED\020\020\022\017\n\013TE_PITCHING\020\021\022\016\n\n" +
      "TE_ROLLING\020\022\022\r\n\tTE_DELTAS\020\023\022\016\n\nTE_HISTOR" +
      "Y\020\024\022\025\n\021TE_MODULE_REMOVED\020\025\022\r\n\tTE_RFU_01\020" +
      "\026\022\r\n\tTE_RFU_02\020\027\022\r\n\tTE_RFU_03\020\030\022\r\n\tTE_RF" +
      "U_04\020\031\022\r\n\tTE_RFU_05\020\032*\231\001\n\022AccelerometerS",
      "tate\022\014\n\010AST_NONE\020\000\022\026\n\022AST_IN_CALIBRATION" +
      "\020\001\022\r\n\tAST_READY\020\002\022\016\n\nAST_RFU_01\020\003\022\016\n\nAST" +
      "_RFU_02\020\004\022\016\n\nAST_RFU_03\020\005\022\016\n\nAST_RFU_04\020" +
      "\006\022\016\n\nAST_RFU_05\020\007*\233\001\n\033AccelerometerHisto" +
      "rySamples\022\n\n\006AH_4HZ\020\000\022\n\n\006AH_2HZ\020\001\022\r\n\tAH_" +
      "1_33HZ\020\002\022\n\n\006AH_1HZ\020\003\022\r\n\tAH_RFU_01\020\004\022\r\n\tA" +
      "H_RFU_02\020\005\022\r\n\tAH_RFU_03\020\006\022\r\n\tAH_RFU_04\020\007" +
      "\022\r\n\tAH_RFU_05\020\010*\237\001\n\023TelemetryDataSource\022" +
      "\013\n\007TDS_GPS\020\000\022\013\n\007TDS_CAN\020\001\022\r\n\tTDS_PULSE\020\002" +
      "\022\017\n\013TDS_GSENSOR\020\003\022\016\n\nTDS_RFU_01\020\004\022\016\n\nTDS",
      "_RFU_02\020\005\022\016\n\nTDS_RFU_03\020\006\022\016\n\nTDS_RFU_04\020" +
      "\007\022\016\n\nTDS_RFU_05\020\010*\340\001\n\030TelemetryParameter" +
      "Source\022\016\n\nTPS_CONFIG\020\000\022\024\n\020TPS_GEOREFEREN" +
      "CE\020\001\022\030\n\024TPS_EMBEDDED_ACTIONS\020\002\022\034\n\030TPS_DY" +
      "NAMIC_GEOREFERENCE\020\003\022\026\n\022TPS_DYNAMIC_CONF" +
      "IG\020\004\022\016\n\nTPS_RFU_01\020\005\022\016\n\nTPS_RFU_02\020\006\022\016\n\n" +
      "TPS_RFU_03\020\007\022\016\n\nTPS_RFU_04\020\010\022\016\n\nTPS_RFU_" +
      "05\020\t*\272\005\n\010FuelType\022\025\n\021FUT_NOT_AVAILABLE\020\000" +
      "\022\020\n\014FUT_GASOLINE\020\001\022\020\n\014FUT_METHANOL\020\002\022\017\n\013" +
      "FUT_ETHANOL\020\003\022\016\n\nFUT_DIESEL\020\004\022\013\n\007FUT_LPG",
      "\020\005\022\013\n\007FUT_CNG\020\006\022\017\n\013FUT_PROPANE\020\007\022\017\n\013FUT_" +
      "ELETRIC\020\010\022\037\n\033FUT_BIFUEL_RUNNING_GASOLINE" +
      "\020\t\022\037\n\033FUT_BIFUEL_RUNNING_METHANOL\020\n\022\036\n\032F" +
      "UT_BIFUEL_RUNNING_ETHANOL\020\013\022\032\n\026FUT_BIFUE" +
      "L_RUNNING_LPG\020\014\022\032\n\026FUT_BIFUEL_RUNNING_CN" +
      "G\020\r\022\036\n\032FUT_BIFUEL_RUNNING_PROPANE\020\016\022\"\n\036F" +
      "UT_BIFUEL_RUNNING_ELECTRICITY\020\017\022%\n!FUT_B" +
      "IFUEL_RUNNING_ELETRIC_AND_CE\020\020\022\027\n\023FUT_HY" +
      "BRID_GASOLINE\020\021\022\026\n\022FUT_HYBRID_ETHANOL\020\022\022" +
      "\025\n\021FUT_HYBRID_DIESEL\020\023\022\026\n\022FUT_HYBRID_ELE",
      "TRIC\020\024\022%\n!FUT_HYBRID_RUNNING_ELETRIC_AND" +
      "_CE\020\025\022\033\n\027FUT_HYBRID_REGENERATIVE\020\026\022\035\n\031FU" +
      "T_BIFUEL_RUNNING_DIESEL\020\027\022\016\n\nFUT_RFU_01\020" +
      "\030\022\016\n\nFUT_RFU_02\020\031\022\016\n\nFUT_RFU_03\020\032\022\016\n\nFUT" +
      "_RFU_04\020\033\022\016\n\nFUT_RFU_05\020\034*n\n\rHistoryEven" +
      "ts\022\013\n\007HE_NONE\020\000\022\014\n\010HE_CRASH\020\001\022\030\n\024HE_HARD" +
      "_ACCELERATION\020\002\022\032\n\026HE_HARD_DEACCELERATIO" +
      "N\020\004\022\014\n\010HE_CURVE\020\010*\212\001\n\rTractionState\022\n\n\006T" +
      "S_4X2\020\000\022\021\n\rTS_4X4_MANUAL\020\001\022\017\n\013TS_4X4_AUT" +
      "O\020\002\022\r\n\tTS_RFU_01\020\003\022\r\n\tTS_RFU_02\020\004\022\r\n\tTS_",
      "RFU_03\020\005\022\r\n\tTS_RFU_04\020\006\022\r\n\tTS_RFU_05\020\007"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          maxpb.MaxpbInterfaces.getDescriptor(),
          maxpb.MaxpbTelemetryDelta.getDescriptor(),
        }, assigner);
    internal_static_maxpb_AccelerometerData_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_maxpb_AccelerometerData_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_maxpb_AccelerometerData_descriptor,
        new java.lang.String[] { "MaxRollingAxisFront", "MaxRollingAxisBack", "MaxPitchingAxis", "MeanRollingAxisFront", "MeanRollingAxisBack", "MeanPitchingAxis", });
    internal_static_maxpb_TelemetryEventsTransmissionMask_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_maxpb_TelemetryEventsTransmissionMask_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_maxpb_TelemetryEventsTransmissionMask_descriptor,
        new java.lang.String[] { "Acceleration", "Brake", "Bump", "Curve", "Crash", "Calibration", "StoppedExcess", "MovingAndStopped", "MaxSpeed", "MaxRainySpeed", "Angles", "History", });
    internal_static_maxpb_TelemetryEvents_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_maxpb_TelemetryEvents_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_maxpb_TelemetryEvents_descriptor,
        new java.lang.String[] { "EventID", "Duration", "MaximumValue", "MeanValue", "MinimumValue", "ParameterConfigured", "ParameterSource", "ValueSource", "InitialSpeed", "FinalSpeed", "TimeToMax", "Accelerometer", });
    internal_static_maxpb_TelemetryFlags_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_maxpb_TelemetryFlags_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_maxpb_TelemetryFlags_descriptor,
        new java.lang.String[] { "OverSpeed", "StoppedExcess", "Moving", "AccelerometerState", "VehicleOperationTime", "Clutch", "Brake", "ParkingBrake", "MotorBrake", "WindowShieldWipers", "DoorClosed", "DoorLocked", "Trunk", "SeatBelt", "Headlights", "TractionState", "ModuleRemoved", });
    internal_static_maxpb_OdometerInfo_descriptor =
      getDescriptor().getMessageTypes().get(4);
    internal_static_maxpb_OdometerInfo_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_maxpb_OdometerInfo_descriptor,
        new java.lang.String[] { "Main", "Gps", "Pulse", "Can", });
    internal_static_maxpb_SpeedInfo_descriptor =
      getDescriptor().getMessageTypes().get(5);
    internal_static_maxpb_SpeedInfo_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_maxpb_SpeedInfo_descriptor,
        new java.lang.String[] { "Main", "Gps", "Pulse", "Can", });
    internal_static_maxpb_RpmInfo_descriptor =
      getDescriptor().getMessageTypes().get(6);
    internal_static_maxpb_RpmInfo_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_maxpb_RpmInfo_descriptor,
        new java.lang.String[] { "Main", "Pulse", "Can", });
    internal_static_maxpb_AngleInfo_descriptor =
      getDescriptor().getMessageTypes().get(7);
    internal_static_maxpb_AngleInfo_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_maxpb_AngleInfo_descriptor,
        new java.lang.String[] { "PitchingAngle", "RollingAngle", });
    internal_static_maxpb_FuelInfo_descriptor =
      getDescriptor().getMessageTypes().get(8);
    internal_static_maxpb_FuelInfo_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_maxpb_FuelInfo_descriptor,
        new java.lang.String[] { "FuelLevelTank1", "FuelLevelTank2", "FuelConsumption", "FuelType", "EthanolRatio", "EngineFuelRate", });
    internal_static_maxpb_EngineInfo_descriptor =
      getDescriptor().getMessageTypes().get(9);
    internal_static_maxpb_EngineInfo_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_maxpb_EngineInfo_descriptor,
        new java.lang.String[] { "IntakeAirTemperature", "IntakeAirFlow", "OilTemperature", "EngineRefTorque", "EngineTemperature", "CurrentGear", "ThrottlePosition", });
    internal_static_maxpb_EnvironmentInfo_descriptor =
      getDescriptor().getMessageTypes().get(10);
    internal_static_maxpb_EnvironmentInfo_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_maxpb_EnvironmentInfo_descriptor,
        new java.lang.String[] { "BarometricPressure", "AirTemperature", });
    internal_static_maxpb_ECUInfo_descriptor =
      getDescriptor().getMessageTypes().get(11);
    internal_static_maxpb_ECUInfo_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_maxpb_ECUInfo_descriptor,
        new java.lang.String[] { "ControlModuleVoltage", "VIN", "MalFunctionIndLamp", "DtcCodes", "CanBitRate", "IsCanExtended", "AvaiableObdInfoReady", });
    internal_static_maxpb_AccelerometerEventHistory_descriptor =
      getDescriptor().getMessageTypes().get(12);
    internal_static_maxpb_AccelerometerEventHistory_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_maxpb_AccelerometerEventHistory_descriptor,
        new java.lang.String[] { "Latitude", "Longitude", "Speed", "Rpm", "AxisFront", "AxisBack", "AxisRight", "AxisLeft", "AxisAbsSide", "AxisUp", "AxisDown", "DateTime", });
    internal_static_maxpb_AccelerometerHistory_descriptor =
      getDescriptor().getMessageTypes().get(13);
    internal_static_maxpb_AccelerometerHistory_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_maxpb_AccelerometerHistory_descriptor,
        new java.lang.String[] { "DateTime", "HistorySamples", "History", });
    internal_static_maxpb_TelemetryInfo_descriptor =
      getDescriptor().getMessageTypes().get(14);
    internal_static_maxpb_TelemetryInfo_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_maxpb_TelemetryInfo_descriptor,
        new java.lang.String[] { "Flags", "Odometer", "Speed", "Rpm", "Angles", "Fuel", "Engine", "Environment", "Ecu", "Delta", });
    internal_static_maxpb_SpeedsConfig_descriptor =
      getDescriptor().getMessageTypes().get(15);
    internal_static_maxpb_SpeedsConfig_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_maxpb_SpeedsConfig_descriptor,
        new java.lang.String[] { "MaxSpeed", "MaxRainySpeed", "DebounceOn", "HistogramSlotsQty", "HistogramSlotsSize", });
    internal_static_maxpb_TimersConfig_descriptor =
      getDescriptor().getMessageTypes().get(16);
    internal_static_maxpb_TimersConfig_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_maxpb_TimersConfig_descriptor,
        new java.lang.String[] { "StoppedExcess", });
    internal_static_maxpb_GSensorAlarmConfig_descriptor =
      getDescriptor().getMessageTypes().get(17);
    internal_static_maxpb_GSensorAlarmConfig_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_maxpb_GSensorAlarmConfig_descriptor,
        new java.lang.String[] { "Trigger", "Debounce", });
    internal_static_maxpb_RpmConfig_descriptor =
      getDescriptor().getMessageTypes().get(18);
    internal_static_maxpb_RpmConfig_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_maxpb_RpmConfig_descriptor,
        new java.lang.String[] { "MinBlueRpm", "MaxBlueRpm", "MinGreenRpm", "MaxGreenRpm", "MinRedRpm", "HistogramSlotsQty", "HistogramSlotsSize", });
    internal_static_maxpb_DeltaConfig_descriptor =
      getDescriptor().getMessageTypes().get(19);
    internal_static_maxpb_DeltaConfig_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_maxpb_DeltaConfig_descriptor,
        new java.lang.String[] { "IgnitionOn", "IgnitionOff", "Stopped", "Moving", "Interval", "Hourly", "Position", });
    internal_static_maxpb_TelemetryConfig_descriptor =
      getDescriptor().getMessageTypes().get(20);
    internal_static_maxpb_TelemetryConfig_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_maxpb_TelemetryConfig_descriptor,
        new java.lang.String[] { "Speeds", "Timers", "DebounceMoving", "DebounceStopped", "PitchingMin", "PitchingMax", "RollingMin", "RollingMax", "HardAcceleration", "HardBrake", "HardCurve", "HardBump", "HardCrash", "EventsMask", "Rpm", "Delta", "HistorySamples", "HistoryEventMask", "AccOdometerSpeedLimit", "MinimalTimeBetweenCrashEvents", "RecalibAccelerometerNoExtPower", "FixedCanLibrary", "BlackBox", "BlackBoxReportTime", });
    internal_static_maxpb_BlackBoxData_descriptor =
      getDescriptor().getMessageTypes().get(21);
    internal_static_maxpb_BlackBoxData_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_maxpb_BlackBoxData_descriptor,
        new java.lang.String[] { "DeviceID", "PacketID", "Minute", });
    internal_static_maxpb_BlackBoxMinute_descriptor =
      getDescriptor().getMessageTypes().get(22);
    internal_static_maxpb_BlackBoxMinute_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_maxpb_BlackBoxMinute_descriptor,
        new java.lang.String[] { "DateTime", "Latitude", "Longitude", "Odometer", "Second00", "Second01", "Second02", "Second03", "Second04", "Second05", "Second06", "Second07", "Second08", "Second09", "Second10", "Second11", "Second12", "Second13", "Second14", "Second15", "Second16", "Second17", "Second18", "Second19", "Second20", "Second21", "Second22", "Second23", "Second24", "Second25", "Second26", "Second27", "Second28", "Second29", "Second30", "Second31", "Second32", "Second33", "Second34", "Second35", "Second36", "Second37", "Second38", "Second39", "Second40", "Second41", "Second42", "Second43", "Second44", "Second45", "Second46", "Second47", "Second48", "Second49", "Second50", "Second51", "Second52", "Second53", "Second54", "Second55", "Second56", "Second57", "Second58", "Second59", });
    internal_static_maxpb_BlackBoxSecond_descriptor =
      getDescriptor().getMessageTypes().get(23);
    internal_static_maxpb_BlackBoxSecond_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_maxpb_BlackBoxSecond_descriptor,
        new java.lang.String[] { "PLatitude", "NLatitude", "PLongitude", "NLongitude", "Speed", "Direction", "Rpm", "Odometer", "AxisSamples", });
    internal_static_maxpb_AxisSample_descriptor =
      getDescriptor().getMessageTypes().get(24);
    internal_static_maxpb_AxisSample_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_maxpb_AxisSample_descriptor,
        new java.lang.String[] { "PXAxis", "NXAxis", "PYAxis", "NYAxis", "PZAxis", "NZAxis", });
    maxpb.MaxpbInterfaces.getDescriptor();
    maxpb.MaxpbTelemetryDelta.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
