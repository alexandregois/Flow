// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: maxpb_debug.proto

package maxpb;

public final class MaxpbDebug {
  private MaxpbDebug() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  /**
   * Protobuf enum {@code maxpb.ResetReason}
   */
  public enum ResetReason
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>RSTR_POWER_ON = 0;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180
     * </pre>
     */
    RSTR_POWER_ON(0, 0),
    /**
     * <code>RSTR_SIM_LOSS = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    RSTR_SIM_LOSS(1, 1),
    /**
     * <code>RSTR_SIM_FOUND = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    RSTR_SIM_FOUND(2, 2),
    /**
     * <code>RSTR_SERVER_REQUISITION = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180
     * </pre>
     */
    RSTR_SERVER_REQUISITION(3, 3),
    /**
     * <code>RSTR_FIRMWARE_UPDATE = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180
     * </pre>
     */
    RSTR_FIRMWARE_UPDATE(4, 4),
    /**
     * <code>RSTR_NO_CONNECTION = 5;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    RSTR_NO_CONNECTION(5, 5),
    /**
     * <code>RSTR_TEMPERATURE_RESUMED = 6;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    RSTR_TEMPERATURE_RESUMED(6, 6),
    /**
     * <code>RSTR_SMS_COMMAND = 7;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    RSTR_SMS_COMMAND(7, 7),
    /**
     * <code>RSTR_THREAD_WATCHDOG = 8;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180
     * </pre>
     */
    RSTR_THREAD_WATCHDOG(8, 8),
    /**
     * <code>RSTR_ASSERT = 9;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180
     * </pre>
     */
    RSTR_ASSERT(9, 9),
    /**
     * <code>RSTR_LWIP_ASSERT = 10;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    RSTR_LWIP_ASSERT(10, 10),
    /**
     * <code>RSTR_RESET_BUTTON = 11;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    RSTR_RESET_BUTTON(11, 11),
    /**
     * <code>RSTR_UNKNOWN = 12;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180
     * </pre>
     */
    RSTR_UNKNOWN(12, 12),
    /**
     * <code>RSTR_STOCK_MODE = 13;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    RSTR_STOCK_MODE(13, 13),
    /**
     * <code>RSTR_BATTERY_BROWN_OUT = 14;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    RSTR_BATTERY_BROWN_OUT(14, 14),
    /**
     * <code>RSTR_RFU_03 = 15;</code>
     *
     * <pre>
     *&#47;&#64;excluded SupportedBy:
     * </pre>
     */
    RSTR_RFU_03(15, 15),
    /**
     * <code>RSTR_RFU_04 = 16;</code>
     *
     * <pre>
     *&#47;&#64;excluded SupportedBy:
     * </pre>
     */
    RSTR_RFU_04(16, 16),
    /**
     * <code>RSTR_RFU_05 = 17;</code>
     *
     * <pre>
     *&#47;&#64;excluded SupportedBy:
     * </pre>
     */
    RSTR_RFU_05(17, 17),
    ;

    /**
     * <code>RSTR_POWER_ON = 0;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180
     * </pre>
     */
    public static final int RSTR_POWER_ON_VALUE = 0;
    /**
     * <code>RSTR_SIM_LOSS = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public static final int RSTR_SIM_LOSS_VALUE = 1;
    /**
     * <code>RSTR_SIM_FOUND = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public static final int RSTR_SIM_FOUND_VALUE = 2;
    /**
     * <code>RSTR_SERVER_REQUISITION = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180
     * </pre>
     */
    public static final int RSTR_SERVER_REQUISITION_VALUE = 3;
    /**
     * <code>RSTR_FIRMWARE_UPDATE = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180
     * </pre>
     */
    public static final int RSTR_FIRMWARE_UPDATE_VALUE = 4;
    /**
     * <code>RSTR_NO_CONNECTION = 5;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    public static final int RSTR_NO_CONNECTION_VALUE = 5;
    /**
     * <code>RSTR_TEMPERATURE_RESUMED = 6;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public static final int RSTR_TEMPERATURE_RESUMED_VALUE = 6;
    /**
     * <code>RSTR_SMS_COMMAND = 7;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public static final int RSTR_SMS_COMMAND_VALUE = 7;
    /**
     * <code>RSTR_THREAD_WATCHDOG = 8;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180
     * </pre>
     */
    public static final int RSTR_THREAD_WATCHDOG_VALUE = 8;
    /**
     * <code>RSTR_ASSERT = 9;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180
     * </pre>
     */
    public static final int RSTR_ASSERT_VALUE = 9;
    /**
     * <code>RSTR_LWIP_ASSERT = 10;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public static final int RSTR_LWIP_ASSERT_VALUE = 10;
    /**
     * <code>RSTR_RESET_BUTTON = 11;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public static final int RSTR_RESET_BUTTON_VALUE = 11;
    /**
     * <code>RSTR_UNKNOWN = 12;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180
     * </pre>
     */
    public static final int RSTR_UNKNOWN_VALUE = 12;
    /**
     * <code>RSTR_STOCK_MODE = 13;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    public static final int RSTR_STOCK_MODE_VALUE = 13;
    /**
     * <code>RSTR_BATTERY_BROWN_OUT = 14;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    public static final int RSTR_BATTERY_BROWN_OUT_VALUE = 14;
    /**
     * <code>RSTR_RFU_03 = 15;</code>
     *
     * <pre>
     *&#47;&#64;excluded SupportedBy:
     * </pre>
     */
    public static final int RSTR_RFU_03_VALUE = 15;
    /**
     * <code>RSTR_RFU_04 = 16;</code>
     *
     * <pre>
     *&#47;&#64;excluded SupportedBy:
     * </pre>
     */
    public static final int RSTR_RFU_04_VALUE = 16;
    /**
     * <code>RSTR_RFU_05 = 17;</code>
     *
     * <pre>
     *&#47;&#64;excluded SupportedBy:
     * </pre>
     */
    public static final int RSTR_RFU_05_VALUE = 17;


    public final int getNumber() { return value; }

    public static ResetReason valueOf(int value) {
      switch (value) {
        case 0: return RSTR_POWER_ON;
        case 1: return RSTR_SIM_LOSS;
        case 2: return RSTR_SIM_FOUND;
        case 3: return RSTR_SERVER_REQUISITION;
        case 4: return RSTR_FIRMWARE_UPDATE;
        case 5: return RSTR_NO_CONNECTION;
        case 6: return RSTR_TEMPERATURE_RESUMED;
        case 7: return RSTR_SMS_COMMAND;
        case 8: return RSTR_THREAD_WATCHDOG;
        case 9: return RSTR_ASSERT;
        case 10: return RSTR_LWIP_ASSERT;
        case 11: return RSTR_RESET_BUTTON;
        case 12: return RSTR_UNKNOWN;
        case 13: return RSTR_STOCK_MODE;
        case 14: return RSTR_BATTERY_BROWN_OUT;
        case 15: return RSTR_RFU_03;
        case 16: return RSTR_RFU_04;
        case 17: return RSTR_RFU_05;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<ResetReason>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<ResetReason>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<ResetReason>() {
            public ResetReason findValueByNumber(int number) {
              return ResetReason.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return maxpb.MaxpbDebug.getDescriptor().getEnumTypes().get(0);
    }

    private static final ResetReason[] VALUES = values();

    public static ResetReason valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private ResetReason(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:maxpb.ResetReason)
  }

  /**
   * Protobuf enum {@code maxpb.TraceChannel}
   */
  public enum TraceChannel
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>TRC_DISABLE = 0;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MAXIO
     * </pre>
     */
    TRC_DISABLE(0, 0),
    /**
     * <code>TRC_RS232_A = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    TRC_RS232_A(1, 1),
    /**
     * <code>TRC_RS232_B = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MAXIO
     * </pre>
     */
    TRC_RS232_B(2, 2),
    /**
     * <code>TRC_VCP_1 = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    TRC_VCP_1(3, 3),
    /**
     * <code>TRC_VCP_2 = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    TRC_VCP_2(4, 4),
    /**
     * <code>TRC_FLASH = 6;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    TRC_FLASH(5, 6),
    /**
     * <code>TRC_BLUETOOTH = 7;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    TRC_BLUETOOTH(6, 7),
    /**
     * <code>TRC_RFU_01 = 8;</code>
     *
     * <pre>
     *&#47;&#64;exclude SupportedBy:
     * </pre>
     */
    TRC_RFU_01(7, 8),
    /**
     * <code>TRC_RFU_02 = 9;</code>
     *
     * <pre>
     *&#47;&#64;exclude SupportedBy:
     * </pre>
     */
    TRC_RFU_02(8, 9),
    /**
     * <code>TRC_RFU_03 = 10;</code>
     *
     * <pre>
     *&#47;&#64;exclude SupportedBy:
     * </pre>
     */
    TRC_RFU_03(9, 10),
    /**
     * <code>TRC_RFU_04 = 11;</code>
     *
     * <pre>
     *&#47;&#64;exclude SupportedBy:
     * </pre>
     */
    TRC_RFU_04(10, 11),
    /**
     * <code>TRC_RFU_05 = 12;</code>
     *
     * <pre>
     *&#47;&#64;exclude SupportedBy:
     * </pre>
     */
    TRC_RFU_05(11, 12),
    /**
     * <code>TRC_RFU_06 = 13;</code>
     *
     * <pre>
     *&#47;&#64;exclude SupportedBy:
     * </pre>
     */
    TRC_RFU_06(12, 13),
    /**
     * <code>TRC_RFU_07 = 14;</code>
     *
     * <pre>
     *&#47;&#64;exclude SupportedBy:
     * </pre>
     */
    TRC_RFU_07(13, 14),
    /**
     * <code>TRC_RFU_08 = 15;</code>
     *
     * <pre>
     *&#47;&#64;exclude SupportedBy:
     * </pre>
     */
    TRC_RFU_08(14, 15),
    /**
     * <code>TRC_RFU_09 = 16;</code>
     *
     * <pre>
     *&#47;&#64;exclude SupportedBy:
     * </pre>
     */
    TRC_RFU_09(15, 16),
    /**
     * <code>TRC_RFU_10 = 17;</code>
     *
     * <pre>
     *&#47;&#64;exclude SupportedBy:
     * </pre>
     */
    TRC_RFU_10(16, 17),
    ;

    /**
     * <code>TRC_DISABLE = 0;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MAXIO
     * </pre>
     */
    public static final int TRC_DISABLE_VALUE = 0;
    /**
     * <code>TRC_RS232_A = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public static final int TRC_RS232_A_VALUE = 1;
    /**
     * <code>TRC_RS232_B = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MAXIO
     * </pre>
     */
    public static final int TRC_RS232_B_VALUE = 2;
    /**
     * <code>TRC_VCP_1 = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public static final int TRC_VCP_1_VALUE = 3;
    /**
     * <code>TRC_VCP_2 = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public static final int TRC_VCP_2_VALUE = 4;
    /**
     * <code>TRC_FLASH = 6;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public static final int TRC_FLASH_VALUE = 6;
    /**
     * <code>TRC_BLUETOOTH = 7;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public static final int TRC_BLUETOOTH_VALUE = 7;
    /**
     * <code>TRC_RFU_01 = 8;</code>
     *
     * <pre>
     *&#47;&#64;exclude SupportedBy:
     * </pre>
     */
    public static final int TRC_RFU_01_VALUE = 8;
    /**
     * <code>TRC_RFU_02 = 9;</code>
     *
     * <pre>
     *&#47;&#64;exclude SupportedBy:
     * </pre>
     */
    public static final int TRC_RFU_02_VALUE = 9;
    /**
     * <code>TRC_RFU_03 = 10;</code>
     *
     * <pre>
     *&#47;&#64;exclude SupportedBy:
     * </pre>
     */
    public static final int TRC_RFU_03_VALUE = 10;
    /**
     * <code>TRC_RFU_04 = 11;</code>
     *
     * <pre>
     *&#47;&#64;exclude SupportedBy:
     * </pre>
     */
    public static final int TRC_RFU_04_VALUE = 11;
    /**
     * <code>TRC_RFU_05 = 12;</code>
     *
     * <pre>
     *&#47;&#64;exclude SupportedBy:
     * </pre>
     */
    public static final int TRC_RFU_05_VALUE = 12;
    /**
     * <code>TRC_RFU_06 = 13;</code>
     *
     * <pre>
     *&#47;&#64;exclude SupportedBy:
     * </pre>
     */
    public static final int TRC_RFU_06_VALUE = 13;
    /**
     * <code>TRC_RFU_07 = 14;</code>
     *
     * <pre>
     *&#47;&#64;exclude SupportedBy:
     * </pre>
     */
    public static final int TRC_RFU_07_VALUE = 14;
    /**
     * <code>TRC_RFU_08 = 15;</code>
     *
     * <pre>
     *&#47;&#64;exclude SupportedBy:
     * </pre>
     */
    public static final int TRC_RFU_08_VALUE = 15;
    /**
     * <code>TRC_RFU_09 = 16;</code>
     *
     * <pre>
     *&#47;&#64;exclude SupportedBy:
     * </pre>
     */
    public static final int TRC_RFU_09_VALUE = 16;
    /**
     * <code>TRC_RFU_10 = 17;</code>
     *
     * <pre>
     *&#47;&#64;exclude SupportedBy:
     * </pre>
     */
    public static final int TRC_RFU_10_VALUE = 17;


    public final int getNumber() { return value; }

    public static TraceChannel valueOf(int value) {
      switch (value) {
        case 0: return TRC_DISABLE;
        case 1: return TRC_RS232_A;
        case 2: return TRC_RS232_B;
        case 3: return TRC_VCP_1;
        case 4: return TRC_VCP_2;
        case 6: return TRC_FLASH;
        case 7: return TRC_BLUETOOTH;
        case 8: return TRC_RFU_01;
        case 9: return TRC_RFU_02;
        case 10: return TRC_RFU_03;
        case 11: return TRC_RFU_04;
        case 12: return TRC_RFU_05;
        case 13: return TRC_RFU_06;
        case 14: return TRC_RFU_07;
        case 15: return TRC_RFU_08;
        case 16: return TRC_RFU_09;
        case 17: return TRC_RFU_10;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<TraceChannel>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<TraceChannel>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<TraceChannel>() {
            public TraceChannel findValueByNumber(int number) {
              return TraceChannel.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return maxpb.MaxpbDebug.getDescriptor().getEnumTypes().get(1);
    }

    private static final TraceChannel[] VALUES = values();

    public static TraceChannel valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private TraceChannel(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:maxpb.TraceChannel)
  }

  /**
   * Protobuf enum {@code maxpb.TraceLevel}
   *
   * <pre>
   *&#47;&#64;exclude
   * </pre>
   */
  public enum TraceLevel
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>TRL_OFF = 0;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    TRL_OFF(0, 0),
    /**
     * <code>TRL_ERROR = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    TRL_ERROR(1, 1),
    /**
     * <code>TRL_WARNING = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    TRL_WARNING(2, 2),
    /**
     * <code>TRL_INFO = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    TRL_INFO(3, 3),
    /**
     * <code>TRL_VERBOSE = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    TRL_VERBOSE(4, 4),
    ;

    /**
     * <code>TRL_OFF = 0;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public static final int TRL_OFF_VALUE = 0;
    /**
     * <code>TRL_ERROR = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public static final int TRL_ERROR_VALUE = 1;
    /**
     * <code>TRL_WARNING = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public static final int TRL_WARNING_VALUE = 2;
    /**
     * <code>TRL_INFO = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public static final int TRL_INFO_VALUE = 3;
    /**
     * <code>TRL_VERBOSE = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    public static final int TRL_VERBOSE_VALUE = 4;


    public final int getNumber() { return value; }

    public static TraceLevel valueOf(int value) {
      switch (value) {
        case 0: return TRL_OFF;
        case 1: return TRL_ERROR;
        case 2: return TRL_WARNING;
        case 3: return TRL_INFO;
        case 4: return TRL_VERBOSE;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<TraceLevel>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<TraceLevel>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<TraceLevel>() {
            public TraceLevel findValueByNumber(int number) {
              return TraceLevel.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return maxpb.MaxpbDebug.getDescriptor().getEnumTypes().get(2);
    }

    private static final TraceLevel[] VALUES = values();

    public static TraceLevel valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private TraceLevel(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:maxpb.TraceLevel)
  }

  /**
   * Protobuf enum {@code maxpb.MemoryType}
   *
   * <pre>
   *&#47;&#64;exclude
   * </pre>
   */
  public enum MemoryType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>MT_STACK = 0;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    MT_STACK(0, 0),
    /**
     * <code>MT_HEAP = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    MT_HEAP(1, 1),
    /**
     * <code>MT_FS_STACK = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    MT_FS_STACK(2, 2),
    /**
     * <code>MT_LUA_STACK = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    MT_LUA_STACK(3, 3),
    /**
     * <code>MT_IRQ_STACK = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    MT_IRQ_STACK(4, 4),
    /**
     * <code>MT_RFU_01 = 5;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    MT_RFU_01(5, 5),
    /**
     * <code>MT_RFU_02 = 6;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    MT_RFU_02(6, 6),
    /**
     * <code>MT_RFU_03 = 7;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    MT_RFU_03(7, 7),
    /**
     * <code>MT_RFU_04 = 8;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    MT_RFU_04(8, 8),
    /**
     * <code>MT_RFU_05 = 9;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    MT_RFU_05(9, 9),
    /**
     * <code>MT_RFU_06 = 10;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    MT_RFU_06(10, 10),
    /**
     * <code>MT_RFU_07 = 11;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    MT_RFU_07(11, 11),
    /**
     * <code>MT_RFU_08 = 12;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    MT_RFU_08(12, 12),
    /**
     * <code>MT_RFU_09 = 13;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    MT_RFU_09(13, 13),
    /**
     * <code>MT_RFU_10 = 14;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    MT_RFU_10(14, 14),
    /**
     * <code>MT_RFU_11 = 15;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    MT_RFU_11(15, 15),
    /**
     * <code>MT_RFU_12 = 16;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    MT_RFU_12(16, 16),
    /**
     * <code>MT_RFU_13 = 17;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    MT_RFU_13(17, 17),
    /**
     * <code>MT_RFU_14 = 18;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    MT_RFU_14(18, 18),
    /**
     * <code>MT_RFU_15 = 19;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    MT_RFU_15(19, 19),
    /**
     * <code>MT_RFU_16 = 20;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    MT_RFU_16(20, 20),
    ;

    /**
     * <code>MT_STACK = 0;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    public static final int MT_STACK_VALUE = 0;
    /**
     * <code>MT_HEAP = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    public static final int MT_HEAP_VALUE = 1;
    /**
     * <code>MT_FS_STACK = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    public static final int MT_FS_STACK_VALUE = 2;
    /**
     * <code>MT_LUA_STACK = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    public static final int MT_LUA_STACK_VALUE = 3;
    /**
     * <code>MT_IRQ_STACK = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    public static final int MT_IRQ_STACK_VALUE = 4;
    /**
     * <code>MT_RFU_01 = 5;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    public static final int MT_RFU_01_VALUE = 5;
    /**
     * <code>MT_RFU_02 = 6;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    public static final int MT_RFU_02_VALUE = 6;
    /**
     * <code>MT_RFU_03 = 7;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    public static final int MT_RFU_03_VALUE = 7;
    /**
     * <code>MT_RFU_04 = 8;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    public static final int MT_RFU_04_VALUE = 8;
    /**
     * <code>MT_RFU_05 = 9;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    public static final int MT_RFU_05_VALUE = 9;
    /**
     * <code>MT_RFU_06 = 10;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    public static final int MT_RFU_06_VALUE = 10;
    /**
     * <code>MT_RFU_07 = 11;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    public static final int MT_RFU_07_VALUE = 11;
    /**
     * <code>MT_RFU_08 = 12;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    public static final int MT_RFU_08_VALUE = 12;
    /**
     * <code>MT_RFU_09 = 13;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    public static final int MT_RFU_09_VALUE = 13;
    /**
     * <code>MT_RFU_10 = 14;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    public static final int MT_RFU_10_VALUE = 14;
    /**
     * <code>MT_RFU_11 = 15;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    public static final int MT_RFU_11_VALUE = 15;
    /**
     * <code>MT_RFU_12 = 16;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    public static final int MT_RFU_12_VALUE = 16;
    /**
     * <code>MT_RFU_13 = 17;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    public static final int MT_RFU_13_VALUE = 17;
    /**
     * <code>MT_RFU_14 = 18;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    public static final int MT_RFU_14_VALUE = 18;
    /**
     * <code>MT_RFU_15 = 19;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    public static final int MT_RFU_15_VALUE = 19;
    /**
     * <code>MT_RFU_16 = 20;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    public static final int MT_RFU_16_VALUE = 20;


    public final int getNumber() { return value; }

    public static MemoryType valueOf(int value) {
      switch (value) {
        case 0: return MT_STACK;
        case 1: return MT_HEAP;
        case 2: return MT_FS_STACK;
        case 3: return MT_LUA_STACK;
        case 4: return MT_IRQ_STACK;
        case 5: return MT_RFU_01;
        case 6: return MT_RFU_02;
        case 7: return MT_RFU_03;
        case 8: return MT_RFU_04;
        case 9: return MT_RFU_05;
        case 10: return MT_RFU_06;
        case 11: return MT_RFU_07;
        case 12: return MT_RFU_08;
        case 13: return MT_RFU_09;
        case 14: return MT_RFU_10;
        case 15: return MT_RFU_11;
        case 16: return MT_RFU_12;
        case 17: return MT_RFU_13;
        case 18: return MT_RFU_14;
        case 19: return MT_RFU_15;
        case 20: return MT_RFU_16;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<MemoryType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<MemoryType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<MemoryType>() {
            public MemoryType findValueByNumber(int number) {
              return MemoryType.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return maxpb.MaxpbDebug.getDescriptor().getEnumTypes().get(3);
    }

    private static final MemoryType[] VALUES = values();

    public static MemoryType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private MemoryType(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:maxpb.MemoryType)
  }

  public interface TraceMaskLevelOrBuilder extends
      // @@protoc_insertion_point(interface_extends:maxpb.TraceMaskLevel)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional .maxpb.TraceLevel init = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    boolean hasInit();
    /**
     * <code>optional .maxpb.TraceLevel init = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    maxpb.MaxpbDebug.TraceLevel getInit();

    /**
     * <code>optional .maxpb.TraceLevel sys = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    boolean hasSys();
    /**
     * <code>optional .maxpb.TraceLevel sys = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    maxpb.MaxpbDebug.TraceLevel getSys();

    /**
     * <code>optional .maxpb.TraceLevel openData = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    boolean hasOpenData();
    /**
     * <code>optional .maxpb.TraceLevel openData = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    maxpb.MaxpbDebug.TraceLevel getOpenData();

    /**
     * <code>optional .maxpb.TraceLevel fileSystem = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    boolean hasFileSystem();
    /**
     * <code>optional .maxpb.TraceLevel fileSystem = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    maxpb.MaxpbDebug.TraceLevel getFileSystem();

    /**
     * <code>optional .maxpb.TraceLevel luac = 5;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    boolean hasLuac();
    /**
     * <code>optional .maxpb.TraceLevel luac = 5;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    maxpb.MaxpbDebug.TraceLevel getLuac();

    /**
     * <code>optional .maxpb.TraceLevel luat = 6;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    boolean hasLuat();
    /**
     * <code>optional .maxpb.TraceLevel luat = 6;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    maxpb.MaxpbDebug.TraceLevel getLuat();

    /**
     * <code>optional .maxpb.TraceLevel usb = 7;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    boolean hasUsb();
    /**
     * <code>optional .maxpb.TraceLevel usb = 7;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    maxpb.MaxpbDebug.TraceLevel getUsb();

    /**
     * <code>optional .maxpb.TraceLevel flash = 8;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    boolean hasFlash();
    /**
     * <code>optional .maxpb.TraceLevel flash = 8;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    maxpb.MaxpbDebug.TraceLevel getFlash();

    /**
     * <code>optional .maxpb.TraceLevel dbg = 9;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    boolean hasDbg();
    /**
     * <code>optional .maxpb.TraceLevel dbg = 9;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    maxpb.MaxpbDebug.TraceLevel getDbg();

    /**
     * <code>optional .maxpb.TraceLevel zigbee = 10;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    boolean hasZigbee();
    /**
     * <code>optional .maxpb.TraceLevel zigbee = 10;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    maxpb.MaxpbDebug.TraceLevel getZigbee();

    /**
     * <code>optional .maxpb.TraceLevel wifi = 11;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    boolean hasWifi();
    /**
     * <code>optional .maxpb.TraceLevel wifi = 11;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    maxpb.MaxpbDebug.TraceLevel getWifi();

    /**
     * <code>optional .maxpb.TraceLevel satellite = 12;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    boolean hasSatellite();
    /**
     * <code>optional .maxpb.TraceLevel satellite = 12;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    maxpb.MaxpbDebug.TraceLevel getSatellite();

    /**
     * <code>optional .maxpb.TraceLevel tracker = 13;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    boolean hasTracker();
    /**
     * <code>optional .maxpb.TraceLevel tracker = 13;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    maxpb.MaxpbDebug.TraceLevel getTracker();

    /**
     * <code>optional .maxpb.TraceLevel gsm = 14;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    boolean hasGsm();
    /**
     * <code>optional .maxpb.TraceLevel gsm = 14;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    maxpb.MaxpbDebug.TraceLevel getGsm();

    /**
     * <code>optional .maxpb.TraceLevel gps = 15;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    boolean hasGps();
    /**
     * <code>optional .maxpb.TraceLevel gps = 15;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    maxpb.MaxpbDebug.TraceLevel getGps();

    /**
     * <code>optional .maxpb.TraceLevel lora = 16;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    boolean hasLora();
    /**
     * <code>optional .maxpb.TraceLevel lora = 16;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    maxpb.MaxpbDebug.TraceLevel getLora();

    /**
     * <code>optional .maxpb.TraceLevel gsensor = 17;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    boolean hasGsensor();
    /**
     * <code>optional .maxpb.TraceLevel gsensor = 17;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    maxpb.MaxpbDebug.TraceLevel getGsensor();
  }
  /**
   * Protobuf type {@code maxpb.TraceMaskLevel}
   *
   * <pre>
   *&#47;&#64;exclude
   * </pre>
   */
  public static final class TraceMaskLevel extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:maxpb.TraceMaskLevel)
      TraceMaskLevelOrBuilder {
    // Use TraceMaskLevel.newBuilder() to construct.
    private TraceMaskLevel(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private TraceMaskLevel(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final TraceMaskLevel defaultInstance;
    public static TraceMaskLevel getDefaultInstance() {
      return defaultInstance;
    }

    public TraceMaskLevel getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private TraceMaskLevel(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              maxpb.MaxpbDebug.TraceLevel value = maxpb.MaxpbDebug.TraceLevel.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(1, rawValue);
              } else {
                bitField0_ |= 0x00000001;
                init_ = value;
              }
              break;
            }
            case 16: {
              int rawValue = input.readEnum();
              maxpb.MaxpbDebug.TraceLevel value = maxpb.MaxpbDebug.TraceLevel.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(2, rawValue);
              } else {
                bitField0_ |= 0x00000002;
                sys_ = value;
              }
              break;
            }
            case 24: {
              int rawValue = input.readEnum();
              maxpb.MaxpbDebug.TraceLevel value = maxpb.MaxpbDebug.TraceLevel.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(3, rawValue);
              } else {
                bitField0_ |= 0x00000004;
                openData_ = value;
              }
              break;
            }
            case 32: {
              int rawValue = input.readEnum();
              maxpb.MaxpbDebug.TraceLevel value = maxpb.MaxpbDebug.TraceLevel.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(4, rawValue);
              } else {
                bitField0_ |= 0x00000008;
                fileSystem_ = value;
              }
              break;
            }
            case 40: {
              int rawValue = input.readEnum();
              maxpb.MaxpbDebug.TraceLevel value = maxpb.MaxpbDebug.TraceLevel.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(5, rawValue);
              } else {
                bitField0_ |= 0x00000010;
                luac_ = value;
              }
              break;
            }
            case 48: {
              int rawValue = input.readEnum();
              maxpb.MaxpbDebug.TraceLevel value = maxpb.MaxpbDebug.TraceLevel.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(6, rawValue);
              } else {
                bitField0_ |= 0x00000020;
                luat_ = value;
              }
              break;
            }
            case 56: {
              int rawValue = input.readEnum();
              maxpb.MaxpbDebug.TraceLevel value = maxpb.MaxpbDebug.TraceLevel.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(7, rawValue);
              } else {
                bitField0_ |= 0x00000040;
                usb_ = value;
              }
              break;
            }
            case 64: {
              int rawValue = input.readEnum();
              maxpb.MaxpbDebug.TraceLevel value = maxpb.MaxpbDebug.TraceLevel.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(8, rawValue);
              } else {
                bitField0_ |= 0x00000080;
                flash_ = value;
              }
              break;
            }
            case 72: {
              int rawValue = input.readEnum();
              maxpb.MaxpbDebug.TraceLevel value = maxpb.MaxpbDebug.TraceLevel.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(9, rawValue);
              } else {
                bitField0_ |= 0x00000100;
                dbg_ = value;
              }
              break;
            }
            case 80: {
              int rawValue = input.readEnum();
              maxpb.MaxpbDebug.TraceLevel value = maxpb.MaxpbDebug.TraceLevel.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(10, rawValue);
              } else {
                bitField0_ |= 0x00000200;
                zigbee_ = value;
              }
              break;
            }
            case 88: {
              int rawValue = input.readEnum();
              maxpb.MaxpbDebug.TraceLevel value = maxpb.MaxpbDebug.TraceLevel.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(11, rawValue);
              } else {
                bitField0_ |= 0x00000400;
                wifi_ = value;
              }
              break;
            }
            case 96: {
              int rawValue = input.readEnum();
              maxpb.MaxpbDebug.TraceLevel value = maxpb.MaxpbDebug.TraceLevel.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(12, rawValue);
              } else {
                bitField0_ |= 0x00000800;
                satellite_ = value;
              }
              break;
            }
            case 104: {
              int rawValue = input.readEnum();
              maxpb.MaxpbDebug.TraceLevel value = maxpb.MaxpbDebug.TraceLevel.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(13, rawValue);
              } else {
                bitField0_ |= 0x00001000;
                tracker_ = value;
              }
              break;
            }
            case 112: {
              int rawValue = input.readEnum();
              maxpb.MaxpbDebug.TraceLevel value = maxpb.MaxpbDebug.TraceLevel.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(14, rawValue);
              } else {
                bitField0_ |= 0x00002000;
                gsm_ = value;
              }
              break;
            }
            case 120: {
              int rawValue = input.readEnum();
              maxpb.MaxpbDebug.TraceLevel value = maxpb.MaxpbDebug.TraceLevel.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(15, rawValue);
              } else {
                bitField0_ |= 0x00004000;
                gps_ = value;
              }
              break;
            }
            case 128: {
              int rawValue = input.readEnum();
              maxpb.MaxpbDebug.TraceLevel value = maxpb.MaxpbDebug.TraceLevel.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(16, rawValue);
              } else {
                bitField0_ |= 0x00008000;
                lora_ = value;
              }
              break;
            }
            case 136: {
              int rawValue = input.readEnum();
              maxpb.MaxpbDebug.TraceLevel value = maxpb.MaxpbDebug.TraceLevel.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(17, rawValue);
              } else {
                bitField0_ |= 0x00010000;
                gsensor_ = value;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return maxpb.MaxpbDebug.internal_static_maxpb_TraceMaskLevel_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return maxpb.MaxpbDebug.internal_static_maxpb_TraceMaskLevel_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              maxpb.MaxpbDebug.TraceMaskLevel.class, maxpb.MaxpbDebug.TraceMaskLevel.Builder.class);
    }

    public static com.google.protobuf.Parser<TraceMaskLevel> PARSER =
        new com.google.protobuf.AbstractParser<TraceMaskLevel>() {
      public TraceMaskLevel parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new TraceMaskLevel(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<TraceMaskLevel> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int INIT_FIELD_NUMBER = 1;
    private maxpb.MaxpbDebug.TraceLevel init_;
    /**
     * <code>optional .maxpb.TraceLevel init = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public boolean hasInit() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .maxpb.TraceLevel init = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public maxpb.MaxpbDebug.TraceLevel getInit() {
      return init_;
    }

    public static final int SYS_FIELD_NUMBER = 2;
    private maxpb.MaxpbDebug.TraceLevel sys_;
    /**
     * <code>optional .maxpb.TraceLevel sys = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public boolean hasSys() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional .maxpb.TraceLevel sys = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public maxpb.MaxpbDebug.TraceLevel getSys() {
      return sys_;
    }

    public static final int OPENDATA_FIELD_NUMBER = 3;
    private maxpb.MaxpbDebug.TraceLevel openData_;
    /**
     * <code>optional .maxpb.TraceLevel openData = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public boolean hasOpenData() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional .maxpb.TraceLevel openData = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public maxpb.MaxpbDebug.TraceLevel getOpenData() {
      return openData_;
    }

    public static final int FILESYSTEM_FIELD_NUMBER = 4;
    private maxpb.MaxpbDebug.TraceLevel fileSystem_;
    /**
     * <code>optional .maxpb.TraceLevel fileSystem = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public boolean hasFileSystem() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional .maxpb.TraceLevel fileSystem = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public maxpb.MaxpbDebug.TraceLevel getFileSystem() {
      return fileSystem_;
    }

    public static final int LUAC_FIELD_NUMBER = 5;
    private maxpb.MaxpbDebug.TraceLevel luac_;
    /**
     * <code>optional .maxpb.TraceLevel luac = 5;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public boolean hasLuac() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional .maxpb.TraceLevel luac = 5;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public maxpb.MaxpbDebug.TraceLevel getLuac() {
      return luac_;
    }

    public static final int LUAT_FIELD_NUMBER = 6;
    private maxpb.MaxpbDebug.TraceLevel luat_;
    /**
     * <code>optional .maxpb.TraceLevel luat = 6;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public boolean hasLuat() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional .maxpb.TraceLevel luat = 6;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public maxpb.MaxpbDebug.TraceLevel getLuat() {
      return luat_;
    }

    public static final int USB_FIELD_NUMBER = 7;
    private maxpb.MaxpbDebug.TraceLevel usb_;
    /**
     * <code>optional .maxpb.TraceLevel usb = 7;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public boolean hasUsb() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional .maxpb.TraceLevel usb = 7;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public maxpb.MaxpbDebug.TraceLevel getUsb() {
      return usb_;
    }

    public static final int FLASH_FIELD_NUMBER = 8;
    private maxpb.MaxpbDebug.TraceLevel flash_;
    /**
     * <code>optional .maxpb.TraceLevel flash = 8;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public boolean hasFlash() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional .maxpb.TraceLevel flash = 8;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public maxpb.MaxpbDebug.TraceLevel getFlash() {
      return flash_;
    }

    public static final int DBG_FIELD_NUMBER = 9;
    private maxpb.MaxpbDebug.TraceLevel dbg_;
    /**
     * <code>optional .maxpb.TraceLevel dbg = 9;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public boolean hasDbg() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional .maxpb.TraceLevel dbg = 9;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public maxpb.MaxpbDebug.TraceLevel getDbg() {
      return dbg_;
    }

    public static final int ZIGBEE_FIELD_NUMBER = 10;
    private maxpb.MaxpbDebug.TraceLevel zigbee_;
    /**
     * <code>optional .maxpb.TraceLevel zigbee = 10;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public boolean hasZigbee() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional .maxpb.TraceLevel zigbee = 10;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public maxpb.MaxpbDebug.TraceLevel getZigbee() {
      return zigbee_;
    }

    public static final int WIFI_FIELD_NUMBER = 11;
    private maxpb.MaxpbDebug.TraceLevel wifi_;
    /**
     * <code>optional .maxpb.TraceLevel wifi = 11;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public boolean hasWifi() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional .maxpb.TraceLevel wifi = 11;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public maxpb.MaxpbDebug.TraceLevel getWifi() {
      return wifi_;
    }

    public static final int SATELLITE_FIELD_NUMBER = 12;
    private maxpb.MaxpbDebug.TraceLevel satellite_;
    /**
     * <code>optional .maxpb.TraceLevel satellite = 12;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public boolean hasSatellite() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional .maxpb.TraceLevel satellite = 12;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public maxpb.MaxpbDebug.TraceLevel getSatellite() {
      return satellite_;
    }

    public static final int TRACKER_FIELD_NUMBER = 13;
    private maxpb.MaxpbDebug.TraceLevel tracker_;
    /**
     * <code>optional .maxpb.TraceLevel tracker = 13;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public boolean hasTracker() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>optional .maxpb.TraceLevel tracker = 13;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public maxpb.MaxpbDebug.TraceLevel getTracker() {
      return tracker_;
    }

    public static final int GSM_FIELD_NUMBER = 14;
    private maxpb.MaxpbDebug.TraceLevel gsm_;
    /**
     * <code>optional .maxpb.TraceLevel gsm = 14;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public boolean hasGsm() {
      return ((bitField0_ & 0x00002000) == 0x00002000);
    }
    /**
     * <code>optional .maxpb.TraceLevel gsm = 14;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public maxpb.MaxpbDebug.TraceLevel getGsm() {
      return gsm_;
    }

    public static final int GPS_FIELD_NUMBER = 15;
    private maxpb.MaxpbDebug.TraceLevel gps_;
    /**
     * <code>optional .maxpb.TraceLevel gps = 15;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public boolean hasGps() {
      return ((bitField0_ & 0x00004000) == 0x00004000);
    }
    /**
     * <code>optional .maxpb.TraceLevel gps = 15;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public maxpb.MaxpbDebug.TraceLevel getGps() {
      return gps_;
    }

    public static final int LORA_FIELD_NUMBER = 16;
    private maxpb.MaxpbDebug.TraceLevel lora_;
    /**
     * <code>optional .maxpb.TraceLevel lora = 16;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public boolean hasLora() {
      return ((bitField0_ & 0x00008000) == 0x00008000);
    }
    /**
     * <code>optional .maxpb.TraceLevel lora = 16;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public maxpb.MaxpbDebug.TraceLevel getLora() {
      return lora_;
    }

    public static final int GSENSOR_FIELD_NUMBER = 17;
    private maxpb.MaxpbDebug.TraceLevel gsensor_;
    /**
     * <code>optional .maxpb.TraceLevel gsensor = 17;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public boolean hasGsensor() {
      return ((bitField0_ & 0x00010000) == 0x00010000);
    }
    /**
     * <code>optional .maxpb.TraceLevel gsensor = 17;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public maxpb.MaxpbDebug.TraceLevel getGsensor() {
      return gsensor_;
    }

    private void initFields() {
      init_ = maxpb.MaxpbDebug.TraceLevel.TRL_OFF;
      sys_ = maxpb.MaxpbDebug.TraceLevel.TRL_OFF;
      openData_ = maxpb.MaxpbDebug.TraceLevel.TRL_OFF;
      fileSystem_ = maxpb.MaxpbDebug.TraceLevel.TRL_OFF;
      luac_ = maxpb.MaxpbDebug.TraceLevel.TRL_OFF;
      luat_ = maxpb.MaxpbDebug.TraceLevel.TRL_OFF;
      usb_ = maxpb.MaxpbDebug.TraceLevel.TRL_OFF;
      flash_ = maxpb.MaxpbDebug.TraceLevel.TRL_OFF;
      dbg_ = maxpb.MaxpbDebug.TraceLevel.TRL_OFF;
      zigbee_ = maxpb.MaxpbDebug.TraceLevel.TRL_OFF;
      wifi_ = maxpb.MaxpbDebug.TraceLevel.TRL_OFF;
      satellite_ = maxpb.MaxpbDebug.TraceLevel.TRL_OFF;
      tracker_ = maxpb.MaxpbDebug.TraceLevel.TRL_OFF;
      gsm_ = maxpb.MaxpbDebug.TraceLevel.TRL_OFF;
      gps_ = maxpb.MaxpbDebug.TraceLevel.TRL_OFF;
      lora_ = maxpb.MaxpbDebug.TraceLevel.TRL_OFF;
      gsensor_ = maxpb.MaxpbDebug.TraceLevel.TRL_OFF;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, init_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeEnum(2, sys_.getNumber());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeEnum(3, openData_.getNumber());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeEnum(4, fileSystem_.getNumber());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeEnum(5, luac_.getNumber());
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeEnum(6, luat_.getNumber());
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeEnum(7, usb_.getNumber());
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeEnum(8, flash_.getNumber());
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeEnum(9, dbg_.getNumber());
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeEnum(10, zigbee_.getNumber());
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeEnum(11, wifi_.getNumber());
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeEnum(12, satellite_.getNumber());
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeEnum(13, tracker_.getNumber());
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        output.writeEnum(14, gsm_.getNumber());
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        output.writeEnum(15, gps_.getNumber());
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        output.writeEnum(16, lora_.getNumber());
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        output.writeEnum(17, gsensor_.getNumber());
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, init_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(2, sys_.getNumber());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(3, openData_.getNumber());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(4, fileSystem_.getNumber());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(5, luac_.getNumber());
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(6, luat_.getNumber());
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(7, usb_.getNumber());
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(8, flash_.getNumber());
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(9, dbg_.getNumber());
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(10, zigbee_.getNumber());
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(11, wifi_.getNumber());
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(12, satellite_.getNumber());
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(13, tracker_.getNumber());
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(14, gsm_.getNumber());
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(15, gps_.getNumber());
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(16, lora_.getNumber());
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(17, gsensor_.getNumber());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static maxpb.MaxpbDebug.TraceMaskLevel parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static maxpb.MaxpbDebug.TraceMaskLevel parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static maxpb.MaxpbDebug.TraceMaskLevel parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static maxpb.MaxpbDebug.TraceMaskLevel parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static maxpb.MaxpbDebug.TraceMaskLevel parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static maxpb.MaxpbDebug.TraceMaskLevel parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static maxpb.MaxpbDebug.TraceMaskLevel parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static maxpb.MaxpbDebug.TraceMaskLevel parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static maxpb.MaxpbDebug.TraceMaskLevel parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static maxpb.MaxpbDebug.TraceMaskLevel parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(maxpb.MaxpbDebug.TraceMaskLevel prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code maxpb.TraceMaskLevel}
     *
     * <pre>
     *&#47;&#64;exclude
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:maxpb.TraceMaskLevel)
        maxpb.MaxpbDebug.TraceMaskLevelOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return maxpb.MaxpbDebug.internal_static_maxpb_TraceMaskLevel_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return maxpb.MaxpbDebug.internal_static_maxpb_TraceMaskLevel_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                maxpb.MaxpbDebug.TraceMaskLevel.class, maxpb.MaxpbDebug.TraceMaskLevel.Builder.class);
      }

      // Construct using maxpb.MaxpbDebug.TraceMaskLevel.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        init_ = maxpb.MaxpbDebug.TraceLevel.TRL_OFF;
        bitField0_ = (bitField0_ & ~0x00000001);
        sys_ = maxpb.MaxpbDebug.TraceLevel.TRL_OFF;
        bitField0_ = (bitField0_ & ~0x00000002);
        openData_ = maxpb.MaxpbDebug.TraceLevel.TRL_OFF;
        bitField0_ = (bitField0_ & ~0x00000004);
        fileSystem_ = maxpb.MaxpbDebug.TraceLevel.TRL_OFF;
        bitField0_ = (bitField0_ & ~0x00000008);
        luac_ = maxpb.MaxpbDebug.TraceLevel.TRL_OFF;
        bitField0_ = (bitField0_ & ~0x00000010);
        luat_ = maxpb.MaxpbDebug.TraceLevel.TRL_OFF;
        bitField0_ = (bitField0_ & ~0x00000020);
        usb_ = maxpb.MaxpbDebug.TraceLevel.TRL_OFF;
        bitField0_ = (bitField0_ & ~0x00000040);
        flash_ = maxpb.MaxpbDebug.TraceLevel.TRL_OFF;
        bitField0_ = (bitField0_ & ~0x00000080);
        dbg_ = maxpb.MaxpbDebug.TraceLevel.TRL_OFF;
        bitField0_ = (bitField0_ & ~0x00000100);
        zigbee_ = maxpb.MaxpbDebug.TraceLevel.TRL_OFF;
        bitField0_ = (bitField0_ & ~0x00000200);
        wifi_ = maxpb.MaxpbDebug.TraceLevel.TRL_OFF;
        bitField0_ = (bitField0_ & ~0x00000400);
        satellite_ = maxpb.MaxpbDebug.TraceLevel.TRL_OFF;
        bitField0_ = (bitField0_ & ~0x00000800);
        tracker_ = maxpb.MaxpbDebug.TraceLevel.TRL_OFF;
        bitField0_ = (bitField0_ & ~0x00001000);
        gsm_ = maxpb.MaxpbDebug.TraceLevel.TRL_OFF;
        bitField0_ = (bitField0_ & ~0x00002000);
        gps_ = maxpb.MaxpbDebug.TraceLevel.TRL_OFF;
        bitField0_ = (bitField0_ & ~0x00004000);
        lora_ = maxpb.MaxpbDebug.TraceLevel.TRL_OFF;
        bitField0_ = (bitField0_ & ~0x00008000);
        gsensor_ = maxpb.MaxpbDebug.TraceLevel.TRL_OFF;
        bitField0_ = (bitField0_ & ~0x00010000);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return maxpb.MaxpbDebug.internal_static_maxpb_TraceMaskLevel_descriptor;
      }

      public maxpb.MaxpbDebug.TraceMaskLevel getDefaultInstanceForType() {
        return maxpb.MaxpbDebug.TraceMaskLevel.getDefaultInstance();
      }

      public maxpb.MaxpbDebug.TraceMaskLevel build() {
        maxpb.MaxpbDebug.TraceMaskLevel result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public maxpb.MaxpbDebug.TraceMaskLevel buildPartial() {
        maxpb.MaxpbDebug.TraceMaskLevel result = new maxpb.MaxpbDebug.TraceMaskLevel(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.init_ = init_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.sys_ = sys_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.openData_ = openData_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.fileSystem_ = fileSystem_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.luac_ = luac_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.luat_ = luat_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.usb_ = usb_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.flash_ = flash_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.dbg_ = dbg_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.zigbee_ = zigbee_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        result.wifi_ = wifi_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000800;
        }
        result.satellite_ = satellite_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00001000;
        }
        result.tracker_ = tracker_;
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00002000;
        }
        result.gsm_ = gsm_;
        if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
          to_bitField0_ |= 0x00004000;
        }
        result.gps_ = gps_;
        if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
          to_bitField0_ |= 0x00008000;
        }
        result.lora_ = lora_;
        if (((from_bitField0_ & 0x00010000) == 0x00010000)) {
          to_bitField0_ |= 0x00010000;
        }
        result.gsensor_ = gsensor_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof maxpb.MaxpbDebug.TraceMaskLevel) {
          return mergeFrom((maxpb.MaxpbDebug.TraceMaskLevel)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(maxpb.MaxpbDebug.TraceMaskLevel other) {
        if (other == maxpb.MaxpbDebug.TraceMaskLevel.getDefaultInstance()) return this;
        if (other.hasInit()) {
          setInit(other.getInit());
        }
        if (other.hasSys()) {
          setSys(other.getSys());
        }
        if (other.hasOpenData()) {
          setOpenData(other.getOpenData());
        }
        if (other.hasFileSystem()) {
          setFileSystem(other.getFileSystem());
        }
        if (other.hasLuac()) {
          setLuac(other.getLuac());
        }
        if (other.hasLuat()) {
          setLuat(other.getLuat());
        }
        if (other.hasUsb()) {
          setUsb(other.getUsb());
        }
        if (other.hasFlash()) {
          setFlash(other.getFlash());
        }
        if (other.hasDbg()) {
          setDbg(other.getDbg());
        }
        if (other.hasZigbee()) {
          setZigbee(other.getZigbee());
        }
        if (other.hasWifi()) {
          setWifi(other.getWifi());
        }
        if (other.hasSatellite()) {
          setSatellite(other.getSatellite());
        }
        if (other.hasTracker()) {
          setTracker(other.getTracker());
        }
        if (other.hasGsm()) {
          setGsm(other.getGsm());
        }
        if (other.hasGps()) {
          setGps(other.getGps());
        }
        if (other.hasLora()) {
          setLora(other.getLora());
        }
        if (other.hasGsensor()) {
          setGsensor(other.getGsensor());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        maxpb.MaxpbDebug.TraceMaskLevel parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (maxpb.MaxpbDebug.TraceMaskLevel) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private maxpb.MaxpbDebug.TraceLevel init_ = maxpb.MaxpbDebug.TraceLevel.TRL_OFF;
      /**
       * <code>optional .maxpb.TraceLevel init = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public boolean hasInit() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .maxpb.TraceLevel init = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public maxpb.MaxpbDebug.TraceLevel getInit() {
        return init_;
      }
      /**
       * <code>optional .maxpb.TraceLevel init = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder setInit(maxpb.MaxpbDebug.TraceLevel value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        init_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .maxpb.TraceLevel init = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder clearInit() {
        bitField0_ = (bitField0_ & ~0x00000001);
        init_ = maxpb.MaxpbDebug.TraceLevel.TRL_OFF;
        onChanged();
        return this;
      }

      private maxpb.MaxpbDebug.TraceLevel sys_ = maxpb.MaxpbDebug.TraceLevel.TRL_OFF;
      /**
       * <code>optional .maxpb.TraceLevel sys = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public boolean hasSys() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional .maxpb.TraceLevel sys = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public maxpb.MaxpbDebug.TraceLevel getSys() {
        return sys_;
      }
      /**
       * <code>optional .maxpb.TraceLevel sys = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder setSys(maxpb.MaxpbDebug.TraceLevel value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000002;
        sys_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .maxpb.TraceLevel sys = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder clearSys() {
        bitField0_ = (bitField0_ & ~0x00000002);
        sys_ = maxpb.MaxpbDebug.TraceLevel.TRL_OFF;
        onChanged();
        return this;
      }

      private maxpb.MaxpbDebug.TraceLevel openData_ = maxpb.MaxpbDebug.TraceLevel.TRL_OFF;
      /**
       * <code>optional .maxpb.TraceLevel openData = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public boolean hasOpenData() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional .maxpb.TraceLevel openData = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public maxpb.MaxpbDebug.TraceLevel getOpenData() {
        return openData_;
      }
      /**
       * <code>optional .maxpb.TraceLevel openData = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder setOpenData(maxpb.MaxpbDebug.TraceLevel value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000004;
        openData_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .maxpb.TraceLevel openData = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder clearOpenData() {
        bitField0_ = (bitField0_ & ~0x00000004);
        openData_ = maxpb.MaxpbDebug.TraceLevel.TRL_OFF;
        onChanged();
        return this;
      }

      private maxpb.MaxpbDebug.TraceLevel fileSystem_ = maxpb.MaxpbDebug.TraceLevel.TRL_OFF;
      /**
       * <code>optional .maxpb.TraceLevel fileSystem = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public boolean hasFileSystem() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional .maxpb.TraceLevel fileSystem = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public maxpb.MaxpbDebug.TraceLevel getFileSystem() {
        return fileSystem_;
      }
      /**
       * <code>optional .maxpb.TraceLevel fileSystem = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder setFileSystem(maxpb.MaxpbDebug.TraceLevel value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000008;
        fileSystem_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .maxpb.TraceLevel fileSystem = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder clearFileSystem() {
        bitField0_ = (bitField0_ & ~0x00000008);
        fileSystem_ = maxpb.MaxpbDebug.TraceLevel.TRL_OFF;
        onChanged();
        return this;
      }

      private maxpb.MaxpbDebug.TraceLevel luac_ = maxpb.MaxpbDebug.TraceLevel.TRL_OFF;
      /**
       * <code>optional .maxpb.TraceLevel luac = 5;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public boolean hasLuac() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional .maxpb.TraceLevel luac = 5;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public maxpb.MaxpbDebug.TraceLevel getLuac() {
        return luac_;
      }
      /**
       * <code>optional .maxpb.TraceLevel luac = 5;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder setLuac(maxpb.MaxpbDebug.TraceLevel value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000010;
        luac_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .maxpb.TraceLevel luac = 5;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder clearLuac() {
        bitField0_ = (bitField0_ & ~0x00000010);
        luac_ = maxpb.MaxpbDebug.TraceLevel.TRL_OFF;
        onChanged();
        return this;
      }

      private maxpb.MaxpbDebug.TraceLevel luat_ = maxpb.MaxpbDebug.TraceLevel.TRL_OFF;
      /**
       * <code>optional .maxpb.TraceLevel luat = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public boolean hasLuat() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional .maxpb.TraceLevel luat = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public maxpb.MaxpbDebug.TraceLevel getLuat() {
        return luat_;
      }
      /**
       * <code>optional .maxpb.TraceLevel luat = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder setLuat(maxpb.MaxpbDebug.TraceLevel value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000020;
        luat_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .maxpb.TraceLevel luat = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder clearLuat() {
        bitField0_ = (bitField0_ & ~0x00000020);
        luat_ = maxpb.MaxpbDebug.TraceLevel.TRL_OFF;
        onChanged();
        return this;
      }

      private maxpb.MaxpbDebug.TraceLevel usb_ = maxpb.MaxpbDebug.TraceLevel.TRL_OFF;
      /**
       * <code>optional .maxpb.TraceLevel usb = 7;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public boolean hasUsb() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional .maxpb.TraceLevel usb = 7;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public maxpb.MaxpbDebug.TraceLevel getUsb() {
        return usb_;
      }
      /**
       * <code>optional .maxpb.TraceLevel usb = 7;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder setUsb(maxpb.MaxpbDebug.TraceLevel value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000040;
        usb_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .maxpb.TraceLevel usb = 7;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder clearUsb() {
        bitField0_ = (bitField0_ & ~0x00000040);
        usb_ = maxpb.MaxpbDebug.TraceLevel.TRL_OFF;
        onChanged();
        return this;
      }

      private maxpb.MaxpbDebug.TraceLevel flash_ = maxpb.MaxpbDebug.TraceLevel.TRL_OFF;
      /**
       * <code>optional .maxpb.TraceLevel flash = 8;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public boolean hasFlash() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional .maxpb.TraceLevel flash = 8;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public maxpb.MaxpbDebug.TraceLevel getFlash() {
        return flash_;
      }
      /**
       * <code>optional .maxpb.TraceLevel flash = 8;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder setFlash(maxpb.MaxpbDebug.TraceLevel value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000080;
        flash_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .maxpb.TraceLevel flash = 8;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder clearFlash() {
        bitField0_ = (bitField0_ & ~0x00000080);
        flash_ = maxpb.MaxpbDebug.TraceLevel.TRL_OFF;
        onChanged();
        return this;
      }

      private maxpb.MaxpbDebug.TraceLevel dbg_ = maxpb.MaxpbDebug.TraceLevel.TRL_OFF;
      /**
       * <code>optional .maxpb.TraceLevel dbg = 9;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public boolean hasDbg() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional .maxpb.TraceLevel dbg = 9;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public maxpb.MaxpbDebug.TraceLevel getDbg() {
        return dbg_;
      }
      /**
       * <code>optional .maxpb.TraceLevel dbg = 9;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder setDbg(maxpb.MaxpbDebug.TraceLevel value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000100;
        dbg_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .maxpb.TraceLevel dbg = 9;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder clearDbg() {
        bitField0_ = (bitField0_ & ~0x00000100);
        dbg_ = maxpb.MaxpbDebug.TraceLevel.TRL_OFF;
        onChanged();
        return this;
      }

      private maxpb.MaxpbDebug.TraceLevel zigbee_ = maxpb.MaxpbDebug.TraceLevel.TRL_OFF;
      /**
       * <code>optional .maxpb.TraceLevel zigbee = 10;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public boolean hasZigbee() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional .maxpb.TraceLevel zigbee = 10;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public maxpb.MaxpbDebug.TraceLevel getZigbee() {
        return zigbee_;
      }
      /**
       * <code>optional .maxpb.TraceLevel zigbee = 10;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder setZigbee(maxpb.MaxpbDebug.TraceLevel value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000200;
        zigbee_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .maxpb.TraceLevel zigbee = 10;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder clearZigbee() {
        bitField0_ = (bitField0_ & ~0x00000200);
        zigbee_ = maxpb.MaxpbDebug.TraceLevel.TRL_OFF;
        onChanged();
        return this;
      }

      private maxpb.MaxpbDebug.TraceLevel wifi_ = maxpb.MaxpbDebug.TraceLevel.TRL_OFF;
      /**
       * <code>optional .maxpb.TraceLevel wifi = 11;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public boolean hasWifi() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional .maxpb.TraceLevel wifi = 11;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public maxpb.MaxpbDebug.TraceLevel getWifi() {
        return wifi_;
      }
      /**
       * <code>optional .maxpb.TraceLevel wifi = 11;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder setWifi(maxpb.MaxpbDebug.TraceLevel value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000400;
        wifi_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .maxpb.TraceLevel wifi = 11;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder clearWifi() {
        bitField0_ = (bitField0_ & ~0x00000400);
        wifi_ = maxpb.MaxpbDebug.TraceLevel.TRL_OFF;
        onChanged();
        return this;
      }

      private maxpb.MaxpbDebug.TraceLevel satellite_ = maxpb.MaxpbDebug.TraceLevel.TRL_OFF;
      /**
       * <code>optional .maxpb.TraceLevel satellite = 12;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public boolean hasSatellite() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional .maxpb.TraceLevel satellite = 12;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public maxpb.MaxpbDebug.TraceLevel getSatellite() {
        return satellite_;
      }
      /**
       * <code>optional .maxpb.TraceLevel satellite = 12;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder setSatellite(maxpb.MaxpbDebug.TraceLevel value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000800;
        satellite_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .maxpb.TraceLevel satellite = 12;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder clearSatellite() {
        bitField0_ = (bitField0_ & ~0x00000800);
        satellite_ = maxpb.MaxpbDebug.TraceLevel.TRL_OFF;
        onChanged();
        return this;
      }

      private maxpb.MaxpbDebug.TraceLevel tracker_ = maxpb.MaxpbDebug.TraceLevel.TRL_OFF;
      /**
       * <code>optional .maxpb.TraceLevel tracker = 13;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public boolean hasTracker() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional .maxpb.TraceLevel tracker = 13;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public maxpb.MaxpbDebug.TraceLevel getTracker() {
        return tracker_;
      }
      /**
       * <code>optional .maxpb.TraceLevel tracker = 13;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder setTracker(maxpb.MaxpbDebug.TraceLevel value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00001000;
        tracker_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .maxpb.TraceLevel tracker = 13;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder clearTracker() {
        bitField0_ = (bitField0_ & ~0x00001000);
        tracker_ = maxpb.MaxpbDebug.TraceLevel.TRL_OFF;
        onChanged();
        return this;
      }

      private maxpb.MaxpbDebug.TraceLevel gsm_ = maxpb.MaxpbDebug.TraceLevel.TRL_OFF;
      /**
       * <code>optional .maxpb.TraceLevel gsm = 14;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public boolean hasGsm() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>optional .maxpb.TraceLevel gsm = 14;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public maxpb.MaxpbDebug.TraceLevel getGsm() {
        return gsm_;
      }
      /**
       * <code>optional .maxpb.TraceLevel gsm = 14;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder setGsm(maxpb.MaxpbDebug.TraceLevel value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00002000;
        gsm_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .maxpb.TraceLevel gsm = 14;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder clearGsm() {
        bitField0_ = (bitField0_ & ~0x00002000);
        gsm_ = maxpb.MaxpbDebug.TraceLevel.TRL_OFF;
        onChanged();
        return this;
      }

      private maxpb.MaxpbDebug.TraceLevel gps_ = maxpb.MaxpbDebug.TraceLevel.TRL_OFF;
      /**
       * <code>optional .maxpb.TraceLevel gps = 15;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public boolean hasGps() {
        return ((bitField0_ & 0x00004000) == 0x00004000);
      }
      /**
       * <code>optional .maxpb.TraceLevel gps = 15;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public maxpb.MaxpbDebug.TraceLevel getGps() {
        return gps_;
      }
      /**
       * <code>optional .maxpb.TraceLevel gps = 15;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder setGps(maxpb.MaxpbDebug.TraceLevel value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00004000;
        gps_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .maxpb.TraceLevel gps = 15;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder clearGps() {
        bitField0_ = (bitField0_ & ~0x00004000);
        gps_ = maxpb.MaxpbDebug.TraceLevel.TRL_OFF;
        onChanged();
        return this;
      }

      private maxpb.MaxpbDebug.TraceLevel lora_ = maxpb.MaxpbDebug.TraceLevel.TRL_OFF;
      /**
       * <code>optional .maxpb.TraceLevel lora = 16;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public boolean hasLora() {
        return ((bitField0_ & 0x00008000) == 0x00008000);
      }
      /**
       * <code>optional .maxpb.TraceLevel lora = 16;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public maxpb.MaxpbDebug.TraceLevel getLora() {
        return lora_;
      }
      /**
       * <code>optional .maxpb.TraceLevel lora = 16;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder setLora(maxpb.MaxpbDebug.TraceLevel value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00008000;
        lora_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .maxpb.TraceLevel lora = 16;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder clearLora() {
        bitField0_ = (bitField0_ & ~0x00008000);
        lora_ = maxpb.MaxpbDebug.TraceLevel.TRL_OFF;
        onChanged();
        return this;
      }

      private maxpb.MaxpbDebug.TraceLevel gsensor_ = maxpb.MaxpbDebug.TraceLevel.TRL_OFF;
      /**
       * <code>optional .maxpb.TraceLevel gsensor = 17;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public boolean hasGsensor() {
        return ((bitField0_ & 0x00010000) == 0x00010000);
      }
      /**
       * <code>optional .maxpb.TraceLevel gsensor = 17;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public maxpb.MaxpbDebug.TraceLevel getGsensor() {
        return gsensor_;
      }
      /**
       * <code>optional .maxpb.TraceLevel gsensor = 17;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder setGsensor(maxpb.MaxpbDebug.TraceLevel value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00010000;
        gsensor_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .maxpb.TraceLevel gsensor = 17;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder clearGsensor() {
        bitField0_ = (bitField0_ & ~0x00010000);
        gsensor_ = maxpb.MaxpbDebug.TraceLevel.TRL_OFF;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:maxpb.TraceMaskLevel)
    }

    static {
      defaultInstance = new TraceMaskLevel(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:maxpb.TraceMaskLevel)
  }

  public interface TraceConfigOrBuilder extends
      // @@protoc_insertion_point(interface_extends:maxpb.TraceConfig)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional .maxpb.TraceChannel channel = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MAXIO
     * </pre>
     */
    boolean hasChannel();
    /**
     * <code>optional .maxpb.TraceChannel channel = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MAXIO
     * </pre>
     */
    maxpb.MaxpbDebug.TraceChannel getChannel();

    /**
     * <code>optional .maxpb.TraceMaskLevel mask = 2;</code>
     *
     * <pre>
     *&#47;&#64;exclude SupportedBy: 
     * </pre>
     */
    boolean hasMask();
    /**
     * <code>optional .maxpb.TraceMaskLevel mask = 2;</code>
     *
     * <pre>
     *&#47;&#64;exclude SupportedBy: 
     * </pre>
     */
    maxpb.MaxpbDebug.TraceMaskLevel getMask();
    /**
     * <code>optional .maxpb.TraceMaskLevel mask = 2;</code>
     *
     * <pre>
     *&#47;&#64;exclude SupportedBy: 
     * </pre>
     */
    maxpb.MaxpbDebug.TraceMaskLevelOrBuilder getMaskOrBuilder();
  }
  /**
   * Protobuf type {@code maxpb.TraceConfig}
   */
  public static final class TraceConfig extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:maxpb.TraceConfig)
      TraceConfigOrBuilder {
    // Use TraceConfig.newBuilder() to construct.
    private TraceConfig(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private TraceConfig(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final TraceConfig defaultInstance;
    public static TraceConfig getDefaultInstance() {
      return defaultInstance;
    }

    public TraceConfig getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private TraceConfig(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              maxpb.MaxpbDebug.TraceChannel value = maxpb.MaxpbDebug.TraceChannel.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(1, rawValue);
              } else {
                bitField0_ |= 0x00000001;
                channel_ = value;
              }
              break;
            }
            case 18: {
              maxpb.MaxpbDebug.TraceMaskLevel.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = mask_.toBuilder();
              }
              mask_ = input.readMessage(maxpb.MaxpbDebug.TraceMaskLevel.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(mask_);
                mask_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return maxpb.MaxpbDebug.internal_static_maxpb_TraceConfig_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return maxpb.MaxpbDebug.internal_static_maxpb_TraceConfig_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              maxpb.MaxpbDebug.TraceConfig.class, maxpb.MaxpbDebug.TraceConfig.Builder.class);
    }

    public static com.google.protobuf.Parser<TraceConfig> PARSER =
        new com.google.protobuf.AbstractParser<TraceConfig>() {
      public TraceConfig parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new TraceConfig(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<TraceConfig> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int CHANNEL_FIELD_NUMBER = 1;
    private maxpb.MaxpbDebug.TraceChannel channel_;
    /**
     * <code>optional .maxpb.TraceChannel channel = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MAXIO
     * </pre>
     */
    public boolean hasChannel() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .maxpb.TraceChannel channel = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MAXIO
     * </pre>
     */
    public maxpb.MaxpbDebug.TraceChannel getChannel() {
      return channel_;
    }

    public static final int MASK_FIELD_NUMBER = 2;
    private maxpb.MaxpbDebug.TraceMaskLevel mask_;
    /**
     * <code>optional .maxpb.TraceMaskLevel mask = 2;</code>
     *
     * <pre>
     *&#47;&#64;exclude SupportedBy: 
     * </pre>
     */
    public boolean hasMask() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional .maxpb.TraceMaskLevel mask = 2;</code>
     *
     * <pre>
     *&#47;&#64;exclude SupportedBy: 
     * </pre>
     */
    public maxpb.MaxpbDebug.TraceMaskLevel getMask() {
      return mask_;
    }
    /**
     * <code>optional .maxpb.TraceMaskLevel mask = 2;</code>
     *
     * <pre>
     *&#47;&#64;exclude SupportedBy: 
     * </pre>
     */
    public maxpb.MaxpbDebug.TraceMaskLevelOrBuilder getMaskOrBuilder() {
      return mask_;
    }

    private void initFields() {
      channel_ = maxpb.MaxpbDebug.TraceChannel.TRC_DISABLE;
      mask_ = maxpb.MaxpbDebug.TraceMaskLevel.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, channel_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, mask_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, channel_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, mask_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static maxpb.MaxpbDebug.TraceConfig parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static maxpb.MaxpbDebug.TraceConfig parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static maxpb.MaxpbDebug.TraceConfig parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static maxpb.MaxpbDebug.TraceConfig parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static maxpb.MaxpbDebug.TraceConfig parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static maxpb.MaxpbDebug.TraceConfig parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static maxpb.MaxpbDebug.TraceConfig parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static maxpb.MaxpbDebug.TraceConfig parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static maxpb.MaxpbDebug.TraceConfig parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static maxpb.MaxpbDebug.TraceConfig parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(maxpb.MaxpbDebug.TraceConfig prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code maxpb.TraceConfig}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:maxpb.TraceConfig)
        maxpb.MaxpbDebug.TraceConfigOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return maxpb.MaxpbDebug.internal_static_maxpb_TraceConfig_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return maxpb.MaxpbDebug.internal_static_maxpb_TraceConfig_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                maxpb.MaxpbDebug.TraceConfig.class, maxpb.MaxpbDebug.TraceConfig.Builder.class);
      }

      // Construct using maxpb.MaxpbDebug.TraceConfig.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getMaskFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        channel_ = maxpb.MaxpbDebug.TraceChannel.TRC_DISABLE;
        bitField0_ = (bitField0_ & ~0x00000001);
        if (maskBuilder_ == null) {
          mask_ = maxpb.MaxpbDebug.TraceMaskLevel.getDefaultInstance();
        } else {
          maskBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return maxpb.MaxpbDebug.internal_static_maxpb_TraceConfig_descriptor;
      }

      public maxpb.MaxpbDebug.TraceConfig getDefaultInstanceForType() {
        return maxpb.MaxpbDebug.TraceConfig.getDefaultInstance();
      }

      public maxpb.MaxpbDebug.TraceConfig build() {
        maxpb.MaxpbDebug.TraceConfig result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public maxpb.MaxpbDebug.TraceConfig buildPartial() {
        maxpb.MaxpbDebug.TraceConfig result = new maxpb.MaxpbDebug.TraceConfig(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.channel_ = channel_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        if (maskBuilder_ == null) {
          result.mask_ = mask_;
        } else {
          result.mask_ = maskBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof maxpb.MaxpbDebug.TraceConfig) {
          return mergeFrom((maxpb.MaxpbDebug.TraceConfig)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(maxpb.MaxpbDebug.TraceConfig other) {
        if (other == maxpb.MaxpbDebug.TraceConfig.getDefaultInstance()) return this;
        if (other.hasChannel()) {
          setChannel(other.getChannel());
        }
        if (other.hasMask()) {
          mergeMask(other.getMask());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        maxpb.MaxpbDebug.TraceConfig parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (maxpb.MaxpbDebug.TraceConfig) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private maxpb.MaxpbDebug.TraceChannel channel_ = maxpb.MaxpbDebug.TraceChannel.TRC_DISABLE;
      /**
       * <code>optional .maxpb.TraceChannel channel = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MAXIO
       * </pre>
       */
      public boolean hasChannel() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .maxpb.TraceChannel channel = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MAXIO
       * </pre>
       */
      public maxpb.MaxpbDebug.TraceChannel getChannel() {
        return channel_;
      }
      /**
       * <code>optional .maxpb.TraceChannel channel = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MAXIO
       * </pre>
       */
      public Builder setChannel(maxpb.MaxpbDebug.TraceChannel value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        channel_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .maxpb.TraceChannel channel = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MAXIO
       * </pre>
       */
      public Builder clearChannel() {
        bitField0_ = (bitField0_ & ~0x00000001);
        channel_ = maxpb.MaxpbDebug.TraceChannel.TRC_DISABLE;
        onChanged();
        return this;
      }

      private maxpb.MaxpbDebug.TraceMaskLevel mask_ = maxpb.MaxpbDebug.TraceMaskLevel.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbDebug.TraceMaskLevel, maxpb.MaxpbDebug.TraceMaskLevel.Builder, maxpb.MaxpbDebug.TraceMaskLevelOrBuilder> maskBuilder_;
      /**
       * <code>optional .maxpb.TraceMaskLevel mask = 2;</code>
       *
       * <pre>
       *&#47;&#64;exclude SupportedBy: 
       * </pre>
       */
      public boolean hasMask() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional .maxpb.TraceMaskLevel mask = 2;</code>
       *
       * <pre>
       *&#47;&#64;exclude SupportedBy: 
       * </pre>
       */
      public maxpb.MaxpbDebug.TraceMaskLevel getMask() {
        if (maskBuilder_ == null) {
          return mask_;
        } else {
          return maskBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .maxpb.TraceMaskLevel mask = 2;</code>
       *
       * <pre>
       *&#47;&#64;exclude SupportedBy: 
       * </pre>
       */
      public Builder setMask(maxpb.MaxpbDebug.TraceMaskLevel value) {
        if (maskBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          mask_ = value;
          onChanged();
        } else {
          maskBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .maxpb.TraceMaskLevel mask = 2;</code>
       *
       * <pre>
       *&#47;&#64;exclude SupportedBy: 
       * </pre>
       */
      public Builder setMask(
          maxpb.MaxpbDebug.TraceMaskLevel.Builder builderForValue) {
        if (maskBuilder_ == null) {
          mask_ = builderForValue.build();
          onChanged();
        } else {
          maskBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .maxpb.TraceMaskLevel mask = 2;</code>
       *
       * <pre>
       *&#47;&#64;exclude SupportedBy: 
       * </pre>
       */
      public Builder mergeMask(maxpb.MaxpbDebug.TraceMaskLevel value) {
        if (maskBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              mask_ != maxpb.MaxpbDebug.TraceMaskLevel.getDefaultInstance()) {
            mask_ =
              maxpb.MaxpbDebug.TraceMaskLevel.newBuilder(mask_).mergeFrom(value).buildPartial();
          } else {
            mask_ = value;
          }
          onChanged();
        } else {
          maskBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .maxpb.TraceMaskLevel mask = 2;</code>
       *
       * <pre>
       *&#47;&#64;exclude SupportedBy: 
       * </pre>
       */
      public Builder clearMask() {
        if (maskBuilder_ == null) {
          mask_ = maxpb.MaxpbDebug.TraceMaskLevel.getDefaultInstance();
          onChanged();
        } else {
          maskBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      /**
       * <code>optional .maxpb.TraceMaskLevel mask = 2;</code>
       *
       * <pre>
       *&#47;&#64;exclude SupportedBy: 
       * </pre>
       */
      public maxpb.MaxpbDebug.TraceMaskLevel.Builder getMaskBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getMaskFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .maxpb.TraceMaskLevel mask = 2;</code>
       *
       * <pre>
       *&#47;&#64;exclude SupportedBy: 
       * </pre>
       */
      public maxpb.MaxpbDebug.TraceMaskLevelOrBuilder getMaskOrBuilder() {
        if (maskBuilder_ != null) {
          return maskBuilder_.getMessageOrBuilder();
        } else {
          return mask_;
        }
      }
      /**
       * <code>optional .maxpb.TraceMaskLevel mask = 2;</code>
       *
       * <pre>
       *&#47;&#64;exclude SupportedBy: 
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbDebug.TraceMaskLevel, maxpb.MaxpbDebug.TraceMaskLevel.Builder, maxpb.MaxpbDebug.TraceMaskLevelOrBuilder> 
          getMaskFieldBuilder() {
        if (maskBuilder_ == null) {
          maskBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              maxpb.MaxpbDebug.TraceMaskLevel, maxpb.MaxpbDebug.TraceMaskLevel.Builder, maxpb.MaxpbDebug.TraceMaskLevelOrBuilder>(
                  getMask(),
                  getParentForChildren(),
                  isClean());
          mask_ = null;
        }
        return maskBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:maxpb.TraceConfig)
    }

    static {
      defaultInstance = new TraceConfig(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:maxpb.TraceConfig)
  }

  public interface DiagnosticGsmOrBuilder extends
      // @@protoc_insertion_point(interface_extends:maxpb.DiagnosticGsm)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional uint32 activeInterval = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    boolean hasActiveInterval();
    /**
     * <code>optional uint32 activeInterval = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    int getActiveInterval();

    /**
     * <code>optional uint32 resetQty = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    boolean hasResetQty();
    /**
     * <code>optional uint32 resetQty = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    int getResetQty();

    /**
     * <code>optional uint32 registrationInterval = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    boolean hasRegistrationInterval();
    /**
     * <code>optional uint32 registrationInterval = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    int getRegistrationInterval();

    /**
     * <code>optional uint32 linkInterval = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    boolean hasLinkInterval();
    /**
     * <code>optional uint32 linkInterval = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    int getLinkInterval();

    /**
     * <code>optional uint32 socketInterval = 5;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    boolean hasSocketInterval();
    /**
     * <code>optional uint32 socketInterval = 5;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    int getSocketInterval();

    /**
     * <code>optional uint32 extendedSocketInterval = 6;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    boolean hasExtendedSocketInterval();
    /**
     * <code>optional uint32 extendedSocketInterval = 6;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    int getExtendedSocketInterval();

    /**
     * <code>optional uint32 lowFreqRegistrationQty = 7;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    boolean hasLowFreqRegistrationQty();
    /**
     * <code>optional uint32 lowFreqRegistrationQty = 7;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    int getLowFreqRegistrationQty();

    /**
     * <code>optional uint32 highFreqRegistrationQty = 8;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    boolean hasHighFreqRegistrationQty();
    /**
     * <code>optional uint32 highFreqRegistrationQty = 8;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    int getHighFreqRegistrationQty();

    /**
     * <code>optional uint32 lowCsqRegistrationQty = 9;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    boolean hasLowCsqRegistrationQty();
    /**
     * <code>optional uint32 lowCsqRegistrationQty = 9;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    int getLowCsqRegistrationQty();

    /**
     * <code>optional uint32 highCsqRegistrationQty = 10;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    boolean hasHighCsqRegistrationQty();
    /**
     * <code>optional uint32 highCsqRegistrationQty = 10;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    int getHighCsqRegistrationQty();

    /**
     * <code>optional uint32 dtrOnInterval = 11;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    boolean hasDtrOnInterval();
    /**
     * <code>optional uint32 dtrOnInterval = 11;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    int getDtrOnInterval();

    /**
     * <code>optional uint32 dtrOffInterval = 12;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    boolean hasDtrOffInterval();
    /**
     * <code>optional uint32 dtrOffInterval = 12;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    int getDtrOffInterval();

    /**
     * <code>optional uint32 registrationOkQty = 13;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    boolean hasRegistrationOkQty();
    /**
     * <code>optional uint32 registrationOkQty = 13;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    int getRegistrationOkQty();

    /**
     * <code>optional uint32 registrationFailQty = 14;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    boolean hasRegistrationFailQty();
    /**
     * <code>optional uint32 registrationFailQty = 14;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    int getRegistrationFailQty();

    /**
     * <code>optional uint32 linkOkQty = 15;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    boolean hasLinkOkQty();
    /**
     * <code>optional uint32 linkOkQty = 15;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    int getLinkOkQty();

    /**
     * <code>optional uint32 linkFailQty = 16;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    boolean hasLinkFailQty();
    /**
     * <code>optional uint32 linkFailQty = 16;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    int getLinkFailQty();

    /**
     * <code>optional uint32 socketsOkQty = 17;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    boolean hasSocketsOkQty();
    /**
     * <code>optional uint32 socketsOkQty = 17;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    int getSocketsOkQty();

    /**
     * <code>optional uint32 socketsFailQty = 18;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    boolean hasSocketsFailQty();
    /**
     * <code>optional uint32 socketsFailQty = 18;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    int getSocketsFailQty();

    /**
     * <code>optional uint32 handoverQty = 19;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    boolean hasHandoverQty();
    /**
     * <code>optional uint32 handoverQty = 19;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    int getHandoverQty();

    /**
     * <code>optional uint32 txBytesQty = 20;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    boolean hasTxBytesQty();
    /**
     * <code>optional uint32 txBytesQty = 20;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    int getTxBytesQty();

    /**
     * <code>optional uint32 rxBytesQty = 21;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    boolean hasRxBytesQty();
    /**
     * <code>optional uint32 rxBytesQty = 21;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    int getRxBytesQty();

    /**
     * <code>optional uint32 txPacketsOkQty = 22;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    boolean hasTxPacketsOkQty();
    /**
     * <code>optional uint32 txPacketsOkQty = 22;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    int getTxPacketsOkQty();

    /**
     * <code>optional uint32 txPacketsFailQty = 23;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    boolean hasTxPacketsFailQty();
    /**
     * <code>optional uint32 txPacketsFailQty = 23;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    int getTxPacketsFailQty();

    /**
     * <code>optional uint32 rxPacketsQty = 24;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    boolean hasRxPacketsQty();
    /**
     * <code>optional uint32 rxPacketsQty = 24;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    int getRxPacketsQty();

    /**
     * <code>optional uint32 primarySimcardFailQty = 25;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    boolean hasPrimarySimcardFailQty();
    /**
     * <code>optional uint32 primarySimcardFailQty = 25;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    int getPrimarySimcardFailQty();

    /**
     * <code>optional uint32 secondarySimcardFailQty = 26;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    boolean hasSecondarySimcardFailQty();
    /**
     * <code>optional uint32 secondarySimcardFailQty = 26;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    int getSecondarySimcardFailQty();

    /**
     * <code>optional uint32 presettingInterval = 27;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    boolean hasPresettingInterval();
    /**
     * <code>optional uint32 presettingInterval = 27;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    int getPresettingInterval();

    /**
     * <code>optional uint32 waitingPinInterval = 28;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    boolean hasWaitingPinInterval();
    /**
     * <code>optional uint32 waitingPinInterval = 28;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    int getWaitingPinInterval();

    /**
     * <code>optional uint32 linkIdleInterval = 29;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    boolean hasLinkIdleInterval();
    /**
     * <code>optional uint32 linkIdleInterval = 29;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    int getLinkIdleInterval();

    /**
     * <code>optional uint32 turningOffInterval = 30;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    boolean hasTurningOffInterval();
    /**
     * <code>optional uint32 turningOffInterval = 30;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    int getTurningOffInterval();

    /**
     * <code>optional uint32 presettingOkQty = 31;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    boolean hasPresettingOkQty();
    /**
     * <code>optional uint32 presettingOkQty = 31;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    int getPresettingOkQty();

    /**
     * <code>optional uint32 presettingFailQty = 32;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    boolean hasPresettingFailQty();
    /**
     * <code>optional uint32 presettingFailQty = 32;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    int getPresettingFailQty();

    /**
     * <code>optional uint32 waitingPinOkQty = 33;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    boolean hasWaitingPinOkQty();
    /**
     * <code>optional uint32 waitingPinOkQty = 33;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    int getWaitingPinOkQty();

    /**
     * <code>optional uint32 waitingPinFailQty = 34;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    boolean hasWaitingPinFailQty();
    /**
     * <code>optional uint32 waitingPinFailQty = 34;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    int getWaitingPinFailQty();

    /**
     * <code>optional uint32 idleInterval = 35;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    boolean hasIdleInterval();
    /**
     * <code>optional uint32 idleInterval = 35;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    int getIdleInterval();
  }
  /**
   * Protobuf type {@code maxpb.DiagnosticGsm}
   *
   * <pre>
   *&#47;&#64;exclude
   * </pre>
   */
  public static final class DiagnosticGsm extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:maxpb.DiagnosticGsm)
      DiagnosticGsmOrBuilder {
    // Use DiagnosticGsm.newBuilder() to construct.
    private DiagnosticGsm(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private DiagnosticGsm(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final DiagnosticGsm defaultInstance;
    public static DiagnosticGsm getDefaultInstance() {
      return defaultInstance;
    }

    public DiagnosticGsm getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private DiagnosticGsm(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      int mutable_bitField1_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              activeInterval_ = input.readUInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              resetQty_ = input.readUInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              registrationInterval_ = input.readUInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              linkInterval_ = input.readUInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              socketInterval_ = input.readUInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              extendedSocketInterval_ = input.readUInt32();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              lowFreqRegistrationQty_ = input.readUInt32();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000080;
              highFreqRegistrationQty_ = input.readUInt32();
              break;
            }
            case 72: {
              bitField0_ |= 0x00000100;
              lowCsqRegistrationQty_ = input.readUInt32();
              break;
            }
            case 80: {
              bitField0_ |= 0x00000200;
              highCsqRegistrationQty_ = input.readUInt32();
              break;
            }
            case 88: {
              bitField0_ |= 0x00000400;
              dtrOnInterval_ = input.readUInt32();
              break;
            }
            case 96: {
              bitField0_ |= 0x00000800;
              dtrOffInterval_ = input.readUInt32();
              break;
            }
            case 104: {
              bitField0_ |= 0x00001000;
              registrationOkQty_ = input.readUInt32();
              break;
            }
            case 112: {
              bitField0_ |= 0x00002000;
              registrationFailQty_ = input.readUInt32();
              break;
            }
            case 120: {
              bitField0_ |= 0x00004000;
              linkOkQty_ = input.readUInt32();
              break;
            }
            case 128: {
              bitField0_ |= 0x00008000;
              linkFailQty_ = input.readUInt32();
              break;
            }
            case 136: {
              bitField0_ |= 0x00010000;
              socketsOkQty_ = input.readUInt32();
              break;
            }
            case 144: {
              bitField0_ |= 0x00020000;
              socketsFailQty_ = input.readUInt32();
              break;
            }
            case 152: {
              bitField0_ |= 0x00040000;
              handoverQty_ = input.readUInt32();
              break;
            }
            case 160: {
              bitField0_ |= 0x00080000;
              txBytesQty_ = input.readUInt32();
              break;
            }
            case 168: {
              bitField0_ |= 0x00100000;
              rxBytesQty_ = input.readUInt32();
              break;
            }
            case 176: {
              bitField0_ |= 0x00200000;
              txPacketsOkQty_ = input.readUInt32();
              break;
            }
            case 184: {
              bitField0_ |= 0x00400000;
              txPacketsFailQty_ = input.readUInt32();
              break;
            }
            case 192: {
              bitField0_ |= 0x00800000;
              rxPacketsQty_ = input.readUInt32();
              break;
            }
            case 200: {
              bitField0_ |= 0x01000000;
              primarySimcardFailQty_ = input.readUInt32();
              break;
            }
            case 208: {
              bitField0_ |= 0x02000000;
              secondarySimcardFailQty_ = input.readUInt32();
              break;
            }
            case 216: {
              bitField0_ |= 0x04000000;
              presettingInterval_ = input.readUInt32();
              break;
            }
            case 224: {
              bitField0_ |= 0x08000000;
              waitingPinInterval_ = input.readUInt32();
              break;
            }
            case 232: {
              bitField0_ |= 0x10000000;
              linkIdleInterval_ = input.readUInt32();
              break;
            }
            case 240: {
              bitField0_ |= 0x20000000;
              turningOffInterval_ = input.readUInt32();
              break;
            }
            case 248: {
              bitField0_ |= 0x40000000;
              presettingOkQty_ = input.readUInt32();
              break;
            }
            case 256: {
              bitField0_ |= 0x80000000;
              presettingFailQty_ = input.readUInt32();
              break;
            }
            case 264: {
              bitField1_ |= 0x00000001;
              waitingPinOkQty_ = input.readUInt32();
              break;
            }
            case 272: {
              bitField1_ |= 0x00000002;
              waitingPinFailQty_ = input.readUInt32();
              break;
            }
            case 280: {
              bitField1_ |= 0x00000004;
              idleInterval_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return maxpb.MaxpbDebug.internal_static_maxpb_DiagnosticGsm_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return maxpb.MaxpbDebug.internal_static_maxpb_DiagnosticGsm_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              maxpb.MaxpbDebug.DiagnosticGsm.class, maxpb.MaxpbDebug.DiagnosticGsm.Builder.class);
    }

    public static com.google.protobuf.Parser<DiagnosticGsm> PARSER =
        new com.google.protobuf.AbstractParser<DiagnosticGsm>() {
      public DiagnosticGsm parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new DiagnosticGsm(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<DiagnosticGsm> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    private int bitField1_;
    public static final int ACTIVEINTERVAL_FIELD_NUMBER = 1;
    private int activeInterval_;
    /**
     * <code>optional uint32 activeInterval = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    public boolean hasActiveInterval() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional uint32 activeInterval = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    public int getActiveInterval() {
      return activeInterval_;
    }

    public static final int RESETQTY_FIELD_NUMBER = 2;
    private int resetQty_;
    /**
     * <code>optional uint32 resetQty = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    public boolean hasResetQty() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional uint32 resetQty = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    public int getResetQty() {
      return resetQty_;
    }

    public static final int REGISTRATIONINTERVAL_FIELD_NUMBER = 3;
    private int registrationInterval_;
    /**
     * <code>optional uint32 registrationInterval = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    public boolean hasRegistrationInterval() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional uint32 registrationInterval = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    public int getRegistrationInterval() {
      return registrationInterval_;
    }

    public static final int LINKINTERVAL_FIELD_NUMBER = 4;
    private int linkInterval_;
    /**
     * <code>optional uint32 linkInterval = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    public boolean hasLinkInterval() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional uint32 linkInterval = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    public int getLinkInterval() {
      return linkInterval_;
    }

    public static final int SOCKETINTERVAL_FIELD_NUMBER = 5;
    private int socketInterval_;
    /**
     * <code>optional uint32 socketInterval = 5;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    public boolean hasSocketInterval() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional uint32 socketInterval = 5;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    public int getSocketInterval() {
      return socketInterval_;
    }

    public static final int EXTENDEDSOCKETINTERVAL_FIELD_NUMBER = 6;
    private int extendedSocketInterval_;
    /**
     * <code>optional uint32 extendedSocketInterval = 6;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    public boolean hasExtendedSocketInterval() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional uint32 extendedSocketInterval = 6;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    public int getExtendedSocketInterval() {
      return extendedSocketInterval_;
    }

    public static final int LOWFREQREGISTRATIONQTY_FIELD_NUMBER = 7;
    private int lowFreqRegistrationQty_;
    /**
     * <code>optional uint32 lowFreqRegistrationQty = 7;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    public boolean hasLowFreqRegistrationQty() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional uint32 lowFreqRegistrationQty = 7;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    public int getLowFreqRegistrationQty() {
      return lowFreqRegistrationQty_;
    }

    public static final int HIGHFREQREGISTRATIONQTY_FIELD_NUMBER = 8;
    private int highFreqRegistrationQty_;
    /**
     * <code>optional uint32 highFreqRegistrationQty = 8;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    public boolean hasHighFreqRegistrationQty() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional uint32 highFreqRegistrationQty = 8;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    public int getHighFreqRegistrationQty() {
      return highFreqRegistrationQty_;
    }

    public static final int LOWCSQREGISTRATIONQTY_FIELD_NUMBER = 9;
    private int lowCsqRegistrationQty_;
    /**
     * <code>optional uint32 lowCsqRegistrationQty = 9;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    public boolean hasLowCsqRegistrationQty() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional uint32 lowCsqRegistrationQty = 9;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    public int getLowCsqRegistrationQty() {
      return lowCsqRegistrationQty_;
    }

    public static final int HIGHCSQREGISTRATIONQTY_FIELD_NUMBER = 10;
    private int highCsqRegistrationQty_;
    /**
     * <code>optional uint32 highCsqRegistrationQty = 10;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    public boolean hasHighCsqRegistrationQty() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional uint32 highCsqRegistrationQty = 10;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    public int getHighCsqRegistrationQty() {
      return highCsqRegistrationQty_;
    }

    public static final int DTRONINTERVAL_FIELD_NUMBER = 11;
    private int dtrOnInterval_;
    /**
     * <code>optional uint32 dtrOnInterval = 11;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    public boolean hasDtrOnInterval() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional uint32 dtrOnInterval = 11;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    public int getDtrOnInterval() {
      return dtrOnInterval_;
    }

    public static final int DTROFFINTERVAL_FIELD_NUMBER = 12;
    private int dtrOffInterval_;
    /**
     * <code>optional uint32 dtrOffInterval = 12;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    public boolean hasDtrOffInterval() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional uint32 dtrOffInterval = 12;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    public int getDtrOffInterval() {
      return dtrOffInterval_;
    }

    public static final int REGISTRATIONOKQTY_FIELD_NUMBER = 13;
    private int registrationOkQty_;
    /**
     * <code>optional uint32 registrationOkQty = 13;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    public boolean hasRegistrationOkQty() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>optional uint32 registrationOkQty = 13;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    public int getRegistrationOkQty() {
      return registrationOkQty_;
    }

    public static final int REGISTRATIONFAILQTY_FIELD_NUMBER = 14;
    private int registrationFailQty_;
    /**
     * <code>optional uint32 registrationFailQty = 14;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    public boolean hasRegistrationFailQty() {
      return ((bitField0_ & 0x00002000) == 0x00002000);
    }
    /**
     * <code>optional uint32 registrationFailQty = 14;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    public int getRegistrationFailQty() {
      return registrationFailQty_;
    }

    public static final int LINKOKQTY_FIELD_NUMBER = 15;
    private int linkOkQty_;
    /**
     * <code>optional uint32 linkOkQty = 15;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    public boolean hasLinkOkQty() {
      return ((bitField0_ & 0x00004000) == 0x00004000);
    }
    /**
     * <code>optional uint32 linkOkQty = 15;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    public int getLinkOkQty() {
      return linkOkQty_;
    }

    public static final int LINKFAILQTY_FIELD_NUMBER = 16;
    private int linkFailQty_;
    /**
     * <code>optional uint32 linkFailQty = 16;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    public boolean hasLinkFailQty() {
      return ((bitField0_ & 0x00008000) == 0x00008000);
    }
    /**
     * <code>optional uint32 linkFailQty = 16;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    public int getLinkFailQty() {
      return linkFailQty_;
    }

    public static final int SOCKETSOKQTY_FIELD_NUMBER = 17;
    private int socketsOkQty_;
    /**
     * <code>optional uint32 socketsOkQty = 17;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    public boolean hasSocketsOkQty() {
      return ((bitField0_ & 0x00010000) == 0x00010000);
    }
    /**
     * <code>optional uint32 socketsOkQty = 17;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    public int getSocketsOkQty() {
      return socketsOkQty_;
    }

    public static final int SOCKETSFAILQTY_FIELD_NUMBER = 18;
    private int socketsFailQty_;
    /**
     * <code>optional uint32 socketsFailQty = 18;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    public boolean hasSocketsFailQty() {
      return ((bitField0_ & 0x00020000) == 0x00020000);
    }
    /**
     * <code>optional uint32 socketsFailQty = 18;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    public int getSocketsFailQty() {
      return socketsFailQty_;
    }

    public static final int HANDOVERQTY_FIELD_NUMBER = 19;
    private int handoverQty_;
    /**
     * <code>optional uint32 handoverQty = 19;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    public boolean hasHandoverQty() {
      return ((bitField0_ & 0x00040000) == 0x00040000);
    }
    /**
     * <code>optional uint32 handoverQty = 19;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    public int getHandoverQty() {
      return handoverQty_;
    }

    public static final int TXBYTESQTY_FIELD_NUMBER = 20;
    private int txBytesQty_;
    /**
     * <code>optional uint32 txBytesQty = 20;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    public boolean hasTxBytesQty() {
      return ((bitField0_ & 0x00080000) == 0x00080000);
    }
    /**
     * <code>optional uint32 txBytesQty = 20;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    public int getTxBytesQty() {
      return txBytesQty_;
    }

    public static final int RXBYTESQTY_FIELD_NUMBER = 21;
    private int rxBytesQty_;
    /**
     * <code>optional uint32 rxBytesQty = 21;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    public boolean hasRxBytesQty() {
      return ((bitField0_ & 0x00100000) == 0x00100000);
    }
    /**
     * <code>optional uint32 rxBytesQty = 21;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    public int getRxBytesQty() {
      return rxBytesQty_;
    }

    public static final int TXPACKETSOKQTY_FIELD_NUMBER = 22;
    private int txPacketsOkQty_;
    /**
     * <code>optional uint32 txPacketsOkQty = 22;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    public boolean hasTxPacketsOkQty() {
      return ((bitField0_ & 0x00200000) == 0x00200000);
    }
    /**
     * <code>optional uint32 txPacketsOkQty = 22;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    public int getTxPacketsOkQty() {
      return txPacketsOkQty_;
    }

    public static final int TXPACKETSFAILQTY_FIELD_NUMBER = 23;
    private int txPacketsFailQty_;
    /**
     * <code>optional uint32 txPacketsFailQty = 23;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    public boolean hasTxPacketsFailQty() {
      return ((bitField0_ & 0x00400000) == 0x00400000);
    }
    /**
     * <code>optional uint32 txPacketsFailQty = 23;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    public int getTxPacketsFailQty() {
      return txPacketsFailQty_;
    }

    public static final int RXPACKETSQTY_FIELD_NUMBER = 24;
    private int rxPacketsQty_;
    /**
     * <code>optional uint32 rxPacketsQty = 24;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    public boolean hasRxPacketsQty() {
      return ((bitField0_ & 0x00800000) == 0x00800000);
    }
    /**
     * <code>optional uint32 rxPacketsQty = 24;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    public int getRxPacketsQty() {
      return rxPacketsQty_;
    }

    public static final int PRIMARYSIMCARDFAILQTY_FIELD_NUMBER = 25;
    private int primarySimcardFailQty_;
    /**
     * <code>optional uint32 primarySimcardFailQty = 25;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    public boolean hasPrimarySimcardFailQty() {
      return ((bitField0_ & 0x01000000) == 0x01000000);
    }
    /**
     * <code>optional uint32 primarySimcardFailQty = 25;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    public int getPrimarySimcardFailQty() {
      return primarySimcardFailQty_;
    }

    public static final int SECONDARYSIMCARDFAILQTY_FIELD_NUMBER = 26;
    private int secondarySimcardFailQty_;
    /**
     * <code>optional uint32 secondarySimcardFailQty = 26;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public boolean hasSecondarySimcardFailQty() {
      return ((bitField0_ & 0x02000000) == 0x02000000);
    }
    /**
     * <code>optional uint32 secondarySimcardFailQty = 26;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public int getSecondarySimcardFailQty() {
      return secondarySimcardFailQty_;
    }

    public static final int PRESETTINGINTERVAL_FIELD_NUMBER = 27;
    private int presettingInterval_;
    /**
     * <code>optional uint32 presettingInterval = 27;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    public boolean hasPresettingInterval() {
      return ((bitField0_ & 0x04000000) == 0x04000000);
    }
    /**
     * <code>optional uint32 presettingInterval = 27;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    public int getPresettingInterval() {
      return presettingInterval_;
    }

    public static final int WAITINGPININTERVAL_FIELD_NUMBER = 28;
    private int waitingPinInterval_;
    /**
     * <code>optional uint32 waitingPinInterval = 28;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    public boolean hasWaitingPinInterval() {
      return ((bitField0_ & 0x08000000) == 0x08000000);
    }
    /**
     * <code>optional uint32 waitingPinInterval = 28;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    public int getWaitingPinInterval() {
      return waitingPinInterval_;
    }

    public static final int LINKIDLEINTERVAL_FIELD_NUMBER = 29;
    private int linkIdleInterval_;
    /**
     * <code>optional uint32 linkIdleInterval = 29;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    public boolean hasLinkIdleInterval() {
      return ((bitField0_ & 0x10000000) == 0x10000000);
    }
    /**
     * <code>optional uint32 linkIdleInterval = 29;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    public int getLinkIdleInterval() {
      return linkIdleInterval_;
    }

    public static final int TURNINGOFFINTERVAL_FIELD_NUMBER = 30;
    private int turningOffInterval_;
    /**
     * <code>optional uint32 turningOffInterval = 30;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    public boolean hasTurningOffInterval() {
      return ((bitField0_ & 0x20000000) == 0x20000000);
    }
    /**
     * <code>optional uint32 turningOffInterval = 30;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    public int getTurningOffInterval() {
      return turningOffInterval_;
    }

    public static final int PRESETTINGOKQTY_FIELD_NUMBER = 31;
    private int presettingOkQty_;
    /**
     * <code>optional uint32 presettingOkQty = 31;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    public boolean hasPresettingOkQty() {
      return ((bitField0_ & 0x40000000) == 0x40000000);
    }
    /**
     * <code>optional uint32 presettingOkQty = 31;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    public int getPresettingOkQty() {
      return presettingOkQty_;
    }

    public static final int PRESETTINGFAILQTY_FIELD_NUMBER = 32;
    private int presettingFailQty_;
    /**
     * <code>optional uint32 presettingFailQty = 32;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    public boolean hasPresettingFailQty() {
      return ((bitField0_ & 0x80000000) == 0x80000000);
    }
    /**
     * <code>optional uint32 presettingFailQty = 32;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    public int getPresettingFailQty() {
      return presettingFailQty_;
    }

    public static final int WAITINGPINOKQTY_FIELD_NUMBER = 33;
    private int waitingPinOkQty_;
    /**
     * <code>optional uint32 waitingPinOkQty = 33;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    public boolean hasWaitingPinOkQty() {
      return ((bitField1_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional uint32 waitingPinOkQty = 33;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    public int getWaitingPinOkQty() {
      return waitingPinOkQty_;
    }

    public static final int WAITINGPINFAILQTY_FIELD_NUMBER = 34;
    private int waitingPinFailQty_;
    /**
     * <code>optional uint32 waitingPinFailQty = 34;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    public boolean hasWaitingPinFailQty() {
      return ((bitField1_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional uint32 waitingPinFailQty = 34;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    public int getWaitingPinFailQty() {
      return waitingPinFailQty_;
    }

    public static final int IDLEINTERVAL_FIELD_NUMBER = 35;
    private int idleInterval_;
    /**
     * <code>optional uint32 idleInterval = 35;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    public boolean hasIdleInterval() {
      return ((bitField1_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional uint32 idleInterval = 35;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    public int getIdleInterval() {
      return idleInterval_;
    }

    private void initFields() {
      activeInterval_ = 0;
      resetQty_ = 0;
      registrationInterval_ = 0;
      linkInterval_ = 0;
      socketInterval_ = 0;
      extendedSocketInterval_ = 0;
      lowFreqRegistrationQty_ = 0;
      highFreqRegistrationQty_ = 0;
      lowCsqRegistrationQty_ = 0;
      highCsqRegistrationQty_ = 0;
      dtrOnInterval_ = 0;
      dtrOffInterval_ = 0;
      registrationOkQty_ = 0;
      registrationFailQty_ = 0;
      linkOkQty_ = 0;
      linkFailQty_ = 0;
      socketsOkQty_ = 0;
      socketsFailQty_ = 0;
      handoverQty_ = 0;
      txBytesQty_ = 0;
      rxBytesQty_ = 0;
      txPacketsOkQty_ = 0;
      txPacketsFailQty_ = 0;
      rxPacketsQty_ = 0;
      primarySimcardFailQty_ = 0;
      secondarySimcardFailQty_ = 0;
      presettingInterval_ = 0;
      waitingPinInterval_ = 0;
      linkIdleInterval_ = 0;
      turningOffInterval_ = 0;
      presettingOkQty_ = 0;
      presettingFailQty_ = 0;
      waitingPinOkQty_ = 0;
      waitingPinFailQty_ = 0;
      idleInterval_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, activeInterval_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, resetQty_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(3, registrationInterval_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeUInt32(4, linkInterval_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeUInt32(5, socketInterval_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeUInt32(6, extendedSocketInterval_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeUInt32(7, lowFreqRegistrationQty_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeUInt32(8, highFreqRegistrationQty_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeUInt32(9, lowCsqRegistrationQty_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeUInt32(10, highCsqRegistrationQty_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeUInt32(11, dtrOnInterval_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeUInt32(12, dtrOffInterval_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeUInt32(13, registrationOkQty_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        output.writeUInt32(14, registrationFailQty_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        output.writeUInt32(15, linkOkQty_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        output.writeUInt32(16, linkFailQty_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        output.writeUInt32(17, socketsOkQty_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        output.writeUInt32(18, socketsFailQty_);
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        output.writeUInt32(19, handoverQty_);
      }
      if (((bitField0_ & 0x00080000) == 0x00080000)) {
        output.writeUInt32(20, txBytesQty_);
      }
      if (((bitField0_ & 0x00100000) == 0x00100000)) {
        output.writeUInt32(21, rxBytesQty_);
      }
      if (((bitField0_ & 0x00200000) == 0x00200000)) {
        output.writeUInt32(22, txPacketsOkQty_);
      }
      if (((bitField0_ & 0x00400000) == 0x00400000)) {
        output.writeUInt32(23, txPacketsFailQty_);
      }
      if (((bitField0_ & 0x00800000) == 0x00800000)) {
        output.writeUInt32(24, rxPacketsQty_);
      }
      if (((bitField0_ & 0x01000000) == 0x01000000)) {
        output.writeUInt32(25, primarySimcardFailQty_);
      }
      if (((bitField0_ & 0x02000000) == 0x02000000)) {
        output.writeUInt32(26, secondarySimcardFailQty_);
      }
      if (((bitField0_ & 0x04000000) == 0x04000000)) {
        output.writeUInt32(27, presettingInterval_);
      }
      if (((bitField0_ & 0x08000000) == 0x08000000)) {
        output.writeUInt32(28, waitingPinInterval_);
      }
      if (((bitField0_ & 0x10000000) == 0x10000000)) {
        output.writeUInt32(29, linkIdleInterval_);
      }
      if (((bitField0_ & 0x20000000) == 0x20000000)) {
        output.writeUInt32(30, turningOffInterval_);
      }
      if (((bitField0_ & 0x40000000) == 0x40000000)) {
        output.writeUInt32(31, presettingOkQty_);
      }
      if (((bitField0_ & 0x80000000) == 0x80000000)) {
        output.writeUInt32(32, presettingFailQty_);
      }
      if (((bitField1_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(33, waitingPinOkQty_);
      }
      if (((bitField1_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(34, waitingPinFailQty_);
      }
      if (((bitField1_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(35, idleInterval_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, activeInterval_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, resetQty_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, registrationInterval_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, linkInterval_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(5, socketInterval_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(6, extendedSocketInterval_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(7, lowFreqRegistrationQty_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(8, highFreqRegistrationQty_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(9, lowCsqRegistrationQty_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(10, highCsqRegistrationQty_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(11, dtrOnInterval_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(12, dtrOffInterval_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(13, registrationOkQty_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(14, registrationFailQty_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(15, linkOkQty_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(16, linkFailQty_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(17, socketsOkQty_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(18, socketsFailQty_);
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(19, handoverQty_);
      }
      if (((bitField0_ & 0x00080000) == 0x00080000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(20, txBytesQty_);
      }
      if (((bitField0_ & 0x00100000) == 0x00100000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(21, rxBytesQty_);
      }
      if (((bitField0_ & 0x00200000) == 0x00200000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(22, txPacketsOkQty_);
      }
      if (((bitField0_ & 0x00400000) == 0x00400000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(23, txPacketsFailQty_);
      }
      if (((bitField0_ & 0x00800000) == 0x00800000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(24, rxPacketsQty_);
      }
      if (((bitField0_ & 0x01000000) == 0x01000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(25, primarySimcardFailQty_);
      }
      if (((bitField0_ & 0x02000000) == 0x02000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(26, secondarySimcardFailQty_);
      }
      if (((bitField0_ & 0x04000000) == 0x04000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(27, presettingInterval_);
      }
      if (((bitField0_ & 0x08000000) == 0x08000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(28, waitingPinInterval_);
      }
      if (((bitField0_ & 0x10000000) == 0x10000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(29, linkIdleInterval_);
      }
      if (((bitField0_ & 0x20000000) == 0x20000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(30, turningOffInterval_);
      }
      if (((bitField0_ & 0x40000000) == 0x40000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(31, presettingOkQty_);
      }
      if (((bitField0_ & 0x80000000) == 0x80000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(32, presettingFailQty_);
      }
      if (((bitField1_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(33, waitingPinOkQty_);
      }
      if (((bitField1_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(34, waitingPinFailQty_);
      }
      if (((bitField1_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(35, idleInterval_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static maxpb.MaxpbDebug.DiagnosticGsm parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static maxpb.MaxpbDebug.DiagnosticGsm parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static maxpb.MaxpbDebug.DiagnosticGsm parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static maxpb.MaxpbDebug.DiagnosticGsm parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static maxpb.MaxpbDebug.DiagnosticGsm parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static maxpb.MaxpbDebug.DiagnosticGsm parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static maxpb.MaxpbDebug.DiagnosticGsm parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static maxpb.MaxpbDebug.DiagnosticGsm parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static maxpb.MaxpbDebug.DiagnosticGsm parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static maxpb.MaxpbDebug.DiagnosticGsm parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(maxpb.MaxpbDebug.DiagnosticGsm prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code maxpb.DiagnosticGsm}
     *
     * <pre>
     *&#47;&#64;exclude
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:maxpb.DiagnosticGsm)
        maxpb.MaxpbDebug.DiagnosticGsmOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return maxpb.MaxpbDebug.internal_static_maxpb_DiagnosticGsm_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return maxpb.MaxpbDebug.internal_static_maxpb_DiagnosticGsm_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                maxpb.MaxpbDebug.DiagnosticGsm.class, maxpb.MaxpbDebug.DiagnosticGsm.Builder.class);
      }

      // Construct using maxpb.MaxpbDebug.DiagnosticGsm.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        activeInterval_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        resetQty_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        registrationInterval_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        linkInterval_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        socketInterval_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        extendedSocketInterval_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        lowFreqRegistrationQty_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        highFreqRegistrationQty_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        lowCsqRegistrationQty_ = 0;
        bitField0_ = (bitField0_ & ~0x00000100);
        highCsqRegistrationQty_ = 0;
        bitField0_ = (bitField0_ & ~0x00000200);
        dtrOnInterval_ = 0;
        bitField0_ = (bitField0_ & ~0x00000400);
        dtrOffInterval_ = 0;
        bitField0_ = (bitField0_ & ~0x00000800);
        registrationOkQty_ = 0;
        bitField0_ = (bitField0_ & ~0x00001000);
        registrationFailQty_ = 0;
        bitField0_ = (bitField0_ & ~0x00002000);
        linkOkQty_ = 0;
        bitField0_ = (bitField0_ & ~0x00004000);
        linkFailQty_ = 0;
        bitField0_ = (bitField0_ & ~0x00008000);
        socketsOkQty_ = 0;
        bitField0_ = (bitField0_ & ~0x00010000);
        socketsFailQty_ = 0;
        bitField0_ = (bitField0_ & ~0x00020000);
        handoverQty_ = 0;
        bitField0_ = (bitField0_ & ~0x00040000);
        txBytesQty_ = 0;
        bitField0_ = (bitField0_ & ~0x00080000);
        rxBytesQty_ = 0;
        bitField0_ = (bitField0_ & ~0x00100000);
        txPacketsOkQty_ = 0;
        bitField0_ = (bitField0_ & ~0x00200000);
        txPacketsFailQty_ = 0;
        bitField0_ = (bitField0_ & ~0x00400000);
        rxPacketsQty_ = 0;
        bitField0_ = (bitField0_ & ~0x00800000);
        primarySimcardFailQty_ = 0;
        bitField0_ = (bitField0_ & ~0x01000000);
        secondarySimcardFailQty_ = 0;
        bitField0_ = (bitField0_ & ~0x02000000);
        presettingInterval_ = 0;
        bitField0_ = (bitField0_ & ~0x04000000);
        waitingPinInterval_ = 0;
        bitField0_ = (bitField0_ & ~0x08000000);
        linkIdleInterval_ = 0;
        bitField0_ = (bitField0_ & ~0x10000000);
        turningOffInterval_ = 0;
        bitField0_ = (bitField0_ & ~0x20000000);
        presettingOkQty_ = 0;
        bitField0_ = (bitField0_ & ~0x40000000);
        presettingFailQty_ = 0;
        bitField0_ = (bitField0_ & ~0x80000000);
        waitingPinOkQty_ = 0;
        bitField1_ = (bitField1_ & ~0x00000001);
        waitingPinFailQty_ = 0;
        bitField1_ = (bitField1_ & ~0x00000002);
        idleInterval_ = 0;
        bitField1_ = (bitField1_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return maxpb.MaxpbDebug.internal_static_maxpb_DiagnosticGsm_descriptor;
      }

      public maxpb.MaxpbDebug.DiagnosticGsm getDefaultInstanceForType() {
        return maxpb.MaxpbDebug.DiagnosticGsm.getDefaultInstance();
      }

      public maxpb.MaxpbDebug.DiagnosticGsm build() {
        maxpb.MaxpbDebug.DiagnosticGsm result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public maxpb.MaxpbDebug.DiagnosticGsm buildPartial() {
        maxpb.MaxpbDebug.DiagnosticGsm result = new maxpb.MaxpbDebug.DiagnosticGsm(this);
        int from_bitField0_ = bitField0_;
        int from_bitField1_ = bitField1_;
        int to_bitField0_ = 0;
        int to_bitField1_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.activeInterval_ = activeInterval_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.resetQty_ = resetQty_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.registrationInterval_ = registrationInterval_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.linkInterval_ = linkInterval_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.socketInterval_ = socketInterval_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.extendedSocketInterval_ = extendedSocketInterval_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.lowFreqRegistrationQty_ = lowFreqRegistrationQty_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.highFreqRegistrationQty_ = highFreqRegistrationQty_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.lowCsqRegistrationQty_ = lowCsqRegistrationQty_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.highCsqRegistrationQty_ = highCsqRegistrationQty_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        result.dtrOnInterval_ = dtrOnInterval_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000800;
        }
        result.dtrOffInterval_ = dtrOffInterval_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00001000;
        }
        result.registrationOkQty_ = registrationOkQty_;
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00002000;
        }
        result.registrationFailQty_ = registrationFailQty_;
        if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
          to_bitField0_ |= 0x00004000;
        }
        result.linkOkQty_ = linkOkQty_;
        if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
          to_bitField0_ |= 0x00008000;
        }
        result.linkFailQty_ = linkFailQty_;
        if (((from_bitField0_ & 0x00010000) == 0x00010000)) {
          to_bitField0_ |= 0x00010000;
        }
        result.socketsOkQty_ = socketsOkQty_;
        if (((from_bitField0_ & 0x00020000) == 0x00020000)) {
          to_bitField0_ |= 0x00020000;
        }
        result.socketsFailQty_ = socketsFailQty_;
        if (((from_bitField0_ & 0x00040000) == 0x00040000)) {
          to_bitField0_ |= 0x00040000;
        }
        result.handoverQty_ = handoverQty_;
        if (((from_bitField0_ & 0x00080000) == 0x00080000)) {
          to_bitField0_ |= 0x00080000;
        }
        result.txBytesQty_ = txBytesQty_;
        if (((from_bitField0_ & 0x00100000) == 0x00100000)) {
          to_bitField0_ |= 0x00100000;
        }
        result.rxBytesQty_ = rxBytesQty_;
        if (((from_bitField0_ & 0x00200000) == 0x00200000)) {
          to_bitField0_ |= 0x00200000;
        }
        result.txPacketsOkQty_ = txPacketsOkQty_;
        if (((from_bitField0_ & 0x00400000) == 0x00400000)) {
          to_bitField0_ |= 0x00400000;
        }
        result.txPacketsFailQty_ = txPacketsFailQty_;
        if (((from_bitField0_ & 0x00800000) == 0x00800000)) {
          to_bitField0_ |= 0x00800000;
        }
        result.rxPacketsQty_ = rxPacketsQty_;
        if (((from_bitField0_ & 0x01000000) == 0x01000000)) {
          to_bitField0_ |= 0x01000000;
        }
        result.primarySimcardFailQty_ = primarySimcardFailQty_;
        if (((from_bitField0_ & 0x02000000) == 0x02000000)) {
          to_bitField0_ |= 0x02000000;
        }
        result.secondarySimcardFailQty_ = secondarySimcardFailQty_;
        if (((from_bitField0_ & 0x04000000) == 0x04000000)) {
          to_bitField0_ |= 0x04000000;
        }
        result.presettingInterval_ = presettingInterval_;
        if (((from_bitField0_ & 0x08000000) == 0x08000000)) {
          to_bitField0_ |= 0x08000000;
        }
        result.waitingPinInterval_ = waitingPinInterval_;
        if (((from_bitField0_ & 0x10000000) == 0x10000000)) {
          to_bitField0_ |= 0x10000000;
        }
        result.linkIdleInterval_ = linkIdleInterval_;
        if (((from_bitField0_ & 0x20000000) == 0x20000000)) {
          to_bitField0_ |= 0x20000000;
        }
        result.turningOffInterval_ = turningOffInterval_;
        if (((from_bitField0_ & 0x40000000) == 0x40000000)) {
          to_bitField0_ |= 0x40000000;
        }
        result.presettingOkQty_ = presettingOkQty_;
        if (((from_bitField0_ & 0x80000000) == 0x80000000)) {
          to_bitField0_ |= 0x80000000;
        }
        result.presettingFailQty_ = presettingFailQty_;
        if (((from_bitField1_ & 0x00000001) == 0x00000001)) {
          to_bitField1_ |= 0x00000001;
        }
        result.waitingPinOkQty_ = waitingPinOkQty_;
        if (((from_bitField1_ & 0x00000002) == 0x00000002)) {
          to_bitField1_ |= 0x00000002;
        }
        result.waitingPinFailQty_ = waitingPinFailQty_;
        if (((from_bitField1_ & 0x00000004) == 0x00000004)) {
          to_bitField1_ |= 0x00000004;
        }
        result.idleInterval_ = idleInterval_;
        result.bitField0_ = to_bitField0_;
        result.bitField1_ = to_bitField1_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof maxpb.MaxpbDebug.DiagnosticGsm) {
          return mergeFrom((maxpb.MaxpbDebug.DiagnosticGsm)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(maxpb.MaxpbDebug.DiagnosticGsm other) {
        if (other == maxpb.MaxpbDebug.DiagnosticGsm.getDefaultInstance()) return this;
        if (other.hasActiveInterval()) {
          setActiveInterval(other.getActiveInterval());
        }
        if (other.hasResetQty()) {
          setResetQty(other.getResetQty());
        }
        if (other.hasRegistrationInterval()) {
          setRegistrationInterval(other.getRegistrationInterval());
        }
        if (other.hasLinkInterval()) {
          setLinkInterval(other.getLinkInterval());
        }
        if (other.hasSocketInterval()) {
          setSocketInterval(other.getSocketInterval());
        }
        if (other.hasExtendedSocketInterval()) {
          setExtendedSocketInterval(other.getExtendedSocketInterval());
        }
        if (other.hasLowFreqRegistrationQty()) {
          setLowFreqRegistrationQty(other.getLowFreqRegistrationQty());
        }
        if (other.hasHighFreqRegistrationQty()) {
          setHighFreqRegistrationQty(other.getHighFreqRegistrationQty());
        }
        if (other.hasLowCsqRegistrationQty()) {
          setLowCsqRegistrationQty(other.getLowCsqRegistrationQty());
        }
        if (other.hasHighCsqRegistrationQty()) {
          setHighCsqRegistrationQty(other.getHighCsqRegistrationQty());
        }
        if (other.hasDtrOnInterval()) {
          setDtrOnInterval(other.getDtrOnInterval());
        }
        if (other.hasDtrOffInterval()) {
          setDtrOffInterval(other.getDtrOffInterval());
        }
        if (other.hasRegistrationOkQty()) {
          setRegistrationOkQty(other.getRegistrationOkQty());
        }
        if (other.hasRegistrationFailQty()) {
          setRegistrationFailQty(other.getRegistrationFailQty());
        }
        if (other.hasLinkOkQty()) {
          setLinkOkQty(other.getLinkOkQty());
        }
        if (other.hasLinkFailQty()) {
          setLinkFailQty(other.getLinkFailQty());
        }
        if (other.hasSocketsOkQty()) {
          setSocketsOkQty(other.getSocketsOkQty());
        }
        if (other.hasSocketsFailQty()) {
          setSocketsFailQty(other.getSocketsFailQty());
        }
        if (other.hasHandoverQty()) {
          setHandoverQty(other.getHandoverQty());
        }
        if (other.hasTxBytesQty()) {
          setTxBytesQty(other.getTxBytesQty());
        }
        if (other.hasRxBytesQty()) {
          setRxBytesQty(other.getRxBytesQty());
        }
        if (other.hasTxPacketsOkQty()) {
          setTxPacketsOkQty(other.getTxPacketsOkQty());
        }
        if (other.hasTxPacketsFailQty()) {
          setTxPacketsFailQty(other.getTxPacketsFailQty());
        }
        if (other.hasRxPacketsQty()) {
          setRxPacketsQty(other.getRxPacketsQty());
        }
        if (other.hasPrimarySimcardFailQty()) {
          setPrimarySimcardFailQty(other.getPrimarySimcardFailQty());
        }
        if (other.hasSecondarySimcardFailQty()) {
          setSecondarySimcardFailQty(other.getSecondarySimcardFailQty());
        }
        if (other.hasPresettingInterval()) {
          setPresettingInterval(other.getPresettingInterval());
        }
        if (other.hasWaitingPinInterval()) {
          setWaitingPinInterval(other.getWaitingPinInterval());
        }
        if (other.hasLinkIdleInterval()) {
          setLinkIdleInterval(other.getLinkIdleInterval());
        }
        if (other.hasTurningOffInterval()) {
          setTurningOffInterval(other.getTurningOffInterval());
        }
        if (other.hasPresettingOkQty()) {
          setPresettingOkQty(other.getPresettingOkQty());
        }
        if (other.hasPresettingFailQty()) {
          setPresettingFailQty(other.getPresettingFailQty());
        }
        if (other.hasWaitingPinOkQty()) {
          setWaitingPinOkQty(other.getWaitingPinOkQty());
        }
        if (other.hasWaitingPinFailQty()) {
          setWaitingPinFailQty(other.getWaitingPinFailQty());
        }
        if (other.hasIdleInterval()) {
          setIdleInterval(other.getIdleInterval());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        maxpb.MaxpbDebug.DiagnosticGsm parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (maxpb.MaxpbDebug.DiagnosticGsm) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;
      private int bitField1_;

      private int activeInterval_ ;
      /**
       * <code>optional uint32 activeInterval = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public boolean hasActiveInterval() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint32 activeInterval = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public int getActiveInterval() {
        return activeInterval_;
      }
      /**
       * <code>optional uint32 activeInterval = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public Builder setActiveInterval(int value) {
        bitField0_ |= 0x00000001;
        activeInterval_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 activeInterval = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public Builder clearActiveInterval() {
        bitField0_ = (bitField0_ & ~0x00000001);
        activeInterval_ = 0;
        onChanged();
        return this;
      }

      private int resetQty_ ;
      /**
       * <code>optional uint32 resetQty = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public boolean hasResetQty() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional uint32 resetQty = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public int getResetQty() {
        return resetQty_;
      }
      /**
       * <code>optional uint32 resetQty = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public Builder setResetQty(int value) {
        bitField0_ |= 0x00000002;
        resetQty_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 resetQty = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public Builder clearResetQty() {
        bitField0_ = (bitField0_ & ~0x00000002);
        resetQty_ = 0;
        onChanged();
        return this;
      }

      private int registrationInterval_ ;
      /**
       * <code>optional uint32 registrationInterval = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public boolean hasRegistrationInterval() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional uint32 registrationInterval = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public int getRegistrationInterval() {
        return registrationInterval_;
      }
      /**
       * <code>optional uint32 registrationInterval = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public Builder setRegistrationInterval(int value) {
        bitField0_ |= 0x00000004;
        registrationInterval_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 registrationInterval = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public Builder clearRegistrationInterval() {
        bitField0_ = (bitField0_ & ~0x00000004);
        registrationInterval_ = 0;
        onChanged();
        return this;
      }

      private int linkInterval_ ;
      /**
       * <code>optional uint32 linkInterval = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public boolean hasLinkInterval() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional uint32 linkInterval = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public int getLinkInterval() {
        return linkInterval_;
      }
      /**
       * <code>optional uint32 linkInterval = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public Builder setLinkInterval(int value) {
        bitField0_ |= 0x00000008;
        linkInterval_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 linkInterval = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public Builder clearLinkInterval() {
        bitField0_ = (bitField0_ & ~0x00000008);
        linkInterval_ = 0;
        onChanged();
        return this;
      }

      private int socketInterval_ ;
      /**
       * <code>optional uint32 socketInterval = 5;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public boolean hasSocketInterval() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional uint32 socketInterval = 5;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public int getSocketInterval() {
        return socketInterval_;
      }
      /**
       * <code>optional uint32 socketInterval = 5;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public Builder setSocketInterval(int value) {
        bitField0_ |= 0x00000010;
        socketInterval_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 socketInterval = 5;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public Builder clearSocketInterval() {
        bitField0_ = (bitField0_ & ~0x00000010);
        socketInterval_ = 0;
        onChanged();
        return this;
      }

      private int extendedSocketInterval_ ;
      /**
       * <code>optional uint32 extendedSocketInterval = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public boolean hasExtendedSocketInterval() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional uint32 extendedSocketInterval = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public int getExtendedSocketInterval() {
        return extendedSocketInterval_;
      }
      /**
       * <code>optional uint32 extendedSocketInterval = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public Builder setExtendedSocketInterval(int value) {
        bitField0_ |= 0x00000020;
        extendedSocketInterval_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 extendedSocketInterval = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public Builder clearExtendedSocketInterval() {
        bitField0_ = (bitField0_ & ~0x00000020);
        extendedSocketInterval_ = 0;
        onChanged();
        return this;
      }

      private int lowFreqRegistrationQty_ ;
      /**
       * <code>optional uint32 lowFreqRegistrationQty = 7;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public boolean hasLowFreqRegistrationQty() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional uint32 lowFreqRegistrationQty = 7;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public int getLowFreqRegistrationQty() {
        return lowFreqRegistrationQty_;
      }
      /**
       * <code>optional uint32 lowFreqRegistrationQty = 7;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public Builder setLowFreqRegistrationQty(int value) {
        bitField0_ |= 0x00000040;
        lowFreqRegistrationQty_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 lowFreqRegistrationQty = 7;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public Builder clearLowFreqRegistrationQty() {
        bitField0_ = (bitField0_ & ~0x00000040);
        lowFreqRegistrationQty_ = 0;
        onChanged();
        return this;
      }

      private int highFreqRegistrationQty_ ;
      /**
       * <code>optional uint32 highFreqRegistrationQty = 8;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public boolean hasHighFreqRegistrationQty() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional uint32 highFreqRegistrationQty = 8;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public int getHighFreqRegistrationQty() {
        return highFreqRegistrationQty_;
      }
      /**
       * <code>optional uint32 highFreqRegistrationQty = 8;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public Builder setHighFreqRegistrationQty(int value) {
        bitField0_ |= 0x00000080;
        highFreqRegistrationQty_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 highFreqRegistrationQty = 8;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public Builder clearHighFreqRegistrationQty() {
        bitField0_ = (bitField0_ & ~0x00000080);
        highFreqRegistrationQty_ = 0;
        onChanged();
        return this;
      }

      private int lowCsqRegistrationQty_ ;
      /**
       * <code>optional uint32 lowCsqRegistrationQty = 9;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public boolean hasLowCsqRegistrationQty() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional uint32 lowCsqRegistrationQty = 9;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public int getLowCsqRegistrationQty() {
        return lowCsqRegistrationQty_;
      }
      /**
       * <code>optional uint32 lowCsqRegistrationQty = 9;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public Builder setLowCsqRegistrationQty(int value) {
        bitField0_ |= 0x00000100;
        lowCsqRegistrationQty_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 lowCsqRegistrationQty = 9;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public Builder clearLowCsqRegistrationQty() {
        bitField0_ = (bitField0_ & ~0x00000100);
        lowCsqRegistrationQty_ = 0;
        onChanged();
        return this;
      }

      private int highCsqRegistrationQty_ ;
      /**
       * <code>optional uint32 highCsqRegistrationQty = 10;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public boolean hasHighCsqRegistrationQty() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional uint32 highCsqRegistrationQty = 10;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public int getHighCsqRegistrationQty() {
        return highCsqRegistrationQty_;
      }
      /**
       * <code>optional uint32 highCsqRegistrationQty = 10;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public Builder setHighCsqRegistrationQty(int value) {
        bitField0_ |= 0x00000200;
        highCsqRegistrationQty_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 highCsqRegistrationQty = 10;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public Builder clearHighCsqRegistrationQty() {
        bitField0_ = (bitField0_ & ~0x00000200);
        highCsqRegistrationQty_ = 0;
        onChanged();
        return this;
      }

      private int dtrOnInterval_ ;
      /**
       * <code>optional uint32 dtrOnInterval = 11;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public boolean hasDtrOnInterval() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional uint32 dtrOnInterval = 11;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public int getDtrOnInterval() {
        return dtrOnInterval_;
      }
      /**
       * <code>optional uint32 dtrOnInterval = 11;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public Builder setDtrOnInterval(int value) {
        bitField0_ |= 0x00000400;
        dtrOnInterval_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 dtrOnInterval = 11;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public Builder clearDtrOnInterval() {
        bitField0_ = (bitField0_ & ~0x00000400);
        dtrOnInterval_ = 0;
        onChanged();
        return this;
      }

      private int dtrOffInterval_ ;
      /**
       * <code>optional uint32 dtrOffInterval = 12;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public boolean hasDtrOffInterval() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional uint32 dtrOffInterval = 12;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public int getDtrOffInterval() {
        return dtrOffInterval_;
      }
      /**
       * <code>optional uint32 dtrOffInterval = 12;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public Builder setDtrOffInterval(int value) {
        bitField0_ |= 0x00000800;
        dtrOffInterval_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 dtrOffInterval = 12;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public Builder clearDtrOffInterval() {
        bitField0_ = (bitField0_ & ~0x00000800);
        dtrOffInterval_ = 0;
        onChanged();
        return this;
      }

      private int registrationOkQty_ ;
      /**
       * <code>optional uint32 registrationOkQty = 13;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public boolean hasRegistrationOkQty() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional uint32 registrationOkQty = 13;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public int getRegistrationOkQty() {
        return registrationOkQty_;
      }
      /**
       * <code>optional uint32 registrationOkQty = 13;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public Builder setRegistrationOkQty(int value) {
        bitField0_ |= 0x00001000;
        registrationOkQty_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 registrationOkQty = 13;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public Builder clearRegistrationOkQty() {
        bitField0_ = (bitField0_ & ~0x00001000);
        registrationOkQty_ = 0;
        onChanged();
        return this;
      }

      private int registrationFailQty_ ;
      /**
       * <code>optional uint32 registrationFailQty = 14;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public boolean hasRegistrationFailQty() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>optional uint32 registrationFailQty = 14;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public int getRegistrationFailQty() {
        return registrationFailQty_;
      }
      /**
       * <code>optional uint32 registrationFailQty = 14;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public Builder setRegistrationFailQty(int value) {
        bitField0_ |= 0x00002000;
        registrationFailQty_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 registrationFailQty = 14;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public Builder clearRegistrationFailQty() {
        bitField0_ = (bitField0_ & ~0x00002000);
        registrationFailQty_ = 0;
        onChanged();
        return this;
      }

      private int linkOkQty_ ;
      /**
       * <code>optional uint32 linkOkQty = 15;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public boolean hasLinkOkQty() {
        return ((bitField0_ & 0x00004000) == 0x00004000);
      }
      /**
       * <code>optional uint32 linkOkQty = 15;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public int getLinkOkQty() {
        return linkOkQty_;
      }
      /**
       * <code>optional uint32 linkOkQty = 15;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public Builder setLinkOkQty(int value) {
        bitField0_ |= 0x00004000;
        linkOkQty_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 linkOkQty = 15;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public Builder clearLinkOkQty() {
        bitField0_ = (bitField0_ & ~0x00004000);
        linkOkQty_ = 0;
        onChanged();
        return this;
      }

      private int linkFailQty_ ;
      /**
       * <code>optional uint32 linkFailQty = 16;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public boolean hasLinkFailQty() {
        return ((bitField0_ & 0x00008000) == 0x00008000);
      }
      /**
       * <code>optional uint32 linkFailQty = 16;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public int getLinkFailQty() {
        return linkFailQty_;
      }
      /**
       * <code>optional uint32 linkFailQty = 16;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public Builder setLinkFailQty(int value) {
        bitField0_ |= 0x00008000;
        linkFailQty_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 linkFailQty = 16;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public Builder clearLinkFailQty() {
        bitField0_ = (bitField0_ & ~0x00008000);
        linkFailQty_ = 0;
        onChanged();
        return this;
      }

      private int socketsOkQty_ ;
      /**
       * <code>optional uint32 socketsOkQty = 17;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public boolean hasSocketsOkQty() {
        return ((bitField0_ & 0x00010000) == 0x00010000);
      }
      /**
       * <code>optional uint32 socketsOkQty = 17;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public int getSocketsOkQty() {
        return socketsOkQty_;
      }
      /**
       * <code>optional uint32 socketsOkQty = 17;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public Builder setSocketsOkQty(int value) {
        bitField0_ |= 0x00010000;
        socketsOkQty_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 socketsOkQty = 17;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public Builder clearSocketsOkQty() {
        bitField0_ = (bitField0_ & ~0x00010000);
        socketsOkQty_ = 0;
        onChanged();
        return this;
      }

      private int socketsFailQty_ ;
      /**
       * <code>optional uint32 socketsFailQty = 18;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public boolean hasSocketsFailQty() {
        return ((bitField0_ & 0x00020000) == 0x00020000);
      }
      /**
       * <code>optional uint32 socketsFailQty = 18;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public int getSocketsFailQty() {
        return socketsFailQty_;
      }
      /**
       * <code>optional uint32 socketsFailQty = 18;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public Builder setSocketsFailQty(int value) {
        bitField0_ |= 0x00020000;
        socketsFailQty_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 socketsFailQty = 18;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public Builder clearSocketsFailQty() {
        bitField0_ = (bitField0_ & ~0x00020000);
        socketsFailQty_ = 0;
        onChanged();
        return this;
      }

      private int handoverQty_ ;
      /**
       * <code>optional uint32 handoverQty = 19;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public boolean hasHandoverQty() {
        return ((bitField0_ & 0x00040000) == 0x00040000);
      }
      /**
       * <code>optional uint32 handoverQty = 19;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public int getHandoverQty() {
        return handoverQty_;
      }
      /**
       * <code>optional uint32 handoverQty = 19;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public Builder setHandoverQty(int value) {
        bitField0_ |= 0x00040000;
        handoverQty_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 handoverQty = 19;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public Builder clearHandoverQty() {
        bitField0_ = (bitField0_ & ~0x00040000);
        handoverQty_ = 0;
        onChanged();
        return this;
      }

      private int txBytesQty_ ;
      /**
       * <code>optional uint32 txBytesQty = 20;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public boolean hasTxBytesQty() {
        return ((bitField0_ & 0x00080000) == 0x00080000);
      }
      /**
       * <code>optional uint32 txBytesQty = 20;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public int getTxBytesQty() {
        return txBytesQty_;
      }
      /**
       * <code>optional uint32 txBytesQty = 20;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public Builder setTxBytesQty(int value) {
        bitField0_ |= 0x00080000;
        txBytesQty_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 txBytesQty = 20;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public Builder clearTxBytesQty() {
        bitField0_ = (bitField0_ & ~0x00080000);
        txBytesQty_ = 0;
        onChanged();
        return this;
      }

      private int rxBytesQty_ ;
      /**
       * <code>optional uint32 rxBytesQty = 21;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public boolean hasRxBytesQty() {
        return ((bitField0_ & 0x00100000) == 0x00100000);
      }
      /**
       * <code>optional uint32 rxBytesQty = 21;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public int getRxBytesQty() {
        return rxBytesQty_;
      }
      /**
       * <code>optional uint32 rxBytesQty = 21;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public Builder setRxBytesQty(int value) {
        bitField0_ |= 0x00100000;
        rxBytesQty_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 rxBytesQty = 21;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public Builder clearRxBytesQty() {
        bitField0_ = (bitField0_ & ~0x00100000);
        rxBytesQty_ = 0;
        onChanged();
        return this;
      }

      private int txPacketsOkQty_ ;
      /**
       * <code>optional uint32 txPacketsOkQty = 22;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public boolean hasTxPacketsOkQty() {
        return ((bitField0_ & 0x00200000) == 0x00200000);
      }
      /**
       * <code>optional uint32 txPacketsOkQty = 22;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public int getTxPacketsOkQty() {
        return txPacketsOkQty_;
      }
      /**
       * <code>optional uint32 txPacketsOkQty = 22;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public Builder setTxPacketsOkQty(int value) {
        bitField0_ |= 0x00200000;
        txPacketsOkQty_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 txPacketsOkQty = 22;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public Builder clearTxPacketsOkQty() {
        bitField0_ = (bitField0_ & ~0x00200000);
        txPacketsOkQty_ = 0;
        onChanged();
        return this;
      }

      private int txPacketsFailQty_ ;
      /**
       * <code>optional uint32 txPacketsFailQty = 23;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public boolean hasTxPacketsFailQty() {
        return ((bitField0_ & 0x00400000) == 0x00400000);
      }
      /**
       * <code>optional uint32 txPacketsFailQty = 23;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public int getTxPacketsFailQty() {
        return txPacketsFailQty_;
      }
      /**
       * <code>optional uint32 txPacketsFailQty = 23;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public Builder setTxPacketsFailQty(int value) {
        bitField0_ |= 0x00400000;
        txPacketsFailQty_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 txPacketsFailQty = 23;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public Builder clearTxPacketsFailQty() {
        bitField0_ = (bitField0_ & ~0x00400000);
        txPacketsFailQty_ = 0;
        onChanged();
        return this;
      }

      private int rxPacketsQty_ ;
      /**
       * <code>optional uint32 rxPacketsQty = 24;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public boolean hasRxPacketsQty() {
        return ((bitField0_ & 0x00800000) == 0x00800000);
      }
      /**
       * <code>optional uint32 rxPacketsQty = 24;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public int getRxPacketsQty() {
        return rxPacketsQty_;
      }
      /**
       * <code>optional uint32 rxPacketsQty = 24;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public Builder setRxPacketsQty(int value) {
        bitField0_ |= 0x00800000;
        rxPacketsQty_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 rxPacketsQty = 24;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public Builder clearRxPacketsQty() {
        bitField0_ = (bitField0_ & ~0x00800000);
        rxPacketsQty_ = 0;
        onChanged();
        return this;
      }

      private int primarySimcardFailQty_ ;
      /**
       * <code>optional uint32 primarySimcardFailQty = 25;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public boolean hasPrimarySimcardFailQty() {
        return ((bitField0_ & 0x01000000) == 0x01000000);
      }
      /**
       * <code>optional uint32 primarySimcardFailQty = 25;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public int getPrimarySimcardFailQty() {
        return primarySimcardFailQty_;
      }
      /**
       * <code>optional uint32 primarySimcardFailQty = 25;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public Builder setPrimarySimcardFailQty(int value) {
        bitField0_ |= 0x01000000;
        primarySimcardFailQty_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 primarySimcardFailQty = 25;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public Builder clearPrimarySimcardFailQty() {
        bitField0_ = (bitField0_ & ~0x01000000);
        primarySimcardFailQty_ = 0;
        onChanged();
        return this;
      }

      private int secondarySimcardFailQty_ ;
      /**
       * <code>optional uint32 secondarySimcardFailQty = 26;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public boolean hasSecondarySimcardFailQty() {
        return ((bitField0_ & 0x02000000) == 0x02000000);
      }
      /**
       * <code>optional uint32 secondarySimcardFailQty = 26;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public int getSecondarySimcardFailQty() {
        return secondarySimcardFailQty_;
      }
      /**
       * <code>optional uint32 secondarySimcardFailQty = 26;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder setSecondarySimcardFailQty(int value) {
        bitField0_ |= 0x02000000;
        secondarySimcardFailQty_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 secondarySimcardFailQty = 26;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder clearSecondarySimcardFailQty() {
        bitField0_ = (bitField0_ & ~0x02000000);
        secondarySimcardFailQty_ = 0;
        onChanged();
        return this;
      }

      private int presettingInterval_ ;
      /**
       * <code>optional uint32 presettingInterval = 27;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public boolean hasPresettingInterval() {
        return ((bitField0_ & 0x04000000) == 0x04000000);
      }
      /**
       * <code>optional uint32 presettingInterval = 27;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public int getPresettingInterval() {
        return presettingInterval_;
      }
      /**
       * <code>optional uint32 presettingInterval = 27;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public Builder setPresettingInterval(int value) {
        bitField0_ |= 0x04000000;
        presettingInterval_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 presettingInterval = 27;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public Builder clearPresettingInterval() {
        bitField0_ = (bitField0_ & ~0x04000000);
        presettingInterval_ = 0;
        onChanged();
        return this;
      }

      private int waitingPinInterval_ ;
      /**
       * <code>optional uint32 waitingPinInterval = 28;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public boolean hasWaitingPinInterval() {
        return ((bitField0_ & 0x08000000) == 0x08000000);
      }
      /**
       * <code>optional uint32 waitingPinInterval = 28;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public int getWaitingPinInterval() {
        return waitingPinInterval_;
      }
      /**
       * <code>optional uint32 waitingPinInterval = 28;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public Builder setWaitingPinInterval(int value) {
        bitField0_ |= 0x08000000;
        waitingPinInterval_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 waitingPinInterval = 28;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public Builder clearWaitingPinInterval() {
        bitField0_ = (bitField0_ & ~0x08000000);
        waitingPinInterval_ = 0;
        onChanged();
        return this;
      }

      private int linkIdleInterval_ ;
      /**
       * <code>optional uint32 linkIdleInterval = 29;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public boolean hasLinkIdleInterval() {
        return ((bitField0_ & 0x10000000) == 0x10000000);
      }
      /**
       * <code>optional uint32 linkIdleInterval = 29;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public int getLinkIdleInterval() {
        return linkIdleInterval_;
      }
      /**
       * <code>optional uint32 linkIdleInterval = 29;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public Builder setLinkIdleInterval(int value) {
        bitField0_ |= 0x10000000;
        linkIdleInterval_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 linkIdleInterval = 29;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public Builder clearLinkIdleInterval() {
        bitField0_ = (bitField0_ & ~0x10000000);
        linkIdleInterval_ = 0;
        onChanged();
        return this;
      }

      private int turningOffInterval_ ;
      /**
       * <code>optional uint32 turningOffInterval = 30;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public boolean hasTurningOffInterval() {
        return ((bitField0_ & 0x20000000) == 0x20000000);
      }
      /**
       * <code>optional uint32 turningOffInterval = 30;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public int getTurningOffInterval() {
        return turningOffInterval_;
      }
      /**
       * <code>optional uint32 turningOffInterval = 30;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public Builder setTurningOffInterval(int value) {
        bitField0_ |= 0x20000000;
        turningOffInterval_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 turningOffInterval = 30;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public Builder clearTurningOffInterval() {
        bitField0_ = (bitField0_ & ~0x20000000);
        turningOffInterval_ = 0;
        onChanged();
        return this;
      }

      private int presettingOkQty_ ;
      /**
       * <code>optional uint32 presettingOkQty = 31;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public boolean hasPresettingOkQty() {
        return ((bitField0_ & 0x40000000) == 0x40000000);
      }
      /**
       * <code>optional uint32 presettingOkQty = 31;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public int getPresettingOkQty() {
        return presettingOkQty_;
      }
      /**
       * <code>optional uint32 presettingOkQty = 31;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public Builder setPresettingOkQty(int value) {
        bitField0_ |= 0x40000000;
        presettingOkQty_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 presettingOkQty = 31;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public Builder clearPresettingOkQty() {
        bitField0_ = (bitField0_ & ~0x40000000);
        presettingOkQty_ = 0;
        onChanged();
        return this;
      }

      private int presettingFailQty_ ;
      /**
       * <code>optional uint32 presettingFailQty = 32;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public boolean hasPresettingFailQty() {
        return ((bitField0_ & 0x80000000) == 0x80000000);
      }
      /**
       * <code>optional uint32 presettingFailQty = 32;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public int getPresettingFailQty() {
        return presettingFailQty_;
      }
      /**
       * <code>optional uint32 presettingFailQty = 32;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public Builder setPresettingFailQty(int value) {
        bitField0_ |= 0x80000000;
        presettingFailQty_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 presettingFailQty = 32;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public Builder clearPresettingFailQty() {
        bitField0_ = (bitField0_ & ~0x80000000);
        presettingFailQty_ = 0;
        onChanged();
        return this;
      }

      private int waitingPinOkQty_ ;
      /**
       * <code>optional uint32 waitingPinOkQty = 33;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public boolean hasWaitingPinOkQty() {
        return ((bitField1_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint32 waitingPinOkQty = 33;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public int getWaitingPinOkQty() {
        return waitingPinOkQty_;
      }
      /**
       * <code>optional uint32 waitingPinOkQty = 33;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public Builder setWaitingPinOkQty(int value) {
        bitField1_ |= 0x00000001;
        waitingPinOkQty_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 waitingPinOkQty = 33;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public Builder clearWaitingPinOkQty() {
        bitField1_ = (bitField1_ & ~0x00000001);
        waitingPinOkQty_ = 0;
        onChanged();
        return this;
      }

      private int waitingPinFailQty_ ;
      /**
       * <code>optional uint32 waitingPinFailQty = 34;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public boolean hasWaitingPinFailQty() {
        return ((bitField1_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional uint32 waitingPinFailQty = 34;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public int getWaitingPinFailQty() {
        return waitingPinFailQty_;
      }
      /**
       * <code>optional uint32 waitingPinFailQty = 34;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public Builder setWaitingPinFailQty(int value) {
        bitField1_ |= 0x00000002;
        waitingPinFailQty_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 waitingPinFailQty = 34;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public Builder clearWaitingPinFailQty() {
        bitField1_ = (bitField1_ & ~0x00000002);
        waitingPinFailQty_ = 0;
        onChanged();
        return this;
      }

      private int idleInterval_ ;
      /**
       * <code>optional uint32 idleInterval = 35;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public boolean hasIdleInterval() {
        return ((bitField1_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional uint32 idleInterval = 35;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public int getIdleInterval() {
        return idleInterval_;
      }
      /**
       * <code>optional uint32 idleInterval = 35;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public Builder setIdleInterval(int value) {
        bitField1_ |= 0x00000004;
        idleInterval_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 idleInterval = 35;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public Builder clearIdleInterval() {
        bitField1_ = (bitField1_ & ~0x00000004);
        idleInterval_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:maxpb.DiagnosticGsm)
    }

    static {
      defaultInstance = new DiagnosticGsm(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:maxpb.DiagnosticGsm)
  }

  public interface DiagnosticGpsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:maxpb.DiagnosticGps)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional uint32 activeInterval = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    boolean hasActiveInterval();
    /**
     * <code>optional uint32 activeInterval = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    int getActiveInterval();

    /**
     * <code>optional uint32 resetQty = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    boolean hasResetQty();
    /**
     * <code>optional uint32 resetQty = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    int getResetQty();

    /**
     * <code>optional uint32 ephemerisRetriesQty = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    boolean hasEphemerisRetriesQty();
    /**
     * <code>optional uint32 ephemerisRetriesQty = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    int getEphemerisRetriesQty();

    /**
     * <code>optional uint32 agpsDownloadOnlineQty = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    boolean hasAgpsDownloadOnlineQty();
    /**
     * <code>optional uint32 agpsDownloadOnlineQty = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    int getAgpsDownloadOnlineQty();

    /**
     * <code>optional uint32 agpsDownloadOfflineQty = 5;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    boolean hasAgpsDownloadOfflineQty();
    /**
     * <code>optional uint32 agpsDownloadOfflineQty = 5;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    int getAgpsDownloadOfflineQty();

    /**
     * <code>optional uint32 fixWithAssistanceQty = 6;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    boolean hasFixWithAssistanceQty();
    /**
     * <code>optional uint32 fixWithAssistanceQty = 6;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    int getFixWithAssistanceQty();

    /**
     * <code>optional uint32 notFixWithAssistanceQty = 7;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    boolean hasNotFixWithAssistanceQty();
    /**
     * <code>optional uint32 notFixWithAssistanceQty = 7;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    int getNotFixWithAssistanceQty();

    /**
     * <code>optional uint32 fixWithoutAssistanceQty = 8;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    boolean hasFixWithoutAssistanceQty();
    /**
     * <code>optional uint32 fixWithoutAssistanceQty = 8;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    int getFixWithoutAssistanceQty();

    /**
     * <code>optional uint32 notFixWithoutAssistanceQty = 9;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    boolean hasNotFixWithoutAssistanceQty();
    /**
     * <code>optional uint32 notFixWithoutAssistanceQty = 9;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    int getNotFixWithoutAssistanceQty();

    /**
     * <code>optional uint32 antennaFailQty = 10;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    boolean hasAntennaFailQty();
    /**
     * <code>optional uint32 antennaFailQty = 10;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    int getAntennaFailQty();

    /**
     * <code>optional uint32 AGPSUploadingInterval = 11;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    boolean hasAGPSUploadingInterval();
    /**
     * <code>optional uint32 AGPSUploadingInterval = 11;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    int getAGPSUploadingInterval();

    /**
     * <code>optional uint32 filterInterval = 12;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    boolean hasFilterInterval();
    /**
     * <code>optional uint32 filterInterval = 12;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    int getFilterInterval();

    /**
     * <code>optional uint32 totalTimeToFixWithAssistance = 13;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    boolean hasTotalTimeToFixWithAssistance();
    /**
     * <code>optional uint32 totalTimeToFixWithAssistance = 13;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    int getTotalTimeToFixWithAssistance();

    /**
     * <code>optional uint32 totalTimeToFixWithoutAssistance = 14;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    boolean hasTotalTimeToFixWithoutAssistance();
    /**
     * <code>optional uint32 totalTimeToFixWithoutAssistance = 14;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    int getTotalTimeToFixWithoutAssistance();

    /**
     * <code>optional uint32 smallestTimeToFixWithAssistance = 15;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    boolean hasSmallestTimeToFixWithAssistance();
    /**
     * <code>optional uint32 smallestTimeToFixWithAssistance = 15;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    int getSmallestTimeToFixWithAssistance();

    /**
     * <code>optional uint32 smallestTimeToFixWithoutAssistance = 16;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    boolean hasSmallestTimeToFixWithoutAssistance();
    /**
     * <code>optional uint32 smallestTimeToFixWithoutAssistance = 16;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    int getSmallestTimeToFixWithoutAssistance();

    /**
     * <code>optional uint32 greatestTimeToFixWithAssistance = 17;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    boolean hasGreatestTimeToFixWithAssistance();
    /**
     * <code>optional uint32 greatestTimeToFixWithAssistance = 17;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    int getGreatestTimeToFixWithAssistance();

    /**
     * <code>optional uint32 greatestTimeToFixWithoutAssistance = 18;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    boolean hasGreatestTimeToFixWithoutAssistance();
    /**
     * <code>optional uint32 greatestTimeToFixWithoutAssistance = 18;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    int getGreatestTimeToFixWithoutAssistance();

    /**
     * <code>optional uint32 fixInterruptInterval = 19;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    boolean hasFixInterruptInterval();
    /**
     * <code>optional uint32 fixInterruptInterval = 19;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    int getFixInterruptInterval();

    /**
     * <code>optional uint32 dateTimeIntervalToSendAGPS = 20;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    boolean hasDateTimeIntervalToSendAGPS();
    /**
     * <code>optional uint32 dateTimeIntervalToSendAGPS = 20;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    int getDateTimeIntervalToSendAGPS();

    /**
     * <code>optional uint32 AGPSDownloadTime = 21;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    boolean hasAGPSDownloadTime();
    /**
     * <code>optional uint32 AGPSDownloadTime = 21;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    int getAGPSDownloadTime();

    /**
     * <code>optional uint32 powerQty = 22;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    boolean hasPowerQty();
    /**
     * <code>optional uint32 powerQty = 22;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    int getPowerQty();
  }
  /**
   * Protobuf type {@code maxpb.DiagnosticGps}
   *
   * <pre>
   *&#47;&#64;exclude
   * </pre>
   */
  public static final class DiagnosticGps extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:maxpb.DiagnosticGps)
      DiagnosticGpsOrBuilder {
    // Use DiagnosticGps.newBuilder() to construct.
    private DiagnosticGps(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private DiagnosticGps(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final DiagnosticGps defaultInstance;
    public static DiagnosticGps getDefaultInstance() {
      return defaultInstance;
    }

    public DiagnosticGps getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private DiagnosticGps(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              activeInterval_ = input.readUInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              resetQty_ = input.readUInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              ephemerisRetriesQty_ = input.readUInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              agpsDownloadOnlineQty_ = input.readUInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              agpsDownloadOfflineQty_ = input.readUInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              fixWithAssistanceQty_ = input.readUInt32();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              notFixWithAssistanceQty_ = input.readUInt32();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000080;
              fixWithoutAssistanceQty_ = input.readUInt32();
              break;
            }
            case 72: {
              bitField0_ |= 0x00000100;
              notFixWithoutAssistanceQty_ = input.readUInt32();
              break;
            }
            case 80: {
              bitField0_ |= 0x00000200;
              antennaFailQty_ = input.readUInt32();
              break;
            }
            case 88: {
              bitField0_ |= 0x00000400;
              aGPSUploadingInterval_ = input.readUInt32();
              break;
            }
            case 96: {
              bitField0_ |= 0x00000800;
              filterInterval_ = input.readUInt32();
              break;
            }
            case 104: {
              bitField0_ |= 0x00001000;
              totalTimeToFixWithAssistance_ = input.readUInt32();
              break;
            }
            case 112: {
              bitField0_ |= 0x00002000;
              totalTimeToFixWithoutAssistance_ = input.readUInt32();
              break;
            }
            case 120: {
              bitField0_ |= 0x00004000;
              smallestTimeToFixWithAssistance_ = input.readUInt32();
              break;
            }
            case 128: {
              bitField0_ |= 0x00008000;
              smallestTimeToFixWithoutAssistance_ = input.readUInt32();
              break;
            }
            case 136: {
              bitField0_ |= 0x00010000;
              greatestTimeToFixWithAssistance_ = input.readUInt32();
              break;
            }
            case 144: {
              bitField0_ |= 0x00020000;
              greatestTimeToFixWithoutAssistance_ = input.readUInt32();
              break;
            }
            case 152: {
              bitField0_ |= 0x00040000;
              fixInterruptInterval_ = input.readUInt32();
              break;
            }
            case 160: {
              bitField0_ |= 0x00080000;
              dateTimeIntervalToSendAGPS_ = input.readUInt32();
              break;
            }
            case 168: {
              bitField0_ |= 0x00100000;
              aGPSDownloadTime_ = input.readUInt32();
              break;
            }
            case 176: {
              bitField0_ |= 0x00200000;
              powerQty_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return maxpb.MaxpbDebug.internal_static_maxpb_DiagnosticGps_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return maxpb.MaxpbDebug.internal_static_maxpb_DiagnosticGps_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              maxpb.MaxpbDebug.DiagnosticGps.class, maxpb.MaxpbDebug.DiagnosticGps.Builder.class);
    }

    public static com.google.protobuf.Parser<DiagnosticGps> PARSER =
        new com.google.protobuf.AbstractParser<DiagnosticGps>() {
      public DiagnosticGps parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new DiagnosticGps(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<DiagnosticGps> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int ACTIVEINTERVAL_FIELD_NUMBER = 1;
    private int activeInterval_;
    /**
     * <code>optional uint32 activeInterval = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    public boolean hasActiveInterval() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional uint32 activeInterval = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    public int getActiveInterval() {
      return activeInterval_;
    }

    public static final int RESETQTY_FIELD_NUMBER = 2;
    private int resetQty_;
    /**
     * <code>optional uint32 resetQty = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    public boolean hasResetQty() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional uint32 resetQty = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    public int getResetQty() {
      return resetQty_;
    }

    public static final int EPHEMERISRETRIESQTY_FIELD_NUMBER = 3;
    private int ephemerisRetriesQty_;
    /**
     * <code>optional uint32 ephemerisRetriesQty = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    public boolean hasEphemerisRetriesQty() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional uint32 ephemerisRetriesQty = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    public int getEphemerisRetriesQty() {
      return ephemerisRetriesQty_;
    }

    public static final int AGPSDOWNLOADONLINEQTY_FIELD_NUMBER = 4;
    private int agpsDownloadOnlineQty_;
    /**
     * <code>optional uint32 agpsDownloadOnlineQty = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public boolean hasAgpsDownloadOnlineQty() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional uint32 agpsDownloadOnlineQty = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public int getAgpsDownloadOnlineQty() {
      return agpsDownloadOnlineQty_;
    }

    public static final int AGPSDOWNLOADOFFLINEQTY_FIELD_NUMBER = 5;
    private int agpsDownloadOfflineQty_;
    /**
     * <code>optional uint32 agpsDownloadOfflineQty = 5;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public boolean hasAgpsDownloadOfflineQty() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional uint32 agpsDownloadOfflineQty = 5;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public int getAgpsDownloadOfflineQty() {
      return agpsDownloadOfflineQty_;
    }

    public static final int FIXWITHASSISTANCEQTY_FIELD_NUMBER = 6;
    private int fixWithAssistanceQty_;
    /**
     * <code>optional uint32 fixWithAssistanceQty = 6;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    public boolean hasFixWithAssistanceQty() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional uint32 fixWithAssistanceQty = 6;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    public int getFixWithAssistanceQty() {
      return fixWithAssistanceQty_;
    }

    public static final int NOTFIXWITHASSISTANCEQTY_FIELD_NUMBER = 7;
    private int notFixWithAssistanceQty_;
    /**
     * <code>optional uint32 notFixWithAssistanceQty = 7;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    public boolean hasNotFixWithAssistanceQty() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional uint32 notFixWithAssistanceQty = 7;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    public int getNotFixWithAssistanceQty() {
      return notFixWithAssistanceQty_;
    }

    public static final int FIXWITHOUTASSISTANCEQTY_FIELD_NUMBER = 8;
    private int fixWithoutAssistanceQty_;
    /**
     * <code>optional uint32 fixWithoutAssistanceQty = 8;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    public boolean hasFixWithoutAssistanceQty() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional uint32 fixWithoutAssistanceQty = 8;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    public int getFixWithoutAssistanceQty() {
      return fixWithoutAssistanceQty_;
    }

    public static final int NOTFIXWITHOUTASSISTANCEQTY_FIELD_NUMBER = 9;
    private int notFixWithoutAssistanceQty_;
    /**
     * <code>optional uint32 notFixWithoutAssistanceQty = 9;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    public boolean hasNotFixWithoutAssistanceQty() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional uint32 notFixWithoutAssistanceQty = 9;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    public int getNotFixWithoutAssistanceQty() {
      return notFixWithoutAssistanceQty_;
    }

    public static final int ANTENNAFAILQTY_FIELD_NUMBER = 10;
    private int antennaFailQty_;
    /**
     * <code>optional uint32 antennaFailQty = 10;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public boolean hasAntennaFailQty() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional uint32 antennaFailQty = 10;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public int getAntennaFailQty() {
      return antennaFailQty_;
    }

    public static final int AGPSUPLOADINGINTERVAL_FIELD_NUMBER = 11;
    private int aGPSUploadingInterval_;
    /**
     * <code>optional uint32 AGPSUploadingInterval = 11;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    public boolean hasAGPSUploadingInterval() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional uint32 AGPSUploadingInterval = 11;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    public int getAGPSUploadingInterval() {
      return aGPSUploadingInterval_;
    }

    public static final int FILTERINTERVAL_FIELD_NUMBER = 12;
    private int filterInterval_;
    /**
     * <code>optional uint32 filterInterval = 12;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    public boolean hasFilterInterval() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional uint32 filterInterval = 12;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    public int getFilterInterval() {
      return filterInterval_;
    }

    public static final int TOTALTIMETOFIXWITHASSISTANCE_FIELD_NUMBER = 13;
    private int totalTimeToFixWithAssistance_;
    /**
     * <code>optional uint32 totalTimeToFixWithAssistance = 13;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    public boolean hasTotalTimeToFixWithAssistance() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>optional uint32 totalTimeToFixWithAssistance = 13;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    public int getTotalTimeToFixWithAssistance() {
      return totalTimeToFixWithAssistance_;
    }

    public static final int TOTALTIMETOFIXWITHOUTASSISTANCE_FIELD_NUMBER = 14;
    private int totalTimeToFixWithoutAssistance_;
    /**
     * <code>optional uint32 totalTimeToFixWithoutAssistance = 14;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    public boolean hasTotalTimeToFixWithoutAssistance() {
      return ((bitField0_ & 0x00002000) == 0x00002000);
    }
    /**
     * <code>optional uint32 totalTimeToFixWithoutAssistance = 14;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    public int getTotalTimeToFixWithoutAssistance() {
      return totalTimeToFixWithoutAssistance_;
    }

    public static final int SMALLESTTIMETOFIXWITHASSISTANCE_FIELD_NUMBER = 15;
    private int smallestTimeToFixWithAssistance_;
    /**
     * <code>optional uint32 smallestTimeToFixWithAssistance = 15;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    public boolean hasSmallestTimeToFixWithAssistance() {
      return ((bitField0_ & 0x00004000) == 0x00004000);
    }
    /**
     * <code>optional uint32 smallestTimeToFixWithAssistance = 15;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    public int getSmallestTimeToFixWithAssistance() {
      return smallestTimeToFixWithAssistance_;
    }

    public static final int SMALLESTTIMETOFIXWITHOUTASSISTANCE_FIELD_NUMBER = 16;
    private int smallestTimeToFixWithoutAssistance_;
    /**
     * <code>optional uint32 smallestTimeToFixWithoutAssistance = 16;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    public boolean hasSmallestTimeToFixWithoutAssistance() {
      return ((bitField0_ & 0x00008000) == 0x00008000);
    }
    /**
     * <code>optional uint32 smallestTimeToFixWithoutAssistance = 16;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    public int getSmallestTimeToFixWithoutAssistance() {
      return smallestTimeToFixWithoutAssistance_;
    }

    public static final int GREATESTTIMETOFIXWITHASSISTANCE_FIELD_NUMBER = 17;
    private int greatestTimeToFixWithAssistance_;
    /**
     * <code>optional uint32 greatestTimeToFixWithAssistance = 17;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    public boolean hasGreatestTimeToFixWithAssistance() {
      return ((bitField0_ & 0x00010000) == 0x00010000);
    }
    /**
     * <code>optional uint32 greatestTimeToFixWithAssistance = 17;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    public int getGreatestTimeToFixWithAssistance() {
      return greatestTimeToFixWithAssistance_;
    }

    public static final int GREATESTTIMETOFIXWITHOUTASSISTANCE_FIELD_NUMBER = 18;
    private int greatestTimeToFixWithoutAssistance_;
    /**
     * <code>optional uint32 greatestTimeToFixWithoutAssistance = 18;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    public boolean hasGreatestTimeToFixWithoutAssistance() {
      return ((bitField0_ & 0x00020000) == 0x00020000);
    }
    /**
     * <code>optional uint32 greatestTimeToFixWithoutAssistance = 18;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    public int getGreatestTimeToFixWithoutAssistance() {
      return greatestTimeToFixWithoutAssistance_;
    }

    public static final int FIXINTERRUPTINTERVAL_FIELD_NUMBER = 19;
    private int fixInterruptInterval_;
    /**
     * <code>optional uint32 fixInterruptInterval = 19;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public boolean hasFixInterruptInterval() {
      return ((bitField0_ & 0x00040000) == 0x00040000);
    }
    /**
     * <code>optional uint32 fixInterruptInterval = 19;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public int getFixInterruptInterval() {
      return fixInterruptInterval_;
    }

    public static final int DATETIMEINTERVALTOSENDAGPS_FIELD_NUMBER = 20;
    private int dateTimeIntervalToSendAGPS_;
    /**
     * <code>optional uint32 dateTimeIntervalToSendAGPS = 20;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public boolean hasDateTimeIntervalToSendAGPS() {
      return ((bitField0_ & 0x00080000) == 0x00080000);
    }
    /**
     * <code>optional uint32 dateTimeIntervalToSendAGPS = 20;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public int getDateTimeIntervalToSendAGPS() {
      return dateTimeIntervalToSendAGPS_;
    }

    public static final int AGPSDOWNLOADTIME_FIELD_NUMBER = 21;
    private int aGPSDownloadTime_;
    /**
     * <code>optional uint32 AGPSDownloadTime = 21;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public boolean hasAGPSDownloadTime() {
      return ((bitField0_ & 0x00100000) == 0x00100000);
    }
    /**
     * <code>optional uint32 AGPSDownloadTime = 21;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public int getAGPSDownloadTime() {
      return aGPSDownloadTime_;
    }

    public static final int POWERQTY_FIELD_NUMBER = 22;
    private int powerQty_;
    /**
     * <code>optional uint32 powerQty = 22;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    public boolean hasPowerQty() {
      return ((bitField0_ & 0x00200000) == 0x00200000);
    }
    /**
     * <code>optional uint32 powerQty = 22;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    public int getPowerQty() {
      return powerQty_;
    }

    private void initFields() {
      activeInterval_ = 0;
      resetQty_ = 0;
      ephemerisRetriesQty_ = 0;
      agpsDownloadOnlineQty_ = 0;
      agpsDownloadOfflineQty_ = 0;
      fixWithAssistanceQty_ = 0;
      notFixWithAssistanceQty_ = 0;
      fixWithoutAssistanceQty_ = 0;
      notFixWithoutAssistanceQty_ = 0;
      antennaFailQty_ = 0;
      aGPSUploadingInterval_ = 0;
      filterInterval_ = 0;
      totalTimeToFixWithAssistance_ = 0;
      totalTimeToFixWithoutAssistance_ = 0;
      smallestTimeToFixWithAssistance_ = 0;
      smallestTimeToFixWithoutAssistance_ = 0;
      greatestTimeToFixWithAssistance_ = 0;
      greatestTimeToFixWithoutAssistance_ = 0;
      fixInterruptInterval_ = 0;
      dateTimeIntervalToSendAGPS_ = 0;
      aGPSDownloadTime_ = 0;
      powerQty_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, activeInterval_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, resetQty_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(3, ephemerisRetriesQty_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeUInt32(4, agpsDownloadOnlineQty_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeUInt32(5, agpsDownloadOfflineQty_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeUInt32(6, fixWithAssistanceQty_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeUInt32(7, notFixWithAssistanceQty_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeUInt32(8, fixWithoutAssistanceQty_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeUInt32(9, notFixWithoutAssistanceQty_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeUInt32(10, antennaFailQty_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeUInt32(11, aGPSUploadingInterval_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeUInt32(12, filterInterval_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeUInt32(13, totalTimeToFixWithAssistance_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        output.writeUInt32(14, totalTimeToFixWithoutAssistance_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        output.writeUInt32(15, smallestTimeToFixWithAssistance_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        output.writeUInt32(16, smallestTimeToFixWithoutAssistance_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        output.writeUInt32(17, greatestTimeToFixWithAssistance_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        output.writeUInt32(18, greatestTimeToFixWithoutAssistance_);
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        output.writeUInt32(19, fixInterruptInterval_);
      }
      if (((bitField0_ & 0x00080000) == 0x00080000)) {
        output.writeUInt32(20, dateTimeIntervalToSendAGPS_);
      }
      if (((bitField0_ & 0x00100000) == 0x00100000)) {
        output.writeUInt32(21, aGPSDownloadTime_);
      }
      if (((bitField0_ & 0x00200000) == 0x00200000)) {
        output.writeUInt32(22, powerQty_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, activeInterval_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, resetQty_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, ephemerisRetriesQty_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, agpsDownloadOnlineQty_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(5, agpsDownloadOfflineQty_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(6, fixWithAssistanceQty_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(7, notFixWithAssistanceQty_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(8, fixWithoutAssistanceQty_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(9, notFixWithoutAssistanceQty_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(10, antennaFailQty_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(11, aGPSUploadingInterval_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(12, filterInterval_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(13, totalTimeToFixWithAssistance_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(14, totalTimeToFixWithoutAssistance_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(15, smallestTimeToFixWithAssistance_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(16, smallestTimeToFixWithoutAssistance_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(17, greatestTimeToFixWithAssistance_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(18, greatestTimeToFixWithoutAssistance_);
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(19, fixInterruptInterval_);
      }
      if (((bitField0_ & 0x00080000) == 0x00080000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(20, dateTimeIntervalToSendAGPS_);
      }
      if (((bitField0_ & 0x00100000) == 0x00100000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(21, aGPSDownloadTime_);
      }
      if (((bitField0_ & 0x00200000) == 0x00200000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(22, powerQty_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static maxpb.MaxpbDebug.DiagnosticGps parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static maxpb.MaxpbDebug.DiagnosticGps parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static maxpb.MaxpbDebug.DiagnosticGps parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static maxpb.MaxpbDebug.DiagnosticGps parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static maxpb.MaxpbDebug.DiagnosticGps parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static maxpb.MaxpbDebug.DiagnosticGps parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static maxpb.MaxpbDebug.DiagnosticGps parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static maxpb.MaxpbDebug.DiagnosticGps parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static maxpb.MaxpbDebug.DiagnosticGps parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static maxpb.MaxpbDebug.DiagnosticGps parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(maxpb.MaxpbDebug.DiagnosticGps prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code maxpb.DiagnosticGps}
     *
     * <pre>
     *&#47;&#64;exclude
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:maxpb.DiagnosticGps)
        maxpb.MaxpbDebug.DiagnosticGpsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return maxpb.MaxpbDebug.internal_static_maxpb_DiagnosticGps_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return maxpb.MaxpbDebug.internal_static_maxpb_DiagnosticGps_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                maxpb.MaxpbDebug.DiagnosticGps.class, maxpb.MaxpbDebug.DiagnosticGps.Builder.class);
      }

      // Construct using maxpb.MaxpbDebug.DiagnosticGps.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        activeInterval_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        resetQty_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        ephemerisRetriesQty_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        agpsDownloadOnlineQty_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        agpsDownloadOfflineQty_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        fixWithAssistanceQty_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        notFixWithAssistanceQty_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        fixWithoutAssistanceQty_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        notFixWithoutAssistanceQty_ = 0;
        bitField0_ = (bitField0_ & ~0x00000100);
        antennaFailQty_ = 0;
        bitField0_ = (bitField0_ & ~0x00000200);
        aGPSUploadingInterval_ = 0;
        bitField0_ = (bitField0_ & ~0x00000400);
        filterInterval_ = 0;
        bitField0_ = (bitField0_ & ~0x00000800);
        totalTimeToFixWithAssistance_ = 0;
        bitField0_ = (bitField0_ & ~0x00001000);
        totalTimeToFixWithoutAssistance_ = 0;
        bitField0_ = (bitField0_ & ~0x00002000);
        smallestTimeToFixWithAssistance_ = 0;
        bitField0_ = (bitField0_ & ~0x00004000);
        smallestTimeToFixWithoutAssistance_ = 0;
        bitField0_ = (bitField0_ & ~0x00008000);
        greatestTimeToFixWithAssistance_ = 0;
        bitField0_ = (bitField0_ & ~0x00010000);
        greatestTimeToFixWithoutAssistance_ = 0;
        bitField0_ = (bitField0_ & ~0x00020000);
        fixInterruptInterval_ = 0;
        bitField0_ = (bitField0_ & ~0x00040000);
        dateTimeIntervalToSendAGPS_ = 0;
        bitField0_ = (bitField0_ & ~0x00080000);
        aGPSDownloadTime_ = 0;
        bitField0_ = (bitField0_ & ~0x00100000);
        powerQty_ = 0;
        bitField0_ = (bitField0_ & ~0x00200000);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return maxpb.MaxpbDebug.internal_static_maxpb_DiagnosticGps_descriptor;
      }

      public maxpb.MaxpbDebug.DiagnosticGps getDefaultInstanceForType() {
        return maxpb.MaxpbDebug.DiagnosticGps.getDefaultInstance();
      }

      public maxpb.MaxpbDebug.DiagnosticGps build() {
        maxpb.MaxpbDebug.DiagnosticGps result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public maxpb.MaxpbDebug.DiagnosticGps buildPartial() {
        maxpb.MaxpbDebug.DiagnosticGps result = new maxpb.MaxpbDebug.DiagnosticGps(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.activeInterval_ = activeInterval_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.resetQty_ = resetQty_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.ephemerisRetriesQty_ = ephemerisRetriesQty_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.agpsDownloadOnlineQty_ = agpsDownloadOnlineQty_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.agpsDownloadOfflineQty_ = agpsDownloadOfflineQty_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.fixWithAssistanceQty_ = fixWithAssistanceQty_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.notFixWithAssistanceQty_ = notFixWithAssistanceQty_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.fixWithoutAssistanceQty_ = fixWithoutAssistanceQty_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.notFixWithoutAssistanceQty_ = notFixWithoutAssistanceQty_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.antennaFailQty_ = antennaFailQty_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        result.aGPSUploadingInterval_ = aGPSUploadingInterval_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000800;
        }
        result.filterInterval_ = filterInterval_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00001000;
        }
        result.totalTimeToFixWithAssistance_ = totalTimeToFixWithAssistance_;
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00002000;
        }
        result.totalTimeToFixWithoutAssistance_ = totalTimeToFixWithoutAssistance_;
        if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
          to_bitField0_ |= 0x00004000;
        }
        result.smallestTimeToFixWithAssistance_ = smallestTimeToFixWithAssistance_;
        if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
          to_bitField0_ |= 0x00008000;
        }
        result.smallestTimeToFixWithoutAssistance_ = smallestTimeToFixWithoutAssistance_;
        if (((from_bitField0_ & 0x00010000) == 0x00010000)) {
          to_bitField0_ |= 0x00010000;
        }
        result.greatestTimeToFixWithAssistance_ = greatestTimeToFixWithAssistance_;
        if (((from_bitField0_ & 0x00020000) == 0x00020000)) {
          to_bitField0_ |= 0x00020000;
        }
        result.greatestTimeToFixWithoutAssistance_ = greatestTimeToFixWithoutAssistance_;
        if (((from_bitField0_ & 0x00040000) == 0x00040000)) {
          to_bitField0_ |= 0x00040000;
        }
        result.fixInterruptInterval_ = fixInterruptInterval_;
        if (((from_bitField0_ & 0x00080000) == 0x00080000)) {
          to_bitField0_ |= 0x00080000;
        }
        result.dateTimeIntervalToSendAGPS_ = dateTimeIntervalToSendAGPS_;
        if (((from_bitField0_ & 0x00100000) == 0x00100000)) {
          to_bitField0_ |= 0x00100000;
        }
        result.aGPSDownloadTime_ = aGPSDownloadTime_;
        if (((from_bitField0_ & 0x00200000) == 0x00200000)) {
          to_bitField0_ |= 0x00200000;
        }
        result.powerQty_ = powerQty_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof maxpb.MaxpbDebug.DiagnosticGps) {
          return mergeFrom((maxpb.MaxpbDebug.DiagnosticGps)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(maxpb.MaxpbDebug.DiagnosticGps other) {
        if (other == maxpb.MaxpbDebug.DiagnosticGps.getDefaultInstance()) return this;
        if (other.hasActiveInterval()) {
          setActiveInterval(other.getActiveInterval());
        }
        if (other.hasResetQty()) {
          setResetQty(other.getResetQty());
        }
        if (other.hasEphemerisRetriesQty()) {
          setEphemerisRetriesQty(other.getEphemerisRetriesQty());
        }
        if (other.hasAgpsDownloadOnlineQty()) {
          setAgpsDownloadOnlineQty(other.getAgpsDownloadOnlineQty());
        }
        if (other.hasAgpsDownloadOfflineQty()) {
          setAgpsDownloadOfflineQty(other.getAgpsDownloadOfflineQty());
        }
        if (other.hasFixWithAssistanceQty()) {
          setFixWithAssistanceQty(other.getFixWithAssistanceQty());
        }
        if (other.hasNotFixWithAssistanceQty()) {
          setNotFixWithAssistanceQty(other.getNotFixWithAssistanceQty());
        }
        if (other.hasFixWithoutAssistanceQty()) {
          setFixWithoutAssistanceQty(other.getFixWithoutAssistanceQty());
        }
        if (other.hasNotFixWithoutAssistanceQty()) {
          setNotFixWithoutAssistanceQty(other.getNotFixWithoutAssistanceQty());
        }
        if (other.hasAntennaFailQty()) {
          setAntennaFailQty(other.getAntennaFailQty());
        }
        if (other.hasAGPSUploadingInterval()) {
          setAGPSUploadingInterval(other.getAGPSUploadingInterval());
        }
        if (other.hasFilterInterval()) {
          setFilterInterval(other.getFilterInterval());
        }
        if (other.hasTotalTimeToFixWithAssistance()) {
          setTotalTimeToFixWithAssistance(other.getTotalTimeToFixWithAssistance());
        }
        if (other.hasTotalTimeToFixWithoutAssistance()) {
          setTotalTimeToFixWithoutAssistance(other.getTotalTimeToFixWithoutAssistance());
        }
        if (other.hasSmallestTimeToFixWithAssistance()) {
          setSmallestTimeToFixWithAssistance(other.getSmallestTimeToFixWithAssistance());
        }
        if (other.hasSmallestTimeToFixWithoutAssistance()) {
          setSmallestTimeToFixWithoutAssistance(other.getSmallestTimeToFixWithoutAssistance());
        }
        if (other.hasGreatestTimeToFixWithAssistance()) {
          setGreatestTimeToFixWithAssistance(other.getGreatestTimeToFixWithAssistance());
        }
        if (other.hasGreatestTimeToFixWithoutAssistance()) {
          setGreatestTimeToFixWithoutAssistance(other.getGreatestTimeToFixWithoutAssistance());
        }
        if (other.hasFixInterruptInterval()) {
          setFixInterruptInterval(other.getFixInterruptInterval());
        }
        if (other.hasDateTimeIntervalToSendAGPS()) {
          setDateTimeIntervalToSendAGPS(other.getDateTimeIntervalToSendAGPS());
        }
        if (other.hasAGPSDownloadTime()) {
          setAGPSDownloadTime(other.getAGPSDownloadTime());
        }
        if (other.hasPowerQty()) {
          setPowerQty(other.getPowerQty());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        maxpb.MaxpbDebug.DiagnosticGps parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (maxpb.MaxpbDebug.DiagnosticGps) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int activeInterval_ ;
      /**
       * <code>optional uint32 activeInterval = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public boolean hasActiveInterval() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint32 activeInterval = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public int getActiveInterval() {
        return activeInterval_;
      }
      /**
       * <code>optional uint32 activeInterval = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public Builder setActiveInterval(int value) {
        bitField0_ |= 0x00000001;
        activeInterval_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 activeInterval = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public Builder clearActiveInterval() {
        bitField0_ = (bitField0_ & ~0x00000001);
        activeInterval_ = 0;
        onChanged();
        return this;
      }

      private int resetQty_ ;
      /**
       * <code>optional uint32 resetQty = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public boolean hasResetQty() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional uint32 resetQty = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public int getResetQty() {
        return resetQty_;
      }
      /**
       * <code>optional uint32 resetQty = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public Builder setResetQty(int value) {
        bitField0_ |= 0x00000002;
        resetQty_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 resetQty = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public Builder clearResetQty() {
        bitField0_ = (bitField0_ & ~0x00000002);
        resetQty_ = 0;
        onChanged();
        return this;
      }

      private int ephemerisRetriesQty_ ;
      /**
       * <code>optional uint32 ephemerisRetriesQty = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public boolean hasEphemerisRetriesQty() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional uint32 ephemerisRetriesQty = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public int getEphemerisRetriesQty() {
        return ephemerisRetriesQty_;
      }
      /**
       * <code>optional uint32 ephemerisRetriesQty = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public Builder setEphemerisRetriesQty(int value) {
        bitField0_ |= 0x00000004;
        ephemerisRetriesQty_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 ephemerisRetriesQty = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public Builder clearEphemerisRetriesQty() {
        bitField0_ = (bitField0_ & ~0x00000004);
        ephemerisRetriesQty_ = 0;
        onChanged();
        return this;
      }

      private int agpsDownloadOnlineQty_ ;
      /**
       * <code>optional uint32 agpsDownloadOnlineQty = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public boolean hasAgpsDownloadOnlineQty() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional uint32 agpsDownloadOnlineQty = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public int getAgpsDownloadOnlineQty() {
        return agpsDownloadOnlineQty_;
      }
      /**
       * <code>optional uint32 agpsDownloadOnlineQty = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder setAgpsDownloadOnlineQty(int value) {
        bitField0_ |= 0x00000008;
        agpsDownloadOnlineQty_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 agpsDownloadOnlineQty = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder clearAgpsDownloadOnlineQty() {
        bitField0_ = (bitField0_ & ~0x00000008);
        agpsDownloadOnlineQty_ = 0;
        onChanged();
        return this;
      }

      private int agpsDownloadOfflineQty_ ;
      /**
       * <code>optional uint32 agpsDownloadOfflineQty = 5;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public boolean hasAgpsDownloadOfflineQty() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional uint32 agpsDownloadOfflineQty = 5;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public int getAgpsDownloadOfflineQty() {
        return agpsDownloadOfflineQty_;
      }
      /**
       * <code>optional uint32 agpsDownloadOfflineQty = 5;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder setAgpsDownloadOfflineQty(int value) {
        bitField0_ |= 0x00000010;
        agpsDownloadOfflineQty_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 agpsDownloadOfflineQty = 5;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder clearAgpsDownloadOfflineQty() {
        bitField0_ = (bitField0_ & ~0x00000010);
        agpsDownloadOfflineQty_ = 0;
        onChanged();
        return this;
      }

      private int fixWithAssistanceQty_ ;
      /**
       * <code>optional uint32 fixWithAssistanceQty = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public boolean hasFixWithAssistanceQty() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional uint32 fixWithAssistanceQty = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public int getFixWithAssistanceQty() {
        return fixWithAssistanceQty_;
      }
      /**
       * <code>optional uint32 fixWithAssistanceQty = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public Builder setFixWithAssistanceQty(int value) {
        bitField0_ |= 0x00000020;
        fixWithAssistanceQty_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 fixWithAssistanceQty = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public Builder clearFixWithAssistanceQty() {
        bitField0_ = (bitField0_ & ~0x00000020);
        fixWithAssistanceQty_ = 0;
        onChanged();
        return this;
      }

      private int notFixWithAssistanceQty_ ;
      /**
       * <code>optional uint32 notFixWithAssistanceQty = 7;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public boolean hasNotFixWithAssistanceQty() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional uint32 notFixWithAssistanceQty = 7;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public int getNotFixWithAssistanceQty() {
        return notFixWithAssistanceQty_;
      }
      /**
       * <code>optional uint32 notFixWithAssistanceQty = 7;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public Builder setNotFixWithAssistanceQty(int value) {
        bitField0_ |= 0x00000040;
        notFixWithAssistanceQty_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 notFixWithAssistanceQty = 7;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public Builder clearNotFixWithAssistanceQty() {
        bitField0_ = (bitField0_ & ~0x00000040);
        notFixWithAssistanceQty_ = 0;
        onChanged();
        return this;
      }

      private int fixWithoutAssistanceQty_ ;
      /**
       * <code>optional uint32 fixWithoutAssistanceQty = 8;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public boolean hasFixWithoutAssistanceQty() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional uint32 fixWithoutAssistanceQty = 8;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public int getFixWithoutAssistanceQty() {
        return fixWithoutAssistanceQty_;
      }
      /**
       * <code>optional uint32 fixWithoutAssistanceQty = 8;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public Builder setFixWithoutAssistanceQty(int value) {
        bitField0_ |= 0x00000080;
        fixWithoutAssistanceQty_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 fixWithoutAssistanceQty = 8;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public Builder clearFixWithoutAssistanceQty() {
        bitField0_ = (bitField0_ & ~0x00000080);
        fixWithoutAssistanceQty_ = 0;
        onChanged();
        return this;
      }

      private int notFixWithoutAssistanceQty_ ;
      /**
       * <code>optional uint32 notFixWithoutAssistanceQty = 9;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public boolean hasNotFixWithoutAssistanceQty() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional uint32 notFixWithoutAssistanceQty = 9;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public int getNotFixWithoutAssistanceQty() {
        return notFixWithoutAssistanceQty_;
      }
      /**
       * <code>optional uint32 notFixWithoutAssistanceQty = 9;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public Builder setNotFixWithoutAssistanceQty(int value) {
        bitField0_ |= 0x00000100;
        notFixWithoutAssistanceQty_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 notFixWithoutAssistanceQty = 9;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public Builder clearNotFixWithoutAssistanceQty() {
        bitField0_ = (bitField0_ & ~0x00000100);
        notFixWithoutAssistanceQty_ = 0;
        onChanged();
        return this;
      }

      private int antennaFailQty_ ;
      /**
       * <code>optional uint32 antennaFailQty = 10;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public boolean hasAntennaFailQty() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional uint32 antennaFailQty = 10;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public int getAntennaFailQty() {
        return antennaFailQty_;
      }
      /**
       * <code>optional uint32 antennaFailQty = 10;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder setAntennaFailQty(int value) {
        bitField0_ |= 0x00000200;
        antennaFailQty_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 antennaFailQty = 10;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder clearAntennaFailQty() {
        bitField0_ = (bitField0_ & ~0x00000200);
        antennaFailQty_ = 0;
        onChanged();
        return this;
      }

      private int aGPSUploadingInterval_ ;
      /**
       * <code>optional uint32 AGPSUploadingInterval = 11;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public boolean hasAGPSUploadingInterval() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional uint32 AGPSUploadingInterval = 11;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public int getAGPSUploadingInterval() {
        return aGPSUploadingInterval_;
      }
      /**
       * <code>optional uint32 AGPSUploadingInterval = 11;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public Builder setAGPSUploadingInterval(int value) {
        bitField0_ |= 0x00000400;
        aGPSUploadingInterval_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 AGPSUploadingInterval = 11;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public Builder clearAGPSUploadingInterval() {
        bitField0_ = (bitField0_ & ~0x00000400);
        aGPSUploadingInterval_ = 0;
        onChanged();
        return this;
      }

      private int filterInterval_ ;
      /**
       * <code>optional uint32 filterInterval = 12;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public boolean hasFilterInterval() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional uint32 filterInterval = 12;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public int getFilterInterval() {
        return filterInterval_;
      }
      /**
       * <code>optional uint32 filterInterval = 12;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public Builder setFilterInterval(int value) {
        bitField0_ |= 0x00000800;
        filterInterval_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 filterInterval = 12;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public Builder clearFilterInterval() {
        bitField0_ = (bitField0_ & ~0x00000800);
        filterInterval_ = 0;
        onChanged();
        return this;
      }

      private int totalTimeToFixWithAssistance_ ;
      /**
       * <code>optional uint32 totalTimeToFixWithAssistance = 13;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public boolean hasTotalTimeToFixWithAssistance() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional uint32 totalTimeToFixWithAssistance = 13;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public int getTotalTimeToFixWithAssistance() {
        return totalTimeToFixWithAssistance_;
      }
      /**
       * <code>optional uint32 totalTimeToFixWithAssistance = 13;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public Builder setTotalTimeToFixWithAssistance(int value) {
        bitField0_ |= 0x00001000;
        totalTimeToFixWithAssistance_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 totalTimeToFixWithAssistance = 13;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public Builder clearTotalTimeToFixWithAssistance() {
        bitField0_ = (bitField0_ & ~0x00001000);
        totalTimeToFixWithAssistance_ = 0;
        onChanged();
        return this;
      }

      private int totalTimeToFixWithoutAssistance_ ;
      /**
       * <code>optional uint32 totalTimeToFixWithoutAssistance = 14;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public boolean hasTotalTimeToFixWithoutAssistance() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>optional uint32 totalTimeToFixWithoutAssistance = 14;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public int getTotalTimeToFixWithoutAssistance() {
        return totalTimeToFixWithoutAssistance_;
      }
      /**
       * <code>optional uint32 totalTimeToFixWithoutAssistance = 14;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public Builder setTotalTimeToFixWithoutAssistance(int value) {
        bitField0_ |= 0x00002000;
        totalTimeToFixWithoutAssistance_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 totalTimeToFixWithoutAssistance = 14;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public Builder clearTotalTimeToFixWithoutAssistance() {
        bitField0_ = (bitField0_ & ~0x00002000);
        totalTimeToFixWithoutAssistance_ = 0;
        onChanged();
        return this;
      }

      private int smallestTimeToFixWithAssistance_ ;
      /**
       * <code>optional uint32 smallestTimeToFixWithAssistance = 15;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public boolean hasSmallestTimeToFixWithAssistance() {
        return ((bitField0_ & 0x00004000) == 0x00004000);
      }
      /**
       * <code>optional uint32 smallestTimeToFixWithAssistance = 15;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public int getSmallestTimeToFixWithAssistance() {
        return smallestTimeToFixWithAssistance_;
      }
      /**
       * <code>optional uint32 smallestTimeToFixWithAssistance = 15;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public Builder setSmallestTimeToFixWithAssistance(int value) {
        bitField0_ |= 0x00004000;
        smallestTimeToFixWithAssistance_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 smallestTimeToFixWithAssistance = 15;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public Builder clearSmallestTimeToFixWithAssistance() {
        bitField0_ = (bitField0_ & ~0x00004000);
        smallestTimeToFixWithAssistance_ = 0;
        onChanged();
        return this;
      }

      private int smallestTimeToFixWithoutAssistance_ ;
      /**
       * <code>optional uint32 smallestTimeToFixWithoutAssistance = 16;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public boolean hasSmallestTimeToFixWithoutAssistance() {
        return ((bitField0_ & 0x00008000) == 0x00008000);
      }
      /**
       * <code>optional uint32 smallestTimeToFixWithoutAssistance = 16;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public int getSmallestTimeToFixWithoutAssistance() {
        return smallestTimeToFixWithoutAssistance_;
      }
      /**
       * <code>optional uint32 smallestTimeToFixWithoutAssistance = 16;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public Builder setSmallestTimeToFixWithoutAssistance(int value) {
        bitField0_ |= 0x00008000;
        smallestTimeToFixWithoutAssistance_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 smallestTimeToFixWithoutAssistance = 16;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public Builder clearSmallestTimeToFixWithoutAssistance() {
        bitField0_ = (bitField0_ & ~0x00008000);
        smallestTimeToFixWithoutAssistance_ = 0;
        onChanged();
        return this;
      }

      private int greatestTimeToFixWithAssistance_ ;
      /**
       * <code>optional uint32 greatestTimeToFixWithAssistance = 17;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public boolean hasGreatestTimeToFixWithAssistance() {
        return ((bitField0_ & 0x00010000) == 0x00010000);
      }
      /**
       * <code>optional uint32 greatestTimeToFixWithAssistance = 17;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public int getGreatestTimeToFixWithAssistance() {
        return greatestTimeToFixWithAssistance_;
      }
      /**
       * <code>optional uint32 greatestTimeToFixWithAssistance = 17;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public Builder setGreatestTimeToFixWithAssistance(int value) {
        bitField0_ |= 0x00010000;
        greatestTimeToFixWithAssistance_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 greatestTimeToFixWithAssistance = 17;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public Builder clearGreatestTimeToFixWithAssistance() {
        bitField0_ = (bitField0_ & ~0x00010000);
        greatestTimeToFixWithAssistance_ = 0;
        onChanged();
        return this;
      }

      private int greatestTimeToFixWithoutAssistance_ ;
      /**
       * <code>optional uint32 greatestTimeToFixWithoutAssistance = 18;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public boolean hasGreatestTimeToFixWithoutAssistance() {
        return ((bitField0_ & 0x00020000) == 0x00020000);
      }
      /**
       * <code>optional uint32 greatestTimeToFixWithoutAssistance = 18;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public int getGreatestTimeToFixWithoutAssistance() {
        return greatestTimeToFixWithoutAssistance_;
      }
      /**
       * <code>optional uint32 greatestTimeToFixWithoutAssistance = 18;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public Builder setGreatestTimeToFixWithoutAssistance(int value) {
        bitField0_ |= 0x00020000;
        greatestTimeToFixWithoutAssistance_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 greatestTimeToFixWithoutAssistance = 18;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public Builder clearGreatestTimeToFixWithoutAssistance() {
        bitField0_ = (bitField0_ & ~0x00020000);
        greatestTimeToFixWithoutAssistance_ = 0;
        onChanged();
        return this;
      }

      private int fixInterruptInterval_ ;
      /**
       * <code>optional uint32 fixInterruptInterval = 19;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public boolean hasFixInterruptInterval() {
        return ((bitField0_ & 0x00040000) == 0x00040000);
      }
      /**
       * <code>optional uint32 fixInterruptInterval = 19;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public int getFixInterruptInterval() {
        return fixInterruptInterval_;
      }
      /**
       * <code>optional uint32 fixInterruptInterval = 19;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder setFixInterruptInterval(int value) {
        bitField0_ |= 0x00040000;
        fixInterruptInterval_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 fixInterruptInterval = 19;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder clearFixInterruptInterval() {
        bitField0_ = (bitField0_ & ~0x00040000);
        fixInterruptInterval_ = 0;
        onChanged();
        return this;
      }

      private int dateTimeIntervalToSendAGPS_ ;
      /**
       * <code>optional uint32 dateTimeIntervalToSendAGPS = 20;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public boolean hasDateTimeIntervalToSendAGPS() {
        return ((bitField0_ & 0x00080000) == 0x00080000);
      }
      /**
       * <code>optional uint32 dateTimeIntervalToSendAGPS = 20;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public int getDateTimeIntervalToSendAGPS() {
        return dateTimeIntervalToSendAGPS_;
      }
      /**
       * <code>optional uint32 dateTimeIntervalToSendAGPS = 20;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder setDateTimeIntervalToSendAGPS(int value) {
        bitField0_ |= 0x00080000;
        dateTimeIntervalToSendAGPS_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 dateTimeIntervalToSendAGPS = 20;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder clearDateTimeIntervalToSendAGPS() {
        bitField0_ = (bitField0_ & ~0x00080000);
        dateTimeIntervalToSendAGPS_ = 0;
        onChanged();
        return this;
      }

      private int aGPSDownloadTime_ ;
      /**
       * <code>optional uint32 AGPSDownloadTime = 21;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public boolean hasAGPSDownloadTime() {
        return ((bitField0_ & 0x00100000) == 0x00100000);
      }
      /**
       * <code>optional uint32 AGPSDownloadTime = 21;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public int getAGPSDownloadTime() {
        return aGPSDownloadTime_;
      }
      /**
       * <code>optional uint32 AGPSDownloadTime = 21;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder setAGPSDownloadTime(int value) {
        bitField0_ |= 0x00100000;
        aGPSDownloadTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 AGPSDownloadTime = 21;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder clearAGPSDownloadTime() {
        bitField0_ = (bitField0_ & ~0x00100000);
        aGPSDownloadTime_ = 0;
        onChanged();
        return this;
      }

      private int powerQty_ ;
      /**
       * <code>optional uint32 powerQty = 22;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public boolean hasPowerQty() {
        return ((bitField0_ & 0x00200000) == 0x00200000);
      }
      /**
       * <code>optional uint32 powerQty = 22;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public int getPowerQty() {
        return powerQty_;
      }
      /**
       * <code>optional uint32 powerQty = 22;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public Builder setPowerQty(int value) {
        bitField0_ |= 0x00200000;
        powerQty_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 powerQty = 22;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public Builder clearPowerQty() {
        bitField0_ = (bitField0_ & ~0x00200000);
        powerQty_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:maxpb.DiagnosticGps)
    }

    static {
      defaultInstance = new DiagnosticGps(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:maxpb.DiagnosticGps)
  }

  public interface DiagnosticCoreOrBuilder extends
      // @@protoc_insertion_point(interface_extends:maxpb.DiagnosticCore)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional uint32 firmwareChangeQty = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    boolean hasFirmwareChangeQty();
    /**
     * <code>optional uint32 firmwareChangeQty = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    int getFirmwareChangeQty();

    /**
     * <code>optional uint32 intervalSleep = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    boolean hasIntervalSleep();
    /**
     * <code>optional uint32 intervalSleep = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    int getIntervalSleep();

    /**
     * <code>optional uint32 intervalRunning = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    boolean hasIntervalRunning();
    /**
     * <code>optional uint32 intervalRunning = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    int getIntervalRunning();

    /**
     * <code>optional uint32 intervalUsbConnected = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    boolean hasIntervalUsbConnected();
    /**
     * <code>optional uint32 intervalUsbConnected = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    int getIntervalUsbConnected();

    /**
     * <code>optional uint32 intervalBTConnected = 5;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasIntervalBTConnected();
    /**
     * <code>optional uint32 intervalBTConnected = 5;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    int getIntervalBTConnected();

    /**
     * <code>optional uint32 maxTemperature = 6;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasMaxTemperature();
    /**
     * <code>optional uint32 maxTemperature = 6;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    int getMaxTemperature();

    /**
     * <code>optional uint32 meanTemperature = 7;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasMeanTemperature();
    /**
     * <code>optional uint32 meanTemperature = 7;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    int getMeanTemperature();
  }
  /**
   * Protobuf type {@code maxpb.DiagnosticCore}
   *
   * <pre>
   *&#47;&#64;exclude
   * </pre>
   */
  public static final class DiagnosticCore extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:maxpb.DiagnosticCore)
      DiagnosticCoreOrBuilder {
    // Use DiagnosticCore.newBuilder() to construct.
    private DiagnosticCore(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private DiagnosticCore(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final DiagnosticCore defaultInstance;
    public static DiagnosticCore getDefaultInstance() {
      return defaultInstance;
    }

    public DiagnosticCore getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private DiagnosticCore(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              firmwareChangeQty_ = input.readUInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              intervalSleep_ = input.readUInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              intervalRunning_ = input.readUInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              intervalUsbConnected_ = input.readUInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              intervalBTConnected_ = input.readUInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              maxTemperature_ = input.readUInt32();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              meanTemperature_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return maxpb.MaxpbDebug.internal_static_maxpb_DiagnosticCore_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return maxpb.MaxpbDebug.internal_static_maxpb_DiagnosticCore_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              maxpb.MaxpbDebug.DiagnosticCore.class, maxpb.MaxpbDebug.DiagnosticCore.Builder.class);
    }

    public static com.google.protobuf.Parser<DiagnosticCore> PARSER =
        new com.google.protobuf.AbstractParser<DiagnosticCore>() {
      public DiagnosticCore parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new DiagnosticCore(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<DiagnosticCore> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int FIRMWARECHANGEQTY_FIELD_NUMBER = 1;
    private int firmwareChangeQty_;
    /**
     * <code>optional uint32 firmwareChangeQty = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    public boolean hasFirmwareChangeQty() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional uint32 firmwareChangeQty = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    public int getFirmwareChangeQty() {
      return firmwareChangeQty_;
    }

    public static final int INTERVALSLEEP_FIELD_NUMBER = 2;
    private int intervalSleep_;
    /**
     * <code>optional uint32 intervalSleep = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    public boolean hasIntervalSleep() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional uint32 intervalSleep = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    public int getIntervalSleep() {
      return intervalSleep_;
    }

    public static final int INTERVALRUNNING_FIELD_NUMBER = 3;
    private int intervalRunning_;
    /**
     * <code>optional uint32 intervalRunning = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    public boolean hasIntervalRunning() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional uint32 intervalRunning = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    public int getIntervalRunning() {
      return intervalRunning_;
    }

    public static final int INTERVALUSBCONNECTED_FIELD_NUMBER = 4;
    private int intervalUsbConnected_;
    /**
     * <code>optional uint32 intervalUsbConnected = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    public boolean hasIntervalUsbConnected() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional uint32 intervalUsbConnected = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    public int getIntervalUsbConnected() {
      return intervalUsbConnected_;
    }

    public static final int INTERVALBTCONNECTED_FIELD_NUMBER = 5;
    private int intervalBTConnected_;
    /**
     * <code>optional uint32 intervalBTConnected = 5;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasIntervalBTConnected() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional uint32 intervalBTConnected = 5;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public int getIntervalBTConnected() {
      return intervalBTConnected_;
    }

    public static final int MAXTEMPERATURE_FIELD_NUMBER = 6;
    private int maxTemperature_;
    /**
     * <code>optional uint32 maxTemperature = 6;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasMaxTemperature() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional uint32 maxTemperature = 6;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public int getMaxTemperature() {
      return maxTemperature_;
    }

    public static final int MEANTEMPERATURE_FIELD_NUMBER = 7;
    private int meanTemperature_;
    /**
     * <code>optional uint32 meanTemperature = 7;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasMeanTemperature() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional uint32 meanTemperature = 7;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public int getMeanTemperature() {
      return meanTemperature_;
    }

    private void initFields() {
      firmwareChangeQty_ = 0;
      intervalSleep_ = 0;
      intervalRunning_ = 0;
      intervalUsbConnected_ = 0;
      intervalBTConnected_ = 0;
      maxTemperature_ = 0;
      meanTemperature_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, firmwareChangeQty_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, intervalSleep_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(3, intervalRunning_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeUInt32(4, intervalUsbConnected_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeUInt32(5, intervalBTConnected_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeUInt32(6, maxTemperature_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeUInt32(7, meanTemperature_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, firmwareChangeQty_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, intervalSleep_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, intervalRunning_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, intervalUsbConnected_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(5, intervalBTConnected_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(6, maxTemperature_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(7, meanTemperature_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static maxpb.MaxpbDebug.DiagnosticCore parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static maxpb.MaxpbDebug.DiagnosticCore parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static maxpb.MaxpbDebug.DiagnosticCore parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static maxpb.MaxpbDebug.DiagnosticCore parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static maxpb.MaxpbDebug.DiagnosticCore parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static maxpb.MaxpbDebug.DiagnosticCore parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static maxpb.MaxpbDebug.DiagnosticCore parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static maxpb.MaxpbDebug.DiagnosticCore parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static maxpb.MaxpbDebug.DiagnosticCore parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static maxpb.MaxpbDebug.DiagnosticCore parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(maxpb.MaxpbDebug.DiagnosticCore prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code maxpb.DiagnosticCore}
     *
     * <pre>
     *&#47;&#64;exclude
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:maxpb.DiagnosticCore)
        maxpb.MaxpbDebug.DiagnosticCoreOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return maxpb.MaxpbDebug.internal_static_maxpb_DiagnosticCore_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return maxpb.MaxpbDebug.internal_static_maxpb_DiagnosticCore_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                maxpb.MaxpbDebug.DiagnosticCore.class, maxpb.MaxpbDebug.DiagnosticCore.Builder.class);
      }

      // Construct using maxpb.MaxpbDebug.DiagnosticCore.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        firmwareChangeQty_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        intervalSleep_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        intervalRunning_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        intervalUsbConnected_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        intervalBTConnected_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        maxTemperature_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        meanTemperature_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return maxpb.MaxpbDebug.internal_static_maxpb_DiagnosticCore_descriptor;
      }

      public maxpb.MaxpbDebug.DiagnosticCore getDefaultInstanceForType() {
        return maxpb.MaxpbDebug.DiagnosticCore.getDefaultInstance();
      }

      public maxpb.MaxpbDebug.DiagnosticCore build() {
        maxpb.MaxpbDebug.DiagnosticCore result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public maxpb.MaxpbDebug.DiagnosticCore buildPartial() {
        maxpb.MaxpbDebug.DiagnosticCore result = new maxpb.MaxpbDebug.DiagnosticCore(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.firmwareChangeQty_ = firmwareChangeQty_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.intervalSleep_ = intervalSleep_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.intervalRunning_ = intervalRunning_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.intervalUsbConnected_ = intervalUsbConnected_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.intervalBTConnected_ = intervalBTConnected_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.maxTemperature_ = maxTemperature_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.meanTemperature_ = meanTemperature_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof maxpb.MaxpbDebug.DiagnosticCore) {
          return mergeFrom((maxpb.MaxpbDebug.DiagnosticCore)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(maxpb.MaxpbDebug.DiagnosticCore other) {
        if (other == maxpb.MaxpbDebug.DiagnosticCore.getDefaultInstance()) return this;
        if (other.hasFirmwareChangeQty()) {
          setFirmwareChangeQty(other.getFirmwareChangeQty());
        }
        if (other.hasIntervalSleep()) {
          setIntervalSleep(other.getIntervalSleep());
        }
        if (other.hasIntervalRunning()) {
          setIntervalRunning(other.getIntervalRunning());
        }
        if (other.hasIntervalUsbConnected()) {
          setIntervalUsbConnected(other.getIntervalUsbConnected());
        }
        if (other.hasIntervalBTConnected()) {
          setIntervalBTConnected(other.getIntervalBTConnected());
        }
        if (other.hasMaxTemperature()) {
          setMaxTemperature(other.getMaxTemperature());
        }
        if (other.hasMeanTemperature()) {
          setMeanTemperature(other.getMeanTemperature());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        maxpb.MaxpbDebug.DiagnosticCore parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (maxpb.MaxpbDebug.DiagnosticCore) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int firmwareChangeQty_ ;
      /**
       * <code>optional uint32 firmwareChangeQty = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public boolean hasFirmwareChangeQty() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint32 firmwareChangeQty = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public int getFirmwareChangeQty() {
        return firmwareChangeQty_;
      }
      /**
       * <code>optional uint32 firmwareChangeQty = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public Builder setFirmwareChangeQty(int value) {
        bitField0_ |= 0x00000001;
        firmwareChangeQty_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 firmwareChangeQty = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public Builder clearFirmwareChangeQty() {
        bitField0_ = (bitField0_ & ~0x00000001);
        firmwareChangeQty_ = 0;
        onChanged();
        return this;
      }

      private int intervalSleep_ ;
      /**
       * <code>optional uint32 intervalSleep = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public boolean hasIntervalSleep() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional uint32 intervalSleep = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public int getIntervalSleep() {
        return intervalSleep_;
      }
      /**
       * <code>optional uint32 intervalSleep = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public Builder setIntervalSleep(int value) {
        bitField0_ |= 0x00000002;
        intervalSleep_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 intervalSleep = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public Builder clearIntervalSleep() {
        bitField0_ = (bitField0_ & ~0x00000002);
        intervalSleep_ = 0;
        onChanged();
        return this;
      }

      private int intervalRunning_ ;
      /**
       * <code>optional uint32 intervalRunning = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public boolean hasIntervalRunning() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional uint32 intervalRunning = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public int getIntervalRunning() {
        return intervalRunning_;
      }
      /**
       * <code>optional uint32 intervalRunning = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public Builder setIntervalRunning(int value) {
        bitField0_ |= 0x00000004;
        intervalRunning_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 intervalRunning = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public Builder clearIntervalRunning() {
        bitField0_ = (bitField0_ & ~0x00000004);
        intervalRunning_ = 0;
        onChanged();
        return this;
      }

      private int intervalUsbConnected_ ;
      /**
       * <code>optional uint32 intervalUsbConnected = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public boolean hasIntervalUsbConnected() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional uint32 intervalUsbConnected = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public int getIntervalUsbConnected() {
        return intervalUsbConnected_;
      }
      /**
       * <code>optional uint32 intervalUsbConnected = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public Builder setIntervalUsbConnected(int value) {
        bitField0_ |= 0x00000008;
        intervalUsbConnected_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 intervalUsbConnected = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public Builder clearIntervalUsbConnected() {
        bitField0_ = (bitField0_ & ~0x00000008);
        intervalUsbConnected_ = 0;
        onChanged();
        return this;
      }

      private int intervalBTConnected_ ;
      /**
       * <code>optional uint32 intervalBTConnected = 5;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasIntervalBTConnected() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional uint32 intervalBTConnected = 5;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public int getIntervalBTConnected() {
        return intervalBTConnected_;
      }
      /**
       * <code>optional uint32 intervalBTConnected = 5;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setIntervalBTConnected(int value) {
        bitField0_ |= 0x00000010;
        intervalBTConnected_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 intervalBTConnected = 5;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearIntervalBTConnected() {
        bitField0_ = (bitField0_ & ~0x00000010);
        intervalBTConnected_ = 0;
        onChanged();
        return this;
      }

      private int maxTemperature_ ;
      /**
       * <code>optional uint32 maxTemperature = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasMaxTemperature() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional uint32 maxTemperature = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public int getMaxTemperature() {
        return maxTemperature_;
      }
      /**
       * <code>optional uint32 maxTemperature = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setMaxTemperature(int value) {
        bitField0_ |= 0x00000020;
        maxTemperature_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 maxTemperature = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearMaxTemperature() {
        bitField0_ = (bitField0_ & ~0x00000020);
        maxTemperature_ = 0;
        onChanged();
        return this;
      }

      private int meanTemperature_ ;
      /**
       * <code>optional uint32 meanTemperature = 7;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasMeanTemperature() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional uint32 meanTemperature = 7;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public int getMeanTemperature() {
        return meanTemperature_;
      }
      /**
       * <code>optional uint32 meanTemperature = 7;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setMeanTemperature(int value) {
        bitField0_ |= 0x00000040;
        meanTemperature_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 meanTemperature = 7;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearMeanTemperature() {
        bitField0_ = (bitField0_ & ~0x00000040);
        meanTemperature_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:maxpb.DiagnosticCore)
    }

    static {
      defaultInstance = new DiagnosticCore(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:maxpb.DiagnosticCore)
  }

  public interface DiagnosticMemoryOrBuilder extends
      // @@protoc_insertion_point(interface_extends:maxpb.DiagnosticMemory)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional .maxpb.MemoryType type = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    boolean hasType();
    /**
     * <code>optional .maxpb.MemoryType type = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    maxpb.MaxpbDebug.MemoryType getType();

    /**
     * <code>optional uint32 size = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    boolean hasSize();
    /**
     * <code>optional uint32 size = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    int getSize();

    /**
     * <code>optional uint32 free = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    boolean hasFree();
    /**
     * <code>optional uint32 free = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    int getFree();

    /**
     * <code>optional uint32 healthy = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    boolean hasHealthy();
    /**
     * <code>optional uint32 healthy = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    int getHealthy();
  }
  /**
   * Protobuf type {@code maxpb.DiagnosticMemory}
   *
   * <pre>
   *&#47;&#64;exclude
   * </pre>
   */
  public static final class DiagnosticMemory extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:maxpb.DiagnosticMemory)
      DiagnosticMemoryOrBuilder {
    // Use DiagnosticMemory.newBuilder() to construct.
    private DiagnosticMemory(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private DiagnosticMemory(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final DiagnosticMemory defaultInstance;
    public static DiagnosticMemory getDefaultInstance() {
      return defaultInstance;
    }

    public DiagnosticMemory getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private DiagnosticMemory(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              maxpb.MaxpbDebug.MemoryType value = maxpb.MaxpbDebug.MemoryType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(1, rawValue);
              } else {
                bitField0_ |= 0x00000001;
                type_ = value;
              }
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              size_ = input.readUInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              free_ = input.readUInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              healthy_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return maxpb.MaxpbDebug.internal_static_maxpb_DiagnosticMemory_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return maxpb.MaxpbDebug.internal_static_maxpb_DiagnosticMemory_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              maxpb.MaxpbDebug.DiagnosticMemory.class, maxpb.MaxpbDebug.DiagnosticMemory.Builder.class);
    }

    public static com.google.protobuf.Parser<DiagnosticMemory> PARSER =
        new com.google.protobuf.AbstractParser<DiagnosticMemory>() {
      public DiagnosticMemory parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new DiagnosticMemory(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<DiagnosticMemory> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int TYPE_FIELD_NUMBER = 1;
    private maxpb.MaxpbDebug.MemoryType type_;
    /**
     * <code>optional .maxpb.MemoryType type = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    public boolean hasType() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .maxpb.MemoryType type = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    public maxpb.MaxpbDebug.MemoryType getType() {
      return type_;
    }

    public static final int SIZE_FIELD_NUMBER = 2;
    private int size_;
    /**
     * <code>optional uint32 size = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    public boolean hasSize() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional uint32 size = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    public int getSize() {
      return size_;
    }

    public static final int FREE_FIELD_NUMBER = 3;
    private int free_;
    /**
     * <code>optional uint32 free = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    public boolean hasFree() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional uint32 free = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    public int getFree() {
      return free_;
    }

    public static final int HEALTHY_FIELD_NUMBER = 4;
    private int healthy_;
    /**
     * <code>optional uint32 healthy = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    public boolean hasHealthy() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional uint32 healthy = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    public int getHealthy() {
      return healthy_;
    }

    private void initFields() {
      type_ = maxpb.MaxpbDebug.MemoryType.MT_STACK;
      size_ = 0;
      free_ = 0;
      healthy_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, type_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, size_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(3, free_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeUInt32(4, healthy_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, type_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, size_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, free_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, healthy_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static maxpb.MaxpbDebug.DiagnosticMemory parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static maxpb.MaxpbDebug.DiagnosticMemory parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static maxpb.MaxpbDebug.DiagnosticMemory parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static maxpb.MaxpbDebug.DiagnosticMemory parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static maxpb.MaxpbDebug.DiagnosticMemory parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static maxpb.MaxpbDebug.DiagnosticMemory parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static maxpb.MaxpbDebug.DiagnosticMemory parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static maxpb.MaxpbDebug.DiagnosticMemory parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static maxpb.MaxpbDebug.DiagnosticMemory parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static maxpb.MaxpbDebug.DiagnosticMemory parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(maxpb.MaxpbDebug.DiagnosticMemory prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code maxpb.DiagnosticMemory}
     *
     * <pre>
     *&#47;&#64;exclude
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:maxpb.DiagnosticMemory)
        maxpb.MaxpbDebug.DiagnosticMemoryOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return maxpb.MaxpbDebug.internal_static_maxpb_DiagnosticMemory_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return maxpb.MaxpbDebug.internal_static_maxpb_DiagnosticMemory_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                maxpb.MaxpbDebug.DiagnosticMemory.class, maxpb.MaxpbDebug.DiagnosticMemory.Builder.class);
      }

      // Construct using maxpb.MaxpbDebug.DiagnosticMemory.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        type_ = maxpb.MaxpbDebug.MemoryType.MT_STACK;
        bitField0_ = (bitField0_ & ~0x00000001);
        size_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        free_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        healthy_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return maxpb.MaxpbDebug.internal_static_maxpb_DiagnosticMemory_descriptor;
      }

      public maxpb.MaxpbDebug.DiagnosticMemory getDefaultInstanceForType() {
        return maxpb.MaxpbDebug.DiagnosticMemory.getDefaultInstance();
      }

      public maxpb.MaxpbDebug.DiagnosticMemory build() {
        maxpb.MaxpbDebug.DiagnosticMemory result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public maxpb.MaxpbDebug.DiagnosticMemory buildPartial() {
        maxpb.MaxpbDebug.DiagnosticMemory result = new maxpb.MaxpbDebug.DiagnosticMemory(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.type_ = type_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.size_ = size_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.free_ = free_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.healthy_ = healthy_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof maxpb.MaxpbDebug.DiagnosticMemory) {
          return mergeFrom((maxpb.MaxpbDebug.DiagnosticMemory)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(maxpb.MaxpbDebug.DiagnosticMemory other) {
        if (other == maxpb.MaxpbDebug.DiagnosticMemory.getDefaultInstance()) return this;
        if (other.hasType()) {
          setType(other.getType());
        }
        if (other.hasSize()) {
          setSize(other.getSize());
        }
        if (other.hasFree()) {
          setFree(other.getFree());
        }
        if (other.hasHealthy()) {
          setHealthy(other.getHealthy());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        maxpb.MaxpbDebug.DiagnosticMemory parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (maxpb.MaxpbDebug.DiagnosticMemory) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private maxpb.MaxpbDebug.MemoryType type_ = maxpb.MaxpbDebug.MemoryType.MT_STACK;
      /**
       * <code>optional .maxpb.MemoryType type = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public boolean hasType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .maxpb.MemoryType type = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public maxpb.MaxpbDebug.MemoryType getType() {
        return type_;
      }
      /**
       * <code>optional .maxpb.MemoryType type = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public Builder setType(maxpb.MaxpbDebug.MemoryType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        type_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .maxpb.MemoryType type = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public Builder clearType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        type_ = maxpb.MaxpbDebug.MemoryType.MT_STACK;
        onChanged();
        return this;
      }

      private int size_ ;
      /**
       * <code>optional uint32 size = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public boolean hasSize() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional uint32 size = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public int getSize() {
        return size_;
      }
      /**
       * <code>optional uint32 size = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public Builder setSize(int value) {
        bitField0_ |= 0x00000002;
        size_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 size = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public Builder clearSize() {
        bitField0_ = (bitField0_ & ~0x00000002);
        size_ = 0;
        onChanged();
        return this;
      }

      private int free_ ;
      /**
       * <code>optional uint32 free = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public boolean hasFree() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional uint32 free = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public int getFree() {
        return free_;
      }
      /**
       * <code>optional uint32 free = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public Builder setFree(int value) {
        bitField0_ |= 0x00000004;
        free_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 free = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public Builder clearFree() {
        bitField0_ = (bitField0_ & ~0x00000004);
        free_ = 0;
        onChanged();
        return this;
      }

      private int healthy_ ;
      /**
       * <code>optional uint32 healthy = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public boolean hasHealthy() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional uint32 healthy = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public int getHealthy() {
        return healthy_;
      }
      /**
       * <code>optional uint32 healthy = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public Builder setHealthy(int value) {
        bitField0_ |= 0x00000008;
        healthy_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 healthy = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public Builder clearHealthy() {
        bitField0_ = (bitField0_ & ~0x00000008);
        healthy_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:maxpb.DiagnosticMemory)
    }

    static {
      defaultInstance = new DiagnosticMemory(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:maxpb.DiagnosticMemory)
  }

  public interface DiagnosticLoraOrBuilder extends
      // @@protoc_insertion_point(interface_extends:maxpb.DiagnosticLora)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional uint32 txP2pPackets = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    boolean hasTxP2PPackets();
    /**
     * <code>optional uint32 txP2pPackets = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    int getTxP2PPackets();

    /**
     * <code>optional uint32 txWanPackets = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    boolean hasTxWanPackets();
    /**
     * <code>optional uint32 txWanPackets = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    int getTxWanPackets();

    /**
     * <code>optional uint32 rxWanAckPackets = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    boolean hasRxWanAckPackets();
    /**
     * <code>optional uint32 rxWanAckPackets = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    int getRxWanAckPackets();

    /**
     * <code>optional uint32 txInterval = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    boolean hasTxInterval();
    /**
     * <code>optional uint32 txInterval = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    int getTxInterval();

    /**
     * <code>optional uint32 rxInterval = 5;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    boolean hasRxInterval();
    /**
     * <code>optional uint32 rxInterval = 5;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    int getRxInterval();
  }
  /**
   * Protobuf type {@code maxpb.DiagnosticLora}
   *
   * <pre>
   *&#47;&#64;exclude
   * </pre>
   */
  public static final class DiagnosticLora extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:maxpb.DiagnosticLora)
      DiagnosticLoraOrBuilder {
    // Use DiagnosticLora.newBuilder() to construct.
    private DiagnosticLora(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private DiagnosticLora(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final DiagnosticLora defaultInstance;
    public static DiagnosticLora getDefaultInstance() {
      return defaultInstance;
    }

    public DiagnosticLora getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private DiagnosticLora(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              txP2PPackets_ = input.readUInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              txWanPackets_ = input.readUInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              rxWanAckPackets_ = input.readUInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              txInterval_ = input.readUInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              rxInterval_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return maxpb.MaxpbDebug.internal_static_maxpb_DiagnosticLora_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return maxpb.MaxpbDebug.internal_static_maxpb_DiagnosticLora_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              maxpb.MaxpbDebug.DiagnosticLora.class, maxpb.MaxpbDebug.DiagnosticLora.Builder.class);
    }

    public static com.google.protobuf.Parser<DiagnosticLora> PARSER =
        new com.google.protobuf.AbstractParser<DiagnosticLora>() {
      public DiagnosticLora parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new DiagnosticLora(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<DiagnosticLora> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int TXP2PPACKETS_FIELD_NUMBER = 1;
    private int txP2PPackets_;
    /**
     * <code>optional uint32 txP2pPackets = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    public boolean hasTxP2PPackets() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional uint32 txP2pPackets = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    public int getTxP2PPackets() {
      return txP2PPackets_;
    }

    public static final int TXWANPACKETS_FIELD_NUMBER = 2;
    private int txWanPackets_;
    /**
     * <code>optional uint32 txWanPackets = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    public boolean hasTxWanPackets() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional uint32 txWanPackets = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    public int getTxWanPackets() {
      return txWanPackets_;
    }

    public static final int RXWANACKPACKETS_FIELD_NUMBER = 3;
    private int rxWanAckPackets_;
    /**
     * <code>optional uint32 rxWanAckPackets = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    public boolean hasRxWanAckPackets() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional uint32 rxWanAckPackets = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    public int getRxWanAckPackets() {
      return rxWanAckPackets_;
    }

    public static final int TXINTERVAL_FIELD_NUMBER = 4;
    private int txInterval_;
    /**
     * <code>optional uint32 txInterval = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public boolean hasTxInterval() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional uint32 txInterval = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public int getTxInterval() {
      return txInterval_;
    }

    public static final int RXINTERVAL_FIELD_NUMBER = 5;
    private int rxInterval_;
    /**
     * <code>optional uint32 rxInterval = 5;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public boolean hasRxInterval() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional uint32 rxInterval = 5;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public int getRxInterval() {
      return rxInterval_;
    }

    private void initFields() {
      txP2PPackets_ = 0;
      txWanPackets_ = 0;
      rxWanAckPackets_ = 0;
      txInterval_ = 0;
      rxInterval_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, txP2PPackets_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, txWanPackets_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(3, rxWanAckPackets_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeUInt32(4, txInterval_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeUInt32(5, rxInterval_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, txP2PPackets_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, txWanPackets_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, rxWanAckPackets_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, txInterval_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(5, rxInterval_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static maxpb.MaxpbDebug.DiagnosticLora parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static maxpb.MaxpbDebug.DiagnosticLora parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static maxpb.MaxpbDebug.DiagnosticLora parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static maxpb.MaxpbDebug.DiagnosticLora parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static maxpb.MaxpbDebug.DiagnosticLora parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static maxpb.MaxpbDebug.DiagnosticLora parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static maxpb.MaxpbDebug.DiagnosticLora parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static maxpb.MaxpbDebug.DiagnosticLora parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static maxpb.MaxpbDebug.DiagnosticLora parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static maxpb.MaxpbDebug.DiagnosticLora parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(maxpb.MaxpbDebug.DiagnosticLora prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code maxpb.DiagnosticLora}
     *
     * <pre>
     *&#47;&#64;exclude
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:maxpb.DiagnosticLora)
        maxpb.MaxpbDebug.DiagnosticLoraOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return maxpb.MaxpbDebug.internal_static_maxpb_DiagnosticLora_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return maxpb.MaxpbDebug.internal_static_maxpb_DiagnosticLora_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                maxpb.MaxpbDebug.DiagnosticLora.class, maxpb.MaxpbDebug.DiagnosticLora.Builder.class);
      }

      // Construct using maxpb.MaxpbDebug.DiagnosticLora.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        txP2PPackets_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        txWanPackets_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        rxWanAckPackets_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        txInterval_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        rxInterval_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return maxpb.MaxpbDebug.internal_static_maxpb_DiagnosticLora_descriptor;
      }

      public maxpb.MaxpbDebug.DiagnosticLora getDefaultInstanceForType() {
        return maxpb.MaxpbDebug.DiagnosticLora.getDefaultInstance();
      }

      public maxpb.MaxpbDebug.DiagnosticLora build() {
        maxpb.MaxpbDebug.DiagnosticLora result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public maxpb.MaxpbDebug.DiagnosticLora buildPartial() {
        maxpb.MaxpbDebug.DiagnosticLora result = new maxpb.MaxpbDebug.DiagnosticLora(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.txP2PPackets_ = txP2PPackets_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.txWanPackets_ = txWanPackets_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.rxWanAckPackets_ = rxWanAckPackets_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.txInterval_ = txInterval_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.rxInterval_ = rxInterval_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof maxpb.MaxpbDebug.DiagnosticLora) {
          return mergeFrom((maxpb.MaxpbDebug.DiagnosticLora)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(maxpb.MaxpbDebug.DiagnosticLora other) {
        if (other == maxpb.MaxpbDebug.DiagnosticLora.getDefaultInstance()) return this;
        if (other.hasTxP2PPackets()) {
          setTxP2PPackets(other.getTxP2PPackets());
        }
        if (other.hasTxWanPackets()) {
          setTxWanPackets(other.getTxWanPackets());
        }
        if (other.hasRxWanAckPackets()) {
          setRxWanAckPackets(other.getRxWanAckPackets());
        }
        if (other.hasTxInterval()) {
          setTxInterval(other.getTxInterval());
        }
        if (other.hasRxInterval()) {
          setRxInterval(other.getRxInterval());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        maxpb.MaxpbDebug.DiagnosticLora parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (maxpb.MaxpbDebug.DiagnosticLora) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int txP2PPackets_ ;
      /**
       * <code>optional uint32 txP2pPackets = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public boolean hasTxP2PPackets() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint32 txP2pPackets = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public int getTxP2PPackets() {
        return txP2PPackets_;
      }
      /**
       * <code>optional uint32 txP2pPackets = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public Builder setTxP2PPackets(int value) {
        bitField0_ |= 0x00000001;
        txP2PPackets_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 txP2pPackets = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public Builder clearTxP2PPackets() {
        bitField0_ = (bitField0_ & ~0x00000001);
        txP2PPackets_ = 0;
        onChanged();
        return this;
      }

      private int txWanPackets_ ;
      /**
       * <code>optional uint32 txWanPackets = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public boolean hasTxWanPackets() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional uint32 txWanPackets = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public int getTxWanPackets() {
        return txWanPackets_;
      }
      /**
       * <code>optional uint32 txWanPackets = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public Builder setTxWanPackets(int value) {
        bitField0_ |= 0x00000002;
        txWanPackets_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 txWanPackets = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public Builder clearTxWanPackets() {
        bitField0_ = (bitField0_ & ~0x00000002);
        txWanPackets_ = 0;
        onChanged();
        return this;
      }

      private int rxWanAckPackets_ ;
      /**
       * <code>optional uint32 rxWanAckPackets = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public boolean hasRxWanAckPackets() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional uint32 rxWanAckPackets = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public int getRxWanAckPackets() {
        return rxWanAckPackets_;
      }
      /**
       * <code>optional uint32 rxWanAckPackets = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public Builder setRxWanAckPackets(int value) {
        bitField0_ |= 0x00000004;
        rxWanAckPackets_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 rxWanAckPackets = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public Builder clearRxWanAckPackets() {
        bitField0_ = (bitField0_ & ~0x00000004);
        rxWanAckPackets_ = 0;
        onChanged();
        return this;
      }

      private int txInterval_ ;
      /**
       * <code>optional uint32 txInterval = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public boolean hasTxInterval() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional uint32 txInterval = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public int getTxInterval() {
        return txInterval_;
      }
      /**
       * <code>optional uint32 txInterval = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder setTxInterval(int value) {
        bitField0_ |= 0x00000008;
        txInterval_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 txInterval = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder clearTxInterval() {
        bitField0_ = (bitField0_ & ~0x00000008);
        txInterval_ = 0;
        onChanged();
        return this;
      }

      private int rxInterval_ ;
      /**
       * <code>optional uint32 rxInterval = 5;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public boolean hasRxInterval() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional uint32 rxInterval = 5;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public int getRxInterval() {
        return rxInterval_;
      }
      /**
       * <code>optional uint32 rxInterval = 5;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder setRxInterval(int value) {
        bitField0_ |= 0x00000010;
        rxInterval_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 rxInterval = 5;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder clearRxInterval() {
        bitField0_ = (bitField0_ & ~0x00000010);
        rxInterval_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:maxpb.DiagnosticLora)
    }

    static {
      defaultInstance = new DiagnosticLora(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:maxpb.DiagnosticLora)
  }

  public interface DiagnosticZigbeeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:maxpb.DiagnosticZigbee)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional uint32 txPackets = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    boolean hasTxPackets();
    /**
     * <code>optional uint32 txPackets = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    int getTxPackets();

    /**
     * <code>optional uint32 rxPackets = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    boolean hasRxPackets();
    /**
     * <code>optional uint32 rxPackets = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    int getRxPackets();

    /**
     * <code>optional uint32 txInterval = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    boolean hasTxInterval();
    /**
     * <code>optional uint32 txInterval = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    int getTxInterval();

    /**
     * <code>optional uint32 rxInterval = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    boolean hasRxInterval();
    /**
     * <code>optional uint32 rxInterval = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    int getRxInterval();
  }
  /**
   * Protobuf type {@code maxpb.DiagnosticZigbee}
   *
   * <pre>
   *&#47;&#64;exclude
   * </pre>
   */
  public static final class DiagnosticZigbee extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:maxpb.DiagnosticZigbee)
      DiagnosticZigbeeOrBuilder {
    // Use DiagnosticZigbee.newBuilder() to construct.
    private DiagnosticZigbee(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private DiagnosticZigbee(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final DiagnosticZigbee defaultInstance;
    public static DiagnosticZigbee getDefaultInstance() {
      return defaultInstance;
    }

    public DiagnosticZigbee getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private DiagnosticZigbee(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              txPackets_ = input.readUInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              rxPackets_ = input.readUInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              txInterval_ = input.readUInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              rxInterval_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return maxpb.MaxpbDebug.internal_static_maxpb_DiagnosticZigbee_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return maxpb.MaxpbDebug.internal_static_maxpb_DiagnosticZigbee_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              maxpb.MaxpbDebug.DiagnosticZigbee.class, maxpb.MaxpbDebug.DiagnosticZigbee.Builder.class);
    }

    public static com.google.protobuf.Parser<DiagnosticZigbee> PARSER =
        new com.google.protobuf.AbstractParser<DiagnosticZigbee>() {
      public DiagnosticZigbee parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new DiagnosticZigbee(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<DiagnosticZigbee> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int TXPACKETS_FIELD_NUMBER = 1;
    private int txPackets_;
    /**
     * <code>optional uint32 txPackets = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    public boolean hasTxPackets() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional uint32 txPackets = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    public int getTxPackets() {
      return txPackets_;
    }

    public static final int RXPACKETS_FIELD_NUMBER = 2;
    private int rxPackets_;
    /**
     * <code>optional uint32 rxPackets = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    public boolean hasRxPackets() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional uint32 rxPackets = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy:
     * </pre>
     */
    public int getRxPackets() {
      return rxPackets_;
    }

    public static final int TXINTERVAL_FIELD_NUMBER = 3;
    private int txInterval_;
    /**
     * <code>optional uint32 txInterval = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public boolean hasTxInterval() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional uint32 txInterval = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public int getTxInterval() {
      return txInterval_;
    }

    public static final int RXINTERVAL_FIELD_NUMBER = 4;
    private int rxInterval_;
    /**
     * <code>optional uint32 rxInterval = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public boolean hasRxInterval() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional uint32 rxInterval = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public int getRxInterval() {
      return rxInterval_;
    }

    private void initFields() {
      txPackets_ = 0;
      rxPackets_ = 0;
      txInterval_ = 0;
      rxInterval_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, txPackets_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, rxPackets_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(3, txInterval_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeUInt32(4, rxInterval_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, txPackets_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, rxPackets_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, txInterval_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, rxInterval_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static maxpb.MaxpbDebug.DiagnosticZigbee parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static maxpb.MaxpbDebug.DiagnosticZigbee parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static maxpb.MaxpbDebug.DiagnosticZigbee parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static maxpb.MaxpbDebug.DiagnosticZigbee parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static maxpb.MaxpbDebug.DiagnosticZigbee parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static maxpb.MaxpbDebug.DiagnosticZigbee parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static maxpb.MaxpbDebug.DiagnosticZigbee parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static maxpb.MaxpbDebug.DiagnosticZigbee parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static maxpb.MaxpbDebug.DiagnosticZigbee parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static maxpb.MaxpbDebug.DiagnosticZigbee parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(maxpb.MaxpbDebug.DiagnosticZigbee prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code maxpb.DiagnosticZigbee}
     *
     * <pre>
     *&#47;&#64;exclude
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:maxpb.DiagnosticZigbee)
        maxpb.MaxpbDebug.DiagnosticZigbeeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return maxpb.MaxpbDebug.internal_static_maxpb_DiagnosticZigbee_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return maxpb.MaxpbDebug.internal_static_maxpb_DiagnosticZigbee_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                maxpb.MaxpbDebug.DiagnosticZigbee.class, maxpb.MaxpbDebug.DiagnosticZigbee.Builder.class);
      }

      // Construct using maxpb.MaxpbDebug.DiagnosticZigbee.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        txPackets_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        rxPackets_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        txInterval_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        rxInterval_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return maxpb.MaxpbDebug.internal_static_maxpb_DiagnosticZigbee_descriptor;
      }

      public maxpb.MaxpbDebug.DiagnosticZigbee getDefaultInstanceForType() {
        return maxpb.MaxpbDebug.DiagnosticZigbee.getDefaultInstance();
      }

      public maxpb.MaxpbDebug.DiagnosticZigbee build() {
        maxpb.MaxpbDebug.DiagnosticZigbee result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public maxpb.MaxpbDebug.DiagnosticZigbee buildPartial() {
        maxpb.MaxpbDebug.DiagnosticZigbee result = new maxpb.MaxpbDebug.DiagnosticZigbee(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.txPackets_ = txPackets_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.rxPackets_ = rxPackets_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.txInterval_ = txInterval_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.rxInterval_ = rxInterval_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof maxpb.MaxpbDebug.DiagnosticZigbee) {
          return mergeFrom((maxpb.MaxpbDebug.DiagnosticZigbee)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(maxpb.MaxpbDebug.DiagnosticZigbee other) {
        if (other == maxpb.MaxpbDebug.DiagnosticZigbee.getDefaultInstance()) return this;
        if (other.hasTxPackets()) {
          setTxPackets(other.getTxPackets());
        }
        if (other.hasRxPackets()) {
          setRxPackets(other.getRxPackets());
        }
        if (other.hasTxInterval()) {
          setTxInterval(other.getTxInterval());
        }
        if (other.hasRxInterval()) {
          setRxInterval(other.getRxInterval());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        maxpb.MaxpbDebug.DiagnosticZigbee parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (maxpb.MaxpbDebug.DiagnosticZigbee) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int txPackets_ ;
      /**
       * <code>optional uint32 txPackets = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy:
       * </pre>
       */
      public boolean hasTxPackets() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint32 txPackets = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy:
       * </pre>
       */
      public int getTxPackets() {
        return txPackets_;
      }
      /**
       * <code>optional uint32 txPackets = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy:
       * </pre>
       */
      public Builder setTxPackets(int value) {
        bitField0_ |= 0x00000001;
        txPackets_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 txPackets = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy:
       * </pre>
       */
      public Builder clearTxPackets() {
        bitField0_ = (bitField0_ & ~0x00000001);
        txPackets_ = 0;
        onChanged();
        return this;
      }

      private int rxPackets_ ;
      /**
       * <code>optional uint32 rxPackets = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy:
       * </pre>
       */
      public boolean hasRxPackets() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional uint32 rxPackets = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy:
       * </pre>
       */
      public int getRxPackets() {
        return rxPackets_;
      }
      /**
       * <code>optional uint32 rxPackets = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy:
       * </pre>
       */
      public Builder setRxPackets(int value) {
        bitField0_ |= 0x00000002;
        rxPackets_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 rxPackets = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy:
       * </pre>
       */
      public Builder clearRxPackets() {
        bitField0_ = (bitField0_ & ~0x00000002);
        rxPackets_ = 0;
        onChanged();
        return this;
      }

      private int txInterval_ ;
      /**
       * <code>optional uint32 txInterval = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public boolean hasTxInterval() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional uint32 txInterval = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public int getTxInterval() {
        return txInterval_;
      }
      /**
       * <code>optional uint32 txInterval = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder setTxInterval(int value) {
        bitField0_ |= 0x00000004;
        txInterval_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 txInterval = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder clearTxInterval() {
        bitField0_ = (bitField0_ & ~0x00000004);
        txInterval_ = 0;
        onChanged();
        return this;
      }

      private int rxInterval_ ;
      /**
       * <code>optional uint32 rxInterval = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public boolean hasRxInterval() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional uint32 rxInterval = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public int getRxInterval() {
        return rxInterval_;
      }
      /**
       * <code>optional uint32 rxInterval = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder setRxInterval(int value) {
        bitField0_ |= 0x00000008;
        rxInterval_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 rxInterval = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder clearRxInterval() {
        bitField0_ = (bitField0_ & ~0x00000008);
        rxInterval_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:maxpb.DiagnosticZigbee)
    }

    static {
      defaultInstance = new DiagnosticZigbee(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:maxpb.DiagnosticZigbee)
  }

  public interface DiagnosticBatteryOrBuilder extends
      // @@protoc_insertion_point(interface_extends:maxpb.DiagnosticBattery)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional uint32 cyclesQty = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    boolean hasCyclesQty();
    /**
     * <code>optional uint32 cyclesQty = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    int getCyclesQty();

    /**
     * <code>optional uint32 intervalUseFromLastCharge = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    boolean hasIntervalUseFromLastCharge();
    /**
     * <code>optional uint32 intervalUseFromLastCharge = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    int getIntervalUseFromLastCharge();

    /**
     * <code>optional uint32 intervalTotalUse = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    boolean hasIntervalTotalUse();
    /**
     * <code>optional uint32 intervalTotalUse = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    int getIntervalTotalUse();

    /**
     * <code>optional uint32 intervalCharging = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasIntervalCharging();
    /**
     * <code>optional uint32 intervalCharging = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    int getIntervalCharging();

    /**
     * <code>optional uint32 intervalFull = 5;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    boolean hasIntervalFull();
    /**
     * <code>optional uint32 intervalFull = 5;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    int getIntervalFull();

    /**
     * <code>optional uint32 intervalFail = 6;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    boolean hasIntervalFail();
    /**
     * <code>optional uint32 intervalFail = 6;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    int getIntervalFail();
  }
  /**
   * Protobuf type {@code maxpb.DiagnosticBattery}
   *
   * <pre>
   *&#47;&#64;exclude
   * </pre>
   */
  public static final class DiagnosticBattery extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:maxpb.DiagnosticBattery)
      DiagnosticBatteryOrBuilder {
    // Use DiagnosticBattery.newBuilder() to construct.
    private DiagnosticBattery(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private DiagnosticBattery(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final DiagnosticBattery defaultInstance;
    public static DiagnosticBattery getDefaultInstance() {
      return defaultInstance;
    }

    public DiagnosticBattery getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private DiagnosticBattery(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              cyclesQty_ = input.readUInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              intervalUseFromLastCharge_ = input.readUInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              intervalTotalUse_ = input.readUInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              intervalCharging_ = input.readUInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              intervalFull_ = input.readUInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              intervalFail_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return maxpb.MaxpbDebug.internal_static_maxpb_DiagnosticBattery_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return maxpb.MaxpbDebug.internal_static_maxpb_DiagnosticBattery_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              maxpb.MaxpbDebug.DiagnosticBattery.class, maxpb.MaxpbDebug.DiagnosticBattery.Builder.class);
    }

    public static com.google.protobuf.Parser<DiagnosticBattery> PARSER =
        new com.google.protobuf.AbstractParser<DiagnosticBattery>() {
      public DiagnosticBattery parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new DiagnosticBattery(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<DiagnosticBattery> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int CYCLESQTY_FIELD_NUMBER = 1;
    private int cyclesQty_;
    /**
     * <code>optional uint32 cyclesQty = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    public boolean hasCyclesQty() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional uint32 cyclesQty = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    public int getCyclesQty() {
      return cyclesQty_;
    }

    public static final int INTERVALUSEFROMLASTCHARGE_FIELD_NUMBER = 2;
    private int intervalUseFromLastCharge_;
    /**
     * <code>optional uint32 intervalUseFromLastCharge = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    public boolean hasIntervalUseFromLastCharge() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional uint32 intervalUseFromLastCharge = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    public int getIntervalUseFromLastCharge() {
      return intervalUseFromLastCharge_;
    }

    public static final int INTERVALTOTALUSE_FIELD_NUMBER = 3;
    private int intervalTotalUse_;
    /**
     * <code>optional uint32 intervalTotalUse = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    public boolean hasIntervalTotalUse() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional uint32 intervalTotalUse = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    public int getIntervalTotalUse() {
      return intervalTotalUse_;
    }

    public static final int INTERVALCHARGING_FIELD_NUMBER = 4;
    private int intervalCharging_;
    /**
     * <code>optional uint32 intervalCharging = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasIntervalCharging() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional uint32 intervalCharging = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public int getIntervalCharging() {
      return intervalCharging_;
    }

    public static final int INTERVALFULL_FIELD_NUMBER = 5;
    private int intervalFull_;
    /**
     * <code>optional uint32 intervalFull = 5;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public boolean hasIntervalFull() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional uint32 intervalFull = 5;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public int getIntervalFull() {
      return intervalFull_;
    }

    public static final int INTERVALFAIL_FIELD_NUMBER = 6;
    private int intervalFail_;
    /**
     * <code>optional uint32 intervalFail = 6;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public boolean hasIntervalFail() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional uint32 intervalFail = 6;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public int getIntervalFail() {
      return intervalFail_;
    }

    private void initFields() {
      cyclesQty_ = 0;
      intervalUseFromLastCharge_ = 0;
      intervalTotalUse_ = 0;
      intervalCharging_ = 0;
      intervalFull_ = 0;
      intervalFail_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, cyclesQty_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, intervalUseFromLastCharge_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(3, intervalTotalUse_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeUInt32(4, intervalCharging_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeUInt32(5, intervalFull_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeUInt32(6, intervalFail_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, cyclesQty_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, intervalUseFromLastCharge_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, intervalTotalUse_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, intervalCharging_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(5, intervalFull_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(6, intervalFail_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static maxpb.MaxpbDebug.DiagnosticBattery parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static maxpb.MaxpbDebug.DiagnosticBattery parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static maxpb.MaxpbDebug.DiagnosticBattery parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static maxpb.MaxpbDebug.DiagnosticBattery parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static maxpb.MaxpbDebug.DiagnosticBattery parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static maxpb.MaxpbDebug.DiagnosticBattery parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static maxpb.MaxpbDebug.DiagnosticBattery parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static maxpb.MaxpbDebug.DiagnosticBattery parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static maxpb.MaxpbDebug.DiagnosticBattery parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static maxpb.MaxpbDebug.DiagnosticBattery parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(maxpb.MaxpbDebug.DiagnosticBattery prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code maxpb.DiagnosticBattery}
     *
     * <pre>
     *&#47;&#64;exclude
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:maxpb.DiagnosticBattery)
        maxpb.MaxpbDebug.DiagnosticBatteryOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return maxpb.MaxpbDebug.internal_static_maxpb_DiagnosticBattery_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return maxpb.MaxpbDebug.internal_static_maxpb_DiagnosticBattery_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                maxpb.MaxpbDebug.DiagnosticBattery.class, maxpb.MaxpbDebug.DiagnosticBattery.Builder.class);
      }

      // Construct using maxpb.MaxpbDebug.DiagnosticBattery.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        cyclesQty_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        intervalUseFromLastCharge_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        intervalTotalUse_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        intervalCharging_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        intervalFull_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        intervalFail_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return maxpb.MaxpbDebug.internal_static_maxpb_DiagnosticBattery_descriptor;
      }

      public maxpb.MaxpbDebug.DiagnosticBattery getDefaultInstanceForType() {
        return maxpb.MaxpbDebug.DiagnosticBattery.getDefaultInstance();
      }

      public maxpb.MaxpbDebug.DiagnosticBattery build() {
        maxpb.MaxpbDebug.DiagnosticBattery result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public maxpb.MaxpbDebug.DiagnosticBattery buildPartial() {
        maxpb.MaxpbDebug.DiagnosticBattery result = new maxpb.MaxpbDebug.DiagnosticBattery(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.cyclesQty_ = cyclesQty_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.intervalUseFromLastCharge_ = intervalUseFromLastCharge_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.intervalTotalUse_ = intervalTotalUse_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.intervalCharging_ = intervalCharging_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.intervalFull_ = intervalFull_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.intervalFail_ = intervalFail_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof maxpb.MaxpbDebug.DiagnosticBattery) {
          return mergeFrom((maxpb.MaxpbDebug.DiagnosticBattery)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(maxpb.MaxpbDebug.DiagnosticBattery other) {
        if (other == maxpb.MaxpbDebug.DiagnosticBattery.getDefaultInstance()) return this;
        if (other.hasCyclesQty()) {
          setCyclesQty(other.getCyclesQty());
        }
        if (other.hasIntervalUseFromLastCharge()) {
          setIntervalUseFromLastCharge(other.getIntervalUseFromLastCharge());
        }
        if (other.hasIntervalTotalUse()) {
          setIntervalTotalUse(other.getIntervalTotalUse());
        }
        if (other.hasIntervalCharging()) {
          setIntervalCharging(other.getIntervalCharging());
        }
        if (other.hasIntervalFull()) {
          setIntervalFull(other.getIntervalFull());
        }
        if (other.hasIntervalFail()) {
          setIntervalFail(other.getIntervalFail());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        maxpb.MaxpbDebug.DiagnosticBattery parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (maxpb.MaxpbDebug.DiagnosticBattery) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int cyclesQty_ ;
      /**
       * <code>optional uint32 cyclesQty = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public boolean hasCyclesQty() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint32 cyclesQty = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public int getCyclesQty() {
        return cyclesQty_;
      }
      /**
       * <code>optional uint32 cyclesQty = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public Builder setCyclesQty(int value) {
        bitField0_ |= 0x00000001;
        cyclesQty_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 cyclesQty = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public Builder clearCyclesQty() {
        bitField0_ = (bitField0_ & ~0x00000001);
        cyclesQty_ = 0;
        onChanged();
        return this;
      }

      private int intervalUseFromLastCharge_ ;
      /**
       * <code>optional uint32 intervalUseFromLastCharge = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public boolean hasIntervalUseFromLastCharge() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional uint32 intervalUseFromLastCharge = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public int getIntervalUseFromLastCharge() {
        return intervalUseFromLastCharge_;
      }
      /**
       * <code>optional uint32 intervalUseFromLastCharge = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public Builder setIntervalUseFromLastCharge(int value) {
        bitField0_ |= 0x00000002;
        intervalUseFromLastCharge_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 intervalUseFromLastCharge = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public Builder clearIntervalUseFromLastCharge() {
        bitField0_ = (bitField0_ & ~0x00000002);
        intervalUseFromLastCharge_ = 0;
        onChanged();
        return this;
      }

      private int intervalTotalUse_ ;
      /**
       * <code>optional uint32 intervalTotalUse = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public boolean hasIntervalTotalUse() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional uint32 intervalTotalUse = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public int getIntervalTotalUse() {
        return intervalTotalUse_;
      }
      /**
       * <code>optional uint32 intervalTotalUse = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public Builder setIntervalTotalUse(int value) {
        bitField0_ |= 0x00000004;
        intervalTotalUse_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 intervalTotalUse = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public Builder clearIntervalTotalUse() {
        bitField0_ = (bitField0_ & ~0x00000004);
        intervalTotalUse_ = 0;
        onChanged();
        return this;
      }

      private int intervalCharging_ ;
      /**
       * <code>optional uint32 intervalCharging = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasIntervalCharging() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional uint32 intervalCharging = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public int getIntervalCharging() {
        return intervalCharging_;
      }
      /**
       * <code>optional uint32 intervalCharging = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setIntervalCharging(int value) {
        bitField0_ |= 0x00000008;
        intervalCharging_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 intervalCharging = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearIntervalCharging() {
        bitField0_ = (bitField0_ & ~0x00000008);
        intervalCharging_ = 0;
        onChanged();
        return this;
      }

      private int intervalFull_ ;
      /**
       * <code>optional uint32 intervalFull = 5;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public boolean hasIntervalFull() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional uint32 intervalFull = 5;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public int getIntervalFull() {
        return intervalFull_;
      }
      /**
       * <code>optional uint32 intervalFull = 5;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder setIntervalFull(int value) {
        bitField0_ |= 0x00000010;
        intervalFull_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 intervalFull = 5;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder clearIntervalFull() {
        bitField0_ = (bitField0_ & ~0x00000010);
        intervalFull_ = 0;
        onChanged();
        return this;
      }

      private int intervalFail_ ;
      /**
       * <code>optional uint32 intervalFail = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public boolean hasIntervalFail() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional uint32 intervalFail = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public int getIntervalFail() {
        return intervalFail_;
      }
      /**
       * <code>optional uint32 intervalFail = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder setIntervalFail(int value) {
        bitField0_ |= 0x00000020;
        intervalFail_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 intervalFail = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162
       * </pre>
       */
      public Builder clearIntervalFail() {
        bitField0_ = (bitField0_ & ~0x00000020);
        intervalFail_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:maxpb.DiagnosticBattery)
    }

    static {
      defaultInstance = new DiagnosticBattery(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:maxpb.DiagnosticBattery)
  }

  public interface DiagnosticTelemetryOrBuilder extends
      // @@protoc_insertion_point(interface_extends:maxpb.DiagnosticTelemetry)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional uint32 intervalMoving = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    boolean hasIntervalMoving();
    /**
     * <code>optional uint32 intervalMoving = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    int getIntervalMoving();

    /**
     * <code>optional uint32 intervalStopped = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    boolean hasIntervalStopped();
    /**
     * <code>optional uint32 intervalStopped = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    int getIntervalStopped();

    /**
     * <code>optional uint32 moveToStopQty = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    boolean hasMoveToStopQty();
    /**
     * <code>optional uint32 moveToStopQty = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    int getMoveToStopQty();

    /**
     * <code>optional uint32 stopToMoveQty = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    boolean hasStopToMoveQty();
    /**
     * <code>optional uint32 stopToMoveQty = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    int getStopToMoveQty();
  }
  /**
   * Protobuf type {@code maxpb.DiagnosticTelemetry}
   *
   * <pre>
   *&#47;&#64;exclude
   * </pre>
   */
  public static final class DiagnosticTelemetry extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:maxpb.DiagnosticTelemetry)
      DiagnosticTelemetryOrBuilder {
    // Use DiagnosticTelemetry.newBuilder() to construct.
    private DiagnosticTelemetry(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private DiagnosticTelemetry(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final DiagnosticTelemetry defaultInstance;
    public static DiagnosticTelemetry getDefaultInstance() {
      return defaultInstance;
    }

    public DiagnosticTelemetry getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private DiagnosticTelemetry(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              intervalMoving_ = input.readUInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              intervalStopped_ = input.readUInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              moveToStopQty_ = input.readUInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              stopToMoveQty_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return maxpb.MaxpbDebug.internal_static_maxpb_DiagnosticTelemetry_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return maxpb.MaxpbDebug.internal_static_maxpb_DiagnosticTelemetry_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              maxpb.MaxpbDebug.DiagnosticTelemetry.class, maxpb.MaxpbDebug.DiagnosticTelemetry.Builder.class);
    }

    public static com.google.protobuf.Parser<DiagnosticTelemetry> PARSER =
        new com.google.protobuf.AbstractParser<DiagnosticTelemetry>() {
      public DiagnosticTelemetry parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new DiagnosticTelemetry(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<DiagnosticTelemetry> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int INTERVALMOVING_FIELD_NUMBER = 1;
    private int intervalMoving_;
    /**
     * <code>optional uint32 intervalMoving = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    public boolean hasIntervalMoving() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional uint32 intervalMoving = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    public int getIntervalMoving() {
      return intervalMoving_;
    }

    public static final int INTERVALSTOPPED_FIELD_NUMBER = 2;
    private int intervalStopped_;
    /**
     * <code>optional uint32 intervalStopped = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    public boolean hasIntervalStopped() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional uint32 intervalStopped = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    public int getIntervalStopped() {
      return intervalStopped_;
    }

    public static final int MOVETOSTOPQTY_FIELD_NUMBER = 3;
    private int moveToStopQty_;
    /**
     * <code>optional uint32 moveToStopQty = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    public boolean hasMoveToStopQty() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional uint32 moveToStopQty = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    public int getMoveToStopQty() {
      return moveToStopQty_;
    }

    public static final int STOPTOMOVEQTY_FIELD_NUMBER = 4;
    private int stopToMoveQty_;
    /**
     * <code>optional uint32 stopToMoveQty = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    public boolean hasStopToMoveQty() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional uint32 stopToMoveQty = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    public int getStopToMoveQty() {
      return stopToMoveQty_;
    }

    private void initFields() {
      intervalMoving_ = 0;
      intervalStopped_ = 0;
      moveToStopQty_ = 0;
      stopToMoveQty_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, intervalMoving_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, intervalStopped_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(3, moveToStopQty_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeUInt32(4, stopToMoveQty_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, intervalMoving_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, intervalStopped_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, moveToStopQty_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, stopToMoveQty_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static maxpb.MaxpbDebug.DiagnosticTelemetry parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static maxpb.MaxpbDebug.DiagnosticTelemetry parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static maxpb.MaxpbDebug.DiagnosticTelemetry parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static maxpb.MaxpbDebug.DiagnosticTelemetry parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static maxpb.MaxpbDebug.DiagnosticTelemetry parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static maxpb.MaxpbDebug.DiagnosticTelemetry parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static maxpb.MaxpbDebug.DiagnosticTelemetry parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static maxpb.MaxpbDebug.DiagnosticTelemetry parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static maxpb.MaxpbDebug.DiagnosticTelemetry parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static maxpb.MaxpbDebug.DiagnosticTelemetry parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(maxpb.MaxpbDebug.DiagnosticTelemetry prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code maxpb.DiagnosticTelemetry}
     *
     * <pre>
     *&#47;&#64;exclude
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:maxpb.DiagnosticTelemetry)
        maxpb.MaxpbDebug.DiagnosticTelemetryOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return maxpb.MaxpbDebug.internal_static_maxpb_DiagnosticTelemetry_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return maxpb.MaxpbDebug.internal_static_maxpb_DiagnosticTelemetry_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                maxpb.MaxpbDebug.DiagnosticTelemetry.class, maxpb.MaxpbDebug.DiagnosticTelemetry.Builder.class);
      }

      // Construct using maxpb.MaxpbDebug.DiagnosticTelemetry.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        intervalMoving_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        intervalStopped_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        moveToStopQty_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        stopToMoveQty_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return maxpb.MaxpbDebug.internal_static_maxpb_DiagnosticTelemetry_descriptor;
      }

      public maxpb.MaxpbDebug.DiagnosticTelemetry getDefaultInstanceForType() {
        return maxpb.MaxpbDebug.DiagnosticTelemetry.getDefaultInstance();
      }

      public maxpb.MaxpbDebug.DiagnosticTelemetry build() {
        maxpb.MaxpbDebug.DiagnosticTelemetry result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public maxpb.MaxpbDebug.DiagnosticTelemetry buildPartial() {
        maxpb.MaxpbDebug.DiagnosticTelemetry result = new maxpb.MaxpbDebug.DiagnosticTelemetry(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.intervalMoving_ = intervalMoving_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.intervalStopped_ = intervalStopped_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.moveToStopQty_ = moveToStopQty_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.stopToMoveQty_ = stopToMoveQty_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof maxpb.MaxpbDebug.DiagnosticTelemetry) {
          return mergeFrom((maxpb.MaxpbDebug.DiagnosticTelemetry)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(maxpb.MaxpbDebug.DiagnosticTelemetry other) {
        if (other == maxpb.MaxpbDebug.DiagnosticTelemetry.getDefaultInstance()) return this;
        if (other.hasIntervalMoving()) {
          setIntervalMoving(other.getIntervalMoving());
        }
        if (other.hasIntervalStopped()) {
          setIntervalStopped(other.getIntervalStopped());
        }
        if (other.hasMoveToStopQty()) {
          setMoveToStopQty(other.getMoveToStopQty());
        }
        if (other.hasStopToMoveQty()) {
          setStopToMoveQty(other.getStopToMoveQty());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        maxpb.MaxpbDebug.DiagnosticTelemetry parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (maxpb.MaxpbDebug.DiagnosticTelemetry) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int intervalMoving_ ;
      /**
       * <code>optional uint32 intervalMoving = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public boolean hasIntervalMoving() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint32 intervalMoving = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public int getIntervalMoving() {
        return intervalMoving_;
      }
      /**
       * <code>optional uint32 intervalMoving = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public Builder setIntervalMoving(int value) {
        bitField0_ |= 0x00000001;
        intervalMoving_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 intervalMoving = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public Builder clearIntervalMoving() {
        bitField0_ = (bitField0_ & ~0x00000001);
        intervalMoving_ = 0;
        onChanged();
        return this;
      }

      private int intervalStopped_ ;
      /**
       * <code>optional uint32 intervalStopped = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public boolean hasIntervalStopped() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional uint32 intervalStopped = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public int getIntervalStopped() {
        return intervalStopped_;
      }
      /**
       * <code>optional uint32 intervalStopped = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public Builder setIntervalStopped(int value) {
        bitField0_ |= 0x00000002;
        intervalStopped_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 intervalStopped = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public Builder clearIntervalStopped() {
        bitField0_ = (bitField0_ & ~0x00000002);
        intervalStopped_ = 0;
        onChanged();
        return this;
      }

      private int moveToStopQty_ ;
      /**
       * <code>optional uint32 moveToStopQty = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public boolean hasMoveToStopQty() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional uint32 moveToStopQty = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public int getMoveToStopQty() {
        return moveToStopQty_;
      }
      /**
       * <code>optional uint32 moveToStopQty = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public Builder setMoveToStopQty(int value) {
        bitField0_ |= 0x00000004;
        moveToStopQty_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 moveToStopQty = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public Builder clearMoveToStopQty() {
        bitField0_ = (bitField0_ & ~0x00000004);
        moveToStopQty_ = 0;
        onChanged();
        return this;
      }

      private int stopToMoveQty_ ;
      /**
       * <code>optional uint32 stopToMoveQty = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public boolean hasStopToMoveQty() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional uint32 stopToMoveQty = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public int getStopToMoveQty() {
        return stopToMoveQty_;
      }
      /**
       * <code>optional uint32 stopToMoveQty = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public Builder setStopToMoveQty(int value) {
        bitField0_ |= 0x00000008;
        stopToMoveQty_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 stopToMoveQty = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public Builder clearStopToMoveQty() {
        bitField0_ = (bitField0_ & ~0x00000008);
        stopToMoveQty_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:maxpb.DiagnosticTelemetry)
    }

    static {
      defaultInstance = new DiagnosticTelemetry(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:maxpb.DiagnosticTelemetry)
  }

  public interface DiagnosticResetOrBuilder extends
      // @@protoc_insertion_point(interface_extends:maxpb.DiagnosticReset)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional uint32 resetQty = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    boolean hasResetQty();
    /**
     * <code>optional uint32 resetQty = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    int getResetQty();

    /**
     * <code>optional .maxpb.ResetReason lastResetReason = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    boolean hasLastResetReason();
    /**
     * <code>optional .maxpb.ResetReason lastResetReason = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    maxpb.MaxpbDebug.ResetReason getLastResetReason();

    /**
     * <code>optional uint64 lastResetStamp = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    boolean hasLastResetStamp();
    /**
     * <code>optional uint64 lastResetStamp = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    long getLastResetStamp();

    /**
     * <code>optional uint32 lastResetID = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    boolean hasLastResetID();
    /**
     * <code>optional uint32 lastResetID = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    int getLastResetID();

    /**
     * <code>optional uint32 lastResetFileNumber = 5;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    boolean hasLastResetFileNumber();
    /**
     * <code>optional uint32 lastResetFileNumber = 5;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    int getLastResetFileNumber();

    /**
     * <code>optional string lastResetFileName = 6;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    boolean hasLastResetFileName();
    /**
     * <code>optional string lastResetFileName = 6;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    java.lang.String getLastResetFileName();
    /**
     * <code>optional string lastResetFileName = 6;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    com.google.protobuf.ByteString
        getLastResetFileNameBytes();

    /**
     * <code>optional uint32 lastResetLineNumber = 7;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    boolean hasLastResetLineNumber();
    /**
     * <code>optional uint32 lastResetLineNumber = 7;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    int getLastResetLineNumber();
  }
  /**
   * Protobuf type {@code maxpb.DiagnosticReset}
   *
   * <pre>
   *&#47;&#64;exclude
   * </pre>
   */
  public static final class DiagnosticReset extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:maxpb.DiagnosticReset)
      DiagnosticResetOrBuilder {
    // Use DiagnosticReset.newBuilder() to construct.
    private DiagnosticReset(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private DiagnosticReset(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final DiagnosticReset defaultInstance;
    public static DiagnosticReset getDefaultInstance() {
      return defaultInstance;
    }

    public DiagnosticReset getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private DiagnosticReset(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              resetQty_ = input.readUInt32();
              break;
            }
            case 16: {
              int rawValue = input.readEnum();
              maxpb.MaxpbDebug.ResetReason value = maxpb.MaxpbDebug.ResetReason.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(2, rawValue);
              } else {
                bitField0_ |= 0x00000002;
                lastResetReason_ = value;
              }
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              lastResetStamp_ = input.readUInt64();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              lastResetID_ = input.readUInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              lastResetFileNumber_ = input.readUInt32();
              break;
            }
            case 50: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000020;
              lastResetFileName_ = bs;
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              lastResetLineNumber_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return maxpb.MaxpbDebug.internal_static_maxpb_DiagnosticReset_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return maxpb.MaxpbDebug.internal_static_maxpb_DiagnosticReset_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              maxpb.MaxpbDebug.DiagnosticReset.class, maxpb.MaxpbDebug.DiagnosticReset.Builder.class);
    }

    public static com.google.protobuf.Parser<DiagnosticReset> PARSER =
        new com.google.protobuf.AbstractParser<DiagnosticReset>() {
      public DiagnosticReset parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new DiagnosticReset(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<DiagnosticReset> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int RESETQTY_FIELD_NUMBER = 1;
    private int resetQty_;
    /**
     * <code>optional uint32 resetQty = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    public boolean hasResetQty() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional uint32 resetQty = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    public int getResetQty() {
      return resetQty_;
    }

    public static final int LASTRESETREASON_FIELD_NUMBER = 2;
    private maxpb.MaxpbDebug.ResetReason lastResetReason_;
    /**
     * <code>optional .maxpb.ResetReason lastResetReason = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    public boolean hasLastResetReason() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional .maxpb.ResetReason lastResetReason = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    public maxpb.MaxpbDebug.ResetReason getLastResetReason() {
      return lastResetReason_;
    }

    public static final int LASTRESETSTAMP_FIELD_NUMBER = 3;
    private long lastResetStamp_;
    /**
     * <code>optional uint64 lastResetStamp = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    public boolean hasLastResetStamp() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional uint64 lastResetStamp = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    public long getLastResetStamp() {
      return lastResetStamp_;
    }

    public static final int LASTRESETID_FIELD_NUMBER = 4;
    private int lastResetID_;
    /**
     * <code>optional uint32 lastResetID = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    public boolean hasLastResetID() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional uint32 lastResetID = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    public int getLastResetID() {
      return lastResetID_;
    }

    public static final int LASTRESETFILENUMBER_FIELD_NUMBER = 5;
    private int lastResetFileNumber_;
    /**
     * <code>optional uint32 lastResetFileNumber = 5;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    public boolean hasLastResetFileNumber() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional uint32 lastResetFileNumber = 5;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    public int getLastResetFileNumber() {
      return lastResetFileNumber_;
    }

    public static final int LASTRESETFILENAME_FIELD_NUMBER = 6;
    private java.lang.Object lastResetFileName_;
    /**
     * <code>optional string lastResetFileName = 6;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public boolean hasLastResetFileName() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional string lastResetFileName = 6;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public java.lang.String getLastResetFileName() {
      java.lang.Object ref = lastResetFileName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          lastResetFileName_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string lastResetFileName = 6;</code>
     *
     * <pre>
     *&#47; SupportedBy: 
     * </pre>
     */
    public com.google.protobuf.ByteString
        getLastResetFileNameBytes() {
      java.lang.Object ref = lastResetFileName_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        lastResetFileName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int LASTRESETLINENUMBER_FIELD_NUMBER = 7;
    private int lastResetLineNumber_;
    /**
     * <code>optional uint32 lastResetLineNumber = 7;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    public boolean hasLastResetLineNumber() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional uint32 lastResetLineNumber = 7;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    public int getLastResetLineNumber() {
      return lastResetLineNumber_;
    }

    private void initFields() {
      resetQty_ = 0;
      lastResetReason_ = maxpb.MaxpbDebug.ResetReason.RSTR_POWER_ON;
      lastResetStamp_ = 0L;
      lastResetID_ = 0;
      lastResetFileNumber_ = 0;
      lastResetFileName_ = "";
      lastResetLineNumber_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, resetQty_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeEnum(2, lastResetReason_.getNumber());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt64(3, lastResetStamp_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeUInt32(4, lastResetID_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeUInt32(5, lastResetFileNumber_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeBytes(6, getLastResetFileNameBytes());
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeUInt32(7, lastResetLineNumber_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, resetQty_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(2, lastResetReason_.getNumber());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(3, lastResetStamp_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, lastResetID_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(5, lastResetFileNumber_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(6, getLastResetFileNameBytes());
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(7, lastResetLineNumber_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static maxpb.MaxpbDebug.DiagnosticReset parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static maxpb.MaxpbDebug.DiagnosticReset parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static maxpb.MaxpbDebug.DiagnosticReset parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static maxpb.MaxpbDebug.DiagnosticReset parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static maxpb.MaxpbDebug.DiagnosticReset parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static maxpb.MaxpbDebug.DiagnosticReset parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static maxpb.MaxpbDebug.DiagnosticReset parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static maxpb.MaxpbDebug.DiagnosticReset parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static maxpb.MaxpbDebug.DiagnosticReset parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static maxpb.MaxpbDebug.DiagnosticReset parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(maxpb.MaxpbDebug.DiagnosticReset prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code maxpb.DiagnosticReset}
     *
     * <pre>
     *&#47;&#64;exclude
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:maxpb.DiagnosticReset)
        maxpb.MaxpbDebug.DiagnosticResetOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return maxpb.MaxpbDebug.internal_static_maxpb_DiagnosticReset_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return maxpb.MaxpbDebug.internal_static_maxpb_DiagnosticReset_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                maxpb.MaxpbDebug.DiagnosticReset.class, maxpb.MaxpbDebug.DiagnosticReset.Builder.class);
      }

      // Construct using maxpb.MaxpbDebug.DiagnosticReset.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        resetQty_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        lastResetReason_ = maxpb.MaxpbDebug.ResetReason.RSTR_POWER_ON;
        bitField0_ = (bitField0_ & ~0x00000002);
        lastResetStamp_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000004);
        lastResetID_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        lastResetFileNumber_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        lastResetFileName_ = "";
        bitField0_ = (bitField0_ & ~0x00000020);
        lastResetLineNumber_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return maxpb.MaxpbDebug.internal_static_maxpb_DiagnosticReset_descriptor;
      }

      public maxpb.MaxpbDebug.DiagnosticReset getDefaultInstanceForType() {
        return maxpb.MaxpbDebug.DiagnosticReset.getDefaultInstance();
      }

      public maxpb.MaxpbDebug.DiagnosticReset build() {
        maxpb.MaxpbDebug.DiagnosticReset result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public maxpb.MaxpbDebug.DiagnosticReset buildPartial() {
        maxpb.MaxpbDebug.DiagnosticReset result = new maxpb.MaxpbDebug.DiagnosticReset(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.resetQty_ = resetQty_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.lastResetReason_ = lastResetReason_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.lastResetStamp_ = lastResetStamp_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.lastResetID_ = lastResetID_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.lastResetFileNumber_ = lastResetFileNumber_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.lastResetFileName_ = lastResetFileName_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.lastResetLineNumber_ = lastResetLineNumber_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof maxpb.MaxpbDebug.DiagnosticReset) {
          return mergeFrom((maxpb.MaxpbDebug.DiagnosticReset)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(maxpb.MaxpbDebug.DiagnosticReset other) {
        if (other == maxpb.MaxpbDebug.DiagnosticReset.getDefaultInstance()) return this;
        if (other.hasResetQty()) {
          setResetQty(other.getResetQty());
        }
        if (other.hasLastResetReason()) {
          setLastResetReason(other.getLastResetReason());
        }
        if (other.hasLastResetStamp()) {
          setLastResetStamp(other.getLastResetStamp());
        }
        if (other.hasLastResetID()) {
          setLastResetID(other.getLastResetID());
        }
        if (other.hasLastResetFileNumber()) {
          setLastResetFileNumber(other.getLastResetFileNumber());
        }
        if (other.hasLastResetFileName()) {
          bitField0_ |= 0x00000020;
          lastResetFileName_ = other.lastResetFileName_;
          onChanged();
        }
        if (other.hasLastResetLineNumber()) {
          setLastResetLineNumber(other.getLastResetLineNumber());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        maxpb.MaxpbDebug.DiagnosticReset parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (maxpb.MaxpbDebug.DiagnosticReset) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int resetQty_ ;
      /**
       * <code>optional uint32 resetQty = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public boolean hasResetQty() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint32 resetQty = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public int getResetQty() {
        return resetQty_;
      }
      /**
       * <code>optional uint32 resetQty = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public Builder setResetQty(int value) {
        bitField0_ |= 0x00000001;
        resetQty_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 resetQty = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public Builder clearResetQty() {
        bitField0_ = (bitField0_ & ~0x00000001);
        resetQty_ = 0;
        onChanged();
        return this;
      }

      private maxpb.MaxpbDebug.ResetReason lastResetReason_ = maxpb.MaxpbDebug.ResetReason.RSTR_POWER_ON;
      /**
       * <code>optional .maxpb.ResetReason lastResetReason = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public boolean hasLastResetReason() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional .maxpb.ResetReason lastResetReason = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public maxpb.MaxpbDebug.ResetReason getLastResetReason() {
        return lastResetReason_;
      }
      /**
       * <code>optional .maxpb.ResetReason lastResetReason = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public Builder setLastResetReason(maxpb.MaxpbDebug.ResetReason value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000002;
        lastResetReason_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .maxpb.ResetReason lastResetReason = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public Builder clearLastResetReason() {
        bitField0_ = (bitField0_ & ~0x00000002);
        lastResetReason_ = maxpb.MaxpbDebug.ResetReason.RSTR_POWER_ON;
        onChanged();
        return this;
      }

      private long lastResetStamp_ ;
      /**
       * <code>optional uint64 lastResetStamp = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public boolean hasLastResetStamp() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional uint64 lastResetStamp = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public long getLastResetStamp() {
        return lastResetStamp_;
      }
      /**
       * <code>optional uint64 lastResetStamp = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public Builder setLastResetStamp(long value) {
        bitField0_ |= 0x00000004;
        lastResetStamp_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint64 lastResetStamp = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public Builder clearLastResetStamp() {
        bitField0_ = (bitField0_ & ~0x00000004);
        lastResetStamp_ = 0L;
        onChanged();
        return this;
      }

      private int lastResetID_ ;
      /**
       * <code>optional uint32 lastResetID = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public boolean hasLastResetID() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional uint32 lastResetID = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public int getLastResetID() {
        return lastResetID_;
      }
      /**
       * <code>optional uint32 lastResetID = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public Builder setLastResetID(int value) {
        bitField0_ |= 0x00000008;
        lastResetID_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 lastResetID = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public Builder clearLastResetID() {
        bitField0_ = (bitField0_ & ~0x00000008);
        lastResetID_ = 0;
        onChanged();
        return this;
      }

      private int lastResetFileNumber_ ;
      /**
       * <code>optional uint32 lastResetFileNumber = 5;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public boolean hasLastResetFileNumber() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional uint32 lastResetFileNumber = 5;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public int getLastResetFileNumber() {
        return lastResetFileNumber_;
      }
      /**
       * <code>optional uint32 lastResetFileNumber = 5;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public Builder setLastResetFileNumber(int value) {
        bitField0_ |= 0x00000010;
        lastResetFileNumber_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 lastResetFileNumber = 5;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public Builder clearLastResetFileNumber() {
        bitField0_ = (bitField0_ & ~0x00000010);
        lastResetFileNumber_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object lastResetFileName_ = "";
      /**
       * <code>optional string lastResetFileName = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public boolean hasLastResetFileName() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional string lastResetFileName = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public java.lang.String getLastResetFileName() {
        java.lang.Object ref = lastResetFileName_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            lastResetFileName_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string lastResetFileName = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public com.google.protobuf.ByteString
          getLastResetFileNameBytes() {
        java.lang.Object ref = lastResetFileName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          lastResetFileName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string lastResetFileName = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder setLastResetFileName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000020;
        lastResetFileName_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string lastResetFileName = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder clearLastResetFileName() {
        bitField0_ = (bitField0_ & ~0x00000020);
        lastResetFileName_ = getDefaultInstance().getLastResetFileName();
        onChanged();
        return this;
      }
      /**
       * <code>optional string lastResetFileName = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy: 
       * </pre>
       */
      public Builder setLastResetFileNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000020;
        lastResetFileName_ = value;
        onChanged();
        return this;
      }

      private int lastResetLineNumber_ ;
      /**
       * <code>optional uint32 lastResetLineNumber = 7;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public boolean hasLastResetLineNumber() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional uint32 lastResetLineNumber = 7;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public int getLastResetLineNumber() {
        return lastResetLineNumber_;
      }
      /**
       * <code>optional uint32 lastResetLineNumber = 7;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public Builder setLastResetLineNumber(int value) {
        bitField0_ |= 0x00000040;
        lastResetLineNumber_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 lastResetLineNumber = 7;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public Builder clearLastResetLineNumber() {
        bitField0_ = (bitField0_ & ~0x00000040);
        lastResetLineNumber_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:maxpb.DiagnosticReset)
    }

    static {
      defaultInstance = new DiagnosticReset(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:maxpb.DiagnosticReset)
  }

  public interface DiagnosticGsensorOrBuilder extends
      // @@protoc_insertion_point(interface_extends:maxpb.DiagnosticGsensor)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional uint32 failQty = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    boolean hasFailQty();
    /**
     * <code>optional uint32 failQty = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    int getFailQty();
  }
  /**
   * Protobuf type {@code maxpb.DiagnosticGsensor}
   *
   * <pre>
   *&#47;&#64;exclude
   * </pre>
   */
  public static final class DiagnosticGsensor extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:maxpb.DiagnosticGsensor)
      DiagnosticGsensorOrBuilder {
    // Use DiagnosticGsensor.newBuilder() to construct.
    private DiagnosticGsensor(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private DiagnosticGsensor(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final DiagnosticGsensor defaultInstance;
    public static DiagnosticGsensor getDefaultInstance() {
      return defaultInstance;
    }

    public DiagnosticGsensor getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private DiagnosticGsensor(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              failQty_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return maxpb.MaxpbDebug.internal_static_maxpb_DiagnosticGsensor_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return maxpb.MaxpbDebug.internal_static_maxpb_DiagnosticGsensor_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              maxpb.MaxpbDebug.DiagnosticGsensor.class, maxpb.MaxpbDebug.DiagnosticGsensor.Builder.class);
    }

    public static com.google.protobuf.Parser<DiagnosticGsensor> PARSER =
        new com.google.protobuf.AbstractParser<DiagnosticGsensor>() {
      public DiagnosticGsensor parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new DiagnosticGsensor(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<DiagnosticGsensor> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int FAILQTY_FIELD_NUMBER = 1;
    private int failQty_;
    /**
     * <code>optional uint32 failQty = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    public boolean hasFailQty() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional uint32 failQty = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    public int getFailQty() {
      return failQty_;
    }

    private void initFields() {
      failQty_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, failQty_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, failQty_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static maxpb.MaxpbDebug.DiagnosticGsensor parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static maxpb.MaxpbDebug.DiagnosticGsensor parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static maxpb.MaxpbDebug.DiagnosticGsensor parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static maxpb.MaxpbDebug.DiagnosticGsensor parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static maxpb.MaxpbDebug.DiagnosticGsensor parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static maxpb.MaxpbDebug.DiagnosticGsensor parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static maxpb.MaxpbDebug.DiagnosticGsensor parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static maxpb.MaxpbDebug.DiagnosticGsensor parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static maxpb.MaxpbDebug.DiagnosticGsensor parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static maxpb.MaxpbDebug.DiagnosticGsensor parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(maxpb.MaxpbDebug.DiagnosticGsensor prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code maxpb.DiagnosticGsensor}
     *
     * <pre>
     *&#47;&#64;exclude
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:maxpb.DiagnosticGsensor)
        maxpb.MaxpbDebug.DiagnosticGsensorOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return maxpb.MaxpbDebug.internal_static_maxpb_DiagnosticGsensor_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return maxpb.MaxpbDebug.internal_static_maxpb_DiagnosticGsensor_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                maxpb.MaxpbDebug.DiagnosticGsensor.class, maxpb.MaxpbDebug.DiagnosticGsensor.Builder.class);
      }

      // Construct using maxpb.MaxpbDebug.DiagnosticGsensor.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        failQty_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return maxpb.MaxpbDebug.internal_static_maxpb_DiagnosticGsensor_descriptor;
      }

      public maxpb.MaxpbDebug.DiagnosticGsensor getDefaultInstanceForType() {
        return maxpb.MaxpbDebug.DiagnosticGsensor.getDefaultInstance();
      }

      public maxpb.MaxpbDebug.DiagnosticGsensor build() {
        maxpb.MaxpbDebug.DiagnosticGsensor result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public maxpb.MaxpbDebug.DiagnosticGsensor buildPartial() {
        maxpb.MaxpbDebug.DiagnosticGsensor result = new maxpb.MaxpbDebug.DiagnosticGsensor(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.failQty_ = failQty_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof maxpb.MaxpbDebug.DiagnosticGsensor) {
          return mergeFrom((maxpb.MaxpbDebug.DiagnosticGsensor)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(maxpb.MaxpbDebug.DiagnosticGsensor other) {
        if (other == maxpb.MaxpbDebug.DiagnosticGsensor.getDefaultInstance()) return this;
        if (other.hasFailQty()) {
          setFailQty(other.getFailQty());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        maxpb.MaxpbDebug.DiagnosticGsensor parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (maxpb.MaxpbDebug.DiagnosticGsensor) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int failQty_ ;
      /**
       * <code>optional uint32 failQty = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public boolean hasFailQty() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint32 failQty = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public int getFailQty() {
        return failQty_;
      }
      /**
       * <code>optional uint32 failQty = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public Builder setFailQty(int value) {
        bitField0_ |= 0x00000001;
        failQty_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 failQty = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public Builder clearFailQty() {
        bitField0_ = (bitField0_ & ~0x00000001);
        failQty_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:maxpb.DiagnosticGsensor)
    }

    static {
      defaultInstance = new DiagnosticGsensor(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:maxpb.DiagnosticGsensor)
  }

  public interface DiagnosticPacketOrBuilder extends
      // @@protoc_insertion_point(interface_extends:maxpb.DiagnosticPacket)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional .maxpb.DiagnosticGsm gsm = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    boolean hasGsm();
    /**
     * <code>optional .maxpb.DiagnosticGsm gsm = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    maxpb.MaxpbDebug.DiagnosticGsm getGsm();
    /**
     * <code>optional .maxpb.DiagnosticGsm gsm = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    maxpb.MaxpbDebug.DiagnosticGsmOrBuilder getGsmOrBuilder();

    /**
     * <code>optional .maxpb.DiagnosticGps gps = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    boolean hasGps();
    /**
     * <code>optional .maxpb.DiagnosticGps gps = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    maxpb.MaxpbDebug.DiagnosticGps getGps();
    /**
     * <code>optional .maxpb.DiagnosticGps gps = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    maxpb.MaxpbDebug.DiagnosticGpsOrBuilder getGpsOrBuilder();

    /**
     * <code>optional .maxpb.DiagnosticLora lora = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    boolean hasLora();
    /**
     * <code>optional .maxpb.DiagnosticLora lora = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    maxpb.MaxpbDebug.DiagnosticLora getLora();
    /**
     * <code>optional .maxpb.DiagnosticLora lora = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    maxpb.MaxpbDebug.DiagnosticLoraOrBuilder getLoraOrBuilder();

    /**
     * <code>optional .maxpb.DiagnosticBattery battery = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    boolean hasBattery();
    /**
     * <code>optional .maxpb.DiagnosticBattery battery = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    maxpb.MaxpbDebug.DiagnosticBattery getBattery();
    /**
     * <code>optional .maxpb.DiagnosticBattery battery = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    maxpb.MaxpbDebug.DiagnosticBatteryOrBuilder getBatteryOrBuilder();

    /**
     * <code>optional .maxpb.DiagnosticCore core = 5;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    boolean hasCore();
    /**
     * <code>optional .maxpb.DiagnosticCore core = 5;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    maxpb.MaxpbDebug.DiagnosticCore getCore();
    /**
     * <code>optional .maxpb.DiagnosticCore core = 5;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    maxpb.MaxpbDebug.DiagnosticCoreOrBuilder getCoreOrBuilder();

    /**
     * <code>optional .maxpb.DiagnosticTelemetry telemetry = 6;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    boolean hasTelemetry();
    /**
     * <code>optional .maxpb.DiagnosticTelemetry telemetry = 6;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    maxpb.MaxpbDebug.DiagnosticTelemetry getTelemetry();
    /**
     * <code>optional .maxpb.DiagnosticTelemetry telemetry = 6;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    maxpb.MaxpbDebug.DiagnosticTelemetryOrBuilder getTelemetryOrBuilder();

    /**
     * <code>optional .maxpb.DiagnosticReset reset = 7;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    boolean hasReset();
    /**
     * <code>optional .maxpb.DiagnosticReset reset = 7;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    maxpb.MaxpbDebug.DiagnosticReset getReset();
    /**
     * <code>optional .maxpb.DiagnosticReset reset = 7;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    maxpb.MaxpbDebug.DiagnosticResetOrBuilder getResetOrBuilder();

    /**
     * <code>repeated .maxpb.DiagnosticMemory memory = 8;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    java.util.List<maxpb.MaxpbDebug.DiagnosticMemory> 
        getMemoryList();
    /**
     * <code>repeated .maxpb.DiagnosticMemory memory = 8;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    maxpb.MaxpbDebug.DiagnosticMemory getMemory(int index);
    /**
     * <code>repeated .maxpb.DiagnosticMemory memory = 8;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    int getMemoryCount();
    /**
     * <code>repeated .maxpb.DiagnosticMemory memory = 8;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    java.util.List<? extends maxpb.MaxpbDebug.DiagnosticMemoryOrBuilder> 
        getMemoryOrBuilderList();
    /**
     * <code>repeated .maxpb.DiagnosticMemory memory = 8;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    maxpb.MaxpbDebug.DiagnosticMemoryOrBuilder getMemoryOrBuilder(
        int index);

    /**
     * <code>optional .maxpb.DiagnosticGsensor gsensor = 9;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    boolean hasGsensor();
    /**
     * <code>optional .maxpb.DiagnosticGsensor gsensor = 9;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    maxpb.MaxpbDebug.DiagnosticGsensor getGsensor();
    /**
     * <code>optional .maxpb.DiagnosticGsensor gsensor = 9;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    maxpb.MaxpbDebug.DiagnosticGsensorOrBuilder getGsensorOrBuilder();

    /**
     * <code>repeated uint32 troubleCodes = 10;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    java.util.List<java.lang.Integer> getTroubleCodesList();
    /**
     * <code>repeated uint32 troubleCodes = 10;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    int getTroubleCodesCount();
    /**
     * <code>repeated uint32 troubleCodes = 10;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    int getTroubleCodes(int index);
  }
  /**
   * Protobuf type {@code maxpb.DiagnosticPacket}
   *
   * <pre>
   *&#47;&#64;exclude
   * </pre>
   */
  public static final class DiagnosticPacket extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:maxpb.DiagnosticPacket)
      DiagnosticPacketOrBuilder {
    // Use DiagnosticPacket.newBuilder() to construct.
    private DiagnosticPacket(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private DiagnosticPacket(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final DiagnosticPacket defaultInstance;
    public static DiagnosticPacket getDefaultInstance() {
      return defaultInstance;
    }

    public DiagnosticPacket getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private DiagnosticPacket(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              maxpb.MaxpbDebug.DiagnosticGsm.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = gsm_.toBuilder();
              }
              gsm_ = input.readMessage(maxpb.MaxpbDebug.DiagnosticGsm.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(gsm_);
                gsm_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 18: {
              maxpb.MaxpbDebug.DiagnosticGps.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = gps_.toBuilder();
              }
              gps_ = input.readMessage(maxpb.MaxpbDebug.DiagnosticGps.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(gps_);
                gps_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
            case 26: {
              maxpb.MaxpbDebug.DiagnosticLora.Builder subBuilder = null;
              if (((bitField0_ & 0x00000004) == 0x00000004)) {
                subBuilder = lora_.toBuilder();
              }
              lora_ = input.readMessage(maxpb.MaxpbDebug.DiagnosticLora.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(lora_);
                lora_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000004;
              break;
            }
            case 34: {
              maxpb.MaxpbDebug.DiagnosticBattery.Builder subBuilder = null;
              if (((bitField0_ & 0x00000008) == 0x00000008)) {
                subBuilder = battery_.toBuilder();
              }
              battery_ = input.readMessage(maxpb.MaxpbDebug.DiagnosticBattery.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(battery_);
                battery_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000008;
              break;
            }
            case 42: {
              maxpb.MaxpbDebug.DiagnosticCore.Builder subBuilder = null;
              if (((bitField0_ & 0x00000010) == 0x00000010)) {
                subBuilder = core_.toBuilder();
              }
              core_ = input.readMessage(maxpb.MaxpbDebug.DiagnosticCore.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(core_);
                core_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000010;
              break;
            }
            case 50: {
              maxpb.MaxpbDebug.DiagnosticTelemetry.Builder subBuilder = null;
              if (((bitField0_ & 0x00000020) == 0x00000020)) {
                subBuilder = telemetry_.toBuilder();
              }
              telemetry_ = input.readMessage(maxpb.MaxpbDebug.DiagnosticTelemetry.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(telemetry_);
                telemetry_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000020;
              break;
            }
            case 58: {
              maxpb.MaxpbDebug.DiagnosticReset.Builder subBuilder = null;
              if (((bitField0_ & 0x00000040) == 0x00000040)) {
                subBuilder = reset_.toBuilder();
              }
              reset_ = input.readMessage(maxpb.MaxpbDebug.DiagnosticReset.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(reset_);
                reset_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000040;
              break;
            }
            case 66: {
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
                memory_ = new java.util.ArrayList<maxpb.MaxpbDebug.DiagnosticMemory>();
                mutable_bitField0_ |= 0x00000080;
              }
              memory_.add(input.readMessage(maxpb.MaxpbDebug.DiagnosticMemory.PARSER, extensionRegistry));
              break;
            }
            case 74: {
              maxpb.MaxpbDebug.DiagnosticGsensor.Builder subBuilder = null;
              if (((bitField0_ & 0x00000080) == 0x00000080)) {
                subBuilder = gsensor_.toBuilder();
              }
              gsensor_ = input.readMessage(maxpb.MaxpbDebug.DiagnosticGsensor.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(gsensor_);
                gsensor_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000080;
              break;
            }
            case 80: {
              if (!((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
                troubleCodes_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000200;
              }
              troubleCodes_.add(input.readUInt32());
              break;
            }
            case 82: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000200) == 0x00000200) && input.getBytesUntilLimit() > 0) {
                troubleCodes_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000200;
              }
              while (input.getBytesUntilLimit() > 0) {
                troubleCodes_.add(input.readUInt32());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
          memory_ = java.util.Collections.unmodifiableList(memory_);
        }
        if (((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
          troubleCodes_ = java.util.Collections.unmodifiableList(troubleCodes_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return maxpb.MaxpbDebug.internal_static_maxpb_DiagnosticPacket_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return maxpb.MaxpbDebug.internal_static_maxpb_DiagnosticPacket_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              maxpb.MaxpbDebug.DiagnosticPacket.class, maxpb.MaxpbDebug.DiagnosticPacket.Builder.class);
    }

    public static com.google.protobuf.Parser<DiagnosticPacket> PARSER =
        new com.google.protobuf.AbstractParser<DiagnosticPacket>() {
      public DiagnosticPacket parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new DiagnosticPacket(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<DiagnosticPacket> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int GSM_FIELD_NUMBER = 1;
    private maxpb.MaxpbDebug.DiagnosticGsm gsm_;
    /**
     * <code>optional .maxpb.DiagnosticGsm gsm = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    public boolean hasGsm() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .maxpb.DiagnosticGsm gsm = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    public maxpb.MaxpbDebug.DiagnosticGsm getGsm() {
      return gsm_;
    }
    /**
     * <code>optional .maxpb.DiagnosticGsm gsm = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    public maxpb.MaxpbDebug.DiagnosticGsmOrBuilder getGsmOrBuilder() {
      return gsm_;
    }

    public static final int GPS_FIELD_NUMBER = 2;
    private maxpb.MaxpbDebug.DiagnosticGps gps_;
    /**
     * <code>optional .maxpb.DiagnosticGps gps = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    public boolean hasGps() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional .maxpb.DiagnosticGps gps = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    public maxpb.MaxpbDebug.DiagnosticGps getGps() {
      return gps_;
    }
    /**
     * <code>optional .maxpb.DiagnosticGps gps = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    public maxpb.MaxpbDebug.DiagnosticGpsOrBuilder getGpsOrBuilder() {
      return gps_;
    }

    public static final int LORA_FIELD_NUMBER = 3;
    private maxpb.MaxpbDebug.DiagnosticLora lora_;
    /**
     * <code>optional .maxpb.DiagnosticLora lora = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    public boolean hasLora() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional .maxpb.DiagnosticLora lora = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    public maxpb.MaxpbDebug.DiagnosticLora getLora() {
      return lora_;
    }
    /**
     * <code>optional .maxpb.DiagnosticLora lora = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    public maxpb.MaxpbDebug.DiagnosticLoraOrBuilder getLoraOrBuilder() {
      return lora_;
    }

    public static final int BATTERY_FIELD_NUMBER = 4;
    private maxpb.MaxpbDebug.DiagnosticBattery battery_;
    /**
     * <code>optional .maxpb.DiagnosticBattery battery = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    public boolean hasBattery() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional .maxpb.DiagnosticBattery battery = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    public maxpb.MaxpbDebug.DiagnosticBattery getBattery() {
      return battery_;
    }
    /**
     * <code>optional .maxpb.DiagnosticBattery battery = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    public maxpb.MaxpbDebug.DiagnosticBatteryOrBuilder getBatteryOrBuilder() {
      return battery_;
    }

    public static final int CORE_FIELD_NUMBER = 5;
    private maxpb.MaxpbDebug.DiagnosticCore core_;
    /**
     * <code>optional .maxpb.DiagnosticCore core = 5;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    public boolean hasCore() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional .maxpb.DiagnosticCore core = 5;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    public maxpb.MaxpbDebug.DiagnosticCore getCore() {
      return core_;
    }
    /**
     * <code>optional .maxpb.DiagnosticCore core = 5;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    public maxpb.MaxpbDebug.DiagnosticCoreOrBuilder getCoreOrBuilder() {
      return core_;
    }

    public static final int TELEMETRY_FIELD_NUMBER = 6;
    private maxpb.MaxpbDebug.DiagnosticTelemetry telemetry_;
    /**
     * <code>optional .maxpb.DiagnosticTelemetry telemetry = 6;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    public boolean hasTelemetry() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional .maxpb.DiagnosticTelemetry telemetry = 6;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    public maxpb.MaxpbDebug.DiagnosticTelemetry getTelemetry() {
      return telemetry_;
    }
    /**
     * <code>optional .maxpb.DiagnosticTelemetry telemetry = 6;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    public maxpb.MaxpbDebug.DiagnosticTelemetryOrBuilder getTelemetryOrBuilder() {
      return telemetry_;
    }

    public static final int RESET_FIELD_NUMBER = 7;
    private maxpb.MaxpbDebug.DiagnosticReset reset_;
    /**
     * <code>optional .maxpb.DiagnosticReset reset = 7;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    public boolean hasReset() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional .maxpb.DiagnosticReset reset = 7;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    public maxpb.MaxpbDebug.DiagnosticReset getReset() {
      return reset_;
    }
    /**
     * <code>optional .maxpb.DiagnosticReset reset = 7;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    public maxpb.MaxpbDebug.DiagnosticResetOrBuilder getResetOrBuilder() {
      return reset_;
    }

    public static final int MEMORY_FIELD_NUMBER = 8;
    private java.util.List<maxpb.MaxpbDebug.DiagnosticMemory> memory_;
    /**
     * <code>repeated .maxpb.DiagnosticMemory memory = 8;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    public java.util.List<maxpb.MaxpbDebug.DiagnosticMemory> getMemoryList() {
      return memory_;
    }
    /**
     * <code>repeated .maxpb.DiagnosticMemory memory = 8;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    public java.util.List<? extends maxpb.MaxpbDebug.DiagnosticMemoryOrBuilder> 
        getMemoryOrBuilderList() {
      return memory_;
    }
    /**
     * <code>repeated .maxpb.DiagnosticMemory memory = 8;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    public int getMemoryCount() {
      return memory_.size();
    }
    /**
     * <code>repeated .maxpb.DiagnosticMemory memory = 8;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    public maxpb.MaxpbDebug.DiagnosticMemory getMemory(int index) {
      return memory_.get(index);
    }
    /**
     * <code>repeated .maxpb.DiagnosticMemory memory = 8;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    public maxpb.MaxpbDebug.DiagnosticMemoryOrBuilder getMemoryOrBuilder(
        int index) {
      return memory_.get(index);
    }

    public static final int GSENSOR_FIELD_NUMBER = 9;
    private maxpb.MaxpbDebug.DiagnosticGsensor gsensor_;
    /**
     * <code>optional .maxpb.DiagnosticGsensor gsensor = 9;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    public boolean hasGsensor() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional .maxpb.DiagnosticGsensor gsensor = 9;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    public maxpb.MaxpbDebug.DiagnosticGsensor getGsensor() {
      return gsensor_;
    }
    /**
     * <code>optional .maxpb.DiagnosticGsensor gsensor = 9;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    public maxpb.MaxpbDebug.DiagnosticGsensorOrBuilder getGsensorOrBuilder() {
      return gsensor_;
    }

    public static final int TROUBLECODES_FIELD_NUMBER = 10;
    private java.util.List<java.lang.Integer> troubleCodes_;
    /**
     * <code>repeated uint32 troubleCodes = 10;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getTroubleCodesList() {
      return troubleCodes_;
    }
    /**
     * <code>repeated uint32 troubleCodes = 10;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    public int getTroubleCodesCount() {
      return troubleCodes_.size();
    }
    /**
     * <code>repeated uint32 troubleCodes = 10;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT180
     * </pre>
     */
    public int getTroubleCodes(int index) {
      return troubleCodes_.get(index);
    }

    private void initFields() {
      gsm_ = maxpb.MaxpbDebug.DiagnosticGsm.getDefaultInstance();
      gps_ = maxpb.MaxpbDebug.DiagnosticGps.getDefaultInstance();
      lora_ = maxpb.MaxpbDebug.DiagnosticLora.getDefaultInstance();
      battery_ = maxpb.MaxpbDebug.DiagnosticBattery.getDefaultInstance();
      core_ = maxpb.MaxpbDebug.DiagnosticCore.getDefaultInstance();
      telemetry_ = maxpb.MaxpbDebug.DiagnosticTelemetry.getDefaultInstance();
      reset_ = maxpb.MaxpbDebug.DiagnosticReset.getDefaultInstance();
      memory_ = java.util.Collections.emptyList();
      gsensor_ = maxpb.MaxpbDebug.DiagnosticGsensor.getDefaultInstance();
      troubleCodes_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, gsm_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, gps_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(3, lora_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeMessage(4, battery_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeMessage(5, core_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeMessage(6, telemetry_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeMessage(7, reset_);
      }
      for (int i = 0; i < memory_.size(); i++) {
        output.writeMessage(8, memory_.get(i));
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeMessage(9, gsensor_);
      }
      for (int i = 0; i < troubleCodes_.size(); i++) {
        output.writeUInt32(10, troubleCodes_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, gsm_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, gps_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, lora_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, battery_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, core_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, telemetry_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, reset_);
      }
      for (int i = 0; i < memory_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, memory_.get(i));
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(9, gsensor_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < troubleCodes_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeUInt32SizeNoTag(troubleCodes_.get(i));
        }
        size += dataSize;
        size += 1 * getTroubleCodesList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static maxpb.MaxpbDebug.DiagnosticPacket parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static maxpb.MaxpbDebug.DiagnosticPacket parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static maxpb.MaxpbDebug.DiagnosticPacket parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static maxpb.MaxpbDebug.DiagnosticPacket parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static maxpb.MaxpbDebug.DiagnosticPacket parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static maxpb.MaxpbDebug.DiagnosticPacket parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static maxpb.MaxpbDebug.DiagnosticPacket parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static maxpb.MaxpbDebug.DiagnosticPacket parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static maxpb.MaxpbDebug.DiagnosticPacket parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static maxpb.MaxpbDebug.DiagnosticPacket parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(maxpb.MaxpbDebug.DiagnosticPacket prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code maxpb.DiagnosticPacket}
     *
     * <pre>
     *&#47;&#64;exclude
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:maxpb.DiagnosticPacket)
        maxpb.MaxpbDebug.DiagnosticPacketOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return maxpb.MaxpbDebug.internal_static_maxpb_DiagnosticPacket_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return maxpb.MaxpbDebug.internal_static_maxpb_DiagnosticPacket_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                maxpb.MaxpbDebug.DiagnosticPacket.class, maxpb.MaxpbDebug.DiagnosticPacket.Builder.class);
      }

      // Construct using maxpb.MaxpbDebug.DiagnosticPacket.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getGsmFieldBuilder();
          getGpsFieldBuilder();
          getLoraFieldBuilder();
          getBatteryFieldBuilder();
          getCoreFieldBuilder();
          getTelemetryFieldBuilder();
          getResetFieldBuilder();
          getMemoryFieldBuilder();
          getGsensorFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (gsmBuilder_ == null) {
          gsm_ = maxpb.MaxpbDebug.DiagnosticGsm.getDefaultInstance();
        } else {
          gsmBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        if (gpsBuilder_ == null) {
          gps_ = maxpb.MaxpbDebug.DiagnosticGps.getDefaultInstance();
        } else {
          gpsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        if (loraBuilder_ == null) {
          lora_ = maxpb.MaxpbDebug.DiagnosticLora.getDefaultInstance();
        } else {
          loraBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        if (batteryBuilder_ == null) {
          battery_ = maxpb.MaxpbDebug.DiagnosticBattery.getDefaultInstance();
        } else {
          batteryBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        if (coreBuilder_ == null) {
          core_ = maxpb.MaxpbDebug.DiagnosticCore.getDefaultInstance();
        } else {
          coreBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        if (telemetryBuilder_ == null) {
          telemetry_ = maxpb.MaxpbDebug.DiagnosticTelemetry.getDefaultInstance();
        } else {
          telemetryBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000020);
        if (resetBuilder_ == null) {
          reset_ = maxpb.MaxpbDebug.DiagnosticReset.getDefaultInstance();
        } else {
          resetBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000040);
        if (memoryBuilder_ == null) {
          memory_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000080);
        } else {
          memoryBuilder_.clear();
        }
        if (gsensorBuilder_ == null) {
          gsensor_ = maxpb.MaxpbDebug.DiagnosticGsensor.getDefaultInstance();
        } else {
          gsensorBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000100);
        troubleCodes_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000200);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return maxpb.MaxpbDebug.internal_static_maxpb_DiagnosticPacket_descriptor;
      }

      public maxpb.MaxpbDebug.DiagnosticPacket getDefaultInstanceForType() {
        return maxpb.MaxpbDebug.DiagnosticPacket.getDefaultInstance();
      }

      public maxpb.MaxpbDebug.DiagnosticPacket build() {
        maxpb.MaxpbDebug.DiagnosticPacket result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public maxpb.MaxpbDebug.DiagnosticPacket buildPartial() {
        maxpb.MaxpbDebug.DiagnosticPacket result = new maxpb.MaxpbDebug.DiagnosticPacket(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (gsmBuilder_ == null) {
          result.gsm_ = gsm_;
        } else {
          result.gsm_ = gsmBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        if (gpsBuilder_ == null) {
          result.gps_ = gps_;
        } else {
          result.gps_ = gpsBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        if (loraBuilder_ == null) {
          result.lora_ = lora_;
        } else {
          result.lora_ = loraBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        if (batteryBuilder_ == null) {
          result.battery_ = battery_;
        } else {
          result.battery_ = batteryBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        if (coreBuilder_ == null) {
          result.core_ = core_;
        } else {
          result.core_ = coreBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        if (telemetryBuilder_ == null) {
          result.telemetry_ = telemetry_;
        } else {
          result.telemetry_ = telemetryBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        if (resetBuilder_ == null) {
          result.reset_ = reset_;
        } else {
          result.reset_ = resetBuilder_.build();
        }
        if (memoryBuilder_ == null) {
          if (((bitField0_ & 0x00000080) == 0x00000080)) {
            memory_ = java.util.Collections.unmodifiableList(memory_);
            bitField0_ = (bitField0_ & ~0x00000080);
          }
          result.memory_ = memory_;
        } else {
          result.memory_ = memoryBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000080;
        }
        if (gsensorBuilder_ == null) {
          result.gsensor_ = gsensor_;
        } else {
          result.gsensor_ = gsensorBuilder_.build();
        }
        if (((bitField0_ & 0x00000200) == 0x00000200)) {
          troubleCodes_ = java.util.Collections.unmodifiableList(troubleCodes_);
          bitField0_ = (bitField0_ & ~0x00000200);
        }
        result.troubleCodes_ = troubleCodes_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof maxpb.MaxpbDebug.DiagnosticPacket) {
          return mergeFrom((maxpb.MaxpbDebug.DiagnosticPacket)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(maxpb.MaxpbDebug.DiagnosticPacket other) {
        if (other == maxpb.MaxpbDebug.DiagnosticPacket.getDefaultInstance()) return this;
        if (other.hasGsm()) {
          mergeGsm(other.getGsm());
        }
        if (other.hasGps()) {
          mergeGps(other.getGps());
        }
        if (other.hasLora()) {
          mergeLora(other.getLora());
        }
        if (other.hasBattery()) {
          mergeBattery(other.getBattery());
        }
        if (other.hasCore()) {
          mergeCore(other.getCore());
        }
        if (other.hasTelemetry()) {
          mergeTelemetry(other.getTelemetry());
        }
        if (other.hasReset()) {
          mergeReset(other.getReset());
        }
        if (memoryBuilder_ == null) {
          if (!other.memory_.isEmpty()) {
            if (memory_.isEmpty()) {
              memory_ = other.memory_;
              bitField0_ = (bitField0_ & ~0x00000080);
            } else {
              ensureMemoryIsMutable();
              memory_.addAll(other.memory_);
            }
            onChanged();
          }
        } else {
          if (!other.memory_.isEmpty()) {
            if (memoryBuilder_.isEmpty()) {
              memoryBuilder_.dispose();
              memoryBuilder_ = null;
              memory_ = other.memory_;
              bitField0_ = (bitField0_ & ~0x00000080);
              memoryBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getMemoryFieldBuilder() : null;
            } else {
              memoryBuilder_.addAllMessages(other.memory_);
            }
          }
        }
        if (other.hasGsensor()) {
          mergeGsensor(other.getGsensor());
        }
        if (!other.troubleCodes_.isEmpty()) {
          if (troubleCodes_.isEmpty()) {
            troubleCodes_ = other.troubleCodes_;
            bitField0_ = (bitField0_ & ~0x00000200);
          } else {
            ensureTroubleCodesIsMutable();
            troubleCodes_.addAll(other.troubleCodes_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        maxpb.MaxpbDebug.DiagnosticPacket parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (maxpb.MaxpbDebug.DiagnosticPacket) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private maxpb.MaxpbDebug.DiagnosticGsm gsm_ = maxpb.MaxpbDebug.DiagnosticGsm.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbDebug.DiagnosticGsm, maxpb.MaxpbDebug.DiagnosticGsm.Builder, maxpb.MaxpbDebug.DiagnosticGsmOrBuilder> gsmBuilder_;
      /**
       * <code>optional .maxpb.DiagnosticGsm gsm = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public boolean hasGsm() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .maxpb.DiagnosticGsm gsm = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public maxpb.MaxpbDebug.DiagnosticGsm getGsm() {
        if (gsmBuilder_ == null) {
          return gsm_;
        } else {
          return gsmBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .maxpb.DiagnosticGsm gsm = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public Builder setGsm(maxpb.MaxpbDebug.DiagnosticGsm value) {
        if (gsmBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          gsm_ = value;
          onChanged();
        } else {
          gsmBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .maxpb.DiagnosticGsm gsm = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public Builder setGsm(
          maxpb.MaxpbDebug.DiagnosticGsm.Builder builderForValue) {
        if (gsmBuilder_ == null) {
          gsm_ = builderForValue.build();
          onChanged();
        } else {
          gsmBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .maxpb.DiagnosticGsm gsm = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public Builder mergeGsm(maxpb.MaxpbDebug.DiagnosticGsm value) {
        if (gsmBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              gsm_ != maxpb.MaxpbDebug.DiagnosticGsm.getDefaultInstance()) {
            gsm_ =
              maxpb.MaxpbDebug.DiagnosticGsm.newBuilder(gsm_).mergeFrom(value).buildPartial();
          } else {
            gsm_ = value;
          }
          onChanged();
        } else {
          gsmBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .maxpb.DiagnosticGsm gsm = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public Builder clearGsm() {
        if (gsmBuilder_ == null) {
          gsm_ = maxpb.MaxpbDebug.DiagnosticGsm.getDefaultInstance();
          onChanged();
        } else {
          gsmBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>optional .maxpb.DiagnosticGsm gsm = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public maxpb.MaxpbDebug.DiagnosticGsm.Builder getGsmBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getGsmFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .maxpb.DiagnosticGsm gsm = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public maxpb.MaxpbDebug.DiagnosticGsmOrBuilder getGsmOrBuilder() {
        if (gsmBuilder_ != null) {
          return gsmBuilder_.getMessageOrBuilder();
        } else {
          return gsm_;
        }
      }
      /**
       * <code>optional .maxpb.DiagnosticGsm gsm = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbDebug.DiagnosticGsm, maxpb.MaxpbDebug.DiagnosticGsm.Builder, maxpb.MaxpbDebug.DiagnosticGsmOrBuilder> 
          getGsmFieldBuilder() {
        if (gsmBuilder_ == null) {
          gsmBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              maxpb.MaxpbDebug.DiagnosticGsm, maxpb.MaxpbDebug.DiagnosticGsm.Builder, maxpb.MaxpbDebug.DiagnosticGsmOrBuilder>(
                  getGsm(),
                  getParentForChildren(),
                  isClean());
          gsm_ = null;
        }
        return gsmBuilder_;
      }

      private maxpb.MaxpbDebug.DiagnosticGps gps_ = maxpb.MaxpbDebug.DiagnosticGps.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbDebug.DiagnosticGps, maxpb.MaxpbDebug.DiagnosticGps.Builder, maxpb.MaxpbDebug.DiagnosticGpsOrBuilder> gpsBuilder_;
      /**
       * <code>optional .maxpb.DiagnosticGps gps = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public boolean hasGps() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional .maxpb.DiagnosticGps gps = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public maxpb.MaxpbDebug.DiagnosticGps getGps() {
        if (gpsBuilder_ == null) {
          return gps_;
        } else {
          return gpsBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .maxpb.DiagnosticGps gps = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public Builder setGps(maxpb.MaxpbDebug.DiagnosticGps value) {
        if (gpsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          gps_ = value;
          onChanged();
        } else {
          gpsBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .maxpb.DiagnosticGps gps = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public Builder setGps(
          maxpb.MaxpbDebug.DiagnosticGps.Builder builderForValue) {
        if (gpsBuilder_ == null) {
          gps_ = builderForValue.build();
          onChanged();
        } else {
          gpsBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .maxpb.DiagnosticGps gps = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public Builder mergeGps(maxpb.MaxpbDebug.DiagnosticGps value) {
        if (gpsBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              gps_ != maxpb.MaxpbDebug.DiagnosticGps.getDefaultInstance()) {
            gps_ =
              maxpb.MaxpbDebug.DiagnosticGps.newBuilder(gps_).mergeFrom(value).buildPartial();
          } else {
            gps_ = value;
          }
          onChanged();
        } else {
          gpsBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .maxpb.DiagnosticGps gps = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public Builder clearGps() {
        if (gpsBuilder_ == null) {
          gps_ = maxpb.MaxpbDebug.DiagnosticGps.getDefaultInstance();
          onChanged();
        } else {
          gpsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      /**
       * <code>optional .maxpb.DiagnosticGps gps = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public maxpb.MaxpbDebug.DiagnosticGps.Builder getGpsBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getGpsFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .maxpb.DiagnosticGps gps = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public maxpb.MaxpbDebug.DiagnosticGpsOrBuilder getGpsOrBuilder() {
        if (gpsBuilder_ != null) {
          return gpsBuilder_.getMessageOrBuilder();
        } else {
          return gps_;
        }
      }
      /**
       * <code>optional .maxpb.DiagnosticGps gps = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbDebug.DiagnosticGps, maxpb.MaxpbDebug.DiagnosticGps.Builder, maxpb.MaxpbDebug.DiagnosticGpsOrBuilder> 
          getGpsFieldBuilder() {
        if (gpsBuilder_ == null) {
          gpsBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              maxpb.MaxpbDebug.DiagnosticGps, maxpb.MaxpbDebug.DiagnosticGps.Builder, maxpb.MaxpbDebug.DiagnosticGpsOrBuilder>(
                  getGps(),
                  getParentForChildren(),
                  isClean());
          gps_ = null;
        }
        return gpsBuilder_;
      }

      private maxpb.MaxpbDebug.DiagnosticLora lora_ = maxpb.MaxpbDebug.DiagnosticLora.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbDebug.DiagnosticLora, maxpb.MaxpbDebug.DiagnosticLora.Builder, maxpb.MaxpbDebug.DiagnosticLoraOrBuilder> loraBuilder_;
      /**
       * <code>optional .maxpb.DiagnosticLora lora = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public boolean hasLora() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional .maxpb.DiagnosticLora lora = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public maxpb.MaxpbDebug.DiagnosticLora getLora() {
        if (loraBuilder_ == null) {
          return lora_;
        } else {
          return loraBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .maxpb.DiagnosticLora lora = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public Builder setLora(maxpb.MaxpbDebug.DiagnosticLora value) {
        if (loraBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          lora_ = value;
          onChanged();
        } else {
          loraBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .maxpb.DiagnosticLora lora = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public Builder setLora(
          maxpb.MaxpbDebug.DiagnosticLora.Builder builderForValue) {
        if (loraBuilder_ == null) {
          lora_ = builderForValue.build();
          onChanged();
        } else {
          loraBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .maxpb.DiagnosticLora lora = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public Builder mergeLora(maxpb.MaxpbDebug.DiagnosticLora value) {
        if (loraBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004) &&
              lora_ != maxpb.MaxpbDebug.DiagnosticLora.getDefaultInstance()) {
            lora_ =
              maxpb.MaxpbDebug.DiagnosticLora.newBuilder(lora_).mergeFrom(value).buildPartial();
          } else {
            lora_ = value;
          }
          onChanged();
        } else {
          loraBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .maxpb.DiagnosticLora lora = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public Builder clearLora() {
        if (loraBuilder_ == null) {
          lora_ = maxpb.MaxpbDebug.DiagnosticLora.getDefaultInstance();
          onChanged();
        } else {
          loraBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }
      /**
       * <code>optional .maxpb.DiagnosticLora lora = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public maxpb.MaxpbDebug.DiagnosticLora.Builder getLoraBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getLoraFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .maxpb.DiagnosticLora lora = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public maxpb.MaxpbDebug.DiagnosticLoraOrBuilder getLoraOrBuilder() {
        if (loraBuilder_ != null) {
          return loraBuilder_.getMessageOrBuilder();
        } else {
          return lora_;
        }
      }
      /**
       * <code>optional .maxpb.DiagnosticLora lora = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbDebug.DiagnosticLora, maxpb.MaxpbDebug.DiagnosticLora.Builder, maxpb.MaxpbDebug.DiagnosticLoraOrBuilder> 
          getLoraFieldBuilder() {
        if (loraBuilder_ == null) {
          loraBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              maxpb.MaxpbDebug.DiagnosticLora, maxpb.MaxpbDebug.DiagnosticLora.Builder, maxpb.MaxpbDebug.DiagnosticLoraOrBuilder>(
                  getLora(),
                  getParentForChildren(),
                  isClean());
          lora_ = null;
        }
        return loraBuilder_;
      }

      private maxpb.MaxpbDebug.DiagnosticBattery battery_ = maxpb.MaxpbDebug.DiagnosticBattery.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbDebug.DiagnosticBattery, maxpb.MaxpbDebug.DiagnosticBattery.Builder, maxpb.MaxpbDebug.DiagnosticBatteryOrBuilder> batteryBuilder_;
      /**
       * <code>optional .maxpb.DiagnosticBattery battery = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public boolean hasBattery() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional .maxpb.DiagnosticBattery battery = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public maxpb.MaxpbDebug.DiagnosticBattery getBattery() {
        if (batteryBuilder_ == null) {
          return battery_;
        } else {
          return batteryBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .maxpb.DiagnosticBattery battery = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public Builder setBattery(maxpb.MaxpbDebug.DiagnosticBattery value) {
        if (batteryBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          battery_ = value;
          onChanged();
        } else {
          batteryBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .maxpb.DiagnosticBattery battery = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public Builder setBattery(
          maxpb.MaxpbDebug.DiagnosticBattery.Builder builderForValue) {
        if (batteryBuilder_ == null) {
          battery_ = builderForValue.build();
          onChanged();
        } else {
          batteryBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .maxpb.DiagnosticBattery battery = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public Builder mergeBattery(maxpb.MaxpbDebug.DiagnosticBattery value) {
        if (batteryBuilder_ == null) {
          if (((bitField0_ & 0x00000008) == 0x00000008) &&
              battery_ != maxpb.MaxpbDebug.DiagnosticBattery.getDefaultInstance()) {
            battery_ =
              maxpb.MaxpbDebug.DiagnosticBattery.newBuilder(battery_).mergeFrom(value).buildPartial();
          } else {
            battery_ = value;
          }
          onChanged();
        } else {
          batteryBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .maxpb.DiagnosticBattery battery = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public Builder clearBattery() {
        if (batteryBuilder_ == null) {
          battery_ = maxpb.MaxpbDebug.DiagnosticBattery.getDefaultInstance();
          onChanged();
        } else {
          batteryBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }
      /**
       * <code>optional .maxpb.DiagnosticBattery battery = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public maxpb.MaxpbDebug.DiagnosticBattery.Builder getBatteryBuilder() {
        bitField0_ |= 0x00000008;
        onChanged();
        return getBatteryFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .maxpb.DiagnosticBattery battery = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public maxpb.MaxpbDebug.DiagnosticBatteryOrBuilder getBatteryOrBuilder() {
        if (batteryBuilder_ != null) {
          return batteryBuilder_.getMessageOrBuilder();
        } else {
          return battery_;
        }
      }
      /**
       * <code>optional .maxpb.DiagnosticBattery battery = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbDebug.DiagnosticBattery, maxpb.MaxpbDebug.DiagnosticBattery.Builder, maxpb.MaxpbDebug.DiagnosticBatteryOrBuilder> 
          getBatteryFieldBuilder() {
        if (batteryBuilder_ == null) {
          batteryBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              maxpb.MaxpbDebug.DiagnosticBattery, maxpb.MaxpbDebug.DiagnosticBattery.Builder, maxpb.MaxpbDebug.DiagnosticBatteryOrBuilder>(
                  getBattery(),
                  getParentForChildren(),
                  isClean());
          battery_ = null;
        }
        return batteryBuilder_;
      }

      private maxpb.MaxpbDebug.DiagnosticCore core_ = maxpb.MaxpbDebug.DiagnosticCore.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbDebug.DiagnosticCore, maxpb.MaxpbDebug.DiagnosticCore.Builder, maxpb.MaxpbDebug.DiagnosticCoreOrBuilder> coreBuilder_;
      /**
       * <code>optional .maxpb.DiagnosticCore core = 5;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public boolean hasCore() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional .maxpb.DiagnosticCore core = 5;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public maxpb.MaxpbDebug.DiagnosticCore getCore() {
        if (coreBuilder_ == null) {
          return core_;
        } else {
          return coreBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .maxpb.DiagnosticCore core = 5;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public Builder setCore(maxpb.MaxpbDebug.DiagnosticCore value) {
        if (coreBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          core_ = value;
          onChanged();
        } else {
          coreBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .maxpb.DiagnosticCore core = 5;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public Builder setCore(
          maxpb.MaxpbDebug.DiagnosticCore.Builder builderForValue) {
        if (coreBuilder_ == null) {
          core_ = builderForValue.build();
          onChanged();
        } else {
          coreBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .maxpb.DiagnosticCore core = 5;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public Builder mergeCore(maxpb.MaxpbDebug.DiagnosticCore value) {
        if (coreBuilder_ == null) {
          if (((bitField0_ & 0x00000010) == 0x00000010) &&
              core_ != maxpb.MaxpbDebug.DiagnosticCore.getDefaultInstance()) {
            core_ =
              maxpb.MaxpbDebug.DiagnosticCore.newBuilder(core_).mergeFrom(value).buildPartial();
          } else {
            core_ = value;
          }
          onChanged();
        } else {
          coreBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000010;
        return this;
      }
      /**
       * <code>optional .maxpb.DiagnosticCore core = 5;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public Builder clearCore() {
        if (coreBuilder_ == null) {
          core_ = maxpb.MaxpbDebug.DiagnosticCore.getDefaultInstance();
          onChanged();
        } else {
          coreBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }
      /**
       * <code>optional .maxpb.DiagnosticCore core = 5;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public maxpb.MaxpbDebug.DiagnosticCore.Builder getCoreBuilder() {
        bitField0_ |= 0x00000010;
        onChanged();
        return getCoreFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .maxpb.DiagnosticCore core = 5;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public maxpb.MaxpbDebug.DiagnosticCoreOrBuilder getCoreOrBuilder() {
        if (coreBuilder_ != null) {
          return coreBuilder_.getMessageOrBuilder();
        } else {
          return core_;
        }
      }
      /**
       * <code>optional .maxpb.DiagnosticCore core = 5;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbDebug.DiagnosticCore, maxpb.MaxpbDebug.DiagnosticCore.Builder, maxpb.MaxpbDebug.DiagnosticCoreOrBuilder> 
          getCoreFieldBuilder() {
        if (coreBuilder_ == null) {
          coreBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              maxpb.MaxpbDebug.DiagnosticCore, maxpb.MaxpbDebug.DiagnosticCore.Builder, maxpb.MaxpbDebug.DiagnosticCoreOrBuilder>(
                  getCore(),
                  getParentForChildren(),
                  isClean());
          core_ = null;
        }
        return coreBuilder_;
      }

      private maxpb.MaxpbDebug.DiagnosticTelemetry telemetry_ = maxpb.MaxpbDebug.DiagnosticTelemetry.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbDebug.DiagnosticTelemetry, maxpb.MaxpbDebug.DiagnosticTelemetry.Builder, maxpb.MaxpbDebug.DiagnosticTelemetryOrBuilder> telemetryBuilder_;
      /**
       * <code>optional .maxpb.DiagnosticTelemetry telemetry = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public boolean hasTelemetry() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional .maxpb.DiagnosticTelemetry telemetry = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public maxpb.MaxpbDebug.DiagnosticTelemetry getTelemetry() {
        if (telemetryBuilder_ == null) {
          return telemetry_;
        } else {
          return telemetryBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .maxpb.DiagnosticTelemetry telemetry = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public Builder setTelemetry(maxpb.MaxpbDebug.DiagnosticTelemetry value) {
        if (telemetryBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          telemetry_ = value;
          onChanged();
        } else {
          telemetryBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .maxpb.DiagnosticTelemetry telemetry = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public Builder setTelemetry(
          maxpb.MaxpbDebug.DiagnosticTelemetry.Builder builderForValue) {
        if (telemetryBuilder_ == null) {
          telemetry_ = builderForValue.build();
          onChanged();
        } else {
          telemetryBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .maxpb.DiagnosticTelemetry telemetry = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public Builder mergeTelemetry(maxpb.MaxpbDebug.DiagnosticTelemetry value) {
        if (telemetryBuilder_ == null) {
          if (((bitField0_ & 0x00000020) == 0x00000020) &&
              telemetry_ != maxpb.MaxpbDebug.DiagnosticTelemetry.getDefaultInstance()) {
            telemetry_ =
              maxpb.MaxpbDebug.DiagnosticTelemetry.newBuilder(telemetry_).mergeFrom(value).buildPartial();
          } else {
            telemetry_ = value;
          }
          onChanged();
        } else {
          telemetryBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000020;
        return this;
      }
      /**
       * <code>optional .maxpb.DiagnosticTelemetry telemetry = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public Builder clearTelemetry() {
        if (telemetryBuilder_ == null) {
          telemetry_ = maxpb.MaxpbDebug.DiagnosticTelemetry.getDefaultInstance();
          onChanged();
        } else {
          telemetryBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }
      /**
       * <code>optional .maxpb.DiagnosticTelemetry telemetry = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public maxpb.MaxpbDebug.DiagnosticTelemetry.Builder getTelemetryBuilder() {
        bitField0_ |= 0x00000020;
        onChanged();
        return getTelemetryFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .maxpb.DiagnosticTelemetry telemetry = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public maxpb.MaxpbDebug.DiagnosticTelemetryOrBuilder getTelemetryOrBuilder() {
        if (telemetryBuilder_ != null) {
          return telemetryBuilder_.getMessageOrBuilder();
        } else {
          return telemetry_;
        }
      }
      /**
       * <code>optional .maxpb.DiagnosticTelemetry telemetry = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbDebug.DiagnosticTelemetry, maxpb.MaxpbDebug.DiagnosticTelemetry.Builder, maxpb.MaxpbDebug.DiagnosticTelemetryOrBuilder> 
          getTelemetryFieldBuilder() {
        if (telemetryBuilder_ == null) {
          telemetryBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              maxpb.MaxpbDebug.DiagnosticTelemetry, maxpb.MaxpbDebug.DiagnosticTelemetry.Builder, maxpb.MaxpbDebug.DiagnosticTelemetryOrBuilder>(
                  getTelemetry(),
                  getParentForChildren(),
                  isClean());
          telemetry_ = null;
        }
        return telemetryBuilder_;
      }

      private maxpb.MaxpbDebug.DiagnosticReset reset_ = maxpb.MaxpbDebug.DiagnosticReset.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbDebug.DiagnosticReset, maxpb.MaxpbDebug.DiagnosticReset.Builder, maxpb.MaxpbDebug.DiagnosticResetOrBuilder> resetBuilder_;
      /**
       * <code>optional .maxpb.DiagnosticReset reset = 7;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public boolean hasReset() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional .maxpb.DiagnosticReset reset = 7;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public maxpb.MaxpbDebug.DiagnosticReset getReset() {
        if (resetBuilder_ == null) {
          return reset_;
        } else {
          return resetBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .maxpb.DiagnosticReset reset = 7;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public Builder setReset(maxpb.MaxpbDebug.DiagnosticReset value) {
        if (resetBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          reset_ = value;
          onChanged();
        } else {
          resetBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <code>optional .maxpb.DiagnosticReset reset = 7;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public Builder setReset(
          maxpb.MaxpbDebug.DiagnosticReset.Builder builderForValue) {
        if (resetBuilder_ == null) {
          reset_ = builderForValue.build();
          onChanged();
        } else {
          resetBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <code>optional .maxpb.DiagnosticReset reset = 7;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public Builder mergeReset(maxpb.MaxpbDebug.DiagnosticReset value) {
        if (resetBuilder_ == null) {
          if (((bitField0_ & 0x00000040) == 0x00000040) &&
              reset_ != maxpb.MaxpbDebug.DiagnosticReset.getDefaultInstance()) {
            reset_ =
              maxpb.MaxpbDebug.DiagnosticReset.newBuilder(reset_).mergeFrom(value).buildPartial();
          } else {
            reset_ = value;
          }
          onChanged();
        } else {
          resetBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000040;
        return this;
      }
      /**
       * <code>optional .maxpb.DiagnosticReset reset = 7;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public Builder clearReset() {
        if (resetBuilder_ == null) {
          reset_ = maxpb.MaxpbDebug.DiagnosticReset.getDefaultInstance();
          onChanged();
        } else {
          resetBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }
      /**
       * <code>optional .maxpb.DiagnosticReset reset = 7;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public maxpb.MaxpbDebug.DiagnosticReset.Builder getResetBuilder() {
        bitField0_ |= 0x00000040;
        onChanged();
        return getResetFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .maxpb.DiagnosticReset reset = 7;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public maxpb.MaxpbDebug.DiagnosticResetOrBuilder getResetOrBuilder() {
        if (resetBuilder_ != null) {
          return resetBuilder_.getMessageOrBuilder();
        } else {
          return reset_;
        }
      }
      /**
       * <code>optional .maxpb.DiagnosticReset reset = 7;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbDebug.DiagnosticReset, maxpb.MaxpbDebug.DiagnosticReset.Builder, maxpb.MaxpbDebug.DiagnosticResetOrBuilder> 
          getResetFieldBuilder() {
        if (resetBuilder_ == null) {
          resetBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              maxpb.MaxpbDebug.DiagnosticReset, maxpb.MaxpbDebug.DiagnosticReset.Builder, maxpb.MaxpbDebug.DiagnosticResetOrBuilder>(
                  getReset(),
                  getParentForChildren(),
                  isClean());
          reset_ = null;
        }
        return resetBuilder_;
      }

      private java.util.List<maxpb.MaxpbDebug.DiagnosticMemory> memory_ =
        java.util.Collections.emptyList();
      private void ensureMemoryIsMutable() {
        if (!((bitField0_ & 0x00000080) == 0x00000080)) {
          memory_ = new java.util.ArrayList<maxpb.MaxpbDebug.DiagnosticMemory>(memory_);
          bitField0_ |= 0x00000080;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          maxpb.MaxpbDebug.DiagnosticMemory, maxpb.MaxpbDebug.DiagnosticMemory.Builder, maxpb.MaxpbDebug.DiagnosticMemoryOrBuilder> memoryBuilder_;

      /**
       * <code>repeated .maxpb.DiagnosticMemory memory = 8;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public java.util.List<maxpb.MaxpbDebug.DiagnosticMemory> getMemoryList() {
        if (memoryBuilder_ == null) {
          return java.util.Collections.unmodifiableList(memory_);
        } else {
          return memoryBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .maxpb.DiagnosticMemory memory = 8;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public int getMemoryCount() {
        if (memoryBuilder_ == null) {
          return memory_.size();
        } else {
          return memoryBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .maxpb.DiagnosticMemory memory = 8;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public maxpb.MaxpbDebug.DiagnosticMemory getMemory(int index) {
        if (memoryBuilder_ == null) {
          return memory_.get(index);
        } else {
          return memoryBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .maxpb.DiagnosticMemory memory = 8;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public Builder setMemory(
          int index, maxpb.MaxpbDebug.DiagnosticMemory value) {
        if (memoryBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMemoryIsMutable();
          memory_.set(index, value);
          onChanged();
        } else {
          memoryBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .maxpb.DiagnosticMemory memory = 8;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public Builder setMemory(
          int index, maxpb.MaxpbDebug.DiagnosticMemory.Builder builderForValue) {
        if (memoryBuilder_ == null) {
          ensureMemoryIsMutable();
          memory_.set(index, builderForValue.build());
          onChanged();
        } else {
          memoryBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .maxpb.DiagnosticMemory memory = 8;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public Builder addMemory(maxpb.MaxpbDebug.DiagnosticMemory value) {
        if (memoryBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMemoryIsMutable();
          memory_.add(value);
          onChanged();
        } else {
          memoryBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .maxpb.DiagnosticMemory memory = 8;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public Builder addMemory(
          int index, maxpb.MaxpbDebug.DiagnosticMemory value) {
        if (memoryBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMemoryIsMutable();
          memory_.add(index, value);
          onChanged();
        } else {
          memoryBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .maxpb.DiagnosticMemory memory = 8;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public Builder addMemory(
          maxpb.MaxpbDebug.DiagnosticMemory.Builder builderForValue) {
        if (memoryBuilder_ == null) {
          ensureMemoryIsMutable();
          memory_.add(builderForValue.build());
          onChanged();
        } else {
          memoryBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .maxpb.DiagnosticMemory memory = 8;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public Builder addMemory(
          int index, maxpb.MaxpbDebug.DiagnosticMemory.Builder builderForValue) {
        if (memoryBuilder_ == null) {
          ensureMemoryIsMutable();
          memory_.add(index, builderForValue.build());
          onChanged();
        } else {
          memoryBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .maxpb.DiagnosticMemory memory = 8;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public Builder addAllMemory(
          java.lang.Iterable<? extends maxpb.MaxpbDebug.DiagnosticMemory> values) {
        if (memoryBuilder_ == null) {
          ensureMemoryIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, memory_);
          onChanged();
        } else {
          memoryBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .maxpb.DiagnosticMemory memory = 8;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public Builder clearMemory() {
        if (memoryBuilder_ == null) {
          memory_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000080);
          onChanged();
        } else {
          memoryBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .maxpb.DiagnosticMemory memory = 8;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public Builder removeMemory(int index) {
        if (memoryBuilder_ == null) {
          ensureMemoryIsMutable();
          memory_.remove(index);
          onChanged();
        } else {
          memoryBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .maxpb.DiagnosticMemory memory = 8;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public maxpb.MaxpbDebug.DiagnosticMemory.Builder getMemoryBuilder(
          int index) {
        return getMemoryFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .maxpb.DiagnosticMemory memory = 8;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public maxpb.MaxpbDebug.DiagnosticMemoryOrBuilder getMemoryOrBuilder(
          int index) {
        if (memoryBuilder_ == null) {
          return memory_.get(index);  } else {
          return memoryBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .maxpb.DiagnosticMemory memory = 8;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public java.util.List<? extends maxpb.MaxpbDebug.DiagnosticMemoryOrBuilder> 
           getMemoryOrBuilderList() {
        if (memoryBuilder_ != null) {
          return memoryBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(memory_);
        }
      }
      /**
       * <code>repeated .maxpb.DiagnosticMemory memory = 8;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public maxpb.MaxpbDebug.DiagnosticMemory.Builder addMemoryBuilder() {
        return getMemoryFieldBuilder().addBuilder(
            maxpb.MaxpbDebug.DiagnosticMemory.getDefaultInstance());
      }
      /**
       * <code>repeated .maxpb.DiagnosticMemory memory = 8;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public maxpb.MaxpbDebug.DiagnosticMemory.Builder addMemoryBuilder(
          int index) {
        return getMemoryFieldBuilder().addBuilder(
            index, maxpb.MaxpbDebug.DiagnosticMemory.getDefaultInstance());
      }
      /**
       * <code>repeated .maxpb.DiagnosticMemory memory = 8;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public java.util.List<maxpb.MaxpbDebug.DiagnosticMemory.Builder> 
           getMemoryBuilderList() {
        return getMemoryFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          maxpb.MaxpbDebug.DiagnosticMemory, maxpb.MaxpbDebug.DiagnosticMemory.Builder, maxpb.MaxpbDebug.DiagnosticMemoryOrBuilder> 
          getMemoryFieldBuilder() {
        if (memoryBuilder_ == null) {
          memoryBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              maxpb.MaxpbDebug.DiagnosticMemory, maxpb.MaxpbDebug.DiagnosticMemory.Builder, maxpb.MaxpbDebug.DiagnosticMemoryOrBuilder>(
                  memory_,
                  ((bitField0_ & 0x00000080) == 0x00000080),
                  getParentForChildren(),
                  isClean());
          memory_ = null;
        }
        return memoryBuilder_;
      }

      private maxpb.MaxpbDebug.DiagnosticGsensor gsensor_ = maxpb.MaxpbDebug.DiagnosticGsensor.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbDebug.DiagnosticGsensor, maxpb.MaxpbDebug.DiagnosticGsensor.Builder, maxpb.MaxpbDebug.DiagnosticGsensorOrBuilder> gsensorBuilder_;
      /**
       * <code>optional .maxpb.DiagnosticGsensor gsensor = 9;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public boolean hasGsensor() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional .maxpb.DiagnosticGsensor gsensor = 9;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public maxpb.MaxpbDebug.DiagnosticGsensor getGsensor() {
        if (gsensorBuilder_ == null) {
          return gsensor_;
        } else {
          return gsensorBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .maxpb.DiagnosticGsensor gsensor = 9;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public Builder setGsensor(maxpb.MaxpbDebug.DiagnosticGsensor value) {
        if (gsensorBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          gsensor_ = value;
          onChanged();
        } else {
          gsensorBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000100;
        return this;
      }
      /**
       * <code>optional .maxpb.DiagnosticGsensor gsensor = 9;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public Builder setGsensor(
          maxpb.MaxpbDebug.DiagnosticGsensor.Builder builderForValue) {
        if (gsensorBuilder_ == null) {
          gsensor_ = builderForValue.build();
          onChanged();
        } else {
          gsensorBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000100;
        return this;
      }
      /**
       * <code>optional .maxpb.DiagnosticGsensor gsensor = 9;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public Builder mergeGsensor(maxpb.MaxpbDebug.DiagnosticGsensor value) {
        if (gsensorBuilder_ == null) {
          if (((bitField0_ & 0x00000100) == 0x00000100) &&
              gsensor_ != maxpb.MaxpbDebug.DiagnosticGsensor.getDefaultInstance()) {
            gsensor_ =
              maxpb.MaxpbDebug.DiagnosticGsensor.newBuilder(gsensor_).mergeFrom(value).buildPartial();
          } else {
            gsensor_ = value;
          }
          onChanged();
        } else {
          gsensorBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000100;
        return this;
      }
      /**
       * <code>optional .maxpb.DiagnosticGsensor gsensor = 9;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public Builder clearGsensor() {
        if (gsensorBuilder_ == null) {
          gsensor_ = maxpb.MaxpbDebug.DiagnosticGsensor.getDefaultInstance();
          onChanged();
        } else {
          gsensorBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000100);
        return this;
      }
      /**
       * <code>optional .maxpb.DiagnosticGsensor gsensor = 9;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public maxpb.MaxpbDebug.DiagnosticGsensor.Builder getGsensorBuilder() {
        bitField0_ |= 0x00000100;
        onChanged();
        return getGsensorFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .maxpb.DiagnosticGsensor gsensor = 9;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public maxpb.MaxpbDebug.DiagnosticGsensorOrBuilder getGsensorOrBuilder() {
        if (gsensorBuilder_ != null) {
          return gsensorBuilder_.getMessageOrBuilder();
        } else {
          return gsensor_;
        }
      }
      /**
       * <code>optional .maxpb.DiagnosticGsensor gsensor = 9;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbDebug.DiagnosticGsensor, maxpb.MaxpbDebug.DiagnosticGsensor.Builder, maxpb.MaxpbDebug.DiagnosticGsensorOrBuilder> 
          getGsensorFieldBuilder() {
        if (gsensorBuilder_ == null) {
          gsensorBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              maxpb.MaxpbDebug.DiagnosticGsensor, maxpb.MaxpbDebug.DiagnosticGsensor.Builder, maxpb.MaxpbDebug.DiagnosticGsensorOrBuilder>(
                  getGsensor(),
                  getParentForChildren(),
                  isClean());
          gsensor_ = null;
        }
        return gsensorBuilder_;
      }

      private java.util.List<java.lang.Integer> troubleCodes_ = java.util.Collections.emptyList();
      private void ensureTroubleCodesIsMutable() {
        if (!((bitField0_ & 0x00000200) == 0x00000200)) {
          troubleCodes_ = new java.util.ArrayList<java.lang.Integer>(troubleCodes_);
          bitField0_ |= 0x00000200;
         }
      }
      /**
       * <code>repeated uint32 troubleCodes = 10;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getTroubleCodesList() {
        return java.util.Collections.unmodifiableList(troubleCodes_);
      }
      /**
       * <code>repeated uint32 troubleCodes = 10;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public int getTroubleCodesCount() {
        return troubleCodes_.size();
      }
      /**
       * <code>repeated uint32 troubleCodes = 10;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public int getTroubleCodes(int index) {
        return troubleCodes_.get(index);
      }
      /**
       * <code>repeated uint32 troubleCodes = 10;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public Builder setTroubleCodes(
          int index, int value) {
        ensureTroubleCodesIsMutable();
        troubleCodes_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 troubleCodes = 10;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public Builder addTroubleCodes(int value) {
        ensureTroubleCodesIsMutable();
        troubleCodes_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 troubleCodes = 10;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public Builder addAllTroubleCodes(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureTroubleCodesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, troubleCodes_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint32 troubleCodes = 10;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT180
       * </pre>
       */
      public Builder clearTroubleCodes() {
        troubleCodes_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000200);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:maxpb.DiagnosticPacket)
    }

    static {
      defaultInstance = new DiagnosticPacket(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:maxpb.DiagnosticPacket)
  }

  public interface DebugConfigOrBuilder extends
      // @@protoc_insertion_point(interface_extends:maxpb.DebugConfig)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional .maxpb.TraceConfig trace = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180
     * </pre>
     */
    boolean hasTrace();
    /**
     * <code>optional .maxpb.TraceConfig trace = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180
     * </pre>
     */
    maxpb.MaxpbDebug.TraceConfig getTrace();
    /**
     * <code>optional .maxpb.TraceConfig trace = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180
     * </pre>
     */
    maxpb.MaxpbDebug.TraceConfigOrBuilder getTraceOrBuilder();

    /**
     * <code>optional bool debugActive = 3;</code>
     *
     * <pre>
     *&#47;&#64;exclude SupportedBy: MXT160, MXT162, MAXIO, MXT180
     * </pre>
     */
    boolean hasDebugActive();
    /**
     * <code>optional bool debugActive = 3;</code>
     *
     * <pre>
     *&#47;&#64;exclude SupportedBy: MXT160, MXT162, MAXIO, MXT180
     * </pre>
     */
    boolean getDebugActive();
  }
  /**
   * Protobuf type {@code maxpb.DebugConfig}
   */
  public static final class DebugConfig extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:maxpb.DebugConfig)
      DebugConfigOrBuilder {
    // Use DebugConfig.newBuilder() to construct.
    private DebugConfig(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private DebugConfig(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final DebugConfig defaultInstance;
    public static DebugConfig getDefaultInstance() {
      return defaultInstance;
    }

    public DebugConfig getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private DebugConfig(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              maxpb.MaxpbDebug.TraceConfig.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = trace_.toBuilder();
              }
              trace_ = input.readMessage(maxpb.MaxpbDebug.TraceConfig.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(trace_);
                trace_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 24: {
              bitField0_ |= 0x00000002;
              debugActive_ = input.readBool();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return maxpb.MaxpbDebug.internal_static_maxpb_DebugConfig_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return maxpb.MaxpbDebug.internal_static_maxpb_DebugConfig_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              maxpb.MaxpbDebug.DebugConfig.class, maxpb.MaxpbDebug.DebugConfig.Builder.class);
    }

    public static com.google.protobuf.Parser<DebugConfig> PARSER =
        new com.google.protobuf.AbstractParser<DebugConfig>() {
      public DebugConfig parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new DebugConfig(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<DebugConfig> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int TRACE_FIELD_NUMBER = 1;
    private maxpb.MaxpbDebug.TraceConfig trace_;
    /**
     * <code>optional .maxpb.TraceConfig trace = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180
     * </pre>
     */
    public boolean hasTrace() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .maxpb.TraceConfig trace = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180
     * </pre>
     */
    public maxpb.MaxpbDebug.TraceConfig getTrace() {
      return trace_;
    }
    /**
     * <code>optional .maxpb.TraceConfig trace = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180
     * </pre>
     */
    public maxpb.MaxpbDebug.TraceConfigOrBuilder getTraceOrBuilder() {
      return trace_;
    }

    public static final int DEBUGACTIVE_FIELD_NUMBER = 3;
    private boolean debugActive_;
    /**
     * <code>optional bool debugActive = 3;</code>
     *
     * <pre>
     *&#47;&#64;exclude SupportedBy: MXT160, MXT162, MAXIO, MXT180
     * </pre>
     */
    public boolean hasDebugActive() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional bool debugActive = 3;</code>
     *
     * <pre>
     *&#47;&#64;exclude SupportedBy: MXT160, MXT162, MAXIO, MXT180
     * </pre>
     */
    public boolean getDebugActive() {
      return debugActive_;
    }

    private void initFields() {
      trace_ = maxpb.MaxpbDebug.TraceConfig.getDefaultInstance();
      debugActive_ = false;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, trace_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBool(3, debugActive_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, trace_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(3, debugActive_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static maxpb.MaxpbDebug.DebugConfig parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static maxpb.MaxpbDebug.DebugConfig parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static maxpb.MaxpbDebug.DebugConfig parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static maxpb.MaxpbDebug.DebugConfig parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static maxpb.MaxpbDebug.DebugConfig parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static maxpb.MaxpbDebug.DebugConfig parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static maxpb.MaxpbDebug.DebugConfig parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static maxpb.MaxpbDebug.DebugConfig parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static maxpb.MaxpbDebug.DebugConfig parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static maxpb.MaxpbDebug.DebugConfig parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(maxpb.MaxpbDebug.DebugConfig prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code maxpb.DebugConfig}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:maxpb.DebugConfig)
        maxpb.MaxpbDebug.DebugConfigOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return maxpb.MaxpbDebug.internal_static_maxpb_DebugConfig_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return maxpb.MaxpbDebug.internal_static_maxpb_DebugConfig_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                maxpb.MaxpbDebug.DebugConfig.class, maxpb.MaxpbDebug.DebugConfig.Builder.class);
      }

      // Construct using maxpb.MaxpbDebug.DebugConfig.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getTraceFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (traceBuilder_ == null) {
          trace_ = maxpb.MaxpbDebug.TraceConfig.getDefaultInstance();
        } else {
          traceBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        debugActive_ = false;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return maxpb.MaxpbDebug.internal_static_maxpb_DebugConfig_descriptor;
      }

      public maxpb.MaxpbDebug.DebugConfig getDefaultInstanceForType() {
        return maxpb.MaxpbDebug.DebugConfig.getDefaultInstance();
      }

      public maxpb.MaxpbDebug.DebugConfig build() {
        maxpb.MaxpbDebug.DebugConfig result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public maxpb.MaxpbDebug.DebugConfig buildPartial() {
        maxpb.MaxpbDebug.DebugConfig result = new maxpb.MaxpbDebug.DebugConfig(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (traceBuilder_ == null) {
          result.trace_ = trace_;
        } else {
          result.trace_ = traceBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.debugActive_ = debugActive_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof maxpb.MaxpbDebug.DebugConfig) {
          return mergeFrom((maxpb.MaxpbDebug.DebugConfig)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(maxpb.MaxpbDebug.DebugConfig other) {
        if (other == maxpb.MaxpbDebug.DebugConfig.getDefaultInstance()) return this;
        if (other.hasTrace()) {
          mergeTrace(other.getTrace());
        }
        if (other.hasDebugActive()) {
          setDebugActive(other.getDebugActive());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        maxpb.MaxpbDebug.DebugConfig parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (maxpb.MaxpbDebug.DebugConfig) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private maxpb.MaxpbDebug.TraceConfig trace_ = maxpb.MaxpbDebug.TraceConfig.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbDebug.TraceConfig, maxpb.MaxpbDebug.TraceConfig.Builder, maxpb.MaxpbDebug.TraceConfigOrBuilder> traceBuilder_;
      /**
       * <code>optional .maxpb.TraceConfig trace = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180
       * </pre>
       */
      public boolean hasTrace() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .maxpb.TraceConfig trace = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180
       * </pre>
       */
      public maxpb.MaxpbDebug.TraceConfig getTrace() {
        if (traceBuilder_ == null) {
          return trace_;
        } else {
          return traceBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .maxpb.TraceConfig trace = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180
       * </pre>
       */
      public Builder setTrace(maxpb.MaxpbDebug.TraceConfig value) {
        if (traceBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          trace_ = value;
          onChanged();
        } else {
          traceBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .maxpb.TraceConfig trace = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180
       * </pre>
       */
      public Builder setTrace(
          maxpb.MaxpbDebug.TraceConfig.Builder builderForValue) {
        if (traceBuilder_ == null) {
          trace_ = builderForValue.build();
          onChanged();
        } else {
          traceBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .maxpb.TraceConfig trace = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180
       * </pre>
       */
      public Builder mergeTrace(maxpb.MaxpbDebug.TraceConfig value) {
        if (traceBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              trace_ != maxpb.MaxpbDebug.TraceConfig.getDefaultInstance()) {
            trace_ =
              maxpb.MaxpbDebug.TraceConfig.newBuilder(trace_).mergeFrom(value).buildPartial();
          } else {
            trace_ = value;
          }
          onChanged();
        } else {
          traceBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .maxpb.TraceConfig trace = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180
       * </pre>
       */
      public Builder clearTrace() {
        if (traceBuilder_ == null) {
          trace_ = maxpb.MaxpbDebug.TraceConfig.getDefaultInstance();
          onChanged();
        } else {
          traceBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>optional .maxpb.TraceConfig trace = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180
       * </pre>
       */
      public maxpb.MaxpbDebug.TraceConfig.Builder getTraceBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getTraceFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .maxpb.TraceConfig trace = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180
       * </pre>
       */
      public maxpb.MaxpbDebug.TraceConfigOrBuilder getTraceOrBuilder() {
        if (traceBuilder_ != null) {
          return traceBuilder_.getMessageOrBuilder();
        } else {
          return trace_;
        }
      }
      /**
       * <code>optional .maxpb.TraceConfig trace = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbDebug.TraceConfig, maxpb.MaxpbDebug.TraceConfig.Builder, maxpb.MaxpbDebug.TraceConfigOrBuilder> 
          getTraceFieldBuilder() {
        if (traceBuilder_ == null) {
          traceBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              maxpb.MaxpbDebug.TraceConfig, maxpb.MaxpbDebug.TraceConfig.Builder, maxpb.MaxpbDebug.TraceConfigOrBuilder>(
                  getTrace(),
                  getParentForChildren(),
                  isClean());
          trace_ = null;
        }
        return traceBuilder_;
      }

      private boolean debugActive_ ;
      /**
       * <code>optional bool debugActive = 3;</code>
       *
       * <pre>
       *&#47;&#64;exclude SupportedBy: MXT160, MXT162, MAXIO, MXT180
       * </pre>
       */
      public boolean hasDebugActive() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional bool debugActive = 3;</code>
       *
       * <pre>
       *&#47;&#64;exclude SupportedBy: MXT160, MXT162, MAXIO, MXT180
       * </pre>
       */
      public boolean getDebugActive() {
        return debugActive_;
      }
      /**
       * <code>optional bool debugActive = 3;</code>
       *
       * <pre>
       *&#47;&#64;exclude SupportedBy: MXT160, MXT162, MAXIO, MXT180
       * </pre>
       */
      public Builder setDebugActive(boolean value) {
        bitField0_ |= 0x00000002;
        debugActive_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool debugActive = 3;</code>
       *
       * <pre>
       *&#47;&#64;exclude SupportedBy: MXT160, MXT162, MAXIO, MXT180
       * </pre>
       */
      public Builder clearDebugActive() {
        bitField0_ = (bitField0_ & ~0x00000002);
        debugActive_ = false;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:maxpb.DebugConfig)
    }

    static {
      defaultInstance = new DebugConfig(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:maxpb.DebugConfig)
  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_maxpb_TraceMaskLevel_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_maxpb_TraceMaskLevel_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_maxpb_TraceConfig_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_maxpb_TraceConfig_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_maxpb_DiagnosticGsm_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_maxpb_DiagnosticGsm_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_maxpb_DiagnosticGps_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_maxpb_DiagnosticGps_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_maxpb_DiagnosticCore_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_maxpb_DiagnosticCore_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_maxpb_DiagnosticMemory_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_maxpb_DiagnosticMemory_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_maxpb_DiagnosticLora_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_maxpb_DiagnosticLora_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_maxpb_DiagnosticZigbee_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_maxpb_DiagnosticZigbee_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_maxpb_DiagnosticBattery_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_maxpb_DiagnosticBattery_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_maxpb_DiagnosticTelemetry_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_maxpb_DiagnosticTelemetry_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_maxpb_DiagnosticReset_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_maxpb_DiagnosticReset_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_maxpb_DiagnosticGsensor_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_maxpb_DiagnosticGsensor_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_maxpb_DiagnosticPacket_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_maxpb_DiagnosticPacket_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_maxpb_DebugConfig_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_maxpb_DebugConfig_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\021maxpb_debug.proto\022\005maxpb\"\324\004\n\016TraceMask" +
      "Level\022\037\n\004init\030\001 \001(\0162\021.maxpb.TraceLevel\022\036" +
      "\n\003sys\030\002 \001(\0162\021.maxpb.TraceLevel\022#\n\010openDa" +
      "ta\030\003 \001(\0162\021.maxpb.TraceLevel\022%\n\nfileSyste" +
      "m\030\004 \001(\0162\021.maxpb.TraceLevel\022\037\n\004luac\030\005 \001(\016" +
      "2\021.maxpb.TraceLevel\022\037\n\004luat\030\006 \001(\0162\021.maxp" +
      "b.TraceLevel\022\036\n\003usb\030\007 \001(\0162\021.maxpb.TraceL" +
      "evel\022 \n\005flash\030\010 \001(\0162\021.maxpb.TraceLevel\022\036" +
      "\n\003dbg\030\t \001(\0162\021.maxpb.TraceLevel\022!\n\006zigbee" +
      "\030\n \001(\0162\021.maxpb.TraceLevel\022\037\n\004wifi\030\013 \001(\0162",
      "\021.maxpb.TraceLevel\022$\n\tsatellite\030\014 \001(\0162\021." +
      "maxpb.TraceLevel\022\"\n\007tracker\030\r \001(\0162\021.maxp" +
      "b.TraceLevel\022\036\n\003gsm\030\016 \001(\0162\021.maxpb.TraceL" +
      "evel\022\036\n\003gps\030\017 \001(\0162\021.maxpb.TraceLevel\022\037\n\004" +
      "lora\030\020 \001(\0162\021.maxpb.TraceLevel\022\"\n\007gsensor" +
      "\030\021 \001(\0162\021.maxpb.TraceLevel\"X\n\013TraceConfig" +
      "\022$\n\007channel\030\001 \001(\0162\023.maxpb.TraceChannel\022#" +
      "\n\004mask\030\002 \001(\0132\025.maxpb.TraceMaskLevel\"\223\007\n\r" +
      "DiagnosticGsm\022\026\n\016activeInterval\030\001 \001(\r\022\020\n" +
      "\010resetQty\030\002 \001(\r\022\034\n\024registrationInterval\030",
      "\003 \001(\r\022\024\n\014linkInterval\030\004 \001(\r\022\026\n\016socketInt" +
      "erval\030\005 \001(\r\022\036\n\026extendedSocketInterval\030\006 " +
      "\001(\r\022\036\n\026lowFreqRegistrationQty\030\007 \001(\r\022\037\n\027h" +
      "ighFreqRegistrationQty\030\010 \001(\r\022\035\n\025lowCsqRe" +
      "gistrationQty\030\t \001(\r\022\036\n\026highCsqRegistrati" +
      "onQty\030\n \001(\r\022\025\n\rdtrOnInterval\030\013 \001(\r\022\026\n\016dt" +
      "rOffInterval\030\014 \001(\r\022\031\n\021registrationOkQty\030" +
      "\r \001(\r\022\033\n\023registrationFailQty\030\016 \001(\r\022\021\n\tli" +
      "nkOkQty\030\017 \001(\r\022\023\n\013linkFailQty\030\020 \001(\r\022\024\n\014so" +
      "cketsOkQty\030\021 \001(\r\022\026\n\016socketsFailQty\030\022 \001(\r",
      "\022\023\n\013handoverQty\030\023 \001(\r\022\022\n\ntxBytesQty\030\024 \001(" +
      "\r\022\022\n\nrxBytesQty\030\025 \001(\r\022\026\n\016txPacketsOkQty\030" +
      "\026 \001(\r\022\030\n\020txPacketsFailQty\030\027 \001(\r\022\024\n\014rxPac" +
      "ketsQty\030\030 \001(\r\022\035\n\025primarySimcardFailQty\030\031" +
      " \001(\r\022\037\n\027secondarySimcardFailQty\030\032 \001(\r\022\032\n" +
      "\022presettingInterval\030\033 \001(\r\022\032\n\022waitingPinI" +
      "nterval\030\034 \001(\r\022\030\n\020linkIdleInterval\030\035 \001(\r\022" +
      "\032\n\022turningOffInterval\030\036 \001(\r\022\027\n\017presettin" +
      "gOkQty\030\037 \001(\r\022\031\n\021presettingFailQty\030  \001(\r\022" +
      "\027\n\017waitingPinOkQty\030! \001(\r\022\031\n\021waitingPinFa",
      "ilQty\030\" \001(\r\022\024\n\014idleInterval\030# \001(\r\"\317\005\n\rDi" +
      "agnosticGps\022\026\n\016activeInterval\030\001 \001(\r\022\020\n\010r" +
      "esetQty\030\002 \001(\r\022\033\n\023ephemerisRetriesQty\030\003 \001" +
      "(\r\022\035\n\025agpsDownloadOnlineQty\030\004 \001(\r\022\036\n\026agp" +
      "sDownloadOfflineQty\030\005 \001(\r\022\034\n\024fixWithAssi" +
      "stanceQty\030\006 \001(\r\022\037\n\027notFixWithAssistanceQ" +
      "ty\030\007 \001(\r\022\037\n\027fixWithoutAssistanceQty\030\010 \001(" +
      "\r\022\"\n\032notFixWithoutAssistanceQty\030\t \001(\r\022\026\n" +
      "\016antennaFailQty\030\n \001(\r\022\035\n\025AGPSUploadingIn" +
      "terval\030\013 \001(\r\022\026\n\016filterInterval\030\014 \001(\r\022$\n\034",
      "totalTimeToFixWithAssistance\030\r \001(\r\022\'\n\037to" +
      "talTimeToFixWithoutAssistance\030\016 \001(\r\022\'\n\037s" +
      "mallestTimeToFixWithAssistance\030\017 \001(\r\022*\n\"" +
      "smallestTimeToFixWithoutAssistance\030\020 \001(\r" +
      "\022\'\n\037greatestTimeToFixWithAssistance\030\021 \001(" +
      "\r\022*\n\"greatestTimeToFixWithoutAssistance\030" +
      "\022 \001(\r\022\034\n\024fixInterruptInterval\030\023 \001(\r\022\"\n\032d" +
      "ateTimeIntervalToSendAGPS\030\024 \001(\r\022\030\n\020AGPSD" +
      "ownloadTime\030\025 \001(\r\022\020\n\010powerQty\030\026 \001(\r\"\307\001\n\016" +
      "DiagnosticCore\022\031\n\021firmwareChangeQty\030\001 \001(",
      "\r\022\025\n\rintervalSleep\030\002 \001(\r\022\027\n\017intervalRunn" +
      "ing\030\003 \001(\r\022\034\n\024intervalUsbConnected\030\004 \001(\r\022" +
      "\033\n\023intervalBTConnected\030\005 \001(\r\022\026\n\016maxTempe" +
      "rature\030\006 \001(\r\022\027\n\017meanTemperature\030\007 \001(\r\"`\n" +
      "\020DiagnosticMemory\022\037\n\004type\030\001 \001(\0162\021.maxpb." +
      "MemoryType\022\014\n\004size\030\002 \001(\r\022\014\n\004free\030\003 \001(\r\022\017" +
      "\n\007healthy\030\004 \001(\r\"}\n\016DiagnosticLora\022\024\n\014txP" +
      "2pPackets\030\001 \001(\r\022\024\n\014txWanPackets\030\002 \001(\r\022\027\n" +
      "\017rxWanAckPackets\030\003 \001(\r\022\022\n\ntxInterval\030\004 \001" +
      "(\r\022\022\n\nrxInterval\030\005 \001(\r\"`\n\020DiagnosticZigb",
      "ee\022\021\n\ttxPackets\030\001 \001(\r\022\021\n\trxPackets\030\002 \001(\r" +
      "\022\022\n\ntxInterval\030\003 \001(\r\022\022\n\nrxInterval\030\004 \001(\r" +
      "\"\251\001\n\021DiagnosticBattery\022\021\n\tcyclesQty\030\001 \001(" +
      "\r\022!\n\031intervalUseFromLastCharge\030\002 \001(\r\022\030\n\020" +
      "intervalTotalUse\030\003 \001(\r\022\030\n\020intervalChargi" +
      "ng\030\004 \001(\r\022\024\n\014intervalFull\030\005 \001(\r\022\024\n\014interv" +
      "alFail\030\006 \001(\r\"t\n\023DiagnosticTelemetry\022\026\n\016i" +
      "ntervalMoving\030\001 \001(\r\022\027\n\017intervalStopped\030\002" +
      " \001(\r\022\025\n\rmoveToStopQty\030\003 \001(\r\022\025\n\rstopToMov" +
      "eQty\030\004 \001(\r\"\322\001\n\017DiagnosticReset\022\020\n\010resetQ",
      "ty\030\001 \001(\r\022+\n\017lastResetReason\030\002 \001(\0162\022.maxp" +
      "b.ResetReason\022\026\n\016lastResetStamp\030\003 \001(\004\022\023\n" +
      "\013lastResetID\030\004 \001(\r\022\033\n\023lastResetFileNumbe" +
      "r\030\005 \001(\r\022\031\n\021lastResetFileName\030\006 \001(\t\022\033\n\023la" +
      "stResetLineNumber\030\007 \001(\r\"$\n\021DiagnosticGse" +
      "nsor\022\017\n\007failQty\030\001 \001(\r\"\215\003\n\020DiagnosticPack" +
      "et\022!\n\003gsm\030\001 \001(\0132\024.maxpb.DiagnosticGsm\022!\n" +
      "\003gps\030\002 \001(\0132\024.maxpb.DiagnosticGps\022#\n\004lora" +
      "\030\003 \001(\0132\025.maxpb.DiagnosticLora\022)\n\007battery" +
      "\030\004 \001(\0132\030.maxpb.DiagnosticBattery\022#\n\004core",
      "\030\005 \001(\0132\025.maxpb.DiagnosticCore\022-\n\ttelemet" +
      "ry\030\006 \001(\0132\032.maxpb.DiagnosticTelemetry\022%\n\005" +
      "reset\030\007 \001(\0132\026.maxpb.DiagnosticReset\022\'\n\006m" +
      "emory\030\010 \003(\0132\027.maxpb.DiagnosticMemory\022)\n\007" +
      "gsensor\030\t \001(\0132\030.maxpb.DiagnosticGsensor\022" +
      "\024\n\014troubleCodes\030\n \003(\r\"E\n\013DebugConfig\022!\n\005" +
      "trace\030\001 \001(\0132\022.maxpb.TraceConfig\022\023\n\013debug" +
      "Active\030\003 \001(\010*\230\003\n\013ResetReason\022\021\n\rRSTR_POW" +
      "ER_ON\020\000\022\021\n\rRSTR_SIM_LOSS\020\001\022\022\n\016RSTR_SIM_F" +
      "OUND\020\002\022\033\n\027RSTR_SERVER_REQUISITION\020\003\022\030\n\024R",
      "STR_FIRMWARE_UPDATE\020\004\022\026\n\022RSTR_NO_CONNECT" +
      "ION\020\005\022\034\n\030RSTR_TEMPERATURE_RESUMED\020\006\022\024\n\020R" +
      "STR_SMS_COMMAND\020\007\022\030\n\024RSTR_THREAD_WATCHDO" +
      "G\020\010\022\017\n\013RSTR_ASSERT\020\t\022\024\n\020RSTR_LWIP_ASSERT" +
      "\020\n\022\025\n\021RSTR_RESET_BUTTON\020\013\022\020\n\014RSTR_UNKNOW" +
      "N\020\014\022\023\n\017RSTR_STOCK_MODE\020\r\022\032\n\026RSTR_BATTERY" +
      "_BROWN_OUT\020\016\022\017\n\013RSTR_RFU_03\020\017\022\017\n\013RSTR_RF" +
      "U_04\020\020\022\017\n\013RSTR_RFU_05\020\021*\241\002\n\014TraceChannel" +
      "\022\017\n\013TRC_DISABLE\020\000\022\017\n\013TRC_RS232_A\020\001\022\017\n\013TR" +
      "C_RS232_B\020\002\022\r\n\tTRC_VCP_1\020\003\022\r\n\tTRC_VCP_2\020",
      "\004\022\r\n\tTRC_FLASH\020\006\022\021\n\rTRC_BLUETOOTH\020\007\022\016\n\nT" +
      "RC_RFU_01\020\010\022\016\n\nTRC_RFU_02\020\t\022\016\n\nTRC_RFU_0" +
      "3\020\n\022\016\n\nTRC_RFU_04\020\013\022\016\n\nTRC_RFU_05\020\014\022\016\n\nT" +
      "RC_RFU_06\020\r\022\016\n\nTRC_RFU_07\020\016\022\016\n\nTRC_RFU_0" +
      "8\020\017\022\016\n\nTRC_RFU_09\020\020\022\016\n\nTRC_RFU_10\020\021*X\n\nT" +
      "raceLevel\022\013\n\007TRL_OFF\020\000\022\r\n\tTRL_ERROR\020\001\022\017\n" +
      "\013TRL_WARNING\020\002\022\014\n\010TRL_INFO\020\003\022\017\n\013TRL_VERB" +
      "OSE\020\004*\314\002\n\nMemoryType\022\014\n\010MT_STACK\020\000\022\013\n\007MT" +
      "_HEAP\020\001\022\017\n\013MT_FS_STACK\020\002\022\020\n\014MT_LUA_STACK" +
      "\020\003\022\020\n\014MT_IRQ_STACK\020\004\022\r\n\tMT_RFU_01\020\005\022\r\n\tM",
      "T_RFU_02\020\006\022\r\n\tMT_RFU_03\020\007\022\r\n\tMT_RFU_04\020\010" +
      "\022\r\n\tMT_RFU_05\020\t\022\r\n\tMT_RFU_06\020\n\022\r\n\tMT_RFU" +
      "_07\020\013\022\r\n\tMT_RFU_08\020\014\022\r\n\tMT_RFU_09\020\r\022\r\n\tM" +
      "T_RFU_10\020\016\022\r\n\tMT_RFU_11\020\017\022\r\n\tMT_RFU_12\020\020" +
      "\022\r\n\tMT_RFU_13\020\021\022\r\n\tMT_RFU_14\020\022\022\r\n\tMT_RFU" +
      "_15\020\023\022\r\n\tMT_RFU_16\020\024"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
    internal_static_maxpb_TraceMaskLevel_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_maxpb_TraceMaskLevel_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_maxpb_TraceMaskLevel_descriptor,
        new java.lang.String[] { "Init", "Sys", "OpenData", "FileSystem", "Luac", "Luat", "Usb", "Flash", "Dbg", "Zigbee", "Wifi", "Satellite", "Tracker", "Gsm", "Gps", "Lora", "Gsensor", });
    internal_static_maxpb_TraceConfig_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_maxpb_TraceConfig_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_maxpb_TraceConfig_descriptor,
        new java.lang.String[] { "Channel", "Mask", });
    internal_static_maxpb_DiagnosticGsm_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_maxpb_DiagnosticGsm_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_maxpb_DiagnosticGsm_descriptor,
        new java.lang.String[] { "ActiveInterval", "ResetQty", "RegistrationInterval", "LinkInterval", "SocketInterval", "ExtendedSocketInterval", "LowFreqRegistrationQty", "HighFreqRegistrationQty", "LowCsqRegistrationQty", "HighCsqRegistrationQty", "DtrOnInterval", "DtrOffInterval", "RegistrationOkQty", "RegistrationFailQty", "LinkOkQty", "LinkFailQty", "SocketsOkQty", "SocketsFailQty", "HandoverQty", "TxBytesQty", "RxBytesQty", "TxPacketsOkQty", "TxPacketsFailQty", "RxPacketsQty", "PrimarySimcardFailQty", "SecondarySimcardFailQty", "PresettingInterval", "WaitingPinInterval", "LinkIdleInterval", "TurningOffInterval", "PresettingOkQty", "PresettingFailQty", "WaitingPinOkQty", "WaitingPinFailQty", "IdleInterval", });
    internal_static_maxpb_DiagnosticGps_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_maxpb_DiagnosticGps_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_maxpb_DiagnosticGps_descriptor,
        new java.lang.String[] { "ActiveInterval", "ResetQty", "EphemerisRetriesQty", "AgpsDownloadOnlineQty", "AgpsDownloadOfflineQty", "FixWithAssistanceQty", "NotFixWithAssistanceQty", "FixWithoutAssistanceQty", "NotFixWithoutAssistanceQty", "AntennaFailQty", "AGPSUploadingInterval", "FilterInterval", "TotalTimeToFixWithAssistance", "TotalTimeToFixWithoutAssistance", "SmallestTimeToFixWithAssistance", "SmallestTimeToFixWithoutAssistance", "GreatestTimeToFixWithAssistance", "GreatestTimeToFixWithoutAssistance", "FixInterruptInterval", "DateTimeIntervalToSendAGPS", "AGPSDownloadTime", "PowerQty", });
    internal_static_maxpb_DiagnosticCore_descriptor =
      getDescriptor().getMessageTypes().get(4);
    internal_static_maxpb_DiagnosticCore_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_maxpb_DiagnosticCore_descriptor,
        new java.lang.String[] { "FirmwareChangeQty", "IntervalSleep", "IntervalRunning", "IntervalUsbConnected", "IntervalBTConnected", "MaxTemperature", "MeanTemperature", });
    internal_static_maxpb_DiagnosticMemory_descriptor =
      getDescriptor().getMessageTypes().get(5);
    internal_static_maxpb_DiagnosticMemory_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_maxpb_DiagnosticMemory_descriptor,
        new java.lang.String[] { "Type", "Size", "Free", "Healthy", });
    internal_static_maxpb_DiagnosticLora_descriptor =
      getDescriptor().getMessageTypes().get(6);
    internal_static_maxpb_DiagnosticLora_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_maxpb_DiagnosticLora_descriptor,
        new java.lang.String[] { "TxP2PPackets", "TxWanPackets", "RxWanAckPackets", "TxInterval", "RxInterval", });
    internal_static_maxpb_DiagnosticZigbee_descriptor =
      getDescriptor().getMessageTypes().get(7);
    internal_static_maxpb_DiagnosticZigbee_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_maxpb_DiagnosticZigbee_descriptor,
        new java.lang.String[] { "TxPackets", "RxPackets", "TxInterval", "RxInterval", });
    internal_static_maxpb_DiagnosticBattery_descriptor =
      getDescriptor().getMessageTypes().get(8);
    internal_static_maxpb_DiagnosticBattery_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_maxpb_DiagnosticBattery_descriptor,
        new java.lang.String[] { "CyclesQty", "IntervalUseFromLastCharge", "IntervalTotalUse", "IntervalCharging", "IntervalFull", "IntervalFail", });
    internal_static_maxpb_DiagnosticTelemetry_descriptor =
      getDescriptor().getMessageTypes().get(9);
    internal_static_maxpb_DiagnosticTelemetry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_maxpb_DiagnosticTelemetry_descriptor,
        new java.lang.String[] { "IntervalMoving", "IntervalStopped", "MoveToStopQty", "StopToMoveQty", });
    internal_static_maxpb_DiagnosticReset_descriptor =
      getDescriptor().getMessageTypes().get(10);
    internal_static_maxpb_DiagnosticReset_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_maxpb_DiagnosticReset_descriptor,
        new java.lang.String[] { "ResetQty", "LastResetReason", "LastResetStamp", "LastResetID", "LastResetFileNumber", "LastResetFileName", "LastResetLineNumber", });
    internal_static_maxpb_DiagnosticGsensor_descriptor =
      getDescriptor().getMessageTypes().get(11);
    internal_static_maxpb_DiagnosticGsensor_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_maxpb_DiagnosticGsensor_descriptor,
        new java.lang.String[] { "FailQty", });
    internal_static_maxpb_DiagnosticPacket_descriptor =
      getDescriptor().getMessageTypes().get(12);
    internal_static_maxpb_DiagnosticPacket_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_maxpb_DiagnosticPacket_descriptor,
        new java.lang.String[] { "Gsm", "Gps", "Lora", "Battery", "Core", "Telemetry", "Reset", "Memory", "Gsensor", "TroubleCodes", });
    internal_static_maxpb_DebugConfig_descriptor =
      getDescriptor().getMessageTypes().get(13);
    internal_static_maxpb_DebugConfig_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_maxpb_DebugConfig_descriptor,
        new java.lang.String[] { "Trace", "DebugActive", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
