// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: maxpb_filetransfer.proto

package maxpb;

public final class MaxpbFiletransfer {
  private MaxpbFiletransfer() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  /**
   * Protobuf enum {@code maxpb.FileType}
   *
   * <pre>
   *&#47; Defines the file type to be used
   * </pre>
   */
  public enum FileType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>FT_COMBINED = 0;</code>
     *
     * <pre>
     *&#47; Combined firmware app and modem files in one file SupportedBy: MXT160, MXT162
     * </pre>
     */
    FT_COMBINED(0, 0),
    /**
     * <code>FT_FIRMWARE_APP = 1;</code>
     *
     * <pre>
     *&#47; Firmware Application SupportedBy: MXT160, MXT162, MXT180, MAXIO
     * </pre>
     */
    FT_FIRMWARE_APP(1, 1),
    /**
     * <code>FT_FIRMWARE_MODEM = 2;</code>
     *
     * <pre>
     *&#47; Firmware Modem SupportedBy: MXT160, MXT162
     * </pre>
     */
    FT_FIRMWARE_MODEM(2, 2),
    /**
     * <code>FT_BOOTLOADER = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    FT_BOOTLOADER(3, 3),
    /**
     * <code>FT_PROFILE = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180, MAXIO
     * </pre>
     */
    FT_PROFILE(4, 4),
    /**
     * <code>FT_DEFAULT_PROFILE = 5;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    FT_DEFAULT_PROFILE(5, 5),
    /**
     * <code>FT_GEO_LIBRARY = 6;</code>
     *
     * <pre>
     *&#47; Library of regions SupportedBy: MXT160, MXT162
     * </pre>
     */
    FT_GEO_LIBRARY(6, 6),
    /**
     * <code>FT_AGPS = 7;</code>
     *
     * <pre>
     *&#47; Ephemerys Data SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    FT_AGPS(7, 7),
    /**
     * <code>FT_CAN_LIBRARY = 8;</code>
     *
     * <pre>
     *&#47; CAN library file SupportedBy: MXT162, MAXIO
     * </pre>
     */
    FT_CAN_LIBRARY(8, 8),
    /**
     * <code>FT_WIFI = 9;</code>
     *
     * <pre>
     *&#47;&#64;exclude &#64;future_revision SupportedBy: 
     * </pre>
     */
    FT_WIFI(9, 9),
    /**
     * <code>FT_ZIGBEE = 10;</code>
     *
     * <pre>
     *&#47;&#64;exclude &#64;future_revision SupportedBy: 
     * </pre>
     */
    FT_ZIGBEE(10, 10),
    /**
     * <code>FT_SATELLITE = 11;</code>
     *
     * <pre>
     *&#47;&#64;exclude &#64;future_revision SupportedBy: 
     * </pre>
     */
    FT_SATELLITE(11, 11),
    /**
     * <code>FT_SETUP = 12;</code>
     *
     * <pre>
     *&#47;&#64;exclude &#64;future_revision Setup SupportedBy: 
     * </pre>
     */
    FT_SETUP(12, 12),
    /**
     * <code>FT_ACTIONS1 = 13;</code>
     *
     * <pre>
     *&#47;&#64;exclude &#64;future_revision Embedded actions 1 library SupportedBy: 
     * </pre>
     */
    FT_ACTIONS1(13, 13),
    /**
     * <code>FT_ACTIONS2 = 14;</code>
     *
     * <pre>
     *&#47;&#64;exclude &#64;future_revision Embedded actions 2 library SupportedBy: MXT160, MXT162
     * </pre>
     */
    FT_ACTIONS2(14, 14),
    /**
     * <code>FT_CLIENT_ACTIONS = 15;</code>
     *
     * <pre>
     *&#47;&#64;exclude &#64;future_revision Embedded client actions library SupportedBy: 
     * </pre>
     */
    FT_CLIENT_ACTIONS(15, 15),
    /**
     * <code>FT_DRIVERS = 16;</code>
     *
     * <pre>
     *&#47;&#64;exclude &#64;future_revision Library of drivers SupportedBy: 
     * </pre>
     */
    FT_DRIVERS(16, 16),
    /**
     * <code>FT_MACROS = 17;</code>
     *
     * <pre>
     *&#47;&#64;exclude &#64;future_revision Library of macros SupportedBy: 
     * </pre>
     */
    FT_MACROS(17, 17),
    /**
     * <code>FT_AREAS = 18;</code>
     *
     * <pre>
     *&#47;&#64;exclude &#64;future_revision Library of areas SupportedBy: 
     * </pre>
     */
    FT_AREAS(18, 18),
    /**
     * <code>FT_POINTS = 19;</code>
     *
     * <pre>
     *&#47;&#64;exclude &#64;future_revision Library of points SupportedBy: 
     * </pre>
     */
    FT_POINTS(19, 19),
    /**
     * <code>FT_FENCES = 20;</code>
     *
     * <pre>
     *&#47;&#64;exclude &#64;future_revision Library of fences SupportedBy: MXT160, MXT162
     * </pre>
     */
    FT_FENCES(20, 20),
    /**
     * <code>FT_ROUTES = 21;</code>
     *
     * <pre>
     *&#47;&#64;exclude &#64;future_revision Library of routes SupportedBy: 
     * </pre>
     */
    FT_ROUTES(21, 21),
    /**
     * <code>FT_RECEIVED_MSG = 22;</code>
     *
     * <pre>
     *&#47;&#64;exclude &#64;future_revision Received messages SupportedBy: 
     * </pre>
     */
    FT_RECEIVED_MSG(22, 22),
    /**
     * <code>FT_SENT_MSG = 23;</code>
     *
     * <pre>
     *&#47;&#64;exclude &#64;future_revision Sent messages SupportedBy: 
     * </pre>
     */
    FT_SENT_MSG(23, 23),
    /**
     * <code>FT_FIXED_MSG = 24;</code>
     *
     * <pre>
     *&#47;&#64;exclude &#64;future_revision Fixed messages SupportedBy: 
     * </pre>
     */
    FT_FIXED_MSG(24, 24),
    /**
     * <code>FT_PHONES = 25;</code>
     *
     * <pre>
     *&#47;&#64;exclude &#64;future_revision Library of phones SupportedBy: 
     * </pre>
     */
    FT_PHONES(25, 25),
    /**
     * <code>FT_APNS = 26;</code>
     *
     * <pre>
     *&#47;&#64;exclude &#64;future_revision Library of APNs SupportedBy: 
     * </pre>
     */
    FT_APNS(26, 26),
    /**
     * <code>FT_AUDIOS = 27;</code>
     *
     * <pre>
     *&#47;&#64;exclude &#64;future_revision Audios SupportedBy: 
     * </pre>
     */
    FT_AUDIOS(27, 27),
    /**
     * <code>FT_AREAS_FILTER = 28;</code>
     *
     * <pre>
     *&#47;&#64;exclude &#64;future_revision Areas Filter file SupportedBy: 
     * </pre>
     */
    FT_AREAS_FILTER(28, 28),
    /**
     * <code>FT_GENERIC = 29;</code>
     *
     * <pre>
     *&#47;&#64;exclude &#64;future_revision Generic file SupportedBy: 
     * </pre>
     */
    FT_GENERIC(29, 29),
    /**
     * <code>FT_ADAPTER = 30;</code>
     *
     * <pre>
     *&#47;&#64;exclude &#64;future_revision Maxconfig Adapter Update SupportedBy:
     * </pre>
     */
    FT_ADAPTER(30, 30),
    /**
     * <code>FT_ACCELEROMETER_HISTORY = 31;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    FT_ACCELEROMETER_HISTORY(31, 31),
    /**
     * <code>FT_LORA_COORDINATOR_CONFIG = 32;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    FT_LORA_COORDINATOR_CONFIG(32, 32),
    /**
     * <code>FT_MAXIO_CONFIG = 33;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    FT_MAXIO_CONFIG(33, 33),
    /**
     * <code>FT_RFU_01 = 34;</code>
     *
     * <pre>
     *&#47;&#64;exclude SupportedBy:
     * </pre>
     */
    FT_RFU_01(34, 34),
    /**
     * <code>FT_RFU_02 = 35;</code>
     *
     * <pre>
     *&#47;&#64;exclude SupportedBy:
     * </pre>
     */
    FT_RFU_02(35, 35),
    /**
     * <code>FT_RFU_03 = 36;</code>
     *
     * <pre>
     *&#47;&#64;exclude SupportedBy:
     * </pre>
     */
    FT_RFU_03(36, 36),
    /**
     * <code>FT_RFU_04 = 37;</code>
     *
     * <pre>
     *&#47;&#64;exclude SupportedBy:
     * </pre>
     */
    FT_RFU_04(37, 37),
    /**
     * <code>FT_RFU_05 = 38;</code>
     *
     * <pre>
     *&#47;&#64;exclude SupportedBy:
     * </pre>
     */
    FT_RFU_05(38, 38),
    /**
     * <code>FT_A40A_FW = 60;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    FT_A40A_FW(39, 60),
    /**
     * <code>FT_A40B_FW = 61;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    FT_A40B_FW(40, 61),
    /**
     * <code>FT_MAXIO_FW = 62;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    FT_MAXIO_FW(41, 62),
    /**
     * <code>FT_TRACE = 100;</code>
     *
     * <pre>
     *&#47;&#64;exclude &#64;future_revision SupportedBy: MXT160, MXT162
     * </pre>
     */
    FT_TRACE(42, 100),
    /**
     * <code>FT_ALL = 255;</code>
     *
     * <pre>
     *&#47;Used to cancel all file transfers SupportedBy: MXT160, MXT162, MXT180, MAXIO
     * </pre>
     */
    FT_ALL(43, 255),
    ;

    /**
     * <code>FT_COMBINED = 0;</code>
     *
     * <pre>
     *&#47; Combined firmware app and modem files in one file SupportedBy: MXT160, MXT162
     * </pre>
     */
    public static final int FT_COMBINED_VALUE = 0;
    /**
     * <code>FT_FIRMWARE_APP = 1;</code>
     *
     * <pre>
     *&#47; Firmware Application SupportedBy: MXT160, MXT162, MXT180, MAXIO
     * </pre>
     */
    public static final int FT_FIRMWARE_APP_VALUE = 1;
    /**
     * <code>FT_FIRMWARE_MODEM = 2;</code>
     *
     * <pre>
     *&#47; Firmware Modem SupportedBy: MXT160, MXT162
     * </pre>
     */
    public static final int FT_FIRMWARE_MODEM_VALUE = 2;
    /**
     * <code>FT_BOOTLOADER = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public static final int FT_BOOTLOADER_VALUE = 3;
    /**
     * <code>FT_PROFILE = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180, MAXIO
     * </pre>
     */
    public static final int FT_PROFILE_VALUE = 4;
    /**
     * <code>FT_DEFAULT_PROFILE = 5;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    public static final int FT_DEFAULT_PROFILE_VALUE = 5;
    /**
     * <code>FT_GEO_LIBRARY = 6;</code>
     *
     * <pre>
     *&#47; Library of regions SupportedBy: MXT160, MXT162
     * </pre>
     */
    public static final int FT_GEO_LIBRARY_VALUE = 6;
    /**
     * <code>FT_AGPS = 7;</code>
     *
     * <pre>
     *&#47; Ephemerys Data SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    public static final int FT_AGPS_VALUE = 7;
    /**
     * <code>FT_CAN_LIBRARY = 8;</code>
     *
     * <pre>
     *&#47; CAN library file SupportedBy: MXT162, MAXIO
     * </pre>
     */
    public static final int FT_CAN_LIBRARY_VALUE = 8;
    /**
     * <code>FT_WIFI = 9;</code>
     *
     * <pre>
     *&#47;&#64;exclude &#64;future_revision SupportedBy: 
     * </pre>
     */
    public static final int FT_WIFI_VALUE = 9;
    /**
     * <code>FT_ZIGBEE = 10;</code>
     *
     * <pre>
     *&#47;&#64;exclude &#64;future_revision SupportedBy: 
     * </pre>
     */
    public static final int FT_ZIGBEE_VALUE = 10;
    /**
     * <code>FT_SATELLITE = 11;</code>
     *
     * <pre>
     *&#47;&#64;exclude &#64;future_revision SupportedBy: 
     * </pre>
     */
    public static final int FT_SATELLITE_VALUE = 11;
    /**
     * <code>FT_SETUP = 12;</code>
     *
     * <pre>
     *&#47;&#64;exclude &#64;future_revision Setup SupportedBy: 
     * </pre>
     */
    public static final int FT_SETUP_VALUE = 12;
    /**
     * <code>FT_ACTIONS1 = 13;</code>
     *
     * <pre>
     *&#47;&#64;exclude &#64;future_revision Embedded actions 1 library SupportedBy: 
     * </pre>
     */
    public static final int FT_ACTIONS1_VALUE = 13;
    /**
     * <code>FT_ACTIONS2 = 14;</code>
     *
     * <pre>
     *&#47;&#64;exclude &#64;future_revision Embedded actions 2 library SupportedBy: MXT160, MXT162
     * </pre>
     */
    public static final int FT_ACTIONS2_VALUE = 14;
    /**
     * <code>FT_CLIENT_ACTIONS = 15;</code>
     *
     * <pre>
     *&#47;&#64;exclude &#64;future_revision Embedded client actions library SupportedBy: 
     * </pre>
     */
    public static final int FT_CLIENT_ACTIONS_VALUE = 15;
    /**
     * <code>FT_DRIVERS = 16;</code>
     *
     * <pre>
     *&#47;&#64;exclude &#64;future_revision Library of drivers SupportedBy: 
     * </pre>
     */
    public static final int FT_DRIVERS_VALUE = 16;
    /**
     * <code>FT_MACROS = 17;</code>
     *
     * <pre>
     *&#47;&#64;exclude &#64;future_revision Library of macros SupportedBy: 
     * </pre>
     */
    public static final int FT_MACROS_VALUE = 17;
    /**
     * <code>FT_AREAS = 18;</code>
     *
     * <pre>
     *&#47;&#64;exclude &#64;future_revision Library of areas SupportedBy: 
     * </pre>
     */
    public static final int FT_AREAS_VALUE = 18;
    /**
     * <code>FT_POINTS = 19;</code>
     *
     * <pre>
     *&#47;&#64;exclude &#64;future_revision Library of points SupportedBy: 
     * </pre>
     */
    public static final int FT_POINTS_VALUE = 19;
    /**
     * <code>FT_FENCES = 20;</code>
     *
     * <pre>
     *&#47;&#64;exclude &#64;future_revision Library of fences SupportedBy: MXT160, MXT162
     * </pre>
     */
    public static final int FT_FENCES_VALUE = 20;
    /**
     * <code>FT_ROUTES = 21;</code>
     *
     * <pre>
     *&#47;&#64;exclude &#64;future_revision Library of routes SupportedBy: 
     * </pre>
     */
    public static final int FT_ROUTES_VALUE = 21;
    /**
     * <code>FT_RECEIVED_MSG = 22;</code>
     *
     * <pre>
     *&#47;&#64;exclude &#64;future_revision Received messages SupportedBy: 
     * </pre>
     */
    public static final int FT_RECEIVED_MSG_VALUE = 22;
    /**
     * <code>FT_SENT_MSG = 23;</code>
     *
     * <pre>
     *&#47;&#64;exclude &#64;future_revision Sent messages SupportedBy: 
     * </pre>
     */
    public static final int FT_SENT_MSG_VALUE = 23;
    /**
     * <code>FT_FIXED_MSG = 24;</code>
     *
     * <pre>
     *&#47;&#64;exclude &#64;future_revision Fixed messages SupportedBy: 
     * </pre>
     */
    public static final int FT_FIXED_MSG_VALUE = 24;
    /**
     * <code>FT_PHONES = 25;</code>
     *
     * <pre>
     *&#47;&#64;exclude &#64;future_revision Library of phones SupportedBy: 
     * </pre>
     */
    public static final int FT_PHONES_VALUE = 25;
    /**
     * <code>FT_APNS = 26;</code>
     *
     * <pre>
     *&#47;&#64;exclude &#64;future_revision Library of APNs SupportedBy: 
     * </pre>
     */
    public static final int FT_APNS_VALUE = 26;
    /**
     * <code>FT_AUDIOS = 27;</code>
     *
     * <pre>
     *&#47;&#64;exclude &#64;future_revision Audios SupportedBy: 
     * </pre>
     */
    public static final int FT_AUDIOS_VALUE = 27;
    /**
     * <code>FT_AREAS_FILTER = 28;</code>
     *
     * <pre>
     *&#47;&#64;exclude &#64;future_revision Areas Filter file SupportedBy: 
     * </pre>
     */
    public static final int FT_AREAS_FILTER_VALUE = 28;
    /**
     * <code>FT_GENERIC = 29;</code>
     *
     * <pre>
     *&#47;&#64;exclude &#64;future_revision Generic file SupportedBy: 
     * </pre>
     */
    public static final int FT_GENERIC_VALUE = 29;
    /**
     * <code>FT_ADAPTER = 30;</code>
     *
     * <pre>
     *&#47;&#64;exclude &#64;future_revision Maxconfig Adapter Update SupportedBy:
     * </pre>
     */
    public static final int FT_ADAPTER_VALUE = 30;
    /**
     * <code>FT_ACCELEROMETER_HISTORY = 31;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public static final int FT_ACCELEROMETER_HISTORY_VALUE = 31;
    /**
     * <code>FT_LORA_COORDINATOR_CONFIG = 32;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    public static final int FT_LORA_COORDINATOR_CONFIG_VALUE = 32;
    /**
     * <code>FT_MAXIO_CONFIG = 33;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public static final int FT_MAXIO_CONFIG_VALUE = 33;
    /**
     * <code>FT_RFU_01 = 34;</code>
     *
     * <pre>
     *&#47;&#64;exclude SupportedBy:
     * </pre>
     */
    public static final int FT_RFU_01_VALUE = 34;
    /**
     * <code>FT_RFU_02 = 35;</code>
     *
     * <pre>
     *&#47;&#64;exclude SupportedBy:
     * </pre>
     */
    public static final int FT_RFU_02_VALUE = 35;
    /**
     * <code>FT_RFU_03 = 36;</code>
     *
     * <pre>
     *&#47;&#64;exclude SupportedBy:
     * </pre>
     */
    public static final int FT_RFU_03_VALUE = 36;
    /**
     * <code>FT_RFU_04 = 37;</code>
     *
     * <pre>
     *&#47;&#64;exclude SupportedBy:
     * </pre>
     */
    public static final int FT_RFU_04_VALUE = 37;
    /**
     * <code>FT_RFU_05 = 38;</code>
     *
     * <pre>
     *&#47;&#64;exclude SupportedBy:
     * </pre>
     */
    public static final int FT_RFU_05_VALUE = 38;
    /**
     * <code>FT_A40A_FW = 60;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    public static final int FT_A40A_FW_VALUE = 60;
    /**
     * <code>FT_A40B_FW = 61;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    public static final int FT_A40B_FW_VALUE = 61;
    /**
     * <code>FT_MAXIO_FW = 62;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162
     * </pre>
     */
    public static final int FT_MAXIO_FW_VALUE = 62;
    /**
     * <code>FT_TRACE = 100;</code>
     *
     * <pre>
     *&#47;&#64;exclude &#64;future_revision SupportedBy: MXT160, MXT162
     * </pre>
     */
    public static final int FT_TRACE_VALUE = 100;
    /**
     * <code>FT_ALL = 255;</code>
     *
     * <pre>
     *&#47;Used to cancel all file transfers SupportedBy: MXT160, MXT162, MXT180, MAXIO
     * </pre>
     */
    public static final int FT_ALL_VALUE = 255;


    public final int getNumber() { return value; }

    public static FileType valueOf(int value) {
      switch (value) {
        case 0: return FT_COMBINED;
        case 1: return FT_FIRMWARE_APP;
        case 2: return FT_FIRMWARE_MODEM;
        case 3: return FT_BOOTLOADER;
        case 4: return FT_PROFILE;
        case 5: return FT_DEFAULT_PROFILE;
        case 6: return FT_GEO_LIBRARY;
        case 7: return FT_AGPS;
        case 8: return FT_CAN_LIBRARY;
        case 9: return FT_WIFI;
        case 10: return FT_ZIGBEE;
        case 11: return FT_SATELLITE;
        case 12: return FT_SETUP;
        case 13: return FT_ACTIONS1;
        case 14: return FT_ACTIONS2;
        case 15: return FT_CLIENT_ACTIONS;
        case 16: return FT_DRIVERS;
        case 17: return FT_MACROS;
        case 18: return FT_AREAS;
        case 19: return FT_POINTS;
        case 20: return FT_FENCES;
        case 21: return FT_ROUTES;
        case 22: return FT_RECEIVED_MSG;
        case 23: return FT_SENT_MSG;
        case 24: return FT_FIXED_MSG;
        case 25: return FT_PHONES;
        case 26: return FT_APNS;
        case 27: return FT_AUDIOS;
        case 28: return FT_AREAS_FILTER;
        case 29: return FT_GENERIC;
        case 30: return FT_ADAPTER;
        case 31: return FT_ACCELEROMETER_HISTORY;
        case 32: return FT_LORA_COORDINATOR_CONFIG;
        case 33: return FT_MAXIO_CONFIG;
        case 34: return FT_RFU_01;
        case 35: return FT_RFU_02;
        case 36: return FT_RFU_03;
        case 37: return FT_RFU_04;
        case 38: return FT_RFU_05;
        case 60: return FT_A40A_FW;
        case 61: return FT_A40B_FW;
        case 62: return FT_MAXIO_FW;
        case 100: return FT_TRACE;
        case 255: return FT_ALL;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<FileType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<FileType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<FileType>() {
            public FileType findValueByNumber(int number) {
              return FileType.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return maxpb.MaxpbFiletransfer.getDescriptor().getEnumTypes().get(0);
    }

    private static final FileType[] VALUES = values();

    public static FileType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private FileType(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:maxpb.FileType)
  }

  /**
   * Protobuf enum {@code maxpb.DownloadState}
   *
   * <pre>
   *&#47; Defines all states the Download Process can assume
   * </pre>
   */
  public enum DownloadState
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>DS_NONE = 0;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180, MXT142
     * </pre>
     */
    DS_NONE(0, 0),
    /**
     * <code>DS_QUEUED = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180, MXT142
     * </pre>
     */
    DS_QUEUED(1, 1),
    /**
     * <code>DS_DOWNLOADING = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180, MXT142
     * </pre>
     */
    DS_DOWNLOADING(2, 2),
    /**
     * <code>DS_CANCELED = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180, MXT142
     * </pre>
     */
    DS_CANCELED(3, 3),
    /**
     * <code>DS_FINISHING = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180, MXT142
     * </pre>
     */
    DS_FINISHING(4, 4),
    /**
     * <code>DS_FAILED_RETRIES = 5;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180, MXT142
     * </pre>
     */
    DS_FAILED_RETRIES(5, 5),
    /**
     * <code>DS_FAILED_SIZE = 6;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180, MXT142
     * </pre>
     */
    DS_FAILED_SIZE(6, 6),
    /**
     * <code>DS_FAILED_CRC = 7;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180, MXT142
     * </pre>
     */
    DS_FAILED_CRC(7, 7),
    /**
     * <code>DS_FAILED_VERSION = 8;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180, MXT142
     * </pre>
     */
    DS_FAILED_VERSION(8, 8),
    /**
     * <code>DS_APPLIED = 9;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180, MXT142
     * </pre>
     */
    DS_APPLIED(9, 9),
    /**
     * <code>DS_CANCELED_MULTIPLE_SOURCES = 10;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180, MXT142
     * </pre>
     */
    DS_CANCELED_MULTIPLE_SOURCES(10, 10),
    /**
     * <code>DS_FAILED_STORAGE_ERROR = 11;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180, MXT142
     * </pre>
     */
    DS_FAILED_STORAGE_ERROR(11, 11),
    /**
     * <code>DS_RFU_01 = 12;</code>
     *
     * <pre>
     *&#47;&#64;exclude SupportedBy:
     * </pre>
     */
    DS_RFU_01(12, 12),
    /**
     * <code>DS_RFU_02 = 13;</code>
     *
     * <pre>
     *&#47;&#64;exclude SupportedBy:
     * </pre>
     */
    DS_RFU_02(13, 13),
    /**
     * <code>DS_RFU_03 = 14;</code>
     *
     * <pre>
     *&#47;&#64;exclude SupportedBy:
     * </pre>
     */
    DS_RFU_03(14, 14),
    /**
     * <code>DS_RFU_04 = 15;</code>
     *
     * <pre>
     *&#47;&#64;exclude SupportedBy:
     * </pre>
     */
    DS_RFU_04(15, 15),
    /**
     * <code>DS_RFU_05 = 16;</code>
     *
     * <pre>
     *&#47;&#64;exclude SupportedBy:
     * </pre>
     */
    DS_RFU_05(16, 16),
    ;

    /**
     * <code>DS_NONE = 0;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180, MXT142
     * </pre>
     */
    public static final int DS_NONE_VALUE = 0;
    /**
     * <code>DS_QUEUED = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180, MXT142
     * </pre>
     */
    public static final int DS_QUEUED_VALUE = 1;
    /**
     * <code>DS_DOWNLOADING = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180, MXT142
     * </pre>
     */
    public static final int DS_DOWNLOADING_VALUE = 2;
    /**
     * <code>DS_CANCELED = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180, MXT142
     * </pre>
     */
    public static final int DS_CANCELED_VALUE = 3;
    /**
     * <code>DS_FINISHING = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180, MXT142
     * </pre>
     */
    public static final int DS_FINISHING_VALUE = 4;
    /**
     * <code>DS_FAILED_RETRIES = 5;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180, MXT142
     * </pre>
     */
    public static final int DS_FAILED_RETRIES_VALUE = 5;
    /**
     * <code>DS_FAILED_SIZE = 6;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180, MXT142
     * </pre>
     */
    public static final int DS_FAILED_SIZE_VALUE = 6;
    /**
     * <code>DS_FAILED_CRC = 7;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180, MXT142
     * </pre>
     */
    public static final int DS_FAILED_CRC_VALUE = 7;
    /**
     * <code>DS_FAILED_VERSION = 8;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180, MXT142
     * </pre>
     */
    public static final int DS_FAILED_VERSION_VALUE = 8;
    /**
     * <code>DS_APPLIED = 9;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180, MXT142
     * </pre>
     */
    public static final int DS_APPLIED_VALUE = 9;
    /**
     * <code>DS_CANCELED_MULTIPLE_SOURCES = 10;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180, MXT142
     * </pre>
     */
    public static final int DS_CANCELED_MULTIPLE_SOURCES_VALUE = 10;
    /**
     * <code>DS_FAILED_STORAGE_ERROR = 11;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180, MXT142
     * </pre>
     */
    public static final int DS_FAILED_STORAGE_ERROR_VALUE = 11;
    /**
     * <code>DS_RFU_01 = 12;</code>
     *
     * <pre>
     *&#47;&#64;exclude SupportedBy:
     * </pre>
     */
    public static final int DS_RFU_01_VALUE = 12;
    /**
     * <code>DS_RFU_02 = 13;</code>
     *
     * <pre>
     *&#47;&#64;exclude SupportedBy:
     * </pre>
     */
    public static final int DS_RFU_02_VALUE = 13;
    /**
     * <code>DS_RFU_03 = 14;</code>
     *
     * <pre>
     *&#47;&#64;exclude SupportedBy:
     * </pre>
     */
    public static final int DS_RFU_03_VALUE = 14;
    /**
     * <code>DS_RFU_04 = 15;</code>
     *
     * <pre>
     *&#47;&#64;exclude SupportedBy:
     * </pre>
     */
    public static final int DS_RFU_04_VALUE = 15;
    /**
     * <code>DS_RFU_05 = 16;</code>
     *
     * <pre>
     *&#47;&#64;exclude SupportedBy:
     * </pre>
     */
    public static final int DS_RFU_05_VALUE = 16;


    public final int getNumber() { return value; }

    public static DownloadState valueOf(int value) {
      switch (value) {
        case 0: return DS_NONE;
        case 1: return DS_QUEUED;
        case 2: return DS_DOWNLOADING;
        case 3: return DS_CANCELED;
        case 4: return DS_FINISHING;
        case 5: return DS_FAILED_RETRIES;
        case 6: return DS_FAILED_SIZE;
        case 7: return DS_FAILED_CRC;
        case 8: return DS_FAILED_VERSION;
        case 9: return DS_APPLIED;
        case 10: return DS_CANCELED_MULTIPLE_SOURCES;
        case 11: return DS_FAILED_STORAGE_ERROR;
        case 12: return DS_RFU_01;
        case 13: return DS_RFU_02;
        case 14: return DS_RFU_03;
        case 15: return DS_RFU_04;
        case 16: return DS_RFU_05;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<DownloadState>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<DownloadState>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<DownloadState>() {
            public DownloadState findValueByNumber(int number) {
              return DownloadState.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return maxpb.MaxpbFiletransfer.getDescriptor().getEnumTypes().get(1);
    }

    private static final DownloadState[] VALUES = values();

    public static DownloadState valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private DownloadState(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:maxpb.DownloadState)
  }

  public interface FileInfoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:maxpb.FileInfo)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required .maxpb.FileType fileType = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180
     * </pre>
     */
    boolean hasFileType();
    /**
     * <code>required .maxpb.FileType fileType = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180
     * </pre>
     */
    maxpb.MaxpbFiletransfer.FileType getFileType();

    /**
     * <code>optional uint32 major = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180
     * </pre>
     */
    boolean hasMajor();
    /**
     * <code>optional uint32 major = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180
     * </pre>
     */
    int getMajor();

    /**
     * <code>optional uint32 minor = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180
     * </pre>
     */
    boolean hasMinor();
    /**
     * <code>optional uint32 minor = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180
     * </pre>
     */
    int getMinor();

    /**
     * <code>optional uint32 patch = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180
     * </pre>
     */
    boolean hasPatch();
    /**
     * <code>optional uint32 patch = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180
     * </pre>
     */
    int getPatch();

    /**
     * <code>optional uint64 build = 5;</code>
     *
     * <pre>
     *&#47; Unix time SupportedBy: MXT160, MXT162, MAXIO, MXT180
     * </pre>
     */
    boolean hasBuild();
    /**
     * <code>optional uint64 build = 5;</code>
     *
     * <pre>
     *&#47; Unix time SupportedBy: MXT160, MXT162, MAXIO, MXT180
     * </pre>
     */
    long getBuild();

    /**
     * <code>optional uint64 fileID = 6;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180
     * </pre>
     */
    boolean hasFileID();
    /**
     * <code>optional uint64 fileID = 6;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180
     * </pre>
     */
    long getFileID();

    /**
     * <code>optional uint32 fileCrc32 = 7;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180 
     * </pre>
     */
    boolean hasFileCrc32();
    /**
     * <code>optional uint32 fileCrc32 = 7;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180 
     * </pre>
     */
    int getFileCrc32();

    /**
     * <code>optional uint32 fileSize = 8;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180
     * </pre>
     */
    boolean hasFileSize();
    /**
     * <code>optional uint32 fileSize = 8;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180
     * </pre>
     */
    int getFileSize();

    /**
     * <code>optional uint32 downloadProgress = 9;</code>
     *
     * <pre>
     *&#47; Percent SupportedBy: MXT160, MAXIO, MXT162, MXT180
     * </pre>
     */
    boolean hasDownloadProgress();
    /**
     * <code>optional uint32 downloadProgress = 9;</code>
     *
     * <pre>
     *&#47; Percent SupportedBy: MXT160, MAXIO, MXT162, MXT180
     * </pre>
     */
    int getDownloadProgress();

    /**
     * <code>optional .maxpb.DownloadState downloadState = 10;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180
     * </pre>
     */
    boolean hasDownloadState();
    /**
     * <code>optional .maxpb.DownloadState downloadState = 10;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180
     * </pre>
     */
    maxpb.MaxpbFiletransfer.DownloadState getDownloadState();

    /**
     * <code>optional bool isDiff = 11;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    boolean hasIsDiff();
    /**
     * <code>optional bool isDiff = 11;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    boolean getIsDiff();

    /**
     * <code>optional uint64 appliedDate = 12;</code>
     *
     * <pre>
     *&#47; Unix time SupportedBy: MXT160, MXT162, MAXIO, MXT180
     * </pre>
     */
    boolean hasAppliedDate();
    /**
     * <code>optional uint64 appliedDate = 12;</code>
     *
     * <pre>
     *&#47; Unix time SupportedBy: MXT160, MXT162, MAXIO, MXT180
     * </pre>
     */
    long getAppliedDate();
  }
  /**
   * Protobuf type {@code maxpb.FileInfo}
   */
  public static final class FileInfo extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:maxpb.FileInfo)
      FileInfoOrBuilder {
    // Use FileInfo.newBuilder() to construct.
    private FileInfo(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private FileInfo(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final FileInfo defaultInstance;
    public static FileInfo getDefaultInstance() {
      return defaultInstance;
    }

    public FileInfo getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private FileInfo(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              maxpb.MaxpbFiletransfer.FileType value = maxpb.MaxpbFiletransfer.FileType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(1, rawValue);
              } else {
                bitField0_ |= 0x00000001;
                fileType_ = value;
              }
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              major_ = input.readUInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              minor_ = input.readUInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              patch_ = input.readUInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              build_ = input.readUInt64();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              fileID_ = input.readUInt64();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              fileCrc32_ = input.readUInt32();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000080;
              fileSize_ = input.readUInt32();
              break;
            }
            case 72: {
              bitField0_ |= 0x00000100;
              downloadProgress_ = input.readUInt32();
              break;
            }
            case 80: {
              int rawValue = input.readEnum();
              maxpb.MaxpbFiletransfer.DownloadState value = maxpb.MaxpbFiletransfer.DownloadState.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(10, rawValue);
              } else {
                bitField0_ |= 0x00000200;
                downloadState_ = value;
              }
              break;
            }
            case 88: {
              bitField0_ |= 0x00000400;
              isDiff_ = input.readBool();
              break;
            }
            case 96: {
              bitField0_ |= 0x00000800;
              appliedDate_ = input.readUInt64();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return maxpb.MaxpbFiletransfer.internal_static_maxpb_FileInfo_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return maxpb.MaxpbFiletransfer.internal_static_maxpb_FileInfo_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              maxpb.MaxpbFiletransfer.FileInfo.class, maxpb.MaxpbFiletransfer.FileInfo.Builder.class);
    }

    public static com.google.protobuf.Parser<FileInfo> PARSER =
        new com.google.protobuf.AbstractParser<FileInfo>() {
      public FileInfo parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new FileInfo(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<FileInfo> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int FILETYPE_FIELD_NUMBER = 1;
    private maxpb.MaxpbFiletransfer.FileType fileType_;
    /**
     * <code>required .maxpb.FileType fileType = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180
     * </pre>
     */
    public boolean hasFileType() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .maxpb.FileType fileType = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180
     * </pre>
     */
    public maxpb.MaxpbFiletransfer.FileType getFileType() {
      return fileType_;
    }

    public static final int MAJOR_FIELD_NUMBER = 2;
    private int major_;
    /**
     * <code>optional uint32 major = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180
     * </pre>
     */
    public boolean hasMajor() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional uint32 major = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180
     * </pre>
     */
    public int getMajor() {
      return major_;
    }

    public static final int MINOR_FIELD_NUMBER = 3;
    private int minor_;
    /**
     * <code>optional uint32 minor = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180
     * </pre>
     */
    public boolean hasMinor() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional uint32 minor = 3;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180
     * </pre>
     */
    public int getMinor() {
      return minor_;
    }

    public static final int PATCH_FIELD_NUMBER = 4;
    private int patch_;
    /**
     * <code>optional uint32 patch = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180
     * </pre>
     */
    public boolean hasPatch() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional uint32 patch = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180
     * </pre>
     */
    public int getPatch() {
      return patch_;
    }

    public static final int BUILD_FIELD_NUMBER = 5;
    private long build_;
    /**
     * <code>optional uint64 build = 5;</code>
     *
     * <pre>
     *&#47; Unix time SupportedBy: MXT160, MXT162, MAXIO, MXT180
     * </pre>
     */
    public boolean hasBuild() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional uint64 build = 5;</code>
     *
     * <pre>
     *&#47; Unix time SupportedBy: MXT160, MXT162, MAXIO, MXT180
     * </pre>
     */
    public long getBuild() {
      return build_;
    }

    public static final int FILEID_FIELD_NUMBER = 6;
    private long fileID_;
    /**
     * <code>optional uint64 fileID = 6;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180
     * </pre>
     */
    public boolean hasFileID() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional uint64 fileID = 6;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180
     * </pre>
     */
    public long getFileID() {
      return fileID_;
    }

    public static final int FILECRC32_FIELD_NUMBER = 7;
    private int fileCrc32_;
    /**
     * <code>optional uint32 fileCrc32 = 7;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180 
     * </pre>
     */
    public boolean hasFileCrc32() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional uint32 fileCrc32 = 7;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180 
     * </pre>
     */
    public int getFileCrc32() {
      return fileCrc32_;
    }

    public static final int FILESIZE_FIELD_NUMBER = 8;
    private int fileSize_;
    /**
     * <code>optional uint32 fileSize = 8;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180
     * </pre>
     */
    public boolean hasFileSize() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional uint32 fileSize = 8;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180
     * </pre>
     */
    public int getFileSize() {
      return fileSize_;
    }

    public static final int DOWNLOADPROGRESS_FIELD_NUMBER = 9;
    private int downloadProgress_;
    /**
     * <code>optional uint32 downloadProgress = 9;</code>
     *
     * <pre>
     *&#47; Percent SupportedBy: MXT160, MAXIO, MXT162, MXT180
     * </pre>
     */
    public boolean hasDownloadProgress() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional uint32 downloadProgress = 9;</code>
     *
     * <pre>
     *&#47; Percent SupportedBy: MXT160, MAXIO, MXT162, MXT180
     * </pre>
     */
    public int getDownloadProgress() {
      return downloadProgress_;
    }

    public static final int DOWNLOADSTATE_FIELD_NUMBER = 10;
    private maxpb.MaxpbFiletransfer.DownloadState downloadState_;
    /**
     * <code>optional .maxpb.DownloadState downloadState = 10;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180
     * </pre>
     */
    public boolean hasDownloadState() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional .maxpb.DownloadState downloadState = 10;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180
     * </pre>
     */
    public maxpb.MaxpbFiletransfer.DownloadState getDownloadState() {
      return downloadState_;
    }

    public static final int ISDIFF_FIELD_NUMBER = 11;
    private boolean isDiff_;
    /**
     * <code>optional bool isDiff = 11;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    public boolean hasIsDiff() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional bool isDiff = 11;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180
     * </pre>
     */
    public boolean getIsDiff() {
      return isDiff_;
    }

    public static final int APPLIEDDATE_FIELD_NUMBER = 12;
    private long appliedDate_;
    /**
     * <code>optional uint64 appliedDate = 12;</code>
     *
     * <pre>
     *&#47; Unix time SupportedBy: MXT160, MXT162, MAXIO, MXT180
     * </pre>
     */
    public boolean hasAppliedDate() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional uint64 appliedDate = 12;</code>
     *
     * <pre>
     *&#47; Unix time SupportedBy: MXT160, MXT162, MAXIO, MXT180
     * </pre>
     */
    public long getAppliedDate() {
      return appliedDate_;
    }

    private void initFields() {
      fileType_ = maxpb.MaxpbFiletransfer.FileType.FT_COMBINED;
      major_ = 0;
      minor_ = 0;
      patch_ = 0;
      build_ = 0L;
      fileID_ = 0L;
      fileCrc32_ = 0;
      fileSize_ = 0;
      downloadProgress_ = 0;
      downloadState_ = maxpb.MaxpbFiletransfer.DownloadState.DS_NONE;
      isDiff_ = false;
      appliedDate_ = 0L;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasFileType()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, fileType_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, major_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(3, minor_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeUInt32(4, patch_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeUInt64(5, build_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeUInt64(6, fileID_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeUInt32(7, fileCrc32_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeUInt32(8, fileSize_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeUInt32(9, downloadProgress_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeEnum(10, downloadState_.getNumber());
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeBool(11, isDiff_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeUInt64(12, appliedDate_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, fileType_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, major_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, minor_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, patch_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(5, build_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(6, fileID_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(7, fileCrc32_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(8, fileSize_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(9, downloadProgress_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(10, downloadState_.getNumber());
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(11, isDiff_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(12, appliedDate_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static maxpb.MaxpbFiletransfer.FileInfo parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static maxpb.MaxpbFiletransfer.FileInfo parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static maxpb.MaxpbFiletransfer.FileInfo parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static maxpb.MaxpbFiletransfer.FileInfo parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static maxpb.MaxpbFiletransfer.FileInfo parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static maxpb.MaxpbFiletransfer.FileInfo parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static maxpb.MaxpbFiletransfer.FileInfo parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static maxpb.MaxpbFiletransfer.FileInfo parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static maxpb.MaxpbFiletransfer.FileInfo parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static maxpb.MaxpbFiletransfer.FileInfo parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(maxpb.MaxpbFiletransfer.FileInfo prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code maxpb.FileInfo}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:maxpb.FileInfo)
        maxpb.MaxpbFiletransfer.FileInfoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return maxpb.MaxpbFiletransfer.internal_static_maxpb_FileInfo_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return maxpb.MaxpbFiletransfer.internal_static_maxpb_FileInfo_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                maxpb.MaxpbFiletransfer.FileInfo.class, maxpb.MaxpbFiletransfer.FileInfo.Builder.class);
      }

      // Construct using maxpb.MaxpbFiletransfer.FileInfo.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        fileType_ = maxpb.MaxpbFiletransfer.FileType.FT_COMBINED;
        bitField0_ = (bitField0_ & ~0x00000001);
        major_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        minor_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        patch_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        build_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000010);
        fileID_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000020);
        fileCrc32_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        fileSize_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        downloadProgress_ = 0;
        bitField0_ = (bitField0_ & ~0x00000100);
        downloadState_ = maxpb.MaxpbFiletransfer.DownloadState.DS_NONE;
        bitField0_ = (bitField0_ & ~0x00000200);
        isDiff_ = false;
        bitField0_ = (bitField0_ & ~0x00000400);
        appliedDate_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000800);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return maxpb.MaxpbFiletransfer.internal_static_maxpb_FileInfo_descriptor;
      }

      public maxpb.MaxpbFiletransfer.FileInfo getDefaultInstanceForType() {
        return maxpb.MaxpbFiletransfer.FileInfo.getDefaultInstance();
      }

      public maxpb.MaxpbFiletransfer.FileInfo build() {
        maxpb.MaxpbFiletransfer.FileInfo result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public maxpb.MaxpbFiletransfer.FileInfo buildPartial() {
        maxpb.MaxpbFiletransfer.FileInfo result = new maxpb.MaxpbFiletransfer.FileInfo(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.fileType_ = fileType_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.major_ = major_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.minor_ = minor_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.patch_ = patch_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.build_ = build_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.fileID_ = fileID_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.fileCrc32_ = fileCrc32_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.fileSize_ = fileSize_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.downloadProgress_ = downloadProgress_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.downloadState_ = downloadState_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        result.isDiff_ = isDiff_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000800;
        }
        result.appliedDate_ = appliedDate_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof maxpb.MaxpbFiletransfer.FileInfo) {
          return mergeFrom((maxpb.MaxpbFiletransfer.FileInfo)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(maxpb.MaxpbFiletransfer.FileInfo other) {
        if (other == maxpb.MaxpbFiletransfer.FileInfo.getDefaultInstance()) return this;
        if (other.hasFileType()) {
          setFileType(other.getFileType());
        }
        if (other.hasMajor()) {
          setMajor(other.getMajor());
        }
        if (other.hasMinor()) {
          setMinor(other.getMinor());
        }
        if (other.hasPatch()) {
          setPatch(other.getPatch());
        }
        if (other.hasBuild()) {
          setBuild(other.getBuild());
        }
        if (other.hasFileID()) {
          setFileID(other.getFileID());
        }
        if (other.hasFileCrc32()) {
          setFileCrc32(other.getFileCrc32());
        }
        if (other.hasFileSize()) {
          setFileSize(other.getFileSize());
        }
        if (other.hasDownloadProgress()) {
          setDownloadProgress(other.getDownloadProgress());
        }
        if (other.hasDownloadState()) {
          setDownloadState(other.getDownloadState());
        }
        if (other.hasIsDiff()) {
          setIsDiff(other.getIsDiff());
        }
        if (other.hasAppliedDate()) {
          setAppliedDate(other.getAppliedDate());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasFileType()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        maxpb.MaxpbFiletransfer.FileInfo parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (maxpb.MaxpbFiletransfer.FileInfo) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private maxpb.MaxpbFiletransfer.FileType fileType_ = maxpb.MaxpbFiletransfer.FileType.FT_COMBINED;
      /**
       * <code>required .maxpb.FileType fileType = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180
       * </pre>
       */
      public boolean hasFileType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .maxpb.FileType fileType = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180
       * </pre>
       */
      public maxpb.MaxpbFiletransfer.FileType getFileType() {
        return fileType_;
      }
      /**
       * <code>required .maxpb.FileType fileType = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180
       * </pre>
       */
      public Builder setFileType(maxpb.MaxpbFiletransfer.FileType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        fileType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required .maxpb.FileType fileType = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180
       * </pre>
       */
      public Builder clearFileType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        fileType_ = maxpb.MaxpbFiletransfer.FileType.FT_COMBINED;
        onChanged();
        return this;
      }

      private int major_ ;
      /**
       * <code>optional uint32 major = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180
       * </pre>
       */
      public boolean hasMajor() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional uint32 major = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180
       * </pre>
       */
      public int getMajor() {
        return major_;
      }
      /**
       * <code>optional uint32 major = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180
       * </pre>
       */
      public Builder setMajor(int value) {
        bitField0_ |= 0x00000002;
        major_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 major = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180
       * </pre>
       */
      public Builder clearMajor() {
        bitField0_ = (bitField0_ & ~0x00000002);
        major_ = 0;
        onChanged();
        return this;
      }

      private int minor_ ;
      /**
       * <code>optional uint32 minor = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180
       * </pre>
       */
      public boolean hasMinor() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional uint32 minor = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180
       * </pre>
       */
      public int getMinor() {
        return minor_;
      }
      /**
       * <code>optional uint32 minor = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180
       * </pre>
       */
      public Builder setMinor(int value) {
        bitField0_ |= 0x00000004;
        minor_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 minor = 3;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180
       * </pre>
       */
      public Builder clearMinor() {
        bitField0_ = (bitField0_ & ~0x00000004);
        minor_ = 0;
        onChanged();
        return this;
      }

      private int patch_ ;
      /**
       * <code>optional uint32 patch = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180
       * </pre>
       */
      public boolean hasPatch() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional uint32 patch = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180
       * </pre>
       */
      public int getPatch() {
        return patch_;
      }
      /**
       * <code>optional uint32 patch = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180
       * </pre>
       */
      public Builder setPatch(int value) {
        bitField0_ |= 0x00000008;
        patch_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 patch = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180
       * </pre>
       */
      public Builder clearPatch() {
        bitField0_ = (bitField0_ & ~0x00000008);
        patch_ = 0;
        onChanged();
        return this;
      }

      private long build_ ;
      /**
       * <code>optional uint64 build = 5;</code>
       *
       * <pre>
       *&#47; Unix time SupportedBy: MXT160, MXT162, MAXIO, MXT180
       * </pre>
       */
      public boolean hasBuild() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional uint64 build = 5;</code>
       *
       * <pre>
       *&#47; Unix time SupportedBy: MXT160, MXT162, MAXIO, MXT180
       * </pre>
       */
      public long getBuild() {
        return build_;
      }
      /**
       * <code>optional uint64 build = 5;</code>
       *
       * <pre>
       *&#47; Unix time SupportedBy: MXT160, MXT162, MAXIO, MXT180
       * </pre>
       */
      public Builder setBuild(long value) {
        bitField0_ |= 0x00000010;
        build_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint64 build = 5;</code>
       *
       * <pre>
       *&#47; Unix time SupportedBy: MXT160, MXT162, MAXIO, MXT180
       * </pre>
       */
      public Builder clearBuild() {
        bitField0_ = (bitField0_ & ~0x00000010);
        build_ = 0L;
        onChanged();
        return this;
      }

      private long fileID_ ;
      /**
       * <code>optional uint64 fileID = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180
       * </pre>
       */
      public boolean hasFileID() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional uint64 fileID = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180
       * </pre>
       */
      public long getFileID() {
        return fileID_;
      }
      /**
       * <code>optional uint64 fileID = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180
       * </pre>
       */
      public Builder setFileID(long value) {
        bitField0_ |= 0x00000020;
        fileID_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint64 fileID = 6;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180
       * </pre>
       */
      public Builder clearFileID() {
        bitField0_ = (bitField0_ & ~0x00000020);
        fileID_ = 0L;
        onChanged();
        return this;
      }

      private int fileCrc32_ ;
      /**
       * <code>optional uint32 fileCrc32 = 7;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180 
       * </pre>
       */
      public boolean hasFileCrc32() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional uint32 fileCrc32 = 7;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180 
       * </pre>
       */
      public int getFileCrc32() {
        return fileCrc32_;
      }
      /**
       * <code>optional uint32 fileCrc32 = 7;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180 
       * </pre>
       */
      public Builder setFileCrc32(int value) {
        bitField0_ |= 0x00000040;
        fileCrc32_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 fileCrc32 = 7;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180 
       * </pre>
       */
      public Builder clearFileCrc32() {
        bitField0_ = (bitField0_ & ~0x00000040);
        fileCrc32_ = 0;
        onChanged();
        return this;
      }

      private int fileSize_ ;
      /**
       * <code>optional uint32 fileSize = 8;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180
       * </pre>
       */
      public boolean hasFileSize() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional uint32 fileSize = 8;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180
       * </pre>
       */
      public int getFileSize() {
        return fileSize_;
      }
      /**
       * <code>optional uint32 fileSize = 8;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180
       * </pre>
       */
      public Builder setFileSize(int value) {
        bitField0_ |= 0x00000080;
        fileSize_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 fileSize = 8;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180
       * </pre>
       */
      public Builder clearFileSize() {
        bitField0_ = (bitField0_ & ~0x00000080);
        fileSize_ = 0;
        onChanged();
        return this;
      }

      private int downloadProgress_ ;
      /**
       * <code>optional uint32 downloadProgress = 9;</code>
       *
       * <pre>
       *&#47; Percent SupportedBy: MXT160, MAXIO, MXT162, MXT180
       * </pre>
       */
      public boolean hasDownloadProgress() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional uint32 downloadProgress = 9;</code>
       *
       * <pre>
       *&#47; Percent SupportedBy: MXT160, MAXIO, MXT162, MXT180
       * </pre>
       */
      public int getDownloadProgress() {
        return downloadProgress_;
      }
      /**
       * <code>optional uint32 downloadProgress = 9;</code>
       *
       * <pre>
       *&#47; Percent SupportedBy: MXT160, MAXIO, MXT162, MXT180
       * </pre>
       */
      public Builder setDownloadProgress(int value) {
        bitField0_ |= 0x00000100;
        downloadProgress_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 downloadProgress = 9;</code>
       *
       * <pre>
       *&#47; Percent SupportedBy: MXT160, MAXIO, MXT162, MXT180
       * </pre>
       */
      public Builder clearDownloadProgress() {
        bitField0_ = (bitField0_ & ~0x00000100);
        downloadProgress_ = 0;
        onChanged();
        return this;
      }

      private maxpb.MaxpbFiletransfer.DownloadState downloadState_ = maxpb.MaxpbFiletransfer.DownloadState.DS_NONE;
      /**
       * <code>optional .maxpb.DownloadState downloadState = 10;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180
       * </pre>
       */
      public boolean hasDownloadState() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional .maxpb.DownloadState downloadState = 10;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180
       * </pre>
       */
      public maxpb.MaxpbFiletransfer.DownloadState getDownloadState() {
        return downloadState_;
      }
      /**
       * <code>optional .maxpb.DownloadState downloadState = 10;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180
       * </pre>
       */
      public Builder setDownloadState(maxpb.MaxpbFiletransfer.DownloadState value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000200;
        downloadState_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .maxpb.DownloadState downloadState = 10;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180
       * </pre>
       */
      public Builder clearDownloadState() {
        bitField0_ = (bitField0_ & ~0x00000200);
        downloadState_ = maxpb.MaxpbFiletransfer.DownloadState.DS_NONE;
        onChanged();
        return this;
      }

      private boolean isDiff_ ;
      /**
       * <code>optional bool isDiff = 11;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public boolean hasIsDiff() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>optional bool isDiff = 11;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public boolean getIsDiff() {
        return isDiff_;
      }
      /**
       * <code>optional bool isDiff = 11;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public Builder setIsDiff(boolean value) {
        bitField0_ |= 0x00000400;
        isDiff_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool isDiff = 11;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180
       * </pre>
       */
      public Builder clearIsDiff() {
        bitField0_ = (bitField0_ & ~0x00000400);
        isDiff_ = false;
        onChanged();
        return this;
      }

      private long appliedDate_ ;
      /**
       * <code>optional uint64 appliedDate = 12;</code>
       *
       * <pre>
       *&#47; Unix time SupportedBy: MXT160, MXT162, MAXIO, MXT180
       * </pre>
       */
      public boolean hasAppliedDate() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional uint64 appliedDate = 12;</code>
       *
       * <pre>
       *&#47; Unix time SupportedBy: MXT160, MXT162, MAXIO, MXT180
       * </pre>
       */
      public long getAppliedDate() {
        return appliedDate_;
      }
      /**
       * <code>optional uint64 appliedDate = 12;</code>
       *
       * <pre>
       *&#47; Unix time SupportedBy: MXT160, MXT162, MAXIO, MXT180
       * </pre>
       */
      public Builder setAppliedDate(long value) {
        bitField0_ |= 0x00000800;
        appliedDate_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint64 appliedDate = 12;</code>
       *
       * <pre>
       *&#47; Unix time SupportedBy: MXT160, MXT162, MAXIO, MXT180
       * </pre>
       */
      public Builder clearAppliedDate() {
        bitField0_ = (bitField0_ & ~0x00000800);
        appliedDate_ = 0L;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:maxpb.FileInfo)
    }

    static {
      defaultInstance = new FileInfo(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:maxpb.FileInfo)
  }

  public interface FileCommandOrBuilder extends
      // @@protoc_insertion_point(interface_extends:maxpb.FileCommand)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required uint64 deviceID = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180
     * </pre>
     */
    boolean hasDeviceID();
    /**
     * <code>required uint64 deviceID = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180
     * </pre>
     */
    long getDeviceID();

    /**
     * <code>required uint64 commandID = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180
     * </pre>
     */
    boolean hasCommandID();
    /**
     * <code>required uint64 commandID = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180
     * </pre>
     */
    long getCommandID();

    /**
     * <code>repeated .maxpb.FileInfo fileInfo = 3;</code>
     *
     * <pre>
     *&#47; Information of the file SupportedBy: MXT160, MXT162,  MXT180, MAXIO
     * </pre>
     */
    java.util.List<maxpb.MaxpbFiletransfer.FileInfo> 
        getFileInfoList();
    /**
     * <code>repeated .maxpb.FileInfo fileInfo = 3;</code>
     *
     * <pre>
     *&#47; Information of the file SupportedBy: MXT160, MXT162,  MXT180, MAXIO
     * </pre>
     */
    maxpb.MaxpbFiletransfer.FileInfo getFileInfo(int index);
    /**
     * <code>repeated .maxpb.FileInfo fileInfo = 3;</code>
     *
     * <pre>
     *&#47; Information of the file SupportedBy: MXT160, MXT162,  MXT180, MAXIO
     * </pre>
     */
    int getFileInfoCount();
    /**
     * <code>repeated .maxpb.FileInfo fileInfo = 3;</code>
     *
     * <pre>
     *&#47; Information of the file SupportedBy: MXT160, MXT162,  MXT180, MAXIO
     * </pre>
     */
    java.util.List<? extends maxpb.MaxpbFiletransfer.FileInfoOrBuilder> 
        getFileInfoOrBuilderList();
    /**
     * <code>repeated .maxpb.FileInfo fileInfo = 3;</code>
     *
     * <pre>
     *&#47; Information of the file SupportedBy: MXT160, MXT162,  MXT180, MAXIO
     * </pre>
     */
    maxpb.MaxpbFiletransfer.FileInfoOrBuilder getFileInfoOrBuilder(
        int index);

    /**
     * <code>optional uint32 maxTries = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180
     * </pre>
     */
    boolean hasMaxTries();
    /**
     * <code>optional uint32 maxTries = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180
     * </pre>
     */
    int getMaxTries();
  }
  /**
   * Protobuf type {@code maxpb.FileCommand}
   *
   * <pre>
   *&#47; MT 0x0006 - This message should be used to initiate a file change
   * </pre>
   */
  public static final class FileCommand extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:maxpb.FileCommand)
      FileCommandOrBuilder {
    // Use FileCommand.newBuilder() to construct.
    private FileCommand(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private FileCommand(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final FileCommand defaultInstance;
    public static FileCommand getDefaultInstance() {
      return defaultInstance;
    }

    public FileCommand getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private FileCommand(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              deviceID_ = input.readUInt64();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              commandID_ = input.readUInt64();
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                fileInfo_ = new java.util.ArrayList<maxpb.MaxpbFiletransfer.FileInfo>();
                mutable_bitField0_ |= 0x00000004;
              }
              fileInfo_.add(input.readMessage(maxpb.MaxpbFiletransfer.FileInfo.PARSER, extensionRegistry));
              break;
            }
            case 32: {
              bitField0_ |= 0x00000004;
              maxTries_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          fileInfo_ = java.util.Collections.unmodifiableList(fileInfo_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return maxpb.MaxpbFiletransfer.internal_static_maxpb_FileCommand_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return maxpb.MaxpbFiletransfer.internal_static_maxpb_FileCommand_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              maxpb.MaxpbFiletransfer.FileCommand.class, maxpb.MaxpbFiletransfer.FileCommand.Builder.class);
    }

    public static com.google.protobuf.Parser<FileCommand> PARSER =
        new com.google.protobuf.AbstractParser<FileCommand>() {
      public FileCommand parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new FileCommand(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<FileCommand> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int DEVICEID_FIELD_NUMBER = 1;
    private long deviceID_;
    /**
     * <code>required uint64 deviceID = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180
     * </pre>
     */
    public boolean hasDeviceID() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required uint64 deviceID = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180
     * </pre>
     */
    public long getDeviceID() {
      return deviceID_;
    }

    public static final int COMMANDID_FIELD_NUMBER = 2;
    private long commandID_;
    /**
     * <code>required uint64 commandID = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180
     * </pre>
     */
    public boolean hasCommandID() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required uint64 commandID = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180
     * </pre>
     */
    public long getCommandID() {
      return commandID_;
    }

    public static final int FILEINFO_FIELD_NUMBER = 3;
    private java.util.List<maxpb.MaxpbFiletransfer.FileInfo> fileInfo_;
    /**
     * <code>repeated .maxpb.FileInfo fileInfo = 3;</code>
     *
     * <pre>
     *&#47; Information of the file SupportedBy: MXT160, MXT162,  MXT180, MAXIO
     * </pre>
     */
    public java.util.List<maxpb.MaxpbFiletransfer.FileInfo> getFileInfoList() {
      return fileInfo_;
    }
    /**
     * <code>repeated .maxpb.FileInfo fileInfo = 3;</code>
     *
     * <pre>
     *&#47; Information of the file SupportedBy: MXT160, MXT162,  MXT180, MAXIO
     * </pre>
     */
    public java.util.List<? extends maxpb.MaxpbFiletransfer.FileInfoOrBuilder> 
        getFileInfoOrBuilderList() {
      return fileInfo_;
    }
    /**
     * <code>repeated .maxpb.FileInfo fileInfo = 3;</code>
     *
     * <pre>
     *&#47; Information of the file SupportedBy: MXT160, MXT162,  MXT180, MAXIO
     * </pre>
     */
    public int getFileInfoCount() {
      return fileInfo_.size();
    }
    /**
     * <code>repeated .maxpb.FileInfo fileInfo = 3;</code>
     *
     * <pre>
     *&#47; Information of the file SupportedBy: MXT160, MXT162,  MXT180, MAXIO
     * </pre>
     */
    public maxpb.MaxpbFiletransfer.FileInfo getFileInfo(int index) {
      return fileInfo_.get(index);
    }
    /**
     * <code>repeated .maxpb.FileInfo fileInfo = 3;</code>
     *
     * <pre>
     *&#47; Information of the file SupportedBy: MXT160, MXT162,  MXT180, MAXIO
     * </pre>
     */
    public maxpb.MaxpbFiletransfer.FileInfoOrBuilder getFileInfoOrBuilder(
        int index) {
      return fileInfo_.get(index);
    }

    public static final int MAXTRIES_FIELD_NUMBER = 4;
    private int maxTries_;
    /**
     * <code>optional uint32 maxTries = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180
     * </pre>
     */
    public boolean hasMaxTries() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional uint32 maxTries = 4;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180
     * </pre>
     */
    public int getMaxTries() {
      return maxTries_;
    }

    private void initFields() {
      deviceID_ = 0L;
      commandID_ = 0L;
      fileInfo_ = java.util.Collections.emptyList();
      maxTries_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasDeviceID()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasCommandID()) {
        memoizedIsInitialized = 0;
        return false;
      }
      for (int i = 0; i < getFileInfoCount(); i++) {
        if (!getFileInfo(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt64(1, deviceID_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt64(2, commandID_);
      }
      for (int i = 0; i < fileInfo_.size(); i++) {
        output.writeMessage(3, fileInfo_.get(i));
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(4, maxTries_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(1, deviceID_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(2, commandID_);
      }
      for (int i = 0; i < fileInfo_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, fileInfo_.get(i));
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, maxTries_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static maxpb.MaxpbFiletransfer.FileCommand parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static maxpb.MaxpbFiletransfer.FileCommand parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static maxpb.MaxpbFiletransfer.FileCommand parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static maxpb.MaxpbFiletransfer.FileCommand parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static maxpb.MaxpbFiletransfer.FileCommand parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static maxpb.MaxpbFiletransfer.FileCommand parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static maxpb.MaxpbFiletransfer.FileCommand parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static maxpb.MaxpbFiletransfer.FileCommand parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static maxpb.MaxpbFiletransfer.FileCommand parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static maxpb.MaxpbFiletransfer.FileCommand parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(maxpb.MaxpbFiletransfer.FileCommand prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code maxpb.FileCommand}
     *
     * <pre>
     *&#47; MT 0x0006 - This message should be used to initiate a file change
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:maxpb.FileCommand)
        maxpb.MaxpbFiletransfer.FileCommandOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return maxpb.MaxpbFiletransfer.internal_static_maxpb_FileCommand_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return maxpb.MaxpbFiletransfer.internal_static_maxpb_FileCommand_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                maxpb.MaxpbFiletransfer.FileCommand.class, maxpb.MaxpbFiletransfer.FileCommand.Builder.class);
      }

      // Construct using maxpb.MaxpbFiletransfer.FileCommand.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getFileInfoFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        deviceID_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000001);
        commandID_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000002);
        if (fileInfoBuilder_ == null) {
          fileInfo_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          fileInfoBuilder_.clear();
        }
        maxTries_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return maxpb.MaxpbFiletransfer.internal_static_maxpb_FileCommand_descriptor;
      }

      public maxpb.MaxpbFiletransfer.FileCommand getDefaultInstanceForType() {
        return maxpb.MaxpbFiletransfer.FileCommand.getDefaultInstance();
      }

      public maxpb.MaxpbFiletransfer.FileCommand build() {
        maxpb.MaxpbFiletransfer.FileCommand result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public maxpb.MaxpbFiletransfer.FileCommand buildPartial() {
        maxpb.MaxpbFiletransfer.FileCommand result = new maxpb.MaxpbFiletransfer.FileCommand(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.deviceID_ = deviceID_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.commandID_ = commandID_;
        if (fileInfoBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004)) {
            fileInfo_ = java.util.Collections.unmodifiableList(fileInfo_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.fileInfo_ = fileInfo_;
        } else {
          result.fileInfo_ = fileInfoBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000004;
        }
        result.maxTries_ = maxTries_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof maxpb.MaxpbFiletransfer.FileCommand) {
          return mergeFrom((maxpb.MaxpbFiletransfer.FileCommand)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(maxpb.MaxpbFiletransfer.FileCommand other) {
        if (other == maxpb.MaxpbFiletransfer.FileCommand.getDefaultInstance()) return this;
        if (other.hasDeviceID()) {
          setDeviceID(other.getDeviceID());
        }
        if (other.hasCommandID()) {
          setCommandID(other.getCommandID());
        }
        if (fileInfoBuilder_ == null) {
          if (!other.fileInfo_.isEmpty()) {
            if (fileInfo_.isEmpty()) {
              fileInfo_ = other.fileInfo_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureFileInfoIsMutable();
              fileInfo_.addAll(other.fileInfo_);
            }
            onChanged();
          }
        } else {
          if (!other.fileInfo_.isEmpty()) {
            if (fileInfoBuilder_.isEmpty()) {
              fileInfoBuilder_.dispose();
              fileInfoBuilder_ = null;
              fileInfo_ = other.fileInfo_;
              bitField0_ = (bitField0_ & ~0x00000004);
              fileInfoBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getFileInfoFieldBuilder() : null;
            } else {
              fileInfoBuilder_.addAllMessages(other.fileInfo_);
            }
          }
        }
        if (other.hasMaxTries()) {
          setMaxTries(other.getMaxTries());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasDeviceID()) {
          
          return false;
        }
        if (!hasCommandID()) {
          
          return false;
        }
        for (int i = 0; i < getFileInfoCount(); i++) {
          if (!getFileInfo(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        maxpb.MaxpbFiletransfer.FileCommand parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (maxpb.MaxpbFiletransfer.FileCommand) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private long deviceID_ ;
      /**
       * <code>required uint64 deviceID = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180
       * </pre>
       */
      public boolean hasDeviceID() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint64 deviceID = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180
       * </pre>
       */
      public long getDeviceID() {
        return deviceID_;
      }
      /**
       * <code>required uint64 deviceID = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180
       * </pre>
       */
      public Builder setDeviceID(long value) {
        bitField0_ |= 0x00000001;
        deviceID_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint64 deviceID = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180
       * </pre>
       */
      public Builder clearDeviceID() {
        bitField0_ = (bitField0_ & ~0x00000001);
        deviceID_ = 0L;
        onChanged();
        return this;
      }

      private long commandID_ ;
      /**
       * <code>required uint64 commandID = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180
       * </pre>
       */
      public boolean hasCommandID() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required uint64 commandID = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180
       * </pre>
       */
      public long getCommandID() {
        return commandID_;
      }
      /**
       * <code>required uint64 commandID = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180
       * </pre>
       */
      public Builder setCommandID(long value) {
        bitField0_ |= 0x00000002;
        commandID_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint64 commandID = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180
       * </pre>
       */
      public Builder clearCommandID() {
        bitField0_ = (bitField0_ & ~0x00000002);
        commandID_ = 0L;
        onChanged();
        return this;
      }

      private java.util.List<maxpb.MaxpbFiletransfer.FileInfo> fileInfo_ =
        java.util.Collections.emptyList();
      private void ensureFileInfoIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          fileInfo_ = new java.util.ArrayList<maxpb.MaxpbFiletransfer.FileInfo>(fileInfo_);
          bitField0_ |= 0x00000004;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          maxpb.MaxpbFiletransfer.FileInfo, maxpb.MaxpbFiletransfer.FileInfo.Builder, maxpb.MaxpbFiletransfer.FileInfoOrBuilder> fileInfoBuilder_;

      /**
       * <code>repeated .maxpb.FileInfo fileInfo = 3;</code>
       *
       * <pre>
       *&#47; Information of the file SupportedBy: MXT160, MXT162,  MXT180, MAXIO
       * </pre>
       */
      public java.util.List<maxpb.MaxpbFiletransfer.FileInfo> getFileInfoList() {
        if (fileInfoBuilder_ == null) {
          return java.util.Collections.unmodifiableList(fileInfo_);
        } else {
          return fileInfoBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .maxpb.FileInfo fileInfo = 3;</code>
       *
       * <pre>
       *&#47; Information of the file SupportedBy: MXT160, MXT162,  MXT180, MAXIO
       * </pre>
       */
      public int getFileInfoCount() {
        if (fileInfoBuilder_ == null) {
          return fileInfo_.size();
        } else {
          return fileInfoBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .maxpb.FileInfo fileInfo = 3;</code>
       *
       * <pre>
       *&#47; Information of the file SupportedBy: MXT160, MXT162,  MXT180, MAXIO
       * </pre>
       */
      public maxpb.MaxpbFiletransfer.FileInfo getFileInfo(int index) {
        if (fileInfoBuilder_ == null) {
          return fileInfo_.get(index);
        } else {
          return fileInfoBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .maxpb.FileInfo fileInfo = 3;</code>
       *
       * <pre>
       *&#47; Information of the file SupportedBy: MXT160, MXT162,  MXT180, MAXIO
       * </pre>
       */
      public Builder setFileInfo(
          int index, maxpb.MaxpbFiletransfer.FileInfo value) {
        if (fileInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFileInfoIsMutable();
          fileInfo_.set(index, value);
          onChanged();
        } else {
          fileInfoBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .maxpb.FileInfo fileInfo = 3;</code>
       *
       * <pre>
       *&#47; Information of the file SupportedBy: MXT160, MXT162,  MXT180, MAXIO
       * </pre>
       */
      public Builder setFileInfo(
          int index, maxpb.MaxpbFiletransfer.FileInfo.Builder builderForValue) {
        if (fileInfoBuilder_ == null) {
          ensureFileInfoIsMutable();
          fileInfo_.set(index, builderForValue.build());
          onChanged();
        } else {
          fileInfoBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .maxpb.FileInfo fileInfo = 3;</code>
       *
       * <pre>
       *&#47; Information of the file SupportedBy: MXT160, MXT162,  MXT180, MAXIO
       * </pre>
       */
      public Builder addFileInfo(maxpb.MaxpbFiletransfer.FileInfo value) {
        if (fileInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFileInfoIsMutable();
          fileInfo_.add(value);
          onChanged();
        } else {
          fileInfoBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .maxpb.FileInfo fileInfo = 3;</code>
       *
       * <pre>
       *&#47; Information of the file SupportedBy: MXT160, MXT162,  MXT180, MAXIO
       * </pre>
       */
      public Builder addFileInfo(
          int index, maxpb.MaxpbFiletransfer.FileInfo value) {
        if (fileInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFileInfoIsMutable();
          fileInfo_.add(index, value);
          onChanged();
        } else {
          fileInfoBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .maxpb.FileInfo fileInfo = 3;</code>
       *
       * <pre>
       *&#47; Information of the file SupportedBy: MXT160, MXT162,  MXT180, MAXIO
       * </pre>
       */
      public Builder addFileInfo(
          maxpb.MaxpbFiletransfer.FileInfo.Builder builderForValue) {
        if (fileInfoBuilder_ == null) {
          ensureFileInfoIsMutable();
          fileInfo_.add(builderForValue.build());
          onChanged();
        } else {
          fileInfoBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .maxpb.FileInfo fileInfo = 3;</code>
       *
       * <pre>
       *&#47; Information of the file SupportedBy: MXT160, MXT162,  MXT180, MAXIO
       * </pre>
       */
      public Builder addFileInfo(
          int index, maxpb.MaxpbFiletransfer.FileInfo.Builder builderForValue) {
        if (fileInfoBuilder_ == null) {
          ensureFileInfoIsMutable();
          fileInfo_.add(index, builderForValue.build());
          onChanged();
        } else {
          fileInfoBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .maxpb.FileInfo fileInfo = 3;</code>
       *
       * <pre>
       *&#47; Information of the file SupportedBy: MXT160, MXT162,  MXT180, MAXIO
       * </pre>
       */
      public Builder addAllFileInfo(
          java.lang.Iterable<? extends maxpb.MaxpbFiletransfer.FileInfo> values) {
        if (fileInfoBuilder_ == null) {
          ensureFileInfoIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, fileInfo_);
          onChanged();
        } else {
          fileInfoBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .maxpb.FileInfo fileInfo = 3;</code>
       *
       * <pre>
       *&#47; Information of the file SupportedBy: MXT160, MXT162,  MXT180, MAXIO
       * </pre>
       */
      public Builder clearFileInfo() {
        if (fileInfoBuilder_ == null) {
          fileInfo_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          fileInfoBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .maxpb.FileInfo fileInfo = 3;</code>
       *
       * <pre>
       *&#47; Information of the file SupportedBy: MXT160, MXT162,  MXT180, MAXIO
       * </pre>
       */
      public Builder removeFileInfo(int index) {
        if (fileInfoBuilder_ == null) {
          ensureFileInfoIsMutable();
          fileInfo_.remove(index);
          onChanged();
        } else {
          fileInfoBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .maxpb.FileInfo fileInfo = 3;</code>
       *
       * <pre>
       *&#47; Information of the file SupportedBy: MXT160, MXT162,  MXT180, MAXIO
       * </pre>
       */
      public maxpb.MaxpbFiletransfer.FileInfo.Builder getFileInfoBuilder(
          int index) {
        return getFileInfoFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .maxpb.FileInfo fileInfo = 3;</code>
       *
       * <pre>
       *&#47; Information of the file SupportedBy: MXT160, MXT162,  MXT180, MAXIO
       * </pre>
       */
      public maxpb.MaxpbFiletransfer.FileInfoOrBuilder getFileInfoOrBuilder(
          int index) {
        if (fileInfoBuilder_ == null) {
          return fileInfo_.get(index);  } else {
          return fileInfoBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .maxpb.FileInfo fileInfo = 3;</code>
       *
       * <pre>
       *&#47; Information of the file SupportedBy: MXT160, MXT162,  MXT180, MAXIO
       * </pre>
       */
      public java.util.List<? extends maxpb.MaxpbFiletransfer.FileInfoOrBuilder> 
           getFileInfoOrBuilderList() {
        if (fileInfoBuilder_ != null) {
          return fileInfoBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(fileInfo_);
        }
      }
      /**
       * <code>repeated .maxpb.FileInfo fileInfo = 3;</code>
       *
       * <pre>
       *&#47; Information of the file SupportedBy: MXT160, MXT162,  MXT180, MAXIO
       * </pre>
       */
      public maxpb.MaxpbFiletransfer.FileInfo.Builder addFileInfoBuilder() {
        return getFileInfoFieldBuilder().addBuilder(
            maxpb.MaxpbFiletransfer.FileInfo.getDefaultInstance());
      }
      /**
       * <code>repeated .maxpb.FileInfo fileInfo = 3;</code>
       *
       * <pre>
       *&#47; Information of the file SupportedBy: MXT160, MXT162,  MXT180, MAXIO
       * </pre>
       */
      public maxpb.MaxpbFiletransfer.FileInfo.Builder addFileInfoBuilder(
          int index) {
        return getFileInfoFieldBuilder().addBuilder(
            index, maxpb.MaxpbFiletransfer.FileInfo.getDefaultInstance());
      }
      /**
       * <code>repeated .maxpb.FileInfo fileInfo = 3;</code>
       *
       * <pre>
       *&#47; Information of the file SupportedBy: MXT160, MXT162,  MXT180, MAXIO
       * </pre>
       */
      public java.util.List<maxpb.MaxpbFiletransfer.FileInfo.Builder> 
           getFileInfoBuilderList() {
        return getFileInfoFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          maxpb.MaxpbFiletransfer.FileInfo, maxpb.MaxpbFiletransfer.FileInfo.Builder, maxpb.MaxpbFiletransfer.FileInfoOrBuilder> 
          getFileInfoFieldBuilder() {
        if (fileInfoBuilder_ == null) {
          fileInfoBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              maxpb.MaxpbFiletransfer.FileInfo, maxpb.MaxpbFiletransfer.FileInfo.Builder, maxpb.MaxpbFiletransfer.FileInfoOrBuilder>(
                  fileInfo_,
                  ((bitField0_ & 0x00000004) == 0x00000004),
                  getParentForChildren(),
                  isClean());
          fileInfo_ = null;
        }
        return fileInfoBuilder_;
      }

      private int maxTries_ ;
      /**
       * <code>optional uint32 maxTries = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180
       * </pre>
       */
      public boolean hasMaxTries() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional uint32 maxTries = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180
       * </pre>
       */
      public int getMaxTries() {
        return maxTries_;
      }
      /**
       * <code>optional uint32 maxTries = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180
       * </pre>
       */
      public Builder setMaxTries(int value) {
        bitField0_ |= 0x00000008;
        maxTries_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 maxTries = 4;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MAXIO, MXT180
       * </pre>
       */
      public Builder clearMaxTries() {
        bitField0_ = (bitField0_ & ~0x00000008);
        maxTries_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:maxpb.FileCommand)
    }

    static {
      defaultInstance = new FileCommand(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:maxpb.FileCommand)
  }

  public interface FileTransferOrBuilder extends
      // @@protoc_insertion_point(interface_extends:maxpb.FileTransfer)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required uint64 deviceID = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180, MAXIO
     * </pre>
     */
    boolean hasDeviceID();
    /**
     * <code>required uint64 deviceID = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180, MAXIO
     * </pre>
     */
    long getDeviceID();

    /**
     * <code>required .maxpb.FileInfo fileInfo = 2;</code>
     *
     * <pre>
     *&#47; Information of the file SupportedBy: MXT160, MXT162, MXT180, MAXIO
     * </pre>
     */
    boolean hasFileInfo();
    /**
     * <code>required .maxpb.FileInfo fileInfo = 2;</code>
     *
     * <pre>
     *&#47; Information of the file SupportedBy: MXT160, MXT162, MXT180, MAXIO
     * </pre>
     */
    maxpb.MaxpbFiletransfer.FileInfo getFileInfo();
    /**
     * <code>required .maxpb.FileInfo fileInfo = 2;</code>
     *
     * <pre>
     *&#47; Information of the file SupportedBy: MXT160, MXT162, MXT180, MAXIO
     * </pre>
     */
    maxpb.MaxpbFiletransfer.FileInfoOrBuilder getFileInfoOrBuilder();

    /**
     * <code>required uint32 offset = 3;</code>
     *
     * <pre>
     *&#47; Offset of the file part SupportedBy: MXT160, MXT162, MXT180, MAXIO
     * </pre>
     */
    boolean hasOffset();
    /**
     * <code>required uint32 offset = 3;</code>
     *
     * <pre>
     *&#47; Offset of the file part SupportedBy: MXT160, MXT162, MXT180, MAXIO
     * </pre>
     */
    int getOffset();

    /**
     * <code>required uint32 size = 4;</code>
     *
     * <pre>
     *&#47; Size of the file part SupportedBy: MXT160, MXT162, MXT180, MAXIO
     * </pre>
     */
    boolean hasSize();
    /**
     * <code>required uint32 size = 4;</code>
     *
     * <pre>
     *&#47; Size of the file part SupportedBy: MXT160, MXT162, MXT180, MAXIO
     * </pre>
     */
    int getSize();

    /**
     * <code>optional bytes data = 5;</code>
     *
     * <pre>
     *&#47; File part data SupportedBy: MXT160, MXT162, MXT180, MAXIO
     * </pre>
     */
    boolean hasData();
    /**
     * <code>optional bytes data = 5;</code>
     *
     * <pre>
     *&#47; File part data SupportedBy: MXT160, MXT162, MXT180, MAXIO
     * </pre>
     */
    com.google.protobuf.ByteString getData();
  }
  /**
   * Protobuf type {@code maxpb.FileTransfer}
   *
   * <pre>
   *&#47; MT 0x0007 - this message will be used to request parts of file data MT 0x0008 - the requested part of the file
   * </pre>
   */
  public static final class FileTransfer extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:maxpb.FileTransfer)
      FileTransferOrBuilder {
    // Use FileTransfer.newBuilder() to construct.
    private FileTransfer(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private FileTransfer(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final FileTransfer defaultInstance;
    public static FileTransfer getDefaultInstance() {
      return defaultInstance;
    }

    public FileTransfer getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private FileTransfer(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              deviceID_ = input.readUInt64();
              break;
            }
            case 18: {
              maxpb.MaxpbFiletransfer.FileInfo.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = fileInfo_.toBuilder();
              }
              fileInfo_ = input.readMessage(maxpb.MaxpbFiletransfer.FileInfo.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(fileInfo_);
                fileInfo_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              offset_ = input.readUInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              size_ = input.readUInt32();
              break;
            }
            case 42: {
              bitField0_ |= 0x00000010;
              data_ = input.readBytes();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return maxpb.MaxpbFiletransfer.internal_static_maxpb_FileTransfer_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return maxpb.MaxpbFiletransfer.internal_static_maxpb_FileTransfer_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              maxpb.MaxpbFiletransfer.FileTransfer.class, maxpb.MaxpbFiletransfer.FileTransfer.Builder.class);
    }

    public static com.google.protobuf.Parser<FileTransfer> PARSER =
        new com.google.protobuf.AbstractParser<FileTransfer>() {
      public FileTransfer parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new FileTransfer(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<FileTransfer> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int DEVICEID_FIELD_NUMBER = 1;
    private long deviceID_;
    /**
     * <code>required uint64 deviceID = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180, MAXIO
     * </pre>
     */
    public boolean hasDeviceID() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required uint64 deviceID = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180, MAXIO
     * </pre>
     */
    public long getDeviceID() {
      return deviceID_;
    }

    public static final int FILEINFO_FIELD_NUMBER = 2;
    private maxpb.MaxpbFiletransfer.FileInfo fileInfo_;
    /**
     * <code>required .maxpb.FileInfo fileInfo = 2;</code>
     *
     * <pre>
     *&#47; Information of the file SupportedBy: MXT160, MXT162, MXT180, MAXIO
     * </pre>
     */
    public boolean hasFileInfo() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required .maxpb.FileInfo fileInfo = 2;</code>
     *
     * <pre>
     *&#47; Information of the file SupportedBy: MXT160, MXT162, MXT180, MAXIO
     * </pre>
     */
    public maxpb.MaxpbFiletransfer.FileInfo getFileInfo() {
      return fileInfo_;
    }
    /**
     * <code>required .maxpb.FileInfo fileInfo = 2;</code>
     *
     * <pre>
     *&#47; Information of the file SupportedBy: MXT160, MXT162, MXT180, MAXIO
     * </pre>
     */
    public maxpb.MaxpbFiletransfer.FileInfoOrBuilder getFileInfoOrBuilder() {
      return fileInfo_;
    }

    public static final int OFFSET_FIELD_NUMBER = 3;
    private int offset_;
    /**
     * <code>required uint32 offset = 3;</code>
     *
     * <pre>
     *&#47; Offset of the file part SupportedBy: MXT160, MXT162, MXT180, MAXIO
     * </pre>
     */
    public boolean hasOffset() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required uint32 offset = 3;</code>
     *
     * <pre>
     *&#47; Offset of the file part SupportedBy: MXT160, MXT162, MXT180, MAXIO
     * </pre>
     */
    public int getOffset() {
      return offset_;
    }

    public static final int SIZE_FIELD_NUMBER = 4;
    private int size_;
    /**
     * <code>required uint32 size = 4;</code>
     *
     * <pre>
     *&#47; Size of the file part SupportedBy: MXT160, MXT162, MXT180, MAXIO
     * </pre>
     */
    public boolean hasSize() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>required uint32 size = 4;</code>
     *
     * <pre>
     *&#47; Size of the file part SupportedBy: MXT160, MXT162, MXT180, MAXIO
     * </pre>
     */
    public int getSize() {
      return size_;
    }

    public static final int DATA_FIELD_NUMBER = 5;
    private com.google.protobuf.ByteString data_;
    /**
     * <code>optional bytes data = 5;</code>
     *
     * <pre>
     *&#47; File part data SupportedBy: MXT160, MXT162, MXT180, MAXIO
     * </pre>
     */
    public boolean hasData() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional bytes data = 5;</code>
     *
     * <pre>
     *&#47; File part data SupportedBy: MXT160, MXT162, MXT180, MAXIO
     * </pre>
     */
    public com.google.protobuf.ByteString getData() {
      return data_;
    }

    private void initFields() {
      deviceID_ = 0L;
      fileInfo_ = maxpb.MaxpbFiletransfer.FileInfo.getDefaultInstance();
      offset_ = 0;
      size_ = 0;
      data_ = com.google.protobuf.ByteString.EMPTY;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasDeviceID()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasFileInfo()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasOffset()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasSize()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getFileInfo().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt64(1, deviceID_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, fileInfo_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(3, offset_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeUInt32(4, size_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeBytes(5, data_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(1, deviceID_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, fileInfo_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, offset_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, size_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(5, data_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static maxpb.MaxpbFiletransfer.FileTransfer parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static maxpb.MaxpbFiletransfer.FileTransfer parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static maxpb.MaxpbFiletransfer.FileTransfer parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static maxpb.MaxpbFiletransfer.FileTransfer parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static maxpb.MaxpbFiletransfer.FileTransfer parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static maxpb.MaxpbFiletransfer.FileTransfer parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static maxpb.MaxpbFiletransfer.FileTransfer parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static maxpb.MaxpbFiletransfer.FileTransfer parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static maxpb.MaxpbFiletransfer.FileTransfer parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static maxpb.MaxpbFiletransfer.FileTransfer parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(maxpb.MaxpbFiletransfer.FileTransfer prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code maxpb.FileTransfer}
     *
     * <pre>
     *&#47; MT 0x0007 - this message will be used to request parts of file data MT 0x0008 - the requested part of the file
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:maxpb.FileTransfer)
        maxpb.MaxpbFiletransfer.FileTransferOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return maxpb.MaxpbFiletransfer.internal_static_maxpb_FileTransfer_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return maxpb.MaxpbFiletransfer.internal_static_maxpb_FileTransfer_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                maxpb.MaxpbFiletransfer.FileTransfer.class, maxpb.MaxpbFiletransfer.FileTransfer.Builder.class);
      }

      // Construct using maxpb.MaxpbFiletransfer.FileTransfer.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getFileInfoFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        deviceID_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000001);
        if (fileInfoBuilder_ == null) {
          fileInfo_ = maxpb.MaxpbFiletransfer.FileInfo.getDefaultInstance();
        } else {
          fileInfoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        offset_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        size_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        data_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return maxpb.MaxpbFiletransfer.internal_static_maxpb_FileTransfer_descriptor;
      }

      public maxpb.MaxpbFiletransfer.FileTransfer getDefaultInstanceForType() {
        return maxpb.MaxpbFiletransfer.FileTransfer.getDefaultInstance();
      }

      public maxpb.MaxpbFiletransfer.FileTransfer build() {
        maxpb.MaxpbFiletransfer.FileTransfer result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public maxpb.MaxpbFiletransfer.FileTransfer buildPartial() {
        maxpb.MaxpbFiletransfer.FileTransfer result = new maxpb.MaxpbFiletransfer.FileTransfer(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.deviceID_ = deviceID_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        if (fileInfoBuilder_ == null) {
          result.fileInfo_ = fileInfo_;
        } else {
          result.fileInfo_ = fileInfoBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.offset_ = offset_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.size_ = size_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.data_ = data_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof maxpb.MaxpbFiletransfer.FileTransfer) {
          return mergeFrom((maxpb.MaxpbFiletransfer.FileTransfer)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(maxpb.MaxpbFiletransfer.FileTransfer other) {
        if (other == maxpb.MaxpbFiletransfer.FileTransfer.getDefaultInstance()) return this;
        if (other.hasDeviceID()) {
          setDeviceID(other.getDeviceID());
        }
        if (other.hasFileInfo()) {
          mergeFileInfo(other.getFileInfo());
        }
        if (other.hasOffset()) {
          setOffset(other.getOffset());
        }
        if (other.hasSize()) {
          setSize(other.getSize());
        }
        if (other.hasData()) {
          setData(other.getData());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasDeviceID()) {
          
          return false;
        }
        if (!hasFileInfo()) {
          
          return false;
        }
        if (!hasOffset()) {
          
          return false;
        }
        if (!hasSize()) {
          
          return false;
        }
        if (!getFileInfo().isInitialized()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        maxpb.MaxpbFiletransfer.FileTransfer parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (maxpb.MaxpbFiletransfer.FileTransfer) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private long deviceID_ ;
      /**
       * <code>required uint64 deviceID = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180, MAXIO
       * </pre>
       */
      public boolean hasDeviceID() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint64 deviceID = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180, MAXIO
       * </pre>
       */
      public long getDeviceID() {
        return deviceID_;
      }
      /**
       * <code>required uint64 deviceID = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180, MAXIO
       * </pre>
       */
      public Builder setDeviceID(long value) {
        bitField0_ |= 0x00000001;
        deviceID_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint64 deviceID = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180, MAXIO
       * </pre>
       */
      public Builder clearDeviceID() {
        bitField0_ = (bitField0_ & ~0x00000001);
        deviceID_ = 0L;
        onChanged();
        return this;
      }

      private maxpb.MaxpbFiletransfer.FileInfo fileInfo_ = maxpb.MaxpbFiletransfer.FileInfo.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbFiletransfer.FileInfo, maxpb.MaxpbFiletransfer.FileInfo.Builder, maxpb.MaxpbFiletransfer.FileInfoOrBuilder> fileInfoBuilder_;
      /**
       * <code>required .maxpb.FileInfo fileInfo = 2;</code>
       *
       * <pre>
       *&#47; Information of the file SupportedBy: MXT160, MXT162, MXT180, MAXIO
       * </pre>
       */
      public boolean hasFileInfo() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required .maxpb.FileInfo fileInfo = 2;</code>
       *
       * <pre>
       *&#47; Information of the file SupportedBy: MXT160, MXT162, MXT180, MAXIO
       * </pre>
       */
      public maxpb.MaxpbFiletransfer.FileInfo getFileInfo() {
        if (fileInfoBuilder_ == null) {
          return fileInfo_;
        } else {
          return fileInfoBuilder_.getMessage();
        }
      }
      /**
       * <code>required .maxpb.FileInfo fileInfo = 2;</code>
       *
       * <pre>
       *&#47; Information of the file SupportedBy: MXT160, MXT162, MXT180, MAXIO
       * </pre>
       */
      public Builder setFileInfo(maxpb.MaxpbFiletransfer.FileInfo value) {
        if (fileInfoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          fileInfo_ = value;
          onChanged();
        } else {
          fileInfoBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .maxpb.FileInfo fileInfo = 2;</code>
       *
       * <pre>
       *&#47; Information of the file SupportedBy: MXT160, MXT162, MXT180, MAXIO
       * </pre>
       */
      public Builder setFileInfo(
          maxpb.MaxpbFiletransfer.FileInfo.Builder builderForValue) {
        if (fileInfoBuilder_ == null) {
          fileInfo_ = builderForValue.build();
          onChanged();
        } else {
          fileInfoBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .maxpb.FileInfo fileInfo = 2;</code>
       *
       * <pre>
       *&#47; Information of the file SupportedBy: MXT160, MXT162, MXT180, MAXIO
       * </pre>
       */
      public Builder mergeFileInfo(maxpb.MaxpbFiletransfer.FileInfo value) {
        if (fileInfoBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              fileInfo_ != maxpb.MaxpbFiletransfer.FileInfo.getDefaultInstance()) {
            fileInfo_ =
              maxpb.MaxpbFiletransfer.FileInfo.newBuilder(fileInfo_).mergeFrom(value).buildPartial();
          } else {
            fileInfo_ = value;
          }
          onChanged();
        } else {
          fileInfoBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .maxpb.FileInfo fileInfo = 2;</code>
       *
       * <pre>
       *&#47; Information of the file SupportedBy: MXT160, MXT162, MXT180, MAXIO
       * </pre>
       */
      public Builder clearFileInfo() {
        if (fileInfoBuilder_ == null) {
          fileInfo_ = maxpb.MaxpbFiletransfer.FileInfo.getDefaultInstance();
          onChanged();
        } else {
          fileInfoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      /**
       * <code>required .maxpb.FileInfo fileInfo = 2;</code>
       *
       * <pre>
       *&#47; Information of the file SupportedBy: MXT160, MXT162, MXT180, MAXIO
       * </pre>
       */
      public maxpb.MaxpbFiletransfer.FileInfo.Builder getFileInfoBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getFileInfoFieldBuilder().getBuilder();
      }
      /**
       * <code>required .maxpb.FileInfo fileInfo = 2;</code>
       *
       * <pre>
       *&#47; Information of the file SupportedBy: MXT160, MXT162, MXT180, MAXIO
       * </pre>
       */
      public maxpb.MaxpbFiletransfer.FileInfoOrBuilder getFileInfoOrBuilder() {
        if (fileInfoBuilder_ != null) {
          return fileInfoBuilder_.getMessageOrBuilder();
        } else {
          return fileInfo_;
        }
      }
      /**
       * <code>required .maxpb.FileInfo fileInfo = 2;</code>
       *
       * <pre>
       *&#47; Information of the file SupportedBy: MXT160, MXT162, MXT180, MAXIO
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          maxpb.MaxpbFiletransfer.FileInfo, maxpb.MaxpbFiletransfer.FileInfo.Builder, maxpb.MaxpbFiletransfer.FileInfoOrBuilder> 
          getFileInfoFieldBuilder() {
        if (fileInfoBuilder_ == null) {
          fileInfoBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              maxpb.MaxpbFiletransfer.FileInfo, maxpb.MaxpbFiletransfer.FileInfo.Builder, maxpb.MaxpbFiletransfer.FileInfoOrBuilder>(
                  getFileInfo(),
                  getParentForChildren(),
                  isClean());
          fileInfo_ = null;
        }
        return fileInfoBuilder_;
      }

      private int offset_ ;
      /**
       * <code>required uint32 offset = 3;</code>
       *
       * <pre>
       *&#47; Offset of the file part SupportedBy: MXT160, MXT162, MXT180, MAXIO
       * </pre>
       */
      public boolean hasOffset() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required uint32 offset = 3;</code>
       *
       * <pre>
       *&#47; Offset of the file part SupportedBy: MXT160, MXT162, MXT180, MAXIO
       * </pre>
       */
      public int getOffset() {
        return offset_;
      }
      /**
       * <code>required uint32 offset = 3;</code>
       *
       * <pre>
       *&#47; Offset of the file part SupportedBy: MXT160, MXT162, MXT180, MAXIO
       * </pre>
       */
      public Builder setOffset(int value) {
        bitField0_ |= 0x00000004;
        offset_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint32 offset = 3;</code>
       *
       * <pre>
       *&#47; Offset of the file part SupportedBy: MXT160, MXT162, MXT180, MAXIO
       * </pre>
       */
      public Builder clearOffset() {
        bitField0_ = (bitField0_ & ~0x00000004);
        offset_ = 0;
        onChanged();
        return this;
      }

      private int size_ ;
      /**
       * <code>required uint32 size = 4;</code>
       *
       * <pre>
       *&#47; Size of the file part SupportedBy: MXT160, MXT162, MXT180, MAXIO
       * </pre>
       */
      public boolean hasSize() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>required uint32 size = 4;</code>
       *
       * <pre>
       *&#47; Size of the file part SupportedBy: MXT160, MXT162, MXT180, MAXIO
       * </pre>
       */
      public int getSize() {
        return size_;
      }
      /**
       * <code>required uint32 size = 4;</code>
       *
       * <pre>
       *&#47; Size of the file part SupportedBy: MXT160, MXT162, MXT180, MAXIO
       * </pre>
       */
      public Builder setSize(int value) {
        bitField0_ |= 0x00000008;
        size_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint32 size = 4;</code>
       *
       * <pre>
       *&#47; Size of the file part SupportedBy: MXT160, MXT162, MXT180, MAXIO
       * </pre>
       */
      public Builder clearSize() {
        bitField0_ = (bitField0_ & ~0x00000008);
        size_ = 0;
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString data_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>optional bytes data = 5;</code>
       *
       * <pre>
       *&#47; File part data SupportedBy: MXT160, MXT162, MXT180, MAXIO
       * </pre>
       */
      public boolean hasData() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional bytes data = 5;</code>
       *
       * <pre>
       *&#47; File part data SupportedBy: MXT160, MXT162, MXT180, MAXIO
       * </pre>
       */
      public com.google.protobuf.ByteString getData() {
        return data_;
      }
      /**
       * <code>optional bytes data = 5;</code>
       *
       * <pre>
       *&#47; File part data SupportedBy: MXT160, MXT162, MXT180, MAXIO
       * </pre>
       */
      public Builder setData(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000010;
        data_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bytes data = 5;</code>
       *
       * <pre>
       *&#47; File part data SupportedBy: MXT160, MXT162, MXT180, MAXIO
       * </pre>
       */
      public Builder clearData() {
        bitField0_ = (bitField0_ & ~0x00000010);
        data_ = getDefaultInstance().getData();
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:maxpb.FileTransfer)
    }

    static {
      defaultInstance = new FileTransfer(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:maxpb.FileTransfer)
  }

  public interface FileEraseOrBuilder extends
      // @@protoc_insertion_point(interface_extends:maxpb.FileErase)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required uint64 deviceID = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180, MAXIO
     * </pre>
     */
    boolean hasDeviceID();
    /**
     * <code>required uint64 deviceID = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180, MAXIO
     * </pre>
     */
    long getDeviceID();

    /**
     * <code>required uint64 commandID = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180, MAXIO
     * </pre>
     */
    boolean hasCommandID();
    /**
     * <code>required uint64 commandID = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180, MAXIO
     * </pre>
     */
    long getCommandID();

    /**
     * <code>optional .maxpb.FileType fileType = 3;</code>
     *
     * <pre>
     *&#47; Type of the file to be deleted SupportedBy: MXT160, MXT162, MAXIO
     * </pre>
     */
    boolean hasFileType();
    /**
     * <code>optional .maxpb.FileType fileType = 3;</code>
     *
     * <pre>
     *&#47; Type of the file to be deleted SupportedBy: MXT160, MXT162, MAXIO
     * </pre>
     */
    maxpb.MaxpbFiletransfer.FileType getFileType();
  }
  /**
   * Protobuf type {@code maxpb.FileErase}
   *
   * <pre>
   *&#47; MT 0x0009 - This message is used to delete a single file
   * </pre>
   */
  public static final class FileErase extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:maxpb.FileErase)
      FileEraseOrBuilder {
    // Use FileErase.newBuilder() to construct.
    private FileErase(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private FileErase(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final FileErase defaultInstance;
    public static FileErase getDefaultInstance() {
      return defaultInstance;
    }

    public FileErase getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private FileErase(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              deviceID_ = input.readUInt64();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              commandID_ = input.readUInt64();
              break;
            }
            case 24: {
              int rawValue = input.readEnum();
              maxpb.MaxpbFiletransfer.FileType value = maxpb.MaxpbFiletransfer.FileType.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(3, rawValue);
              } else {
                bitField0_ |= 0x00000004;
                fileType_ = value;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return maxpb.MaxpbFiletransfer.internal_static_maxpb_FileErase_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return maxpb.MaxpbFiletransfer.internal_static_maxpb_FileErase_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              maxpb.MaxpbFiletransfer.FileErase.class, maxpb.MaxpbFiletransfer.FileErase.Builder.class);
    }

    public static com.google.protobuf.Parser<FileErase> PARSER =
        new com.google.protobuf.AbstractParser<FileErase>() {
      public FileErase parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new FileErase(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<FileErase> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int DEVICEID_FIELD_NUMBER = 1;
    private long deviceID_;
    /**
     * <code>required uint64 deviceID = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180, MAXIO
     * </pre>
     */
    public boolean hasDeviceID() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required uint64 deviceID = 1;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180, MAXIO
     * </pre>
     */
    public long getDeviceID() {
      return deviceID_;
    }

    public static final int COMMANDID_FIELD_NUMBER = 2;
    private long commandID_;
    /**
     * <code>required uint64 commandID = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180, MAXIO
     * </pre>
     */
    public boolean hasCommandID() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required uint64 commandID = 2;</code>
     *
     * <pre>
     *&#47; SupportedBy: MXT160, MXT162, MXT180, MAXIO
     * </pre>
     */
    public long getCommandID() {
      return commandID_;
    }

    public static final int FILETYPE_FIELD_NUMBER = 3;
    private maxpb.MaxpbFiletransfer.FileType fileType_;
    /**
     * <code>optional .maxpb.FileType fileType = 3;</code>
     *
     * <pre>
     *&#47; Type of the file to be deleted SupportedBy: MXT160, MXT162, MAXIO
     * </pre>
     */
    public boolean hasFileType() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional .maxpb.FileType fileType = 3;</code>
     *
     * <pre>
     *&#47; Type of the file to be deleted SupportedBy: MXT160, MXT162, MAXIO
     * </pre>
     */
    public maxpb.MaxpbFiletransfer.FileType getFileType() {
      return fileType_;
    }

    private void initFields() {
      deviceID_ = 0L;
      commandID_ = 0L;
      fileType_ = maxpb.MaxpbFiletransfer.FileType.FT_COMBINED;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasDeviceID()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasCommandID()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt64(1, deviceID_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt64(2, commandID_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeEnum(3, fileType_.getNumber());
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(1, deviceID_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(2, commandID_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(3, fileType_.getNumber());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static maxpb.MaxpbFiletransfer.FileErase parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static maxpb.MaxpbFiletransfer.FileErase parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static maxpb.MaxpbFiletransfer.FileErase parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static maxpb.MaxpbFiletransfer.FileErase parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static maxpb.MaxpbFiletransfer.FileErase parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static maxpb.MaxpbFiletransfer.FileErase parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static maxpb.MaxpbFiletransfer.FileErase parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static maxpb.MaxpbFiletransfer.FileErase parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static maxpb.MaxpbFiletransfer.FileErase parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static maxpb.MaxpbFiletransfer.FileErase parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(maxpb.MaxpbFiletransfer.FileErase prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code maxpb.FileErase}
     *
     * <pre>
     *&#47; MT 0x0009 - This message is used to delete a single file
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:maxpb.FileErase)
        maxpb.MaxpbFiletransfer.FileEraseOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return maxpb.MaxpbFiletransfer.internal_static_maxpb_FileErase_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return maxpb.MaxpbFiletransfer.internal_static_maxpb_FileErase_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                maxpb.MaxpbFiletransfer.FileErase.class, maxpb.MaxpbFiletransfer.FileErase.Builder.class);
      }

      // Construct using maxpb.MaxpbFiletransfer.FileErase.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        deviceID_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000001);
        commandID_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000002);
        fileType_ = maxpb.MaxpbFiletransfer.FileType.FT_COMBINED;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return maxpb.MaxpbFiletransfer.internal_static_maxpb_FileErase_descriptor;
      }

      public maxpb.MaxpbFiletransfer.FileErase getDefaultInstanceForType() {
        return maxpb.MaxpbFiletransfer.FileErase.getDefaultInstance();
      }

      public maxpb.MaxpbFiletransfer.FileErase build() {
        maxpb.MaxpbFiletransfer.FileErase result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public maxpb.MaxpbFiletransfer.FileErase buildPartial() {
        maxpb.MaxpbFiletransfer.FileErase result = new maxpb.MaxpbFiletransfer.FileErase(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.deviceID_ = deviceID_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.commandID_ = commandID_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.fileType_ = fileType_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof maxpb.MaxpbFiletransfer.FileErase) {
          return mergeFrom((maxpb.MaxpbFiletransfer.FileErase)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(maxpb.MaxpbFiletransfer.FileErase other) {
        if (other == maxpb.MaxpbFiletransfer.FileErase.getDefaultInstance()) return this;
        if (other.hasDeviceID()) {
          setDeviceID(other.getDeviceID());
        }
        if (other.hasCommandID()) {
          setCommandID(other.getCommandID());
        }
        if (other.hasFileType()) {
          setFileType(other.getFileType());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasDeviceID()) {
          
          return false;
        }
        if (!hasCommandID()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        maxpb.MaxpbFiletransfer.FileErase parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (maxpb.MaxpbFiletransfer.FileErase) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private long deviceID_ ;
      /**
       * <code>required uint64 deviceID = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180, MAXIO
       * </pre>
       */
      public boolean hasDeviceID() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint64 deviceID = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180, MAXIO
       * </pre>
       */
      public long getDeviceID() {
        return deviceID_;
      }
      /**
       * <code>required uint64 deviceID = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180, MAXIO
       * </pre>
       */
      public Builder setDeviceID(long value) {
        bitField0_ |= 0x00000001;
        deviceID_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint64 deviceID = 1;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180, MAXIO
       * </pre>
       */
      public Builder clearDeviceID() {
        bitField0_ = (bitField0_ & ~0x00000001);
        deviceID_ = 0L;
        onChanged();
        return this;
      }

      private long commandID_ ;
      /**
       * <code>required uint64 commandID = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180, MAXIO
       * </pre>
       */
      public boolean hasCommandID() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required uint64 commandID = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180, MAXIO
       * </pre>
       */
      public long getCommandID() {
        return commandID_;
      }
      /**
       * <code>required uint64 commandID = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180, MAXIO
       * </pre>
       */
      public Builder setCommandID(long value) {
        bitField0_ |= 0x00000002;
        commandID_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint64 commandID = 2;</code>
       *
       * <pre>
       *&#47; SupportedBy: MXT160, MXT162, MXT180, MAXIO
       * </pre>
       */
      public Builder clearCommandID() {
        bitField0_ = (bitField0_ & ~0x00000002);
        commandID_ = 0L;
        onChanged();
        return this;
      }

      private maxpb.MaxpbFiletransfer.FileType fileType_ = maxpb.MaxpbFiletransfer.FileType.FT_COMBINED;
      /**
       * <code>optional .maxpb.FileType fileType = 3;</code>
       *
       * <pre>
       *&#47; Type of the file to be deleted SupportedBy: MXT160, MXT162, MAXIO
       * </pre>
       */
      public boolean hasFileType() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional .maxpb.FileType fileType = 3;</code>
       *
       * <pre>
       *&#47; Type of the file to be deleted SupportedBy: MXT160, MXT162, MAXIO
       * </pre>
       */
      public maxpb.MaxpbFiletransfer.FileType getFileType() {
        return fileType_;
      }
      /**
       * <code>optional .maxpb.FileType fileType = 3;</code>
       *
       * <pre>
       *&#47; Type of the file to be deleted SupportedBy: MXT160, MXT162, MAXIO
       * </pre>
       */
      public Builder setFileType(maxpb.MaxpbFiletransfer.FileType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000004;
        fileType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .maxpb.FileType fileType = 3;</code>
       *
       * <pre>
       *&#47; Type of the file to be deleted SupportedBy: MXT160, MXT162, MAXIO
       * </pre>
       */
      public Builder clearFileType() {
        bitField0_ = (bitField0_ & ~0x00000004);
        fileType_ = maxpb.MaxpbFiletransfer.FileType.FT_COMBINED;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:maxpb.FileErase)
    }

    static {
      defaultInstance = new FileErase(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:maxpb.FileErase)
  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_maxpb_FileInfo_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_maxpb_FileInfo_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_maxpb_FileCommand_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_maxpb_FileCommand_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_maxpb_FileTransfer_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_maxpb_FileTransfer_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_maxpb_FileErase_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_maxpb_FileErase_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\030maxpb_filetransfer.proto\022\005maxpb\"\212\002\n\010Fi" +
      "leInfo\022!\n\010fileType\030\001 \002(\0162\017.maxpb.FileTyp" +
      "e\022\r\n\005major\030\002 \001(\r\022\r\n\005minor\030\003 \001(\r\022\r\n\005patch" +
      "\030\004 \001(\r\022\r\n\005build\030\005 \001(\004\022\016\n\006fileID\030\006 \001(\004\022\021\n" +
      "\tfileCrc32\030\007 \001(\r\022\020\n\010fileSize\030\010 \001(\r\022\030\n\020do" +
      "wnloadProgress\030\t \001(\r\022+\n\rdownloadState\030\n " +
      "\001(\0162\024.maxpb.DownloadState\022\016\n\006isDiff\030\013 \001(" +
      "\010\022\023\n\013appliedDate\030\014 \001(\004\"g\n\013FileCommand\022\020\n" +
      "\010deviceID\030\001 \002(\004\022\021\n\tcommandID\030\002 \002(\004\022!\n\010fi" +
      "leInfo\030\003 \003(\0132\017.maxpb.FileInfo\022\020\n\010maxTrie",
      "s\030\004 \001(\r\"o\n\014FileTransfer\022\020\n\010deviceID\030\001 \002(" +
      "\004\022!\n\010fileInfo\030\002 \002(\0132\017.maxpb.FileInfo\022\016\n\006" +
      "offset\030\003 \002(\r\022\014\n\004size\030\004 \002(\r\022\014\n\004data\030\005 \001(\014" +
      "\"S\n\tFileErase\022\020\n\010deviceID\030\001 \002(\004\022\021\n\tcomma" +
      "ndID\030\002 \002(\004\022!\n\010fileType\030\003 \001(\0162\017.maxpb.Fil" +
      "eType*\210\006\n\010FileType\022\017\n\013FT_COMBINED\020\000\022\023\n\017F" +
      "T_FIRMWARE_APP\020\001\022\025\n\021FT_FIRMWARE_MODEM\020\002\022" +
      "\021\n\rFT_BOOTLOADER\020\003\022\016\n\nFT_PROFILE\020\004\022\026\n\022FT" +
      "_DEFAULT_PROFILE\020\005\022\022\n\016FT_GEO_LIBRARY\020\006\022\013" +
      "\n\007FT_AGPS\020\007\022\022\n\016FT_CAN_LIBRARY\020\010\022\013\n\007FT_WI",
      "FI\020\t\022\r\n\tFT_ZIGBEE\020\n\022\020\n\014FT_SATELLITE\020\013\022\014\n" +
      "\010FT_SETUP\020\014\022\017\n\013FT_ACTIONS1\020\r\022\017\n\013FT_ACTIO" +
      "NS2\020\016\022\025\n\021FT_CLIENT_ACTIONS\020\017\022\016\n\nFT_DRIVE" +
      "RS\020\020\022\r\n\tFT_MACROS\020\021\022\014\n\010FT_AREAS\020\022\022\r\n\tFT_" +
      "POINTS\020\023\022\r\n\tFT_FENCES\020\024\022\r\n\tFT_ROUTES\020\025\022\023" +
      "\n\017FT_RECEIVED_MSG\020\026\022\017\n\013FT_SENT_MSG\020\027\022\020\n\014" +
      "FT_FIXED_MSG\020\030\022\r\n\tFT_PHONES\020\031\022\013\n\007FT_APNS" +
      "\020\032\022\r\n\tFT_AUDIOS\020\033\022\023\n\017FT_AREAS_FILTER\020\034\022\016" +
      "\n\nFT_GENERIC\020\035\022\016\n\nFT_ADAPTER\020\036\022\034\n\030FT_ACC" +
      "ELEROMETER_HISTORY\020\037\022\036\n\032FT_LORA_COORDINA",
      "TOR_CONFIG\020 \022\023\n\017FT_MAXIO_CONFIG\020!\022\r\n\tFT_" +
      "RFU_01\020\"\022\r\n\tFT_RFU_02\020#\022\r\n\tFT_RFU_03\020$\022\r" +
      "\n\tFT_RFU_04\020%\022\r\n\tFT_RFU_05\020&\022\016\n\nFT_A40A_" +
      "FW\020<\022\016\n\nFT_A40B_FW\020=\022\017\n\013FT_MAXIO_FW\020>\022\014\n" +
      "\010FT_TRACE\020d\022\013\n\006FT_ALL\020\377\001*\321\002\n\rDownloadSta" +
      "te\022\013\n\007DS_NONE\020\000\022\r\n\tDS_QUEUED\020\001\022\022\n\016DS_DOW" +
      "NLOADING\020\002\022\017\n\013DS_CANCELED\020\003\022\020\n\014DS_FINISH" +
      "ING\020\004\022\025\n\021DS_FAILED_RETRIES\020\005\022\022\n\016DS_FAILE" +
      "D_SIZE\020\006\022\021\n\rDS_FAILED_CRC\020\007\022\025\n\021DS_FAILED" +
      "_VERSION\020\010\022\016\n\nDS_APPLIED\020\t\022 \n\034DS_CANCELE",
      "D_MULTIPLE_SOURCES\020\n\022\033\n\027DS_FAILED_STORAG" +
      "E_ERROR\020\013\022\r\n\tDS_RFU_01\020\014\022\r\n\tDS_RFU_02\020\r\022" +
      "\r\n\tDS_RFU_03\020\016\022\r\n\tDS_RFU_04\020\017\022\r\n\tDS_RFU_" +
      "05\020\020"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
    internal_static_maxpb_FileInfo_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_maxpb_FileInfo_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_maxpb_FileInfo_descriptor,
        new java.lang.String[] { "FileType", "Major", "Minor", "Patch", "Build", "FileID", "FileCrc32", "FileSize", "DownloadProgress", "DownloadState", "IsDiff", "AppliedDate", });
    internal_static_maxpb_FileCommand_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_maxpb_FileCommand_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_maxpb_FileCommand_descriptor,
        new java.lang.String[] { "DeviceID", "CommandID", "FileInfo", "MaxTries", });
    internal_static_maxpb_FileTransfer_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_maxpb_FileTransfer_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_maxpb_FileTransfer_descriptor,
        new java.lang.String[] { "DeviceID", "FileInfo", "Offset", "Size", "Data", });
    internal_static_maxpb_FileErase_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_maxpb_FileErase_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_maxpb_FileErase_descriptor,
        new java.lang.String[] { "DeviceID", "CommandID", "FileType", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
